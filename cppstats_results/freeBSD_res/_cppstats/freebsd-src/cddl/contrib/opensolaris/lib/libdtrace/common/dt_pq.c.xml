<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_pq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pq.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<function><type><name>dt_pq_t</name> <modifier>*</modifier></type>
<name>dt_pq_init</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>dt_pq_value_f</name></type> <name>value_cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pq_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_value</name></name> <operator>=</operator> <name>value_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_arg</name></name> <operator>=</operator> <name>cb_arg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_pq_fini</name><parameter_list>(<parameter><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_hdl</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>dt_pq_getvalue</name><parameter_list>(<parameter><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name><name>p</name><operator>-&gt;</operator><name>dtpq_value</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_arg</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_pq_insert</name><parameter_list>(<parameter><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>dt_pq_getvalue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>dt_pq_getvalue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>dt_pq_walk</name><parameter_list>(<parameter><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cookie</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cookie</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><operator>*</operator><name>cookie</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>dt_pq_pop</name><parameter_list>(<parameter><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lc</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>rc</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lc</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_last</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>dt_pq_getvalue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lv</name> <init>= <expr><call><name>dt_pq_getvalue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rv</name> <init>= <expr><call><name>dt_pq_getvalue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lv</name> <operator>&lt;</operator> <name>rv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <call><name>dt_pq_getvalue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dtpq_items</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
