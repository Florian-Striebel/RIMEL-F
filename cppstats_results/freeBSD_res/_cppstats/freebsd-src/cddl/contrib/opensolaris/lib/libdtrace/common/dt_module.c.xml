<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_module.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/modctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/kobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/kobj_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/elf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/task.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/linker.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;project.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc_compat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_strtab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_module_strtab</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_module_symhash_insert</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_sym_t</name> <modifier>*</modifier></type><name>dsp</name> <init>= <expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name><index>[<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymbuckets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>ds_next</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint_t</name></type>
<name>dt_module_syminit32</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STT_NUM</name> <operator>!=</operator> <operator>(</operator><name>STT_TLS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"STT_NUM has grown. update dt_module_syminit32()"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Elf32_Sym</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss_size</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>asrsv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_elf_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_elf_obj</name> <operator>=</operator> <operator>(</operator><name><name>ehdr</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>ET_REL</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>sym</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>base</name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>type</name> <init>= <expr><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>STT_NUM</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>STT_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name> <operator>&gt;=</operator> <name>ss_size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ELF32_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_LOCAL</name> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asrsv</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+=</operator> <operator>(</operator><name>Elf_Addr</name><operator>)</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_reloc_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_elf_obj</name> <operator>&amp;&amp;</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>!=</operator> <name>SHN_UNDEF</name> <operator>&amp;&amp;</operator>
<name><name>sym</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>&lt;</operator> <name><name>ehdr</name><operator>.</operator><name>e_shnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+=</operator>
<name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name><index>[<expr><name><name>sym</name><operator>-&gt;</operator><name>st_shndx</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_module_symhash_insert</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>asrsv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint_t</name></type>
<name>dt_module_syminit64</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STT_NUM</name> <operator>!=</operator> <operator>(</operator><name>STT_TLS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"STT_NUM has grown. update dt_module_syminit64()"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Elf64_Sym</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss_size</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>asrsv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_elf_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_elf_obj</name> <operator>=</operator> <operator>(</operator><name><name>ehdr</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>ET_REL</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>sym</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>base</name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>type</name> <init>= <expr><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>STT_NUM</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>STT_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name> <operator>&gt;=</operator> <name>ss_size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ELF64_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_LOCAL</name> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asrsv</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+=</operator> <operator>(</operator><name>Elf_Addr</name><operator>)</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_reloc_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_elf_obj</name> <operator>&amp;&amp;</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>!=</operator> <name>SHN_UNDEF</name> <operator>&amp;&amp;</operator>
<name><name>sym</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>&lt;</operator> <name><name>ehdr</name><operator>.</operator><name>e_shnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+=</operator>
<name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name><index>[<expr><name><name>sym</name><operator>-&gt;</operator><name>st_shndx</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_module_symhash_insert</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>asrsv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_module_symcomp32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf32_Sym</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Sym</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <name><name>rhs</name><operator>-&gt;</operator><name>st_value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_value</name></name> <operator>&gt;</operator> <name><name>rhs</name><operator>-&gt;</operator><name>st_value</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lhs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>rhs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_NOTYPE</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>rhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_NOTYPE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_NOTYPE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ELF32_ST_BIND</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><call><name>ELF32_ST_BIND</name><argument_list>(<argument><expr><name><name>rhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ELF32_ST_BIND</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dt_module_strtab</name> <operator>+</operator> <name><name>lhs</name><operator>-&gt;</operator><name>st_name</name></name></expr></argument>,
<argument><expr><name>dt_module_strtab</name> <operator>+</operator> <name><name>rhs</name><operator>-&gt;</operator><name>st_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_module_symcomp64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf64_Sym</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Sym</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <name><name>rhs</name><operator>-&gt;</operator><name>st_value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_value</name></name> <operator>&gt;</operator> <name><name>rhs</name><operator>-&gt;</operator><name>st_value</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lhs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>rhs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_NOTYPE</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>rhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_NOTYPE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_NOTYPE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ELF64_ST_BIND</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><call><name>ELF64_ST_BIND</name><argument_list>(<argument><expr><name><name>rhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ELF64_ST_BIND</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dt_module_strtab</name> <operator>+</operator> <name><name>lhs</name><operator>-&gt;</operator><name>st_name</name></name></expr></argument>,
<argument><expr><name>dt_module_strtab</name> <operator>+</operator> <name><name>rhs</name><operator>-&gt;</operator><name>st_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_module_symsort32</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf32_Sym</name> <modifier>*</modifier></type><name>symtab</name> <init>= <expr><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>sympp</name> <init>= <expr><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_sym_t</name> <modifier>*</modifier></type><name>dsp</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dsp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Elf32_Sym</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>symtab</name> <operator>+</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ELF32_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_LOCAL</name> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sympp</name><operator>++</operator> <operator>=</operator> <name>sym</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>sympp</name> <operator>-</operator> <operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>&lt;=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_asrsv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_module_strtab</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Sym</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dt_module_symcomp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_module_strtab</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_module_symsort64</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf64_Sym</name> <modifier>*</modifier></type><name>symtab</name> <init>= <expr><operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>sympp</name> <init>= <expr><operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_sym_t</name> <modifier>*</modifier></type><name>dsp</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dsp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Elf64_Sym</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><name>symtab</name> <operator>+</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ELF64_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_LOCAL</name> <operator>||</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sympp</name><operator>++</operator> <operator>=</operator> <name>sym</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>sympp</name> <operator>-</operator> <operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>&lt;=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_asrsv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_module_strtab</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Elf64_Sym</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dt_module_symcomp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_module_strtab</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type>
<name>dt_module_symgelf32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_name</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_info</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_other</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_other</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_shndx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_value</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type>
<name>dt_module_symgelf64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GElf_Sym</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type>
<name>dt_module_symname32</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>symtab</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strtab</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_sym_t</name> <modifier>*</modifier></type><name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymbuckets</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <name>symtab</name> <operator>+</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>strtab</name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idp</name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_module_symgelf32</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type>
<name>dt_module_symname64</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>symtab</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strtab</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_sym_t</name> <modifier>*</modifier></type><name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymbuckets</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <name>symtab</name> <operator>+</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>strtab</name> <operator>+</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idp</name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>ds_symid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_module_symgelf64</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type>
<name>dt_module_symaddr32</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><name>GElf_Addr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>asmap</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Elf32_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>symtab</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>hi</name> <operator>-</operator> <name>lo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>asmap</name><index>[<expr><name>mid</name></expr>]</index></name><operator>-&gt;</operator><name>st_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>asmap</name><index>[<expr><name>hi</name></expr>]</index></name><operator>-&gt;</operator><name>st_value</name></expr> ?</condition><then> <expr><name>lo</name></expr> </then><else>: <expr><name>hi</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>asmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>asmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>st_value</name> <operator>==</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>asmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>-</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>&lt;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idp</name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>sym</name> <operator>-</operator> <name>symtab</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_module_symgelf32</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type>
<name>dt_module_symaddr64</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><name>GElf_Addr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier><modifier>*</modifier></type><name>asmap</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Elf64_Sym</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>symtab</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name> <init>= <expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>hi</name> <operator>-</operator> <name>lo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>asmap</name><index>[<expr><name>mid</name></expr>]</index></name><operator>-&gt;</operator><name>st_value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>addr</name> <operator>&lt;</operator> <name><name>asmap</name><index>[<expr><name>hi</name></expr>]</index></name><operator>-&gt;</operator><name>st_value</name></expr> ?</condition><then> <expr><name>lo</name></expr> </then><else>: <expr><name>hi</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>asmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>asmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>st_value</name> <operator>==</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>asmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>-</operator> <name><name>sym</name><operator>-&gt;</operator><name>st_value</name></name> <operator>&lt;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idp</name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>sym</name> <operator>-</operator> <name>symtab</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_module_symgelf64</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_modops_t</name></type> <name>dt_modops_32</name> <init>= <expr><block>{
<expr><name>dt_module_syminit32</name></expr>,
<expr><name>dt_module_symsort32</name></expr>,
<expr><name>dt_module_symname32</name></expr>,
<expr><name>dt_module_symaddr32</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_modops_t</name></type> <name>dt_modops_64</name> <init>= <expr><block>{
<expr><name>dt_module_syminit64</name></expr>,
<expr><name>dt_module_symsort64</name></expr>,
<expr><name>dt_module_symname64</name></expr>,
<expr><name>dt_module_symaddr64</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>dt_module_t</name> <modifier>*</modifier></type>
<name>dt_module_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>dmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmp</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_module_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_module_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_next</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>dmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_nmods</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_LP64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_modops_64</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_modops_32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>=</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><name>pid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"encountered malformed pid "</literal>
<literal type="string">"module: %s\n"</literal></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_module_t</name> <modifier>*</modifier></type>
<name>dt_module_lookup_by_name</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>dmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmp</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_module_t</name> <modifier>*</modifier></type>
<name>dt_module_lookup_by_ctf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>ctfp</name></expr> ?</condition><then> <expr><call><name>ctf_getspecific</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>dt_kmodule_t</name> <modifier>*</modifier></type>
<name>dt_kmodule_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_kmodule_t</name> <modifier>*</modifier></type><name>dkmp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dkmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>dkmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dkmp</name> <operator>=</operator> <name><name>dkmp</name><operator>-&gt;</operator><name>dkm_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dkmp</name><operator>-&gt;</operator><name>dkm_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dkmp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_module_load_sect</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><name>ctf_sect_t</name> <modifier>*</modifier></type><name>ctsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shstrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>elf_getshdrstrndx</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shstrs</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOTLOADED</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_NULL</name> <operator>||</operator>
<operator>(</operator><name>s</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><name>shstrs</name></expr></argument>, <argument><expr><name><name>sh</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name><name>ctsp</name><operator>-&gt;</operator><name>cts_type</name></name> <operator>&amp;&amp;</operator>
<name><name>sh</name><operator>.</operator><name>sh_entsize</name></name> <operator>==</operator> <name><name>ctsp</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>dp</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>d_buf</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctsp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_data</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>d_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"loaded %s [%s] (%lu bytes)\n"</literal></expr></argument>,
<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>ctsp</name><operator>-&gt;</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <name>dt_module_cb_arg</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>dpa_proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dpa_dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dpa_dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dpa_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_module_cb_arg_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_module_load_proc_count</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>prmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_cb_arg_t</name> <modifier>*</modifier></type><name>dcp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>Pname_to_ctf</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_proc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_module_load_proc_build</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>prmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_cb_arg_t</name> <modifier>*</modifier></type><name>dcp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Lmid_t</name></type> <name>lmid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>Pname_to_ctf</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_proc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>ctf_dup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_dmp</name><operator>-&gt;</operator><name>dm_libctfp</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pobjname</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_proc</name></name></expr></argument>, <argument><expr><name><name>prmap</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Plmid</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_proc</name></name></expr></argument>, <argument><expr><name><name>prmap</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lmid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lmid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lmid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_dmp</name><operator>-&gt;</operator><name>dm_libctfn</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dcp</name><operator>-&gt;</operator><name>dpa_dmp</name><operator>-&gt;</operator><name>dm_libctfn</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">"LM%x`%s"</literal></expr></argument>, <argument><expr><name>lmid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_dmp</name><operator>-&gt;</operator><name>dm_libctfn</name><index>[<expr><name>count</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ctf_setspecific</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_dmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dpa_count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_module_load_proc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_cb_arg_t</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PGRAB_RDONLY</name> <operator>|</operator> <name>PGRAB_FORCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to grab pid: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CANTLOAD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_proc_lock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>dpa_proc</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>dpa_dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>dpa_dmp</name></name> <operator>=</operator> <name>dmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pobject_iter_resolved</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dt_module_load_proc_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to iterate objects\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CANTLOAD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"no ctf data present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CANTLOAD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfn</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name> <operator>=</operator> <name><name>arg</name><operator>.</operator><name>dpa_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pobject_iter_resolved</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dt_module_load_proc_build</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_module_unload</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CANTLOAD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name> <operator>==</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"loaded %d ctf modules for pid %d\n"</literal></expr></argument>, <argument><expr><name><name>arg</name><operator>.</operator><name>dpa_count</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>|=</operator> <name>DT_DM_LOADED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_module_load</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>&amp;</operator> <name>DT_DM_LOADED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_module_load_proc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <literal type="string">".SUNW_ctf"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name>SHT_PROGBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <literal type="string">".symtab"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name>SHT_SYMTAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>dt_modops_64</name></expr> ?</condition><then>
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>Elf64_Sym</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Sym</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <literal type="string">".strtab"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name>SHT_STRTAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load_sect</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>dt_module_load_sect</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>dt_module_load_sect</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_module_unload</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name> <operator>=</operator>
<name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_size</name></name> <operator>/</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymbuckets</name></name> <operator>=</operator> <name>_dtrace_strbuckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymbuckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_sym_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_module_unload</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asrsv</name></name> <operator>=</operator> <call><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name><operator>-&gt;</operator><name>do_syminit</name></name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"hashed %s [%s] (%u symbols)\n"</literal></expr></argument>,
<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_asrsv</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_module_unload</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name><operator>-&gt;</operator><name>do_symsort</name></name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"sorted %s [%s] (%u symbols)\n"</literal></expr></argument>,
<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>|=</operator> <name>DT_DM_LOADED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_module_hasctf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_module_getctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>dt_module_getctf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>pmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>pfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>model</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>dt_modops_64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>model</name> <operator>=</operator> <name>CTF_MODEL_LP64</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>model</name> <operator>=</operator> <name>CTF_MODEL_ILP32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>!=</operator> <name>model</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DATAMODEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOCTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_setspecific</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parent</name> <operator>=</operator> <call><name>ctf_parent_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pmp</name> <operator>=</operator> <call><name>dt_module_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>pfp</name> <operator>=</operator> <call><name>dt_module_getctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_import</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>pfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>=</operator> <call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"loaded CTF container for %s (%p)\n"</literal></expr></argument>,
<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name><operator>)</operator></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_module_unload</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name><operator>.</operator><name>cts_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name><operator>.</operator><name>cts_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctdata</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_symtab</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symbuckets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symchains</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_symfree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymbuckets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_asrsv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_aslen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_text_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_data_va</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_va</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_DM_LOADED</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_module_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dmpp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_nmods</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_nmods</name></name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>dmpp</name> <operator>!=</operator> <name>dmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dmpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>dmpp</name><operator>)</operator><operator>-&gt;</operator><name>dm_next</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>dmpp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>dmpp</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_module_unload</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_module_extern</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_typeinfo_t</name> <modifier>*</modifier></type><name>tip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_syminfo_t</name> <modifier>*</modifier></type><name>sip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>id</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(
<argument><expr><literal type="string">"extern"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_nsymelems</name></name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_idhash_nextid</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_SYMOFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sip</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_syminfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_idhash_insert</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DT_IDENT_SYMBOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>,
<argument><expr><name>_dtrace_symattr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt_idops_thaw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_id</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name>sip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>idp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_module_modelname</name><parameter_list>(<parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>dt_modops_64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"64-bit"</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"32-bit"</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_module_getlibid</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>dt_module_getctflib</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>dt_module_update</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
dt_module_update<parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kld_file_stat</name></name> <modifier>*</modifier></type><name>k_stat</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat64</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>module_stat</name></name></type> <name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_kmodule_t</name> <modifier>*</modifier></type><name>dkmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shstrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/%s/object"</literal></expr></argument>, <argument><expr><name>OBJFS_ROOT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Phdr</name></type> <name>ph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>mapbase</name></decl>, <decl><type ref="prev"/><name>alignmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_elf_obj</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>k_stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>k_stat</name><operator>-&gt;</operator><name>pathname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>fstat64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_module_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to open %s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>elf_cntl</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><name>ELF_C_FDREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>elf_getshdrstrndx</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shstrs</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to load %s: %s\n"</literal></expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><call><name>elf_errno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_module_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>gelf_getclass</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ELFCLASS32</name></expr>:</case>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_modops_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ELFCLASS64</name></expr>:</case>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_modops_64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to load %s: unknown ELF class\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_module_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mapbase</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>k_stat</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_elf_obj</name> <operator>=</operator> <operator>(</operator><name><name>ehdr</name><operator>.</operator><name>e_type</name></name> <operator>==</operator> <name>ET_REL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_elf_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name></name> <operator>=</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name><name>ehdr</name><operator>.</operator><name>e_shnum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_module_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_NULL</name> <operator>||</operator>
<operator>(</operator><name>s</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><name>shstrs</name></expr></argument>, <argument><expr><name><name>sh</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>.</operator><name>sh_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_PROGBITS</name> <operator>||</operator> <name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_NOBITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alignmask</name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addralign</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mapbase</name> <operator>+=</operator> <name>alignmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mapbase</name> <operator>&amp;=</operator> <operator>~</operator><name>alignmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>sh_addr</name></name> <operator>=</operator> <name>mapbase</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_elf_obj</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_sec_offsets</name><index>[<expr><call><name>elf_ndxscn</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mapbase</name> <operator>+=</operator> <name><name>sh</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".text"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_text_size</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".data"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_data_size</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_data_va</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".bss"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_size</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_va</name></name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dp</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_info</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>sh</name><operator>.</operator><name>sh_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".filename"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dp</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_file</name></name></expr></argument>,
<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>|=</operator> <name>DT_DM_KERNEL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_modid</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>OBJFS_MODID</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_text_size</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_data_va</name></name> <operator>-</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>gelf_getphdr</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_elf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ph</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ph</name><operator>.</operator><name>p_type</name></name> <operator>==</operator> <name>PT_LOAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_reloc_offset</name></name> <operator>=</operator> <name><name>k_stat</name><operator>-&gt;</operator><name>address</name></name> <operator>-</operator> <name><name>ph</name><operator>.</operator><name>p_vaddr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_info</name><operator>.</operator><name>objfs_info_primary</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>|=</operator> <name>DT_DM_PRIMARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ms</name><operator>.</operator><name>version</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>modid</name> <operator>=</operator> <call><name>kldfirstmod</name><argument_list>(<argument><expr><name><name>k_stat</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>modid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>modid</name> <operator>=</operator> <call><name>modnext</name><argument_list>(<argument><expr><name>modid</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>modstat</name><argument_list>(<argument><expr><name>modid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"modstat failed for id %d in %s: %s\n"</literal></expr></argument>,
<argument><expr><name>modid</name></expr></argument>, <argument><expr><name><name>k_stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_kmodule_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dkmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>dkmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dkmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_module_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name><name>ms</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dkmp</name><operator>-&gt;</operator><name>dkm_next</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dkmp</name><operator>-&gt;</operator><name>dkm_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>ms</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dkmp</name><operator>-&gt;</operator><name>dkm_module</name></name> <operator>=</operator> <name>dmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>dkmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"opened %d-bit module %s (%s) [%d]\n"</literal></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_file</name></name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_modid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dtrace_update</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fileid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_module_unload</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_oflags</name></name> <operator>&amp;</operator> <name>DTRACE_O_NOSYS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dirp</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>OBJFS_ROOT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_module_update</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>closedir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<for>for <control>(<init><expr><name>fileid</name> <operator>=</operator> <call><name>kldnext</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>fileid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>fileid</name> <operator>=</operator> <call><name>kldnext</name><argument_list>(<argument><expr><name>fileid</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>kld_file_stat</name></name></type> <name>k_stat</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>k_stat</name><operator>.</operator><name>version</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>k_stat</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>kldstat</name><argument_list>(<argument><expr><name>fileid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k_stat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_module_update</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"egid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getegid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"euid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getgid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"pgid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"ppid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getppid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"projid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getprojid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"sid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getsid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"taskid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>gettaskid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_id</name> <operator>=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_exec</name></name> <operator>=</operator> <call><name>dt_module_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"genunix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_rtld</name></name> <operator>=</operator> <call><name>dt_module_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"krtld"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_rtld</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_rtld</name></name> <operator>=</operator> <call><name>dt_module_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_exec</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_module_t</name> <modifier>*</modifier></type>
<name>dt_module_from_object</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>EDT_NOMOD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>object</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>DTRACE_OBJ_EXEC</name></expr>:</case>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_exec</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>DTRACE_OBJ_RTLD</name></expr>:</case>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_rtld</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>DTRACE_OBJ_CDEFS</name></expr>:</case>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>DTRACE_OBJ_DDEFS</name></expr>:</case>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <call><name>dt_module_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>EDT_NOMEM</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>dmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_lookup_by_name</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>dtrace_syminfo_t</name> <modifier>*</modifier></type><name>sip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>DTRACE_OBJ_EVERY</name> <operator>&amp;&amp;</operator>
<name>object</name> <operator>!=</operator> <name>DTRACE_OBJ_KMODS</name> <operator>&amp;&amp;</operator>
<name>object</name> <operator>!=</operator> <name>DTRACE_OBJ_UMODS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_module_from_object</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>DTRACE_OBJ_KMODS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>bits</name> <operator>=</operator> <name>DT_DM_KERNEL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>object</name> <operator>==</operator> <name>DTRACE_OBJ_UMODS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>DT_DM_KERNEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_nmods</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>symp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>symp</name> <operator>=</operator> <operator>&amp;</operator><name>sym</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name><operator>-&gt;</operator><name>do_symname</name></name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>
<name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name> <operator>+</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symp</name> <operator>!=</operator> <operator>&amp;</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>symp</name><operator>-&gt;</operator><name>st_name</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name> <operator>=</operator>
<call><name>GELF_ST_INFO</name><argument_list>(<argument><expr><name>STB_GLOBAL</name></expr></argument>, <argument><expr><name>STT_NOTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symp</name><operator>-&gt;</operator><name>st_other</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symp</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>=</operator> <name>SHN_UNDEF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator>
<call><name>ctf_type_size</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_id</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOSYM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_lookup_by_addr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>GElf_Addr</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>dtrace_syminfo_t</name> <modifier>*</modifier></type><name>sip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>v</name><operator>-&gt;</operator><name>dtv_lookup_by_addr</name></name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_varg</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>, <argument><expr><name>sip</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>-</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_size</name></name> <operator>||</operator>
<name>addr</name> <operator>-</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_data_va</name></name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_data_size</name></name> <operator>||</operator>
<name>addr</name> <operator>-</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_va</name></name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>dmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOSYMADDR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>symp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>dmp</name><operator>-&gt;</operator><name>dm_ops</name><operator>-&gt;</operator><name>do_symaddr</name></name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOSYMADDR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>symp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>
<name><name>dmp</name><operator>-&gt;</operator><name>dm_strtab</name><operator>.</operator><name>cts_data</name></name> <operator>+</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_lookup_by_type</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>dtrace_typeinfo_t</name> <modifier>*</modifier></type><name>tip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>ti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>justone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>DTRACE_OBJ_EVERY</name> <operator>&amp;&amp;</operator>
<name>object</name> <operator>!=</operator> <name>DTRACE_OBJ_KMODS</name> <operator>&amp;&amp;</operator>
<name>object</name> <operator>!=</operator> <name>DTRACE_OBJ_UMODS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_module_from_object</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>justone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>DTRACE_OBJ_KMODS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>bits</name> <operator>=</operator> <name>DT_DM_KERNEL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>object</name> <operator>==</operator> <name>DTRACE_OBJ_UMODS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>DT_DM_KERNEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_nmods</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>justone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tip</name> <operator>=</operator> <operator>&amp;</operator><name>ti</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_hasctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>justone</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>dt_module_getctflib</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>id</name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,
<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_object</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>CTF_K_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOTYPE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_symbol_type</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_syminfo_t</name> <modifier>*</modifier></type><name>sip</name></decl></parameter>, <parameter><decl><type><name>dtrace_typeinfo_t</name> <modifier>*</modifier></type><name>tip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_object</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_module_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMOD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symp</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name> <operator>&amp;&amp;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>=
<expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_extern</name></name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOSYM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STT_FUNC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_getctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name> <operator>=</operator> <call><name>ctf_lookup_by_symbol</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>=</operator> <call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_ctfp</name></name> <operator>=</operator> <call><name>DT_FPTR_CTFP</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_type</name></name> <operator>=</operator> <call><name>DT_FPTR_TYPE</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tip</name><operator>-&gt;</operator><name>dtt_object</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dtrace_objinfo_t</name> <modifier>*</modifier></type>
<name>dt_module_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl></parameter>, <parameter><decl><type><name>dtrace_objinfo_t</name> <modifier>*</modifier></type><name>dto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_name</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_file</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_id</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_modid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>&amp;</operator> <name>DT_DM_KERNEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_flags</name></name> <operator>|=</operator> <name>DTRACE_OBJ_F_KERNEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>&amp;</operator> <name>DT_DM_PRIMARY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_flags</name></name> <operator>|=</operator> <name>DTRACE_OBJ_F_PRIMARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_text_va</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_text_size</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_data_va</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_data_va</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_data_size</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_data_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_bss_va</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_va</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dto</name><operator>-&gt;</operator><name>dto_bss_size</name></name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_bss_size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>dto</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_object_iter</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_obj_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name> <init>= <expr><call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_objinfo_t</name></type> <name>dto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>dmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dt_module_info</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dto</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_object_info</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>dtrace_objinfo_t</name> <modifier>*</modifier></type><name>dto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>DTRACE_OBJ_EVERY</name> <operator>||</operator> <name>object</name> <operator>==</operator> <name>DTRACE_OBJ_KMODS</name> <operator>||</operator>
<name>object</name> <operator>==</operator> <name>DTRACE_OBJ_UMODS</name> <operator>||</operator> <name>dto</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_module_from_object</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_module_info</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>dto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
