<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libctf/common/ctf_lib.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/zmod.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_libctf_zlib</name> <init>= <expr><literal type="string">"/usr/lib/64/libz.so"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_libctf_zlib</name> <init>= <expr><literal type="string">"/usr/lib/libz.so"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct><specifier>static</specifier> struct <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>z_uncompress</name>)<parameter_list>(<parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>z_error</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>z_dlp</name></decl>;</decl_stmt>
}</block> <decl><name>zlib</name></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>_PAGESIZE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>_PAGEMASK</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>init</name><name>(</name><name>_libctf_init</name><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>_libctf_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(constructor</function_decl>))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>_libctf_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LIBCTF_DECOMPRESSOR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>_libctf_zlib</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_libctf_debug</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LIBCTF_DEBUG"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_PAGESIZE</name> <operator>=</operator> <call><name>getpagesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_PAGEMASK</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>_PAGESIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>ctf_zopen</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"decompressing CTF data using %s\n"</literal></expr></argument>, <argument><expr><name>_libctf_zlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>_libctf_zlib</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_ZMISSING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>_libctf_zlib</name></expr></argument>, <argument><expr><name>RTLD_LAZY</name> <operator>|</operator> <name>RTLD_LOCAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_ZINIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zlib</name><operator>.</operator><name>z_uncompress</name></name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>uchar_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ulong_t</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>uchar_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ulong_t</name></expr></argument>)</argument_list></call><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name></expr></argument>, <argument><expr><literal type="string">"uncompress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zlib</name><operator>.</operator><name>z_error</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name></expr></argument>, <argument><expr><literal type="string">"zError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zlib</name><operator>.</operator><name>z_uncompress</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>zlib</name><operator>.</operator><name>z_error</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dlclose</name><argument_list>(<argument><expr><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zlib</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>zlib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_ZINIT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>zlib</name><operator>.</operator><name>z_uncompress</name></name> <operator>=</operator> <name>uncompress</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zlib</name><operator>.</operator><name>z_error</name></name> <operator>=</operator> <name>zError</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name><name>zlib</name><operator>.</operator><name>z_dlp</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>z_uncompress</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dstlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>zlib</name><operator>.</operator><name>z_uncompress</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name> <operator>*</operator><operator>)</operator><name>dstlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>z_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>zlib</name><operator>.</operator><name>z_error</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ehdr_to_gelf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>GElf_Ehdr</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>, <argument><expr><name>EI_NIDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_machine</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_machine</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_version</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_entry</name></name> <operator>=</operator> <operator>(</operator><name>Elf64_Addr</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>e_entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_phoff</name></name> <operator>=</operator> <operator>(</operator><name>Elf64_Off</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>e_phoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_shoff</name></name> <operator>=</operator> <operator>(</operator><name>Elf64_Off</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>e_shoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_ehsize</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_ehsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_phentsize</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_phentsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_phnum</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_phnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_shentsize</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_shentsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_shnum</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_shstrndx</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_shstrndx</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>shdr_to_gelf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf32_Shdr</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>GElf_Shdr</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_name</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_addr</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_offset</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_link</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_link</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_info</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_addralign</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sh_entsize</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>ctf_sect_mmap</name><parameter_list>(<parameter><decl><type><name>ctf_sect_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pageoff</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>cts_offset</name></name> <operator>&amp;</operator> <operator>~</operator><name>_PAGEMASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>base</name> <init>= <expr><call><name>mmap64</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>+</operator> <name>pageoff</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>,
<argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>cts_offset</name></name> <operator>&amp;</operator> <name>_PAGEMASK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>pageoff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>base</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>ctf_sect_munmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>pageoff</name> <init>= <expr><name>addr</name> <operator>&amp;</operator> <operator>~</operator><name>_PAGEMASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <name>pageoff</name><operator>)</operator></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>+</operator> <name>pageoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_fdopen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>ctfsect</name></decl>, <decl><type ref="prev"/><name>symsect</name></decl>, <decl><type ref="prev"/><name>strsect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>shstrndx</name></decl>, <decl><type ref="prev"/><name>shnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat64</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>ctf_preamble_t</name></type> <name>ctf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Ehdr</name></type> <name>e32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>e64</name></decl>;</decl_stmt>
}</block> <decl><name>hdr</name></decl>;</union>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>symsect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strsect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nbytes</name> <operator>=</operator> <call><name>pread64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>ECTF_FMT</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_preamble_t</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name><name>hdr</name><operator>.</operator><name>ctf</name><operator>.</operator><name>ctp_magic</name></name> <operator>==</operator> <name>CTF_MAGIC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>ctf</name><operator>.</operator><name>ctp_version</name></name> <operator>&gt;</operator> <name>CTF_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CTFVERS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <call><name>mmap64</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>,
<argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctfsect</name><operator>.</operator><name>cts_data</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>_CTF_SECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name>SHT_PROGBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <name>SHF_ALLOC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>e32</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_MAG0</name></expr>]</index></name></expr></argument>, <argument><expr><name>ELFMAG</name></expr></argument>, <argument><expr><name>SELFMAG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>order</name> <init>= <expr><name>ELFDATA2MSB</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>order</name> <init>= <expr><name>ELFDATA2LSB</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>GElf_Shdr</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>strs_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>strs_mapsz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>e32</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_DATA</name></expr>]</index></name> <operator>!=</operator> <name>order</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_ENDIAN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>e32</name><operator>.</operator><name>e_version</name></name> <operator>!=</operator> <name>EV_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_ELFVERS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>e32</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name> <operator>==</operator> <name>ELFCLASS64</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GElf_Ehdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_FMT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>Elf32_Ehdr</name></type> <name>e32</name> <init>= <expr><name><name>hdr</name><operator>.</operator><name>e32</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ehdr_to_gelf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>e64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>shnum</name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>e64</name><operator>.</operator><name>e_shnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shstrndx</name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>e64</name><operator>.</operator><name>e_shstrndx</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shstrndx</name> <operator>==</operator> <name>SHN_XINDEX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>shnum</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>e32</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Elf32_Shdr</name></type> <name>x32</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pread64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x32</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x32</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>hdr</name><operator>.</operator><name>e64</name><operator>.</operator><name>e_shoff</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>x32</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>shnum</name> <operator>=</operator> <name><name>x32</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shstrndx</name> <operator>=</operator> <name><name>x32</name><operator>.</operator><name>sh_link</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>Elf64_Shdr</name></type> <name>x64</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pread64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x64</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>x64</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>hdr</name><operator>.</operator><name>e64</name><operator>.</operator><name>e_shoff</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>x64</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>shnum</name> <operator>=</operator> <name><name>x64</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shstrndx</name> <operator>=</operator> <name><name>x64</name><operator>.</operator><name>sh_link</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shstrndx</name> <operator>&gt;=</operator> <name>shnum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GElf_Shdr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>shnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>e32</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Elf32_Shdr</name> <modifier>*</modifier></type><name>sp32</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Shdr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>shnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp32</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>pread64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>sp32</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>e64</name><operator>.</operator><name>e_shoff</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shdr_to_gelf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp32</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pread64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>e64</name><operator>.</operator><name>e_shoff</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>strs_mapsz</name> <operator>=</operator> <name><name>sp</name><index>[<expr><name>shstrndx</name></expr>]</index></name><operator>.</operator><name>sh_size</name> <operator>+</operator>
<operator>(</operator><name><name>sp</name><index>[<expr><name>shstrndx</name></expr>]</index></name><operator>.</operator><name>sh_offset</name> <operator>&amp;</operator> <operator>~</operator><name>_PAGEMASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>strs_map</name> <operator>=</operator> <call><name>mmap64</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>strs_mapsz</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>,
<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>sp</name><index>[<expr><name>shstrndx</name></expr>]</index></name><operator>.</operator><name>sh_offset</name> <operator>&amp;</operator> <name>_PAGEMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strs</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>strs_map</name> <operator>+</operator>
<operator>(</operator><name><name>sp</name><index>[<expr><name>shstrndx</name></expr>]</index></name><operator>.</operator><name>sh_offset</name> <operator>&amp;</operator> <operator>~</operator><name>_PAGEMASK</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strs_map</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_MMAP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GElf_Shdr</name> <modifier>*</modifier></type><name>shp</name> <init>= <expr><operator>&amp;</operator><name><name>sp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GElf_Shdr</name> <modifier>*</modifier></type><name>lhp</name> <init>= <expr><operator>&amp;</operator><name><name>sp</name><index>[<expr><name><name>shp</name><operator>-&gt;</operator><name>sh_link</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shp</name><operator>-&gt;</operator><name>sh_link</name></name> <operator>&gt;=</operator> <name>shnum</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shp</name><operator>-&gt;</operator><name>sh_name</name></name> <operator>&gt;=</operator> <name><name>sp</name><index>[<expr><name>shstrndx</name></expr>]</index></name><operator>.</operator><name>sh_size</name> <operator>||</operator>
<name><name>lhp</name><operator>-&gt;</operator><name>sh_name</name></name> <operator>&gt;=</operator> <name><name>sp</name><index>[<expr><name>shstrndx</name></expr>]</index></name><operator>.</operator><name>sh_size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shp</name><operator>-&gt;</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_PROGBITS</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>strs</name> <operator>+</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_name</name></name></expr></argument>, <argument><expr><name>_CTF_SECTION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>strs</name> <operator>+</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <operator>(</operator><name>off64_t</name><operator>)</operator><name><name>shp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>shp</name><operator>-&gt;</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_SYMTAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>strs</name> <operator>+</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <name><name>shp</name><operator>-&gt;</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <operator>(</operator><name>off64_t</name><operator>)</operator><name><name>shp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>strs</name> <operator>+</operator> <name><name>lhp</name><operator>-&gt;</operator><name>sh_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name><name>lhp</name><operator>-&gt;</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <name><name>lhp</name><operator>-&gt;</operator><name>sh_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <name><name>lhp</name><operator>-&gt;</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <name><name>lhp</name><operator>-&gt;</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <operator>(</operator><name>off64_t</name><operator>)</operator><name><name>lhp</name><operator>-&gt;</operator><name>sh_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctfsect</name><operator>.</operator><name>cts_type</name></name> <operator>==</operator> <name>SHT_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>munmap</name><argument_list>(<argument><expr><name>strs_map</name></expr></argument>, <argument><expr><name>strs_mapsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_NOCTFDATA</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_sect_mmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>munmap</name><argument_list>(<argument><expr><name>strs_map</name></expr></argument>, <argument><expr><name>strs_mapsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_MMAP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symsect</name><operator>.</operator><name>cts_type</name></name> <operator>!=</operator> <name>SHT_NULL</name> <operator>&amp;&amp;</operator>
<name><name>strsect</name><operator>.</operator><name>cts_type</name></name> <operator>!=</operator> <name>SHT_NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_sect_mmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>symsect</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MAP_FAILED</name> <operator>||</operator>
<call><name>ctf_sect_mmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strsect</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_MMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>symsect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strsect</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>bad</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>symsect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strsect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_MMAP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>munmap</name><argument_list>(<argument><expr><name>strs_map</name></expr></argument>, <argument><expr><name>strs_mapsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_FMT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open64</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>ctf_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>ctf_write</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uchar_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>resid</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>resid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>resid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>resid</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>ctf_version</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <name>CTF_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTSUP</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"ctf_version: client using version %d\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_libctf_version</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>_libctf_version</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
