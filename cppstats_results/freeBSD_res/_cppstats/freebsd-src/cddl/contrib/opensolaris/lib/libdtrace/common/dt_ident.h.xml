<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_ident.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libctf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_list.h&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>dt_node</name>;</struct_decl>
<struct_decl>struct <name>dt_ident</name>;</struct_decl>
<struct_decl>struct <name>dt_idhash</name>;</struct_decl>
<struct_decl>struct <name>dt_irlist</name>;</struct_decl>
<struct_decl>struct <name>dt_regset</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>dt_idsig</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dis_varargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dis_optargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dis_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>dis_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dis_auxinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_idsig_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_idnode</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>din_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>din_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_idhash</name></name> <modifier>*</modifier></type><name>din_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_ident</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>din_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>din_argc</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_idnode_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_idops</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>di_cook</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_ident</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>di_dtor</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_ident</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>di_size</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_ident</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>dt_idops_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_ident</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>di_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>di_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>di_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>di_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>di_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>di_vers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type><name>di_ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>di_iarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>di_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>di_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>di_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_ident</name></name> <modifier>*</modifier></type><name>di_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>di_gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>di_lineno</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_ident_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_ARRAY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_SCALAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_PTR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_FUNC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_AGG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_AGGFUNC</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_ACTFUNC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_XLSOU</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_XLPTR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_SYMBOL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_ENUM</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_PRAGAT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_PRAGBN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDENT_PROBE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_TLS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_LOCAL</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_WRITE</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_INLINE</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_REF</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_MOD</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_DIFR</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_DIFW</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_CGREG</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_USER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_PRIM</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_DECL</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_IDFLG_ORPHAN</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dt_idhash</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dh_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dh_name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dh_defer</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_idhash</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dh_tmpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dh_nextid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dh_minid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dh_maxid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>dh_nelems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>dh_hashsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name><name>dh_hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_idhash_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_idstack</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dids_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_idstack_t</name>;</typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_assc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_thaw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_inline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_probe</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>dt_idhash_t</name> <modifier>*</modifier></type><name>dt_idhash_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_idhash_destroy</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_idhash_update</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_idhash_lookup</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_idhash_nextid</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ulong_t</name></type> <name>dt_idhash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_idhash_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_idhash_insert</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type></decl></parameter>,
<parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_idhash_xinsert</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_idhash_delete</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> <name>dt_idhash_f</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_idhash_iter</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_idhash_f</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_idstack_lookup</name><parameter_list>(<parameter><decl><type><name>dt_idstack_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_idstack_push</name><parameter_list>(<parameter><decl><type><name>dt_idstack_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_idstack_pop</name><parameter_list>(<parameter><decl><type><name>dt_idstack_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_ident_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>,
<parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_ident_destroy</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_ident_morph</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dtrace_attribute_t</name></type> <name>dt_ident_cook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_ident_type_assign</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_ident_resolve</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>dt_ident_size</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_ident_unref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_idkind_name</name><parameter_list>(<parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
