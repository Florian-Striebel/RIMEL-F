<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_provider.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>dt_provider_t</name> <modifier>*</modifier></type>
<name>dt_provider_insert</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provlist</name></name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_next</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>pvp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_nprovs</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pvp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_provider_t</name> <modifier>*</modifier></type>
<name>dt_provider_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provbuckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_providerdesc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pvp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>pvp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pvp</name> <operator>=</operator> <name><name>pvp</name><operator>-&gt;</operator><name>pv_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>pvp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>strisglob</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOPROV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DTRACE_PROVNAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_PROVIDER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>errno</name> <operator>==</operator> <name>ESRCH</name></expr> ?</condition><then> <expr><name>EDT_NOPROV</name></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pvp</name> <operator>=</operator> <call><name>dt_provider_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_flags</name></name> <operator>|=</operator> <name>DT_PROVIDER_IMPL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pvp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_provider_t</name> <modifier>*</modifier></type>
<name>dt_provider_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pvp</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_provider_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DTRACE_PROVNAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_gen</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_provider</name></name> <operator>=</operator> <name>_dtrace_prvattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_mod</name></name> <operator>=</operator> <name>_dtrace_prvattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_func</name></name> <operator>=</operator> <name>_dtrace_prvattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_name</name></name> <operator>=</operator> <name>_dtrace_prvattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_args</name></name> <operator>=</operator> <name>_dtrace_prvattr</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_provider_insert</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>,
<argument><expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provbuckets</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_provider_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name> <operator>==</operator> <name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provbuckets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name> <operator>!=</operator> <name>pvp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pv_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name> <operator>==</operator> <name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>pvp</name><operator>-&gt;</operator><name>pv_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provlist</name></name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_nprovs</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_node_link_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_provider_xref</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><name>id_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>oldsize</name> <init>= <expr><call><name>BT_SIZEOFMAP</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrmax</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><call><name>BT_SIZEOFMAP</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&gt;</operator> <name>oldsize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name> <modifier>*</modifier></type><name>xrefs</name> <init>= <expr><call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>xrefs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name></expr></argument>, <argument><expr><name>xrefs</name></expr></argument>, <argument><expr><name>oldsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name> <operator>=</operator> <name>xrefs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrmax</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BT_SET</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint8_t</name></type>
<name>dt_probe_argmap</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>xnp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>nnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><name><name>xnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nnp</name> <operator>=</operator> <name><name>nnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_probe_alloc_args</name><parameter_list>(<parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pnp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pnp</name> <operator>=</operator> <name>dnp</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnp</name> <operator>=</operator> <call><name>dt_node_xalloc</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name></expr></argument>, <argument><expr><name>DT_NODE_TYPE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_link</name></name> <operator>=</operator> <name><name>pvp</name><operator>-&gt;</operator><name>pv_nodes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_nodes</name></name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>args</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>args</name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pnp</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>args</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>dt_probe_keylen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_probe_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s:%s:%s"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_probe_t</name> <modifier>*</modifier></type>
<name>dt_probe_discover</name><parameter_list>(<parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>dt_probe_key</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><call><name>alloca</name><argument_list>(<argument><expr><call><name>dt_probe_keylen</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>xargs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>, <decl><type ref="prev"/><name>xc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adc</name> <init>= <expr><name>_dtrace_argmax</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_argdesc_t</name> <modifier>*</modifier></type><name>adv</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_argdesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>adc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_argdesc_t</name> <modifier>*</modifier></type><name>adp</name> <init>= <expr><name>adv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name> <operator>!=</operator> <name>DTRACE_IDNONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"discovering probe %s:%s id=%d\n"</literal></expr></argument>,
<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>nc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>adc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>adp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>adp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_argdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_id</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_PROBEARG</name></expr></argument>, <argument><expr><name>adp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name> <operator>==</operator> <name>DTRACE_ARGNONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>nc</name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>adc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_pid_get_types</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>nc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xargs</name> <operator>=</operator> <call><name>dt_probe_alloc_args</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><name>xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nargs</name> <operator>=</operator> <call><name>dt_probe_alloc_args</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>xc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>xargs</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nargs</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_ident_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DT_IDENT_PROBE</name></expr></argument>,
<argument><expr><name>DT_IDFLG_ORPHAN</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>, <argument><expr><name>_dtrace_defattr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dt_idops_probe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prp</name> <operator>=</operator> <call><name>dt_probe_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>xargs</name></expr></argument>, <argument><expr><name>xc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_ident_destroy</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_probe_declare</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><name>prp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>adp</name> <operator>=</operator> <name>adv</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>xc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>adp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_type_strcompile</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to resolve input type %s "</literal>
<literal type="string">"for %s:%s arg #%d: %s\n"</literal></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name></expr></argument>,
<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_object</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name><index>[<expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>dtt</name><operator>.</operator><name>dtt_flags</name></name> <operator>&amp;</operator> <name>DTT_FL_USER</name></expr> ?</condition><then> <expr><name>B_TRUE</name></expr> </then><else>: <expr><name>B_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>adp</name><operator>-&gt;</operator><name>dtargd_xlate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_xlate</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_node_type_propagate</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name><index>[
<expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dtrace_type_strcompile</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_xlate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to resolve output type %s "</literal>
<literal type="string">"for %s:%s arg #%d: %s\n"</literal></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_xlate</name></name></expr></argument>,
<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_object</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dtt</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>prp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_probe_t</name> <modifier>*</modifier></type>
<name>dt_probe_lookup</name><parameter_list>(<parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_str2desc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACE_PROBESPEC_NAME</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <call><name>dt_probe_keylen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dt_probe_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><call><name>alloca</name><argument_list>(<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_PROBEMATCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_probe_discover</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ESRCH</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EBADF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOPROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_probe_t</name> <modifier>*</modifier></type>
<name>dt_probe_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protoc</name></decl></parameter>,
<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>nargs</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>nargc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>xargs</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>xargc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>protoc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xargs</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xargc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xargs</name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xargc</name> <operator>=</operator> <name>nargc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prp</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_probe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_ident</name></name> <operator>=</operator> <name>idp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargs</name></name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargc</name></name> <operator>=</operator> <name>nargc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargs</name></name> <operator>=</operator> <name>xargs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>xargc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargc</name></name> <operator>=</operator> <name>xargc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>xargc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_inst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_typeinfo_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>xargc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argc</name></name> <operator>=</operator> <name>xargc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_nargc</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_xargc</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_xargc</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_argc</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_probe_destroy</name><argument_list>(<argument><expr><name>prp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>xargc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>xargs</name> <operator>=</operator> <name><name>xargs</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xargs</name><operator>-&gt;</operator><name>dn_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>dt_probe_argmap</name><argument_list>(<argument><expr><name>xargs</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>xargs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_module_lookup_by_ctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>xargs</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_object</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_ctfp</name> <operator>=</operator> <name><name>xargs</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_type</name> <operator>=</operator> <name><name>xargs</name><operator>-&gt;</operator><name>dn_type</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nargc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>nargs</name> <operator>=</operator> <name><name>nargs</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name>prp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>prp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_probe_declare</name><parameter_list>(<parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_ident</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_ident</name><operator>-&gt;</operator><name>di_data</name></name> <operator>==</operator> <name>prp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargs</name></name> <operator>!=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_nargs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_PROVIDER_INTF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name></name> <operator>=</operator> <name>pvp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_xinsert</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_probe_destroy</name><parameter_list>(<parameter><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_probe_instance_t</name> <modifier>*</modifier></type><name>pip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pip_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dtp</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dtp</name> <operator>=</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>dt_node_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_xargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pip</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_inst</name></name></expr>;</init> <condition><expr><name>pip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pip</name> <operator>=</operator> <name>pip_next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pip_next</name> <operator>=</operator> <name><name>pip</name><operator>-&gt;</operator><name>pi_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_rname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_offs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_enoffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>prp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_probe_define</name><parameter_list>(<parameter><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>, <parameter><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rname</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isenabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_instance_t</name> <modifier>*</modifier></type><name>pip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>noffs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>maxoffs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pip</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_inst</name></name></expr>;</init> <condition><expr><name>pip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pip</name> <operator>=</operator> <name><name>pip</name><operator>-&gt;</operator><name>pi_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_fname</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_rname</name></name></expr></argument>, <argument><expr><name>rname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>pip</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pip</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>pip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_offs</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_enoffs</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_fname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_rname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>rname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_noffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_maxoffs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_nenoffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_maxenoffs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_next</name></name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_inst</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_inst</name></name> <operator>=</operator> <name>pip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isenabled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>&amp;</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_enoffs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>noffs</name> <operator>=</operator> <operator>&amp;</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_nenoffs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxoffs</name> <operator>=</operator> <operator>&amp;</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_maxenoffs</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>&amp;</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_offs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>noffs</name> <operator>=</operator> <operator>&amp;</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_noffs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxoffs</name> <operator>=</operator> <operator>&amp;</operator><name><name>pip</name><operator>-&gt;</operator><name>pi_maxoffs</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>noffs</name> <operator>==</operator> <operator>*</operator><name>maxoffs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>new_max</name> <init>= <expr><operator>*</operator><name>maxoffs</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>new_offs</name> <init>= <expr><call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>new_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_offs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>*</operator><name>offs</name></expr></argument>, <argument><expr><name>new_offs</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>maxoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>*</operator><name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maxoffs</name> <operator>=</operator> <name>new_max</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offs</name> <operator>=</operator> <name>new_offs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"defined probe %s %s:%s %s() +0x%x (%s)\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>isenabled</name></expr> ?</condition><then> <expr><literal type="string">"(is-enabled)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_ident</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>noffs</name> <operator>&lt;</operator> <operator>*</operator><name>maxoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>offs</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>noffs</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<label><name>nomem</name>:</label>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_enoffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_offs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_probe_tag</name><parameter_list>(<parameter><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>argn</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name><operator>-&gt;</operator><name>pv_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"__dtrace_%s___%s_arg%u"</literal></expr></argument>,
<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name></expr></argument>, <argument><expr><name>argn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"__dtrace_%s___%s_arg%u"</literal></expr></argument>,
<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name></expr></argument>, <argument><expr><name>argn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_lookup_by_type</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACE_OBJ_DDEFS</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_object</name></name> <operator>=</operator> <name>DTRACE_OBJ_DDEFS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>=</operator> <call><name>DT_DYN_CTFP</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><call><name>DT_DYN_CTFP</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CTF_ADD_ROOT</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>DT_DYN_TYPE</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<call><name>ctf_update</name><argument_list>(<argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"cannot define type %s: %s\n"</literal></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>=</operator> <name>DT_NODE_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_attr_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>_dtrace_defattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>dnp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_probe_desc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>dtrace_probedesc_t</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>dtpd_id</name> <operator>==</operator> <name>DTRACE_IDNONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_probe_t</name> <modifier>*</modifier></type>
<name>dt_probe_info</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probeinfo_t</name> <modifier>*</modifier></type><name>pip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m_is_glob</name> <init>= <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strisglob</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_is_glob</name> <init>= <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strisglob</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_is_glob</name> <init>= <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strisglob</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_pattr_t</name> <modifier>*</modifier></type><name>pap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pvp</name> <operator>=</operator> <call><name>dt_provider_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name> <init>= <expr><call><name>dt_probe_keylen</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>dt_probe_key</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><call><name>alloca</name><argument_list>(<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name> <operator>!=</operator> <name>DTRACE_IDNONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prp</name> <operator>=</operator> <call><name>dt_probe_discover</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>dtpd_id</name></name> <operator>=</operator> <name>DTRACE_IDNONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>dtrace_probe_iter</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>dt_probe_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pvp</name> <operator>=</operator> <call><name>dt_provider_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pd</name><operator>.</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_args</name><operator>.</operator><name>dtat_data</name></name> <operator>&lt;</operator>
<name>DTRACE_STABILITY_EVOLVING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_UNSTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_mod</name><operator>.</operator><name>dtat_name</name></name> <operator>&gt;=</operator>
<name>DTRACE_STABILITY_EVOLVING</name> <operator>&amp;&amp;</operator> <name>m_is_glob</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_UNSTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_func</name><operator>.</operator><name>dtat_name</name></name> <operator>&gt;=</operator>
<name>DTRACE_STABILITY_EVOLVING</name> <operator>&amp;&amp;</operator> <name>f_is_glob</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_UNSTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_name</name><operator>.</operator><name>dtat_name</name></name> <operator>&gt;=</operator>
<name>DTRACE_STABILITY_EVOLVING</name> <operator>&amp;&amp;</operator> <name>n_is_glob</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_UNSTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>.</operator><name>dtpd_id</name></name> <operator>!=</operator> <name>DTRACE_IDNONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prp</name> <operator>=</operator> <call><name>dt_probe_discover</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prp</name> <operator>=</operator> <call><name>dt_probe_lookup</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>, <argument><expr><name><name>pd</name><operator>.</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pvp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>prp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strisglob</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pap</name> <operator>=</operator> <operator>&amp;</operator><name>_dtrace_prvdesc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pap</name> <operator>=</operator> <operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name> <operator>=</operator> <name><name>pap</name><operator>-&gt;</operator><name>dtpa_provider</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m_is_glob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name> <operator>=</operator> <call><name>dt_attr_min</name><argument_list>(<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name></expr></argument>, <argument><expr><name><name>pap</name><operator>-&gt;</operator><name>dtpa_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_is_glob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name> <operator>=</operator> <call><name>dt_attr_min</name><argument_list>(<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name></expr></argument>, <argument><expr><name><name>pap</name><operator>-&gt;</operator><name>dtpa_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n_is_glob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name> <operator>=</operator> <call><name>dt_attr_min</name><argument_list>(<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_attr</name></name></expr></argument>, <argument><expr><name><name>pap</name><operator>-&gt;</operator><name>dtpa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_arga</name></name> <operator>=</operator> <name><name>pap</name><operator>-&gt;</operator><name>dtpa_args</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_argv</name></name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><operator>-&gt;</operator><name>dtp_argc</name></name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_argc</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>prp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_probe_info</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probeinfo_t</name> <modifier>*</modifier></type><name>pip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>dt_probe_info</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>pip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_probe_iter</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>ihp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>dt_probe_iter_t</name> <modifier>*</modifier></type><name>pit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dt_gmatch</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name></expr></argument>, <argument><expr><name><name>pit</name><operator>-&gt;</operator><name>pit_pat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pit</name><operator>-&gt;</operator><name>pit_desc</name><operator>.</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name></expr></argument>, <argument><expr><name>DTRACE_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pit</name><operator>-&gt;</operator><name>pit_desc</name><operator>.</operator><name>dtpd_id</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pit</name><operator>-&gt;</operator><name>pit_matches</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name><name>pit</name><operator>-&gt;</operator><name>pit_func</name></name><argument_list>(<argument><expr><name><name>pit</name><operator>-&gt;</operator><name>pit_hdl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pit</name><operator>-&gt;</operator><name>pit_desc</name></name></expr></argument>, <argument><expr><name><name>pit</name><operator>-&gt;</operator><name>pit_arg</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_probe_iter</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probe_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>provider</name> <init>= <expr><ternary><condition><expr><name>pdp</name></expr> ?</condition><then> <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_id_t</name></type> <name>id</name> <init>= <expr><name>DTRACE_IDNONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_iter_t</name></type> <name>pit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pit</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pit</name><operator>.</operator><name>pit_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pit</name><operator>.</operator><name>pit_func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pit</name><operator>.</operator><name>pit_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pit</name><operator>.</operator><name>pit_pat</name></name> <operator>=</operator> <ternary><condition><expr><name>pdp</name></expr> ?</condition><then> <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name></name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provlist</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name></name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name></name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name><operator>-&gt;</operator><name>pv_flags</name></name> <operator>&amp;</operator> <name>DT_PROVIDER_IMPL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dt_gmatch</name><argument_list>(<argument><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pit</name><operator>.</operator><name>pit_desc</name><operator>.</operator><name>dtpd_provider</name></name></expr></argument>,
<argument><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>, <argument><expr><name>DTRACE_PROVNAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>pit</name><operator>.</operator><name>pit_pvp</name><operator>-&gt;</operator><name>pv_probes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>dt_idhash_f</name> <operator>*</operator><operator>)</operator><name>dt_probe_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pit</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>pdp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>DTRACEIOC_PROBEMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>DTRACEIOC_PROBES</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pdp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>dtpd_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pit</name><operator>.</operator><name>pit_matches</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>pd</name><operator>.</operator><name>dtpd_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ESRCH</name></expr>:</case>
<case>case <expr><name>EBADF</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>pit</name><operator>.</operator><name>pit_matches</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOPROBE</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>EINVAL</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADPGLOB</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
