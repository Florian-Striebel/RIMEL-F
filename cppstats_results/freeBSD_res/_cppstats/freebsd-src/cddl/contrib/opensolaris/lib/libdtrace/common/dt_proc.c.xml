<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_proc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/lwp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc_compat.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_forksys</name></cpp:macro> <cpp:value>SYS_fork</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SYS_EXEC</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(w == SYS_execve)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SYS_FORK</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(w == SYS_vfork || w == SYS_forksys)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>dt_bkpt_t</name> <modifier>*</modifier></type>
<name>dt_proc_bpcreate</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>dt_bkpt_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_bkpt_t</name> <modifier>*</modifier></type><name>dbp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dbp</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_bkpt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Psetbkpt</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbp</name><operator>-&gt;</operator><name>dbp_instr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_active</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_bps</name></name></expr></argument>, <argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dbp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_bpdestroy</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delbkpts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><call><name>Pstate</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_bkpt_t</name> <modifier>*</modifier></type><name>dbp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nbp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_bps</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dbp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dbp</name> <operator>=</operator> <name>nbp</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delbkpts</name> <operator>&amp;&amp;</operator> <name><name>dbp</name><operator>-&gt;</operator><name>dbp_active</name></name> <operator>&amp;&amp;</operator>
<name>state</name> <operator>!=</operator> <name>PS_LOST</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>PS_UNDEAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pdelbkpt</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>,
<argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr></argument>, <argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_instr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_bps</name></name></expr></argument>, <argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name></expr></argument>, <argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_bpmatch</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>lwpstatus_t</name> <modifier>*</modifier></type><name>psp</name> <init>= <expr><operator>&amp;</operator><call><name>Pstatus</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_lwp</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>dt_bkpt_t</name> <modifier>*</modifier></type><name>dbp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>proc_regget</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>REG_PC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proc_bkptregadj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_bps</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dbp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_reg</name><index>[<expr><name>R_PC</name></expr>]</index></name> <operator>==</operator> <name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>dbp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: spurious breakpoint wakeup for %lx\n"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>psp</name><operator>-&gt;</operator><name>pr_reg</name><index>[<expr><name>R_PC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr><operator>,</operator> <expr><name>pc</name></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: hit breakpoint at %lx (%lu)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>dbp</name><operator>-&gt;</operator><name>dbp_hits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbp</name><operator>-&gt;</operator><name>dbp_func</name></name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pxecbkpt</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_instr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}
static <function><type><name>void</name></type>
<name>dt_proc_bpenable</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_bkpt_t</name> <modifier>*</modifier></type><name>dbp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_bps</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dbp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbp</name><operator>-&gt;</operator><name>dbp_active</name></name> <operator>&amp;&amp;</operator> <call><name>Psetbkpt</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>,
<argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbp</name><operator>-&gt;</operator><name>dbp_instr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_active</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"breakpoints enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_bpdisable</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_bkpt_t</name> <modifier>*</modifier></type><name>dbp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_bps</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dbp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dbp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_active</name></name> <operator>&amp;&amp;</operator> <call><name>Pdelbkpt</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>,
<argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_addr</name></name></expr></argument>, <argument><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_instr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dbp</name><operator>-&gt;</operator><name>dbp_active</name></name> <operator>=</operator> <name>B_FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"breakpoints disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_notify</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_notify_t</name> <modifier>*</modifier></type><name>dprn</name> <init>= <expr><call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_proc_notify_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dprn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to allocate notification for %d %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dprn</name><operator>-&gt;</operator><name>dprn_dpr</name></name> <operator>=</operator> <name>dpr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dprn</name><operator>-&gt;</operator><name>dprn_errmsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dprn</name><operator>-&gt;</operator><name>dprn_errmsg</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dprn</name><operator>-&gt;</operator><name>dprn_errmsg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dprn</name><operator>-&gt;</operator><name>dprn_next</name></name> <operator>=</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_notify</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_notify</name></name> <operator>=</operator> <name>dprn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_stop</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>why</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>why</name> <operator>!=</operator> <name>DT_PROC_STOP_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;</operator> <name>why</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>|=</operator> <name>DT_PROC_STOP_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;=</operator> <operator>~</operator><name>why</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_bpdisable</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;</operator> <name>DT_PROC_STOP_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>dt_proc_bpenable</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_bpmain</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: breakpoint at %s()\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_stop</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>DT_PROC_STOP_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_rdevent</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rd_event_msg_t</name></type> <name>rdm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rd_err_e</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rd_event_getmsg</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rtld</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RD_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: failed to get %s event message: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><name>evname</name></expr></argument>, <argument><expr><call><name>rd_errstr</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: rtld event %s type=%d state %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><name>evname</name></expr></argument>, <argument><expr><name><name>rdm</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>rdm</name><operator>.</operator><name>u</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>rdm</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RD_DLACTIVITY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>rdm</name><operator>.</operator><name>u</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>RD_CONSISTENT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Pupdate_syms</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_pid_create_probes_module</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_notify</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RD_PREINIT</name></expr>:</case>
<expr_stmt><expr><call><name>Pupdate_syms</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_stop</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>DT_PROC_STOP_PREINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RD_POSTINIT</name></expr>:</case>
<expr_stmt><expr><call><name>Pupdate_syms</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_stop</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>DT_PROC_STOP_POSTINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_rdwatch</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><name>rd_event_e</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rd_notify_t</name></type> <name>rdn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rd_err_e</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rd_event_addr</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rtld</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RD_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: failed to get event address for %s: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><name>evname</name></expr></argument>, <argument><expr><call><name>rd_errstr</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rdn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>RD_NOTIFY_BPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: event %s has unexpected type %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><name>evname</name></expr></argument>, <argument><expr><name><name>rdn</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_bpcreate</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name><name>rdn</name><operator>.</operator><name>u</name><operator>.</operator><name>bptaddr</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>dt_bkpt_f</name> <operator>*</operator><operator>)</operator><name>dt_proc_rdevent</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>evname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>dt_bkpt_f</name> <operator>*</operator><operator>)</operator><name>dt_proc_rdevent</name></expr><operator>,</operator> <expr><call><name>__DECONST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>evname</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
static <function><type><name>void</name></type>
<name>dt_proc_attach</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>pstatus_t</name> <modifier>*</modifier></type><name>psp</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>rd_err_e</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exec</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_lwp</name><operator>.</operator><name>pr_errno</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_proc_bpdestroy</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Preset_maps</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rtld</name></name> <operator>=</operator> <call><name>Prd_agent</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>err</name> <operator>=</operator> <call><name>rd_event_enable</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rtld</name></name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RD_OK</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dt_proc_rdwatch</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>RD_PREINIT</name></expr></argument>, <argument><expr><literal type="string">"RD_PREINIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_proc_rdwatch</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>RD_POSTINIT</name></expr></argument>, <argument><expr><literal type="string">"RD_POSTINIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dt_proc_rdwatch</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>RD_DLACTIVITY</name></expr></argument>, <argument><expr><literal type="string">"RD_DLACTIVITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: failed to enable rtld events: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rtld</name></name></expr> ?</condition><then> <expr><call><name>rd_errstr</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="string">"rtld_db agent initialization failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Pupdate_maps</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>LM_ID_BASE</name></expr></argument>,
<argument><expr><literal type="string">"a.out"</literal></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_bpcreate</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>sym</name><operator>.</operator><name>st_value</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>dt_bkpt_f</name> <operator>*</operator><operator>)</operator><name>dt_proc_bpmain</name></expr></argument>, <argument><expr><literal type="string">"a.out`main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: failed to find a.out`main: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_waitrun</name><parameter_list>(<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%s(%d): not implemented\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOODAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lwpstatus_t</name> <modifier>*</modifier></type><name>psp</name> <init>= <expr><operator>&amp;</operator><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_lwp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>krflag</name> <init>= <expr><name><name>psp</name><operator>-&gt;</operator><name>pr_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PR_KLC</name> <operator>|</operator> <name>PR_RLC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timestruc_t</name></type> <name>tstamp</name> <init>= <expr><name><name>psp</name><operator>-&gt;</operator><name>pr_tstamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lwpid_t</name></type> <name>lwpid</name> <init>= <expr><name><name>psp</name><operator>-&gt;</operator><name>pr_lwpid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>wstop</name> <init>= <expr><name>PCWSTOP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfd</name> <init>= <expr><call><name>Pctlfd</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>psp</name><operator>-&gt;</operator><name>pr_flags</name></name> <operator>&amp;</operator> <name>PR_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>Pstate</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PS_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Punsetflags</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>krflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Psync</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_quit</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wstop</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>wstop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pstopstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>PCNULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psp</name> <operator>=</operator> <operator>&amp;</operator><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_lwp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pstate</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PS_STOP</name> <operator>||</operator> <name><name>psp</name><operator>-&gt;</operator><name>pr_lwpid</name></name> <operator>!=</operator> <name>lwpid</name> <operator>||</operator>
<call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>psp</name><operator>-&gt;</operator><name>pr_tstamp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tstamp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tstamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psetflags</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>krflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Psync</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>poll</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MILLISEC</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <name>dt_proc_control_data</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dpcd_hdl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpcd_proc</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_proc_control_data_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>dt_proc_control</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_control_data_t</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>datap</name><operator>-&gt;</operator><name>dpcd_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><name><name>datap</name><operator>-&gt;</operator><name>dpcd_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>pfd</name> <init>= <expr><call><name>Pctlfd</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>wstop</name> <init>= <expr><name>PCWSTOP</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>notify</name> <init>= <expr><name>B_FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_setcancelstate</name><argument_list>(<argument><expr><name>PTHREAD_CANCEL_DISABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Punsetflags</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>PR_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psetflags</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>PR_BPTADJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Punsetflags</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>PR_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pfault</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>FLTBPT</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pfault</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>FLTTRACE</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psysexit</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>SYS_execve</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psysentry</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>SYS_vfork</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psysexit</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>SYS_vfork</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psysentry</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>SYS_forksys</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psysexit</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>SYS_forksys</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Psync</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_proc_attach</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_flags</name> <operator>&amp;</operator> <name>PR_KLC</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>proc_getflags</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>PR_KLC</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_proc_stop</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>DT_PROC_STOP_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_stop</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>DT_PROC_STOP_GRAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Psetrun</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: failed to set running: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_quit</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lwpstatus_t</name> <modifier>*</modifier></type><name>psp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wstop</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>wstop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>proc_wstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>pwait_locked</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>Pstopstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>PCNULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><call><name>Pstate</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PS_STOP</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>psp</name> <operator>=</operator> <operator>&amp;</operator><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_lwp</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>psp</name> <operator>=</operator> <call><name>proc_getlwpstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: proc stopped showing %d/%d\n"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>psp</name><operator>-&gt;</operator><name>pr_why</name></name></expr></argument>, <argument><expr><name><name>psp</name><operator>-&gt;</operator><name>pr_what</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_why</name></name> <operator>==</operator> <name>PR_REQUESTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_waitrun</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_why</name></name> <operator>==</operator> <name>PR_FAULTED</name> <operator>&amp;&amp;</operator> <name><name>psp</name><operator>-&gt;</operator><name>pr_what</name></name> <operator>==</operator> <name>FLTBPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_bpmatch</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_why</name></name> <operator>==</operator> <name>PR_SYSENTRY</name> <operator>&amp;&amp;</operator>
<call><name>IS_SYS_FORK</name><argument_list>(<argument><expr><name><name>psp</name><operator>-&gt;</operator><name>pr_what</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_bpdisable</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_why</name></name> <operator>==</operator> <name>PR_SYSEXIT</name> <operator>&amp;&amp;</operator>
<call><name>IS_SYS_FORK</name><argument_list>(<argument><expr><name><name>psp</name><operator>-&gt;</operator><name>pr_what</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_bpenable</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>psp</name><operator>-&gt;</operator><name>pr_why</name></name> <operator>==</operator> <name>PR_SYSEXIT</name> <operator>&amp;&amp;</operator>
<call><name>IS_SYS_EXEC</name><argument_list>(<argument><expr><name><name>psp</name><operator>-&gt;</operator><name>pr_what</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_attach</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PS_LOST</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>Preopen</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>pwait_locked</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: proc lost: %s\n"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_quit</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PS_UNDEAD</name></expr>:</case>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: proc died\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_quit</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>notify</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>Pstate</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PS_UNDEAD</name> <operator>&amp;&amp;</operator> <call><name>Psetrun</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pid %d: failed to set running: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>notify</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_notify</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dph</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_bpdestroy</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_done</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_tid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type>
<name>dt_proc_error</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_set_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Prelease</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_proc_t</name> <modifier>*</modifier></type>
<name>dt_proc_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>dpp</name> <init>= <expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_hash</name><index>[<expr><name>pid</name> <operator>&amp;</operator> <operator>(</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_hashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dpr</name> <operator>=</operator> <operator>*</operator><name>dpp</name></expr>;</init> <condition><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dpr</name> <operator>=</operator> <name><name>dpr</name><operator>-&gt;</operator><name>dpr_hash</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hash</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name> <operator>==</operator> <name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dpp</name> <operator>=</operator> <name><name>dpr</name><operator>-&gt;</operator><name>dpr_hash</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>dpr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_proc_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_notify_t</name> <modifier>*</modifier></type><name>npr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>npp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rflag</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>Pstatus</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_flags</name> <operator>&amp;</operator> <operator>(</operator><name>PR_KLC</name> <operator>|</operator> <name>PR_RLC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>proc_getflags</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>PR_KLC</name> <operator>|</operator> <name>PR_RLC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"abandoning pid %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rflag</name> <operator>=</operator> <name>PRELEASE_HANG</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Pstatus</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_flags</name> <operator>&amp;</operator> <name>PR_KLC</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>proc_getflags</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>PR_KLC</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"killing pid %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rflag</name> <operator>=</operator> <name>PRELEASE_KILL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"releasing pid %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_tid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_quit</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_lwp_kill</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_tid</name></name></expr></argument>, <argument><expr><name>SIGCANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pthread_kill</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_tid</name></name></expr></argument>, <argument><expr><name>SIGTHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;</operator> <name>DT_PROC_STOP_IDLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_bpenable</name><argument_list>(<argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_PROC_STOP_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_done</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>npp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_notify</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>npr</name> <operator>=</operator> <operator>*</operator><name>npp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>npr</name><operator>-&gt;</operator><name>dprn_dpr</name></name> <operator>==</operator> <name>dpr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>npp</name> <operator>=</operator> <name><name>npr</name><operator>-&gt;</operator><name>dprn_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>npr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>npp</name> <operator>=</operator> <operator>&amp;</operator><name><name>npr</name><operator>-&gt;</operator><name>dprn_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cacheable</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_lrucnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_lrucnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Prelease</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>rflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_proc_create_thread</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_control_data_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>nset</name></decl>, <decl><type ref="prev"/><name>oset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>|=</operator> <name>stop</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigfillset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><name>SIGABRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><name>SIGCANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dpcd_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dpcd_proc</name></name> <operator>=</operator> <name>dpr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>dt_proc_control</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_done</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;</operator> <name>DT_PROC_STOP_IDLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_done</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>psinfo_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><call><name>Ppsinfo</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stat</name> <init>= <expr><ternary><condition><expr><name>prp</name></expr> ?</condition><then> <expr><name><name>prp</name><operator>-&gt;</operator><name>pr_wstat</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>stat</name> <init>= <expr><call><name>proc_getwstat</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>proc_state</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PS_LOST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_error</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to control pid %d: process exec'd "</literal>
<literal type="string">"set-id or unobservable program\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_error</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to control pid %d: process died "</literal>
<literal type="string">"from signal %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_error</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to control pid %d: process exited "</literal>
<literal type="string">"with status %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_proc_error</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to create control thread for process-id %d: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_attr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type>
<name>dt_proc_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>proc_child_func</name> <modifier>*</modifier></type><name>pcf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dpr</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_proc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name> <operator>=</operator> <call><name>Pxcreate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_proc_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to execute %s: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>Pcreate_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>proc_create</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name></expr></argument>, <argument><expr><name>pcf</name></expr></argument>, <argument><expr><name>child_arg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_proc_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to execute %s: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>Pcreate_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>=</operator> <call><name>Pstatus</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>=</operator> <call><name>proc_getpid</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Punsetflags</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>PR_RLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psetflags</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>PR_KLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_proc_create_thread</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_prcmode</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hash</name></name> <operator>=</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_hash</name><index>[<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_hashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_hash</name><index>[<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_hashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>dpr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"created pid %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_refs</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type>
<name>dt_proc_grab</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nomonitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><name>pid</name> <operator>&amp;</operator> <operator>(</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_hashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dpr</name> <operator>=</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dpr</name> <operator>=</operator> <name><name>dpr</name><operator>-&gt;</operator><name>dpr_hash</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>==</operator> <name>pid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stale</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rdonly</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PGRAB_RDONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"upgrading pid %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stale</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cacheable</name></name> <operator>=</operator> <name>B_FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_lrucnt</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"grabbed pid %d (cached)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_refs</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dpr</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_proc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name> <operator>=</operator> <call><name>Pgrab</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>proc_attach</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>dt_proc_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>,
<argument><expr><literal type="string">"failed to grab pid %d: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><call><name>Pgrab_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Punsetflags</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>PR_KLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Psetflags</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>, <argument><expr><name>PR_RLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nomonitor</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PGRAB_RDONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dph</name><operator>-&gt;</operator><name>dph_lrucnt</name></name> <operator>&gt;=</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_lrulim</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>opr</name> <operator>=</operator> <call><name>dt_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>opr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>opr</name> <operator>=</operator> <call><name>dt_list_prev</name><argument_list>(<argument><expr><name>opr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opr</name><operator>-&gt;</operator><name>dpr_cacheable</name></name> <operator>&amp;&amp;</operator> <name><name>opr</name><operator>-&gt;</operator><name>dpr_refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>opr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PGRAB_RDONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cacheable</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_rdonly</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_lrucnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dt_proc_create_thread</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>DT_PROC_STOP_GRAB</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_hash</name></name> <operator>=</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dph</name><operator>-&gt;</operator><name>dph_hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>dpr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"grabbed pid %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_refs</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<function><type><name>void</name></type>
<name>dt_proc_release</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_refs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_refs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cacheable</name></name> <operator>||</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_lrucnt</name></name> <operator>&gt;</operator> <name><name>dph</name><operator>-&gt;</operator><name>dph_lrulim</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_proc_continue</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;</operator> <name>DT_PROC_STOP_IDLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_stop</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_PROC_STOP_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_proc_lock</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_proc_unlock</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_proc_init</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>envdef</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"LD_NOLAZYLOAD=1"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_proc_hash_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name>dt_proc_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>_dtrace_pidbuckets</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name><operator>-&gt;</operator><name>dph_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name><operator>-&gt;</operator><name>dph_cv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name><operator>-&gt;</operator><name>dph_hashlen</name></name> <operator>=</operator> <name>_dtrace_pidbuckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name><operator>-&gt;</operator><name>dph_lrulim</name></name> <operator>=</operator> <name>_dtrace_pidlrulim</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>environ</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>envdef</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>environ</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>envdef</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return;</return>
<label><name>err</name>:</label>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_proc_fini</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dph</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>dpr</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dph</name><operator>-&gt;</operator><name>dph_lrulist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type>
<name>dtrace_proc_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>proc_child_func</name> <modifier>*</modifier></type><name>pcf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>child_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><call><name>dt_proc_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>pcf</name></expr></argument>, <argument><expr><name>child_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>P</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>P</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type>
<name>dtrace_proc_grab</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>P</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>P</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dtrace_proc_release</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dtrace_proc_continue</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_proc_continue</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function></block_content></block></function>
</unit>
