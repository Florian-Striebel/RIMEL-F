<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_printf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; 0 ? -(a) : (a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/byteorder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_printf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NS_IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_IN6ADDRSZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NS_INADDRSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_INADDRSZ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_addr</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_kaddr</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>dt_node_is_symaddr</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_uaddr</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_dtp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_usymaddr</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_stack</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_stack</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_time</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_str</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_string</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ctfp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>kind</name> <operator>==</operator> <name>CTF_K_ARRAY</name> <operator>&amp;&amp;</operator> <call><name>ctf_array_info</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>base</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IS_CHAR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_wstr</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>base</name> <init>= <expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name> <init>= <expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>r</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>kind</name> <operator>==</operator> <name>CTF_K_ARRAY</name> <operator>&amp;&amp;</operator> <call><name>ctf_array_info</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>base</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator>
<call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_INTEGER</name> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_csi</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_fp</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_float</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_xint</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_dint</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_xshort</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name> <init>= <expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_type_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"signed short"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"unsigned short"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_xlong</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name> <init>= <expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_type_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"signed long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"unsigned long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_xlonglong</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"long long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"signed long long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"unsigned long long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_TYPEDEF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"int64_t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"uint64_t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfcheck_type</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_type_compat</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>, <argument><expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name><operator>-&gt;</operator><name>pfc_dctfp</name></name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name><operator>-&gt;</operator><name>pfc_dtype</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_sint</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>unormal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>normal</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>unormal</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>normal</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_uint</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>normal</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_dint</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_SIGNED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>pfprint_sint</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>pfprint_uint</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_fp</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>normal</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ldn</name> <init>= <expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>normal</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr>sizeof <operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>/</operator> <name>ldn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_addr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<do>do <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>dtrace_addr2str</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>n</name></expr>)</condition>;</do>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_mod</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_print_mod</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_umod</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_print_umod</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_uaddr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>u_longlong_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>u_longlong_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>dtrace_uaddr2str</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>n</name></expr>)</condition>;</do>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_stack</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vaddr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>saved</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_STACKINDENT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_rec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>vaddr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_dynwidth</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>-</operator><name><name>pfd</name><operator>-&gt;</operator><name>pfd_dynwidth</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_LEFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_dynwidth</name></name></expr> ?</condition><then> <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_dynwidth</name></name></expr> </then><else>: <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_width</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_STACKINDENT</name></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEACT_USTACK</name></expr>:</case>
<case>case <expr><name>DTRACEACT_JSTACK</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dt_print_ustack</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEACT_STACK</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dt_print_stack</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_arg</name></name></expr></argument>,
<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name> <operator>/</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_STACKINDENT</name></expr>]</index></name> <operator>=</operator> <name>saved</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_time</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hrtime_t</name></type> <name>time</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>time</name> <operator>/</operator> <name>NANOSEC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">20</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_time822</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hrtime_t</name></type> <name>time</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>time</name> <operator>/</operator> <name>NANOSEC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%a, %d %b %G %T %Z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_port</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>sv</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sv</name> <operator>=</operator> <call><name>getservbyport_r</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>getservbyport_r</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>sv</name><operator>-&gt;</operator><name>s_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_inetaddr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>host</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>inetaddr</name><index>[<expr><name>NS_IN6ADDRSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>inetaddr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>host</name> <operator>=</operator> <call><name>gethostbyaddr_r</name><argument_list>(<argument><expr><name>inetaddr</name></expr></argument>, <argument><expr><name>NS_INADDRSZ</name></expr></argument>,
<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>gethostbyaddr_r</name><argument_list>(<argument><expr><name>inetaddr</name></expr></argument>, <argument><expr><name>NS_INADDRSZ</name></expr></argument>,
<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>inetaddr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>host</name> <operator>=</operator> <call><name>getipnodebyaddr</name><argument_list>(<argument><expr><name>inetaddr</name></expr></argument>, <argument><expr><name>NS_IN6ADDRSZ</name></expr></argument>,
<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_cstr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_wstr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ws</name><index>[<expr><name>size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_estr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>strchr2esc</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_echr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><call><name>pfprint_estr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_pct</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%%"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_xint</name><index>[]</index></name> <init>= <expr><literal type="string">"char, short, int, long, or long long"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_csi</name><index>[]</index></name> <init>= <expr><literal type="string">"char, short, or int"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_fp</name><index>[]</index></name> <init>= <expr><literal type="string">"float, double, or long double"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_addr</name><index>[]</index></name> <init>= <expr><literal type="string">"pointer or integer"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_uaddr</name><index>[]</index></name> <init>=
<expr><literal type="string">"pointer or integer (with -p/-c) or _usymaddr (without -p/-c)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_cstr</name><index>[]</index></name> <init>= <expr><literal type="string">"char [] or string (or use stringof)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pfproto_wstr</name><index>[]</index></name> <init>= <expr><literal type="string">"wchar_t []"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_pfconv_t</name></type> <name><name>_dtrace_conversions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>pfproto_addr</name></expr>, <expr><name>pfcheck_kaddr</name></expr>, <expr><name>pfprint_addr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>pfproto_uaddr</name></expr>, <expr><name>pfcheck_uaddr</name></expr>, <expr><name>pfprint_uaddr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><name>pfproto_csi</name></expr>, <expr><name>pfcheck_csi</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>pfproto_csi</name></expr>, <expr><name>pfcheck_csi</name></expr>, <expr><name>pfprint_echr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><name>pfproto_xint</name></expr>, <expr><name>pfcheck_dint</name></expr>, <expr><name>pfprint_dint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><name>pfproto_fp</name></expr>, <expr><name>pfcheck_fp</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"E"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><name>pfproto_fp</name></expr>, <expr><name>pfcheck_fp</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><name>pfproto_fp</name></expr>, <expr><name>pfcheck_fp</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><name>pfproto_fp</name></expr>, <expr><name>pfcheck_fp</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><name>pfproto_fp</name></expr>, <expr><name>pfcheck_fp</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hd"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"short"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hi"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"short"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ho"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"unsigned short"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hu"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"unsigned short"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hx"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"short"</literal></expr>, <expr><name>pfcheck_xshort</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hX"</literal></expr>, <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"short"</literal></expr>, <expr><name>pfcheck_xshort</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><name>pfproto_xint</name></expr>, <expr><name>pfcheck_xint</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>pfproto_cstr</name></expr>, <expr><name>pfcheck_str</name></expr>, <expr><name>pfprint_inetaddr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"stack"</literal></expr>, <expr><name>pfcheck_stack</name></expr>, <expr><name>pfprint_stack</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lc"</literal></expr>, <expr><literal type="string">"lc"</literal></expr>, <expr><literal type="string">"int"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"li"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lo"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"unsigned long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lu"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"unsigned long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><name>pfproto_wstr</name></expr>, <expr><name>pfcheck_wstr</name></expr>, <expr><name>pfprint_wstr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"long"</literal></expr>, <expr><name>pfcheck_xlong</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lX"</literal></expr>, <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"long"</literal></expr>, <expr><name>pfcheck_xlong</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lld"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"long long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lli"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"long long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"llo"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"llu"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"llx"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"long long"</literal></expr>, <expr><name>pfcheck_xlonglong</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"llX"</literal></expr>, <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"long long"</literal></expr>, <expr><name>pfcheck_xlonglong</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Le"</literal></expr>, <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"long double"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LE"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><literal type="string">"long double"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lf"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"long double"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lg"</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"long double"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LG"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"long double"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_fp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><name>pfproto_xint</name></expr>, <expr><name>pfcheck_xint</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><name>pfproto_addr</name></expr>, <expr><name>pfcheck_addr</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"P"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"uint16_t"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_port</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"char [] or string (or use stringof)"</literal></expr>, <expr><name>pfcheck_str</name></expr>, <expr><name>pfprint_cstr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"S"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><name>pfproto_cstr</name></expr>, <expr><name>pfcheck_str</name></expr>, <expr><name>pfprint_estr</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"T"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"int64_t"</literal></expr>, <expr><name>pfcheck_time</name></expr>, <expr><name>pfprint_time822</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><name>pfproto_xint</name></expr>, <expr><name>pfcheck_xint</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"wc"</literal></expr>, <expr><literal type="string">"wc"</literal></expr>, <expr><literal type="string">"int"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ws"</literal></expr>, <expr><literal type="string">"ws"</literal></expr>, <expr><name>pfproto_wstr</name></expr>, <expr><name>pfcheck_wstr</name></expr>, <expr><name>pfprint_wstr</name></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"wc"</literal></expr>, <expr><literal type="string">"lc"</literal></expr>, <expr><literal type="string">"int"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_sint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ws"</literal></expr>, <expr><literal type="string">"ls"</literal></expr>, <expr><name>pfproto_wstr</name></expr>, <expr><name>pfcheck_wstr</name></expr>, <expr><name>pfprint_wstr</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><name>pfproto_xint</name></expr>, <expr><name>pfcheck_xint</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"X"</literal></expr>, <expr><name>pfproto_xint</name></expr>, <expr><name>pfcheck_xint</name></expr>, <expr><name>pfprint_uint</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"int64_t"</literal></expr>, <expr><name>pfcheck_time</name></expr>, <expr><name>pfprint_time</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"%"</literal></expr>, <expr><literal type="string">"%"</literal></expr>, <expr><literal type="string">"void"</literal></expr>, <expr><name>pfcheck_type</name></expr>, <expr><name>pfprint_pct</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>dt_pfdict_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name> <init>= <expr><name>_dtrace_strbuckets</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfdict_t</name> <modifier>*</modifier></type><name>pdi</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pdi</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfdict_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfconv_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pfdict</name></name> <operator>=</operator> <name>pdi</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfconv_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdi</name><operator>-&gt;</operator><name>pdi_nbuckets</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pfd</name> <operator>=</operator> <name>_dtrace_conversions</name></expr>;</init> <condition><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfc_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pfd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pfc</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfconv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_pfdict_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>pfc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfconv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_next</name></name> <operator>=</operator> <name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>pfc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_check</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfcheck_type</name> <operator>&amp;&amp;</operator> <call><name>dtrace_lookup_by_type</name><argument_list>(
<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACE_OBJ_DDEFS</name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_tstr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_pfdict_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOCONV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_dctfp</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_dtype</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_check</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfcheck_type</name> <operator>&amp;&amp;</operator> <call><name>dtrace_lookup_by_type</name><argument_list>(
<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACE_OBJ_CDEFS</name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_tstr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_cctfp</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ctype</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_cctfp</name></name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_dctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ctype</name></name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_dtype</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_check</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>pfc</name><operator>-&gt;</operator><name>pfc_ofmt</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_tstr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_pfdict_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADCONV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"loaded printf conversion %%%s\n"</literal></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_pfdict_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfdict_t</name> <modifier>*</modifier></type><name>pdi</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pfdict</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nfc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pdi</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pdi</name><operator>-&gt;</operator><name>pdi_nbuckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pfc</name> <operator>=</operator> <name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>pfc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pfc</name> <operator>=</operator> <name>nfc</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nfc</name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pfdict</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type>
<name>dt_pfdict_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfdict_t</name> <modifier>*</modifier></type><name>pdi</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pfdict</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pdi</name><operator>-&gt;</operator><name>pdi_nbuckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pfc</name> <operator>=</operator> <name><name>pdi</name><operator>-&gt;</operator><name>pdi_buckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>pfc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pfc</name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>pfc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_pfargv_t</name> <modifier>*</modifier></type>
<name>dt_printf_error</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yypcb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_pfargv_t</name> <modifier>*</modifier></type>
<name>dt_printf_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nfd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pfv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfargv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>format</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>format</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>q</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>namelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pfd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfargd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nfd</name><operator>-&gt;</operator><name>pfd_next</name></name> <operator>=</operator> <name>pfd</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name> <operator>=</operator> <name>pfd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfargd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nfd</name> <operator>=</operator> <name>pfd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prefix</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>fmt_switch</name>:</label>
<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>digits</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_ZPAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_PFCONV_LEFT</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>dot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prec</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_width</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>digits</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_ALT</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>dot</name></expr> ?</condition><then> <expr><name>DT_PFCONV_DYNPREC</name></expr> </then><else>: <expr><name>DT_PFCONV_DYNWIDTH</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yywarn</name><argument_list>(<argument><expr><literal type="string">"format conversion #%u has more than "</literal>
<literal type="string">"one '*' specified for the output %s\n"</literal></expr></argument>,
<argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><literal type="string">"precision"</literal></expr> </then><else>: <expr><literal type="string">"width"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>n</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_SPOS</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_PFCONV_ZPAD</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>dot</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yywarn</name><argument_list>(<argument><expr><literal type="string">"format conversion #%u has more than "</literal>
<literal type="string">"one '.' specified\n"</literal></expr></argument>, <argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>digits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_LP64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_width</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_width</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_AGG</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_GROUP</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>|=</operator> <name>DT_PFCONV_SPACE</name></expr>;</expr_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><call><name>yywarn</name><argument_list>(<argument><expr><literal type="string">"format conversion #%u uses unsupported "</literal>
<literal type="string">"positional format (%%n$)\n"</literal></expr></argument>, <argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>default_lbl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yywarn</name><argument_list>(<argument><expr><literal type="string">"format conversion #%u cannot be combined "</literal>
<literal type="string">"with other format flags: %%%%\n"</literal></expr></argument>, <argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><call><name>yywarn</name><argument_list>(<argument><expr><literal type="string">"format conversion #%u name expected before "</literal>
<literal type="string">"end of format string\n"</literal></expr></argument>, <argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>namelen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>fmt_switch</name>;</goto>
<label><name>default_lbl</name>:</label>
<default>default:</default>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>namelen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name></name> <operator>=</operator> <call><name>dt_pfdict_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yywarn</name><argument_list>(<argument><expr><literal type="string">"format conversion #%u is undefined: %%%s\n"</literal></expr></argument>,
<argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pfd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfargd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_printf_destroy</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nfd</name><operator>-&gt;</operator><name>pfd_next</name></name> <operator>=</operator> <name>pfd</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name> <operator>=</operator> <name>pfd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pfargd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prefix</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>pfv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_printf_destroy</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nfd</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pfd</name> <operator>=</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name></expr>;</init> <condition><expr><name>pfd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pfd</name> <operator>=</operator> <name>nfd</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nfd</name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pfv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_printf_validate</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>foff</name></decl></parameter>, <parameter><decl><type><name>dtrace_actkind_t</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aggtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name></type> <name>aggnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_format</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_FMT_EMPTY</name></expr></argument>,
<argument><expr><literal type="string">"%s( ) format string is empty\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>DTRACEAGG_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aggtype</name> <operator>=</operator> <literal type="string">"int64_t"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>aggtype</name> <operator>=</operator> <literal type="string">"uint64_t"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_type_lookup</name><argument_list>(<argument><expr><name>aggtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_TYPE_ERR</name></expr></argument>, <argument><expr><literal type="string">"failed to lookup agg type %s\n"</literal></expr></argument>, <argument><expr><name>aggtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aggnode</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>aggnode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aggnode</name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pfd</name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dyns</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dync</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vname</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>vnp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pfc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfprint_pct</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ofmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNPREC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dyns</name><index>[<expr><name>dync</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">".*"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNWIDTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dyns</name><index>[<expr><name>dync</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>dync</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>dync</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dnp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_DYN_PROTO</name></expr></argument>,
<argument><expr><literal type="string">"%s( ) prototype mismatch: conversion "</literal>
<literal type="string">"#%d (%%%s) is missing a corresponding "</literal>
<literal type="string">"\"%s\" argument\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>, <argument><expr><name><name>dyns</name><index>[<expr><name>dync</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_integer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_DYN_TYPE</name></expr></argument>,
<argument><expr><literal type="string">"%s( ) argument #%d is incompatible "</literal>
<literal type="string">"with conversion #%d prototype:\n"</literal>
<literal type="string">"\tconversion: %% %s %s\n"</literal>
<literal type="string">"\t prototype: int\n\t argument: %s\n"</literal></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>foff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>dyns</name><index>[<expr><name>dync</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_AGG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DT_PRINTF_AGGREGATION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_AGG_CONV</name></expr></argument>,
<argument><expr><literal type="string">"%%@ conversion requires an aggregation"</literal>
<literal type="string">" and is not for use with %s( )\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>vname</name></expr></argument>, <argument><expr><literal type="string">"aggregating action"</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vnp</name> <operator>=</operator> <operator>&amp;</operator><name>aggnode</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dnp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_ARG_PROTO</name></expr></argument>,
<argument><expr><literal type="string">"%s( ) prototype mismatch: conversion #%d (%%"</literal>
<literal type="string">"%s) is missing a corresponding value argument\n"</literal></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>vname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"argument #%d"</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>foff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vnp</name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfprint_sint</name> <operator>||</operator>
<name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfprint_uint</name> <operator>||</operator>
<name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfprint_dint</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>vnp</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><literal type="string">"ll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfprint_fp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>vnp</name></expr></argument>)</argument_list></call> <operator>==</operator> sizeof <operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ofmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>pfc</name><operator>-&gt;</operator><name>pfc_check</name></name><argument_list>(<argument><expr><name>pfv</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>vnp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_ARG_TYPE</name></expr></argument>,
<argument><expr><literal type="string">"%s( ) %s is incompatible with "</literal>
<literal type="string">"conversion #%d prototype:\n\tconversion: %%%s\n"</literal>
<literal type="string">"\t prototype: %s\n\t argument: %s\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>vname</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_tstr</name></name></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>vnp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DT_PRINTF_EXACTLEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTF_ARG_EXTRA</name></expr></argument>,
<argument><expr><literal type="string">"%s( ) prototype mismatch: only %d arguments "</literal>
<literal type="string">"required by this format string\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_printa_validate</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>lid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>lproto</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rproto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>largc</name></decl>, <decl><type ref="prev"/><name>rargc</name></decl>, <decl><type ref="prev"/><name>argn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n1</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n2</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_AGG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rhs</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_AGG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lid</name> <operator>=</operator> <name><name>lhs</name><operator>-&gt;</operator><name>dn_ident</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rid</name> <operator>=</operator> <name><name>rhs</name><operator>-&gt;</operator><name>dn_ident</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lproto</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dt_idsig_t</name> <operator>*</operator><operator>)</operator><name><name>lid</name><operator>-&gt;</operator><name>di_data</name></name><operator>)</operator><operator>-&gt;</operator><name>dis_args</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rproto</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dt_idsig_t</name> <operator>*</operator><operator>)</operator><name><name>rid</name><operator>-&gt;</operator><name>di_data</name></name><operator>)</operator><operator>-&gt;</operator><name>dis_args</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>largc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lproto</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>lproto</name> <operator>=</operator> <name><name>lproto</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>largc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>rargc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rproto</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>rproto</name> <operator>=</operator> <name><name>rproto</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>rargc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>largc</name> <operator>!=</operator> <name>rargc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTA_AGGKEY</name></expr></argument>, <argument><expr><literal type="string">"printa( ): @%s and @%s do not have "</literal>
<literal type="string">"matching key signatures: @%s has %d key%s, @%s has %d "</literal>
<literal type="string">"key%s"</literal></expr></argument>, <argument><expr><name><name>lid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name><name>rid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><name><name>lid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>largc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>largc</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>rid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>rargc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>rargc</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lproto</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dt_idsig_t</name> <operator>*</operator><operator>)</operator><name><name>lid</name><operator>-&gt;</operator><name>di_data</name></name><operator>)</operator><operator>-&gt;</operator><name>dis_args</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rproto</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dt_idsig_t</name> <operator>*</operator><operator>)</operator><name><name>rid</name><operator>-&gt;</operator><name>di_data</name></name><operator>)</operator><operator>-&gt;</operator><name>dis_args</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>argn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lproto</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>argn</name><operator>++</operator></expr><operator>,</operator> <expr><name>lproto</name> <operator>=</operator> <name><name>lproto</name><operator>-&gt;</operator><name>dn_list</name></name></expr><operator>,</operator>
<expr><name>rproto</name> <operator>=</operator> <name><name>rproto</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rproto</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_argcompat</name><argument_list>(<argument><expr><name>lproto</name></expr></argument>, <argument><expr><name>rproto</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRINTA_AGGPROTO</name></expr></argument>, <argument><expr><literal type="string">"printa( ): @%s[ ] key #%d is "</literal>
<literal type="string">"incompatible with @%s:\n%9s key #%d: %s\n"</literal>
<literal type="string">"%9s key #%d: %s\n"</literal></expr></argument>,
<argument><expr><name><name>rid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>argn</name></expr></argument>, <argument><expr><name><name>lid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name><name>lid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>argn</name></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>lproto</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rid</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><name>argn</name></expr></argument>, <argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>rproto</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_printf_getint</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>buf</name> <operator>+</operator> <name><name>recp</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>buf</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DOFFSET</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;</operator> <operator>(</operator><name><name>recp</name><operator>-&gt;</operator><name>dtrd_alignment</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DALIGN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>recp</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_average</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>normal</name> <operator>/</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_stddev</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><call><name>dt_stddev</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_quantize</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_print_quantize</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_lquantize</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_print_lquantize</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pfprint_llquantize</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_print_llquantize</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_printf_format</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recs</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>aggsdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>naggvars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name> <init>= <expr><name>recs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>lim</name> <init>= <expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>format</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><literal type="string">"%"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>aggrec</name></decl>, <decl><type ref="prev"/><name>curagg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>normal</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>&amp;</operator> <name>DT_PRINTF_AGGREGATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aggsdata</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>naggvars</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curagg</name> <operator>=</operator> <ternary><condition><expr><name>naggvars</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <name><name>aggsdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>aggrec</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nrecs</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pfd</name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prec</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>format</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fmtsz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfprint_f</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prefix</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_printf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>&amp;</operator> <name>DT_PRINTF_AGGREGATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>DTRACE_BUFDATA_AGGFORMAT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pfc</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DTRACE_BUFDATA_AGGLAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_buffered_flush</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>aggdata</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pfc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>nrecs</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name> <operator>==</operator> <operator>&amp;</operator><name>pfprint_pct</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNWIDTH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_printf_getint</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>recp</name><operator>++</operator></expr></argument>, <argument><expr><name>nrecs</name><operator>--</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_dynwidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_dynwidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNPREC</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>dt_printf_getint</name><argument_list>(
<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>recp</name><operator>++</operator></expr></argument>, <argument><expr><name>nrecs</name><operator>--</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prec</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_AGG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aggsdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <name><name>aggsdata</name><index>[<expr><name>curagg</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>agg</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curagg</name> <operator>&lt;</operator> <name>naggvars</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curagg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name>aggrec</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>normal</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_normal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>DTRACE_BUFDATA_AGGVAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nrecs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DMISMATCH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>&amp;</operator> <name>DT_PRINTF_AGGREGATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <name><name>aggsdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>DTRACE_BUFDATA_AGGKEY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <name>recp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nrecs</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><name>buf</name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>normal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"bad size: addr=%p size=0x%x lim=%p\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>lim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DOFFSET</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_alignment</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>&amp;</operator> <operator>(</operator><name><name>rec</name><operator>-&gt;</operator><name>dtrd_alignment</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"bad align: addr=%p size=0x%x align=0x%x\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DALIGN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEAGG_AVG</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_average</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEAGG_STDDEV</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_stddev</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEAGG_QUANTIZE</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_quantize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEAGG_LQUANTIZE</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_lquantize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEAGG_LLQUANTIZE</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_llquantize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEACT_MOD</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_mod</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACEACT_UMOD</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>pfprint_umod</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_print</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_ZPAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_SPOS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_SPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fmtsz</name> <operator>-=</operator> <name>f</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>pfprint_stack</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fmtsz</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ABS</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmtsz</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmtsz</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fmtsz</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmtsz</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmtsz</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><name>fmtsz</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>fmtsz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_COMPILER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_rec</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>func</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>&amp;</operator> <name>DT_PRINTF_AGGREGATION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DTRACE_BUFDATA_AGGLAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_buffered_flush</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>aggdata</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>recp</name> <operator>-</operator> <name>recs</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_sprintf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fmtdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"strsize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rval</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buflen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buflen</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_printf_format</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmtdata</name></expr></argument>, <argument><expr><name>recp</name></expr></argument>, <argument><expr><name>nrecs</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_system</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fmtdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><call><name>dtrace_sprintf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmtdata</name></expr></argument>, <argument><expr><name>recp</name></expr></argument>, <argument><expr><name>nrecs</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_freopen</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fmtdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>selfbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>restorebuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>nfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>, <decl><type ref="prev"/><name>errval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name> <init>= <expr><name>fmtdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dtrace_sprintf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmtdata</name></expr></argument>, <argument><expr><name>recp</name></expr></argument>, <argument><expr><name>nrecs</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prefix</name></name></expr></argument>, <argument><expr><name>DT_FREOPEN_RESTORE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>, <argument><expr><name>DT_FREOPEN_RESTORE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>restorebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>restorebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"/dev/fd/%d"</literal></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>restorebuf</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"aF"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>faultstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>faultstr</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>faultstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"couldn't freopen() \"%s\": %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errval</name> <operator>=</operator> <call><name>dt_handle_liberr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>faultstr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>errval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>selfbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>selfbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/fd/%d"</literal></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><name>selfbuf</name></expr></argument>, <argument><expr><literal type="string">"aF"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prefix</name></name></expr></argument>, <argument><expr><name>DT_FREOPEN_RESTORE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>, <argument><expr><name>DT_FREOPEN_RESTORE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>faultstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>faultstr</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>faultstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"couldn't freopen() \"%s\": %s"</literal></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errval</name> <operator>=</operator> <call><name>dt_handle_liberr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>faultstr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>errval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>=</operator> <name>nfp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_fprintf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fmtdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_printf_format</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmtdata</name></expr></argument>,
<argument><expr><name>recp</name></expr></argument>, <argument><expr><name>nrecs</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>dtrace_printf_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name> <init>= <expr><call><name>dt_printf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pfv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pfd</name> <operator>=</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pfd</name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pfc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ofmt</name></name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ofmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>pfv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>dtrace_printa_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name> <init>= <expr><call><name>dtrace_printf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pfv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_flags</name></name> <operator>|=</operator> <name>DT_PRINTF_AGGREGATION</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pfv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>size_t</name></type>
<name>dtrace_printf_format</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fmtdata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfv</name> <init>= <expr><name>fmtdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_argv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>formatlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pfv</name><operator>-&gt;</operator><name>pfv_format</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>formatlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>format</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pfv</name><operator>-&gt;</operator><name>pfv_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pfd</name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfc</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_conv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prec</name> <init>= <expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_prec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_preflen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_prefix</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pfc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_ZPAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_SPOS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNWIDTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_DYNPREC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_GROUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_SPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd_flags</name></name> <operator>&amp;</operator> <name>DT_PFCONV_AGG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>pfc_ofmt</name></name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>pfc_name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>pfd</name><operator>-&gt;</operator><name>pfd_fmt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name><operator>++</operator> <operator>=</operator> <name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&lt;</operator> <name>format</name> <operator>+</operator> <name>formatlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>f</name> <operator>-</operator> <name>format</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_fprinta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>adp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>adp</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recp</name> <init>= <expr><operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nrecs</name> <init>= <expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfwalk_t</name> <modifier>*</modifier></type><name>pfw</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pfw</name><operator>-&gt;</operator><name>pfw_argv</name><operator>-&gt;</operator><name>pfv_dtp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_printf_getint</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>recp</name><operator>++</operator></expr></argument>, <argument><expr><name>nrecs</name><operator>--</operator></expr></argument>,
<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtada_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pfw</name><operator>-&gt;</operator><name>pfw_aid</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_printf_format</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pfw</name><operator>-&gt;</operator><name>pfw_fp</name></name></expr></argument>, <argument><expr><name><name>pfw</name><operator>-&gt;</operator><name>pfw_argv</name></name></expr></argument>,
<argument><expr><name>recp</name></expr></argument>, <argument><expr><name>nrecs</name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtada_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>pfw</name><operator>-&gt;</operator><name>pfw_err</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>dtrace_aggdesc_t</name> <operator>*</operator><operator>)</operator><name>agg</name><operator>)</operator><operator>-&gt;</operator><name>dtagd_flags</name> <operator>|=</operator> <name>DTRACE_AGD_PRINTED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_fprintas</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>aggsdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>naggvars</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><name><name>aggsdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nrecs</name> <init>= <expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfwalk_t</name> <modifier>*</modifier></type><name>pfw</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pfw</name><operator>-&gt;</operator><name>pfw_argv</name><operator>-&gt;</operator><name>pfv_dtp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_printf_format</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pfw</name><operator>-&gt;</operator><name>pfw_fp</name></name></expr></argument>, <argument><expr><name><name>pfw</name><operator>-&gt;</operator><name>pfw_argv</name></name></expr></argument>,
<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>nrecs</name></expr></argument>, <argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>, <argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_size</name></name></expr></argument>,
<argument><expr><name>aggsdata</name></expr></argument>, <argument><expr><name>naggvars</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>pfw</name><operator>-&gt;</operator><name>pfw_err</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>agg</name> <operator>=</operator> <name><name>aggsdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dtada_desc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>dtrace_aggdesc_t</name> <operator>*</operator><operator>)</operator><name>agg</name><operator>)</operator><operator>-&gt;</operator><name>dtagd_flags</name> <operator>|=</operator> <name>DTRACE_AGD_PRINTED</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_fprinta</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fmtdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>recs</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>nrecs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pfwalk_t</name></type> <name>pfw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>naggvars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name> <modifier>*</modifier></type><name>aggvars</name></decl>;</decl_stmt>
<expr_stmt><expr><name>aggvars</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>nrecs</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_aggvarid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrecs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>nrec</name> <init>= <expr><operator>&amp;</operator><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nrec</name><operator>-&gt;</operator><name>dtrd_uarg</name></name> <operator>!=</operator> <name><name>recs</name><operator>-&gt;</operator><name>dtrd_uarg</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nrec</name><operator>-&gt;</operator><name>dtrd_action</name></name> <operator>!=</operator> <name><name>recs</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADAGG</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>aggvars</name><index>[<expr><name>naggvars</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>*</operator><operator>(</operator><operator>(</operator><name>dtrace_aggvarid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>caddr_t</name><operator>)</operator><name>buf</name> <operator>+</operator> <name><name>nrec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>naggvars</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADAGG</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pfw</name><operator>.</operator><name>pfw_argv</name></name> <operator>=</operator> <name>fmtdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfw</name><operator>.</operator><name>pfw_fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfw</name><operator>.</operator><name>pfw_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>naggvars</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfw</name><operator>.</operator><name>pfw_aid</name></name> <operator>=</operator> <name><name>aggvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name>dt_fprinta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfw</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pfw</name><operator>.</operator><name>pfw_err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_aggregate_walk_joined</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>aggvars</name></expr></argument>, <argument><expr><name>naggvars</name></expr></argument>,
<argument><expr><name>dt_fprintas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfw</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pfw</name><operator>.</operator><name>pfw_err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
