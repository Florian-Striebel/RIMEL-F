<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_regset.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/bitmap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_regset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<function><type><name>dt_regset_t</name> <modifier>*</modifier></type>
<name>dt_regset_create</name><parameter_list>(<parameter><decl><type><name>ulong_t</name></type> <name>nregs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>n</name> <init>= <expr><call><name>BT_BITOUL</name><argument_list>(<argument><expr><name>nregs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_regset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>drp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ulong_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_regset_destroy</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_size</name></name> <operator>=</operator> <name>nregs</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>drp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_regset_destroy</name><parameter_list>(<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_regset_reset</name><parameter_list>(<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ulong_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>BT_BITOUL</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_regset_assert_free</name><parameter_list>(<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>boolean_t</name></type> <name>fail</name> <init>= <expr><name>B_FALSE</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>reg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reg</name> <operator>&lt;</operator> <name><name>drp</name><operator>-&gt;</operator><name>dr_size</name></name></expr>;</condition> <incr><expr><name>reg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BT_TEST</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"%%r%d was left allocated\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>fail</name> <operator>&amp;&amp;</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DTRACE_DEBUG_REGSET"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_regset_alloc</name><parameter_list>(<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>nbits</name> <init>= <expr><name><name>drp</name><operator>-&gt;</operator><name>dr_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>maxw</name> <init>= <expr><name>nbits</name> <operator>&gt;&gt;</operator> <name>BT_ULSHIFT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>wx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>wx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wx</name> <operator>&lt;=</operator> <name>maxw</name></expr>;</condition> <incr><expr><name>wx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name><index>[<expr><name>wx</name></expr>]</index></name> <operator>!=</operator> <operator>~</operator><literal type="number">0UL</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>wx</name> <operator>&lt;=</operator> <name>maxw</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>maxb</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>wx</name> <operator>==</operator> <name>maxw</name><operator>)</operator></expr> ?</condition><then> <expr><name>nbits</name> <operator>&amp;</operator> <name>BT_ULMASK</name></expr> </then><else>: <expr><name>BT_NBIPUL</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>word</name> <init>= <expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name><index>[<expr><name>wx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;=</operator> <name>maxb</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr><operator>,</operator> <expr><name>bit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>word</name> <operator>&amp;</operator> <name>bit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>wx</name> <operator>&lt;&lt;</operator> <name>BT_ULSHIFT</name><operator>)</operator> <operator>|</operator> <name>bx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BT_SET</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>reg</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_NOREG</name></expr></argument>, <argument><expr><literal type="string">"Insufficient registers to generate code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_regset_free</name><parameter_list>(<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reg</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;</operator> <name><name>drp</name><operator>-&gt;</operator><name>dr_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>BT_TEST</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BT_CLEAR</name><argument_list>(<argument><expr><name><name>drp</name><operator>-&gt;</operator><name>dr_bitmap</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
