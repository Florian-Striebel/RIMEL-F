<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_handle.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_program.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_dt_errprog</name><index>[]</index></name> <init>=
<expr><literal type="string">"dtrace:::ERROR"</literal>
<literal type="string">"{"</literal>
<literal type="string">" trace(arg1);"</literal>
<literal type="string">" trace(arg2);"</literal>
<literal type="string">" trace(arg3);"</literal>
<literal type="string">" trace(arg4);"</literal>
<literal type="string">" trace(arg5);"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>dtrace_handle_err</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_handle_err_f</name> <modifier>*</modifier></type><name>hdlr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_stmt_t</name> <modifier>*</modifier></type><name>stp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>edp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errhdlr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EALREADY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_GRABANON</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pgp</name> <operator>=</operator> <call><name>dtrace_program_strcompile</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>_dt_errprog</name></expr></argument>,
<argument><expr><name>DTRACE_PROBESPEC_NAME</name></expr></argument>, <argument><expr><name>DTRACE_C_ZDEFS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgp</name><operator>-&gt;</operator><name>dp_stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>edp</name> <operator>=</operator> <name><name>stp</name><operator>-&gt;</operator><name>ds_desc</name><operator>-&gt;</operator><name>dtsd_ecbdesc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>edp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edp</name><operator>-&gt;</operator><name>dted_uarg</name></name> <operator>=</operator> <name>DT_ECB_ERROR</name></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errhdlr</name></name> <operator>=</operator> <name>hdlr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errarg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errprog</name></name> <operator>=</operator> <name>pgp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_handle_drop</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_handle_drop_f</name> <modifier>*</modifier></type><name>hdlr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_drophdlr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EALREADY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_drophdlr</name></name> <operator>=</operator> <name>hdlr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_droparg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_handle_proc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_handle_proc_f</name> <modifier>*</modifier></type><name>hdlr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_prochdlr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EALREADY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_prochdlr</name></name> <operator>=</operator> <name>hdlr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procarg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_handle_buffered</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_handle_buffered_f</name> <modifier>*</modifier></type><name>hdlr</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_bufhdlr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EALREADY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hdlr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_bufhdlr</name></name> <operator>=</operator> <name>hdlr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_bufarg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_handle_setopt</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_handle_setopt_f</name> <modifier>*</modifier></type><name>hdlr</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hdlr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_setopthdlr</name></name> <operator>=</operator> <name>hdlr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_setoptarg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_REC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>ndx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*((type *)((uintptr_t)data-&gt;dtpda_data + epd-&gt;dtepd_rec[(ndx)].dtrd_offset))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_handle_err</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_eprobedesc_t</name> <modifier>*</modifier></type><name>epd</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_edesc</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>errepd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_pdesc</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>errpd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_errdata_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_epid_t</name></type> <name>epid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>where</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>details</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>offinfo</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slop</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>faultstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>epd</name><operator>-&gt;</operator><name>dtepd_uarg</name></name> <operator>==</operator> <name>DT_ECB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>epd</name><operator>-&gt;</operator><name>dtepd_nrecs</name></name> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><literal type="string">"dtrace"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADERROR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>epid</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>DT_REC</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_epid_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>epid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errepd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errpd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADERROR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_edesc</name></name> <operator>=</operator> <name>errepd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_pdesc</name></name> <operator>=</operator> <name>errpd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_cpu</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>dtpda_cpu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_action</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>DT_REC</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_offset</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>DT_REC</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_fault</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>DT_REC</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_addr</name></name> <operator>=</operator> <call><name>DT_REC</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>faultstr</name> <operator>=</operator> <call><name>dtrace_faultstr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>dteda_fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>offinfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>faultstr</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>slop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>err</name><operator>.</operator><name>dteda_action</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="string">"predicate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="string">"action #%d"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>dteda_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>err</name><operator>.</operator><name>dteda_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>offinfo</name></expr></argument>, <argument><expr><literal type="string">" at DIF offset %d"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>dteda_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>offinfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>err</name><operator>.</operator><name>dteda_fault</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEFLT_BADADDR</name></expr>:</case>
<case>case <expr><name>DTRACEFLT_BADALIGN</name></expr>:</case>
<case>case <expr><name>DTRACEFLT_BADSTACK</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>details</name></expr></argument>, <argument><expr><literal type="string">" (0x%llx)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>err</name><operator>.</operator><name>dteda_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>details</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"error on enabled probe ID %u "</literal>
<literal type="string">"(ID %u: %s:%s:%s:%s): %s%s in %s%s\n"</literal></expr></argument>,
<argument><expr><name>epid</name></expr></argument>, <argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>, <argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>,
<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>,
<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><call><name>dtrace_faultstr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>dteda_fault</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>details</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>offinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_msg</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errhdlr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_ERRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dtp</name><operator>-&gt;</operator><name>dt_errhdlr</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errarg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DTRACE_HANDLE_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_ERRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_handle_liberr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>faultstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>errpd</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_pdesc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_errdata_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slop</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_edesc</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>dtpda_edesc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_pdesc</name></name> <operator>=</operator> <name>errpd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_cpu</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>dtpda_cpu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_action</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_fault</name></name> <operator>=</operator> <name>DTRACEFLT_LIBRARY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>faultstr</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>slop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"error on enabled probe ID %u "</literal>
<literal type="string">"(ID %u: %s:%s:%s:%s): %s\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_edesc</name><operator>-&gt;</operator><name>dtepd_epid</name></name></expr></argument>,
<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>, <argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>,
<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>,
<argument><expr><name><name>errpd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><name>faultstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>.</operator><name>dteda_msg</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errhdlr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_ERRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dtp</name><operator>-&gt;</operator><name>dt_errhdlr</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errarg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DTRACE_HANDLE_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_ERRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DROPTAG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x, #x</cpp:value></cpp:define>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>dtrace_dropkind_t</name></type> <name>dtdrg_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dtdrg_tag</name></decl>;</decl_stmt>
}</block> <decl><name><name>_dt_droptags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_PRINCIPAL</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_AGGREGATION</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_DYNAMIC</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_DYNRINSE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_DYNDIRTY</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_SPEC</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_SPECBUSY</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_SPECUNAVAIL</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_DBLERROR</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>DROPTAG</name><argument_list>(<argument>DTRACEDROP_STKSTROVERFLOW</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_droptag</name><parameter_list>(<parameter><decl><type><name>dtrace_dropkind_t</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_dt_droptags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrg_tag</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_dt_droptags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrg_kind</name> <operator>==</operator> <name>kind</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>_dt_droptags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrg_tag</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="string">"DTRACEDROP_UNKNOWN"</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_handle_cpudrop</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>processorid_t</name></type> <name>cpu</name></decl></parameter>,
<parameter><decl><type><name>dtrace_dropkind_t</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>howmany</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_dropdata_t</name></type> <name>drop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>what</name> <operator>==</operator> <name>DTRACEDROP_PRINCIPAL</name> <operator>||</operator> <name>what</name> <operator>==</operator> <name>DTRACEDROP_AGGREGATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drop</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>drop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_handle</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_cpu</name></name> <operator>=</operator> <name>cpu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_kind</name></name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_drops</name></name> <operator>=</operator> <name>howmany</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_msg</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_droptags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[%s] "</literal></expr></argument>, <argument><expr><call><name>dt_droptag</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>&amp;</operator><name><name>str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%llu %sdrop%s on CPU %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>howmany</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>what</name> <operator>==</operator> <name>DTRACEDROP_PRINCIPAL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"aggregation "</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>howmany</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_drophdlr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DROPABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dtp</name><operator>-&gt;</operator><name>dt_drophdlr</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>drop</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_droparg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DTRACE_HANDLE_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DROPABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>dtrace_dropkind_t</name></type> <name>dtdrt_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>dtdrt_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dtdrt_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dtdrt_msg</name></decl>;</decl_stmt>
}</block> <decl><name><name>_dt_droptab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DTRACEDROP_DYNAMIC</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_dyndrops</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"dynamic variable drop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_DYNRINSE</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_dyndrops_rinsing</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"dynamic variable drop"</literal></expr>, <expr><literal type="string">" with non-empty rinsing list"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_DYNDIRTY</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_dyndrops_dirty</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"dynamic variable drop"</literal></expr>, <expr><literal type="string">" with non-empty dirty list"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_SPEC</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_specdrops</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"speculative drop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_SPECBUSY</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_specdrops_busy</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"failed speculation"</literal></expr>, <expr><literal type="string">" (available buffer(s) still busy)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_SPECUNAVAIL</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_specdrops_unavail</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"failed speculation"</literal></expr>, <expr><literal type="string">" (no speculative buffer available)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_STKSTROVERFLOW</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_stkstroverflows</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"jstack()/ustack() string table overflow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEDROP_DBLERROR</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_status_t</name></expr></argument>, <argument><expr><name>dtst_dblerrors</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"error"</literal></expr>, <expr><literal type="string">" in ERROR probe enabling"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><name>int</name></type>
<name>dt_handle_status</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_status_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>dtrace_status_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_dropdata_t</name></type> <name>drop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>base</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>new</name></expr></init></decl>, <decl><type ref="prev"/><name>obase</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>old</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drop</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>drop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_handle</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_cpu</name></name> <operator>=</operator> <name>DTRACE_CPUALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_msg</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>dtst_killed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>old</name><operator>-&gt;</operator><name>dtst_killed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BRICKED</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>naddr</name> <init>= <expr><name>base</name> <operator>+</operator> <name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>oaddr</name> <init>= <expr><name>obase</name> <operator>+</operator> <name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nval</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>naddr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oval</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>oaddr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nval</name> <operator>==</operator> <name>oval</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_droptags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[%s] "</literal></expr></argument>,
<argument><expr><call><name>dt_droptag</name><argument_list>(<argument><expr><name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>&amp;</operator><name><name>str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%llu %s%s%s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><operator>(</operator><name>nval</name> <operator>-</operator> <name>oval</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nval</name> <operator>-</operator> <name>oval</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_msg</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>
<expr><name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_kind</name></name> <operator>=</operator> <name><name>_dt_droptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtdrt_kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_total</name></name> <operator>=</operator> <name>nval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drop</name><operator>.</operator><name>dtdda_drops</name></name> <operator>=</operator> <name>nval</name> <operator>-</operator> <name>oval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_drophdlr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DROPABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dtp</name><operator>-&gt;</operator><name>dt_drophdlr</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>drop</name></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_droparg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DTRACE_HANDLE_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DROPABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_handle_setopt</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_setoptdata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_setoptarg</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_setopthdlr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dtp</name><operator>-&gt;</operator><name>dt_setopthdlr</name></name>)<argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DTRACE_HANDLE_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DIRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_handle</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_eprobedesc_t</name> <modifier>*</modifier></type><name>epd</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_edesc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>epd</name><operator>-&gt;</operator><name>dtepd_uarg</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_ECB_ERROR</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_handle_err</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_THIS</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_NEXT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
