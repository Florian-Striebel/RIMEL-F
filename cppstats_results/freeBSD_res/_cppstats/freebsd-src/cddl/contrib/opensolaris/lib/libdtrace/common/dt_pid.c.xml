<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_pid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc_compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>dt_pid_probe</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dpp_dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>dpp_pcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpp_dpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>dpp_pr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dpp_mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dpp_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dpp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dpp_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>dpp_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dpp_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Lmid_t</name></type> <name>dpp_lmid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dpp_nmatches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>dpp_stret</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>dpp_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dpp_last_taken</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pid_probe_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pid_objname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Lmid_t</name></type> <name>lmid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>lmid</name> <operator>==</operator> <name>LM_ID_BASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"LM%lx`%s"</literal></expr></argument>, <argument><expr><name>lmid</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_error</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><name>dt_errtag_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ftp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pcb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_errmsg</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_errmsg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_errmsg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_errmsg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_set_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dt_errtag</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_region</name></name></expr></argument>,
<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_filetag</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_fileptr</name></name></expr> ?</condition><then> <expr><name>yylineno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_per_sym</name><parameter_list>(<parameter><decl><type><name>dt_pid_probe_t</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_dtp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pcb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_dpr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nmatches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>glob</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdash</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>Pstatus</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>proc_getpid</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"creating probe pid%d:%s:%s:%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>fasttrap_probe_spec_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isdash</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>:
<expr><operator>(</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftp</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"proc_per_sym: dt_alloc(%lu) failed\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_func</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_func</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_pid_objname</name><argument_list>(<argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_mod</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_mod</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isdash</name> <operator>&amp;&amp;</operator> <call><name>gmatch</name><argument_list>(<argument><expr><literal type="string">"return"</literal></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_pid_create_return_probe</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>,
<argument><expr><name>D_PROC_CREATEFAIL</name></expr></argument>, <argument><expr><literal type="string">"failed to create return probe "</literal>
<literal type="string">"for '%s': %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nmatches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isdash</name> <operator>&amp;&amp;</operator> <call><name>gmatch</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_pid_create_entry_probe</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>,
<argument><expr><name>D_PROC_CREATEFAIL</name></expr></argument>, <argument><expr><literal type="string">"failed to create entry probe "</literal>
<literal type="string">"for '%s': %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nmatches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>glob</name> <operator>=</operator> <call><name>strisglob</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glob</name> <operator>&amp;&amp;</operator> <name>nmatches</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>D_PROC_NAME</name></expr></argument>,
<argument><expr><literal type="string">"'%s' is an invalid probe name"</literal></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>D_PROC_OFF</name></expr></argument>,
<argument><expr><literal type="string">"offset 0x%llx outside of function '%s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>off</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dt_pid_create_offset_probe</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_dtp</name></name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>,
<argument><expr><name>symp</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>DT_PROC_ERR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>,
<argument><expr><name>D_PROC_CREATEFAIL</name></expr></argument>, <argument><expr><literal type="string">"failed to create probe at "</literal>
<literal type="string">"'%s+0x%llx': %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>off</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>DT_PROC_ALIGN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>D_PROC_ALIGN</name></expr></argument>,
<argument><expr><literal type="string">"offset 0x%llx is not aligned on an instruction"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nmatches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>glob</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isdash</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_pid_create_glob_offset_probes</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_dtp</name></name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>,
<argument><expr><name>D_PROC_CREATEFAIL</name></expr></argument>,
<argument><expr><literal type="string">"failed to create offset probes in '%s': %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nmatches</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_nmatches</name></name> <operator>+=</operator> <name>nmatches</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_sym_filt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pid_probe_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symp</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"st_size of %s is zero\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_last_taken</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <name><name>pp</name><operator>-&gt;</operator><name>dpp_last</name><operator>.</operator><name>st_value</name></name> <operator>||</operator>
<name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>!=</operator> <name><name>pp</name><operator>-&gt;</operator><name>dpp_last</name><operator>.</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"_init"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"_fini"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_last_taken</name></name> <operator>=</operator> <call><name>gmatch</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_last</name></name> <operator>=</operator> <operator>*</operator><name>symp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_pid_per_sym</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_per_mod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>pmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pid_probe_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_dtp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pcb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_dpr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Plmid</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">".stret1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">".stret2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">".stret4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">".stret8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"%s stret %llx %llx %llx %llx\n"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_stret</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strisglob</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name> <operator>=</operator>
<call><name>GELF_ST_INFO</name><argument_list>(<argument><expr><name>STB_LOCAL</name></expr></argument>, <argument><expr><name>STT_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_other</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <ternary><condition><expr><call><name>Pstatus</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_dmodel</name> <operator>==</operator>
<name>PR_MODEL_ILP32</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1U</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1ULL</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>Elf64_Xword</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strisglob</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>D_PROC_FUNC</name></expr></argument>,
<argument><expr><literal type="string">"failed to lookup '%s' in module '%s'"</literal></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STT_FUNC</name> <operator>||</operator>
<name><name>sym</name><operator>.</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name> <operator>||</operator> <name><name>sym</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOODAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>Ppltdest</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>.</operator><name>st_value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Plookup_by_addr</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>.</operator><name>st_value</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>,
<argument><expr><name>DTRACE_FUNCNAMELEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_pid_per_sym</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_func</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nmatches</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_nmatches</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Psymbol_iter_by_addr</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>PR_SYMTAB</name></expr></argument>,
<argument><expr><name>BIND_ANY</name> <operator>|</operator> <name>TYPE_FUNC</name></expr></argument>, <argument><expr><name>dt_pid_sym_filt</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nmatches</name> <operator>==</operator> <name><name>pp</name><operator>-&gt;</operator><name>dpp_nmatches</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Psymbol_iter_by_addr</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>PR_DYNSYM</name></expr></argument>,
<argument><expr><name>BIND_ANY</name> <operator>|</operator> <name>TYPE_FUNC</name></expr></argument>, <argument><expr><name>dt_pid_sym_filt</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_mod_filt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>pmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>DTRACE_MODNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pid_probe_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_per_mod</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>pmp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Plmid</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_per_mod</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>pmp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Plmid</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_pid_objname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_lmid</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_per_mod</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>pmp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type>
<name>dt_pid_fix_mod</name><parameter_list>(<parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>m</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Lmid_t</name></type> <name>lmid</name> <init>= <expr><name>PR_LMID_EVERY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>pmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><literal type="string">"LM"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lmid</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'`'</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pmp</name> <operator>=</operator> <call><name>Plmid_to_map</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>lmid</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pobjname</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>obj</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Plmid</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lmid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_pid_objname</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lmid</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_create_pid_probes</name><parameter_list>(<parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pid_probe_t</name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_dpr</name></name> <operator>=</operator> <name>dpr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_pr</name></name> <operator>=</operator> <name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_pcb</name></name> <operator>=</operator> <name>pcb</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOODAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>Pname_to_map</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name>PR_OBJ_LDSO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_DYN</name></expr></argument>,
<argument><expr><literal type="string">"process %s is not a dynamically-linked executable"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_mod</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_func</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_name</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_last_taken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_func</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>aout</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>dpp_mod</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><literal type="string">"a.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strisglob</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>aout</name> <operator>=</operator> <call><name>Pname_to_map</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><literal type="string">"a.out"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>pmp</name> <operator>=</operator> <call><name>Pname_to_map</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>.</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>aout</name><operator>-&gt;</operator><name>pr_vaddr</name></name> <operator>!=</operator> <name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_LIB</name></expr></argument>,
<argument><expr><literal type="string">"only the a.out module is valid with the "</literal>
<literal type="string">"'-' function"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strisglob</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_NAME</name></expr></argument>,
<argument><expr><literal type="string">"only individual addresses may be specified "</literal>
<literal type="string">"with the '-' function"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strisglob</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_mod</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Pobject_iter</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>dpp_pr</name></name></expr></argument>, <argument><expr><name>dt_pid_mod_filt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>pmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pmp</name> <operator>=</operator> <call><name>dt_pid_fix_mod</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name><name>pp</name><operator>.</operator><name>dpp_pr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>obj</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dt_pid_per_mod</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><name>pmp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_usdt_mapping</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>pmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prsyminfo_t</name></type> <name>sip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_helper_t</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Half</name></type> <name>e_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>syms</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"___SUNW_dof"</literal></expr>, <expr><literal type="string">"__SUNW_dof"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>PR_LMID_EVERY</name></expr></argument>, <argument><expr><name>oname</name></expr></argument>, <argument><expr><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mname</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>oname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mname</name> <operator>=</operator> <name>oname</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mname</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"lookup of %s succeeded for %s\n"</literal></expr></argument>, <argument><expr><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pread</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e_type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>e_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name> <operator>+</operator>
<call><name>offsetof</name><argument_list>(<argument><expr><name>Elf64_Ehdr</name></expr></argument>, <argument><expr><name>e_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>e_type</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"read of ELF header failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dh</name><operator>.</operator><name>dofhp_dof</name></name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>.</operator><name>dofhp_addr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>e_type</name> <operator>==</operator> <name>ET_EXEC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pmp</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_pid_objname</name><argument_list>(<argument><expr><name><name>dh</name><operator>.</operator><name>dofhp_mod</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dh</name><operator>.</operator><name>dofhp_mod</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>sip</name><operator>.</operator><name>prs_lmid</name></name></expr></argument>, <argument><expr><name>mname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dh</name><operator>.</operator><name>dofhp_pid</name></name> <operator>=</operator> <call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/dtrace/helper"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"open of helper device failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>DTRACEHIOC_ADDDOF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dh</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"DOF was rejected for %s\n"</literal></expr></argument>, <argument><expr><name><name>dh</name><operator>.</operator><name>dofhp_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>fd</name> <operator>=</operator> <call><name>pr_open</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="string">"/dev/dtrace/helper"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"pr_open of helper device failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pr_ioctl</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>DTRACEHIOC_ADDDOF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dh</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"DOF was rejected for %s\n"</literal></expr></argument>, <argument><expr><name><name>dh</name><operator>.</operator><name>dofhp_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pr_close</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_create_usdt_probes</name><parameter_list>(<parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_proc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DT_MUTEX_HELD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pupdate_maps</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pobject_iter</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>dt_pid_usdt_mapping</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_USDT</name></expr></argument>,
<argument><expr><literal type="string">"failed to instantiate probes for pid %d: %s"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_fix_mod</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
}
static <function><type><name>pid_t</name></type>
<name>dt_pid_get_pid</name><parameter_list>(<parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>,
<parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>++</operator><name>last</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_BADPROV</name></expr></argument>,
<argument><expr><literal type="string">"'%s' is not a valid provider"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>end</name> <operator>==</operator> <name>last</name> <operator>||</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_BADPID</name></expr></argument>,
<argument><expr><literal type="string">"'%s' does not contain a valid pid"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>pid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_pid_create_probes</name><parameter_list>(<parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>provname</name><index>[<expr><name>DTRACE_PROVNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pcb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>dt_pid_get_pid</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fterr</name></name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_NODEV</name></expr></argument>,
<argument><expr><literal type="string">"pid provider is not installed on this system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_NODEV</name></expr></argument>,
<argument><expr><literal type="string">"pid provider is not available: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fterr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>provname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>provname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pid%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name>provname</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>P</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>P</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>PGRAB_RDONLY</name> <operator>|</operator> <name>PGRAB_FORCE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_GRAB</name></expr></argument>,
<argument><expr><literal type="string">"failed to grab process %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dpr</name> <operator>=</operator> <call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dt_pid_create_pid_probes</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_ENABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>provname</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>P</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_pid_error</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D_PROC_GRAB</name></expr></argument>,
<argument><expr><literal type="string">"failed to grab process %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dpr</name> <operator>=</operator> <call><name>dt_proc_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dpr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_usdt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dt_pid_create_usdt_probes</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpr</name><operator>-&gt;</operator><name>dpr_usdt</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_pid_create_probes_module</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_enable_io_t</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_stmt_t</name> <modifier>*</modifier></type><name>stp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl>, <decl><type ref="prev"/><name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><name>B_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>provname</name><index>[<expr><name>DTRACE_PROVNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>provname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>provname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pid%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pgp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_programs</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pgp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>pgp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>pgp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgp</name><operator>-&gt;</operator><name>dp_stmts</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>stp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>stp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdp</name> <operator>=</operator> <operator>&amp;</operator><name><name>stp</name><operator>-&gt;</operator><name>ds_desc</name><operator>-&gt;</operator><name>dtsd_ecbdesc</name><operator>-&gt;</operator><name>dted_probe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>dt_pid_get_pid</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <name><name>dpr</name><operator>-&gt;</operator><name>dpr_pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <operator>*</operator><name>pdp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name>provname</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>dt_pid_create_pid_probes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>provname</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>dt_pid_create_usdt_probes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dpr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>dof</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>n_matched</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_ENABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_pid_get_types</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_argdesc_t</name> <modifier>*</modifier></type><name>adp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_funcinfo_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name><name>argv</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prsyminfo_t</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>DTRACE_ARGTYPELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_id_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Lmid_t</name></type> <name>lmid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>args</name> <operator>=</operator> <operator>*</operator><name>nargs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nargs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><literal type="string">"entry"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <call><name>dt_module_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to find module for %s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_module_load</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to load module for %s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>dt_module_getctflib</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"no ctf container for %s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PGRAB_RDONLY</name> <operator>|</operator> <name>PGRAB_FORCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to grab pid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_proc_lock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"found weird modname with linkmap, "</literal>
<literal type="string">"aborting: %s\n"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'L'</literal> <operator>||</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"missing leading 'LM', "</literal>
<literal type="string">"aborting: %s\n"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lmid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <name>eptr</name> <operator>!=</operator> <name>mptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to parse out lmid, aborting: %s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mptr</name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lmid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Pxlookup_by_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lmid</name></expr></argument>, <argument><expr><name>mptr</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to find function %s in %s`%s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_func_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>prs_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to get ctf information for %s in %s`%s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s`%s"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>, <argument><expr><literal type="string">"return"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>adp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_argdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_id</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name> <operator>=</operator> <name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name></expr></argument>, <argument><expr><name>DTRACE_ARGTYPELEN</name></expr></argument>,
<argument><expr><literal type="string">"user %s`%s"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>adp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_argdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_id</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name> <operator>=</operator> <name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name></expr></argument>, <argument><expr><name>DTRACE_ARGTYPELEN</name></expr></argument>,
<argument><expr><literal type="string">"userland "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_type_qname</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>ctc_return</name></name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name> <operator>+</operator>
<name>ret</name></expr></argument>, <argument><expr><name>DTRACE_ARGTYPELEN</name> <operator>-</operator> <name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_func_args</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>prs_id</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nargs</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>ctc_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>adp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>adp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_argdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_id</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_mapping</name></name> <operator>=</operator> <name><name>adp</name><operator>-&gt;</operator><name>dtargd_ndx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name></expr></argument>, <argument><expr><name>DTRACE_ARGTYPELEN</name></expr></argument>,
<argument><expr><literal type="string">"userland "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_type_qname</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>adp</name><operator>-&gt;</operator><name>dtargd_native</name></name> <operator>+</operator>
<name>ret</name></expr></argument>, <argument><expr><name>DTRACE_ARGTYPELEN</name> <operator>-</operator> <name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
