<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_print.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_printf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_IS_CHAR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((e).cte_format &amp; (CTF_INT_CHAR | CTF_INT_SIGNED)) == (CTF_INT_CHAR | CTF_INT_SIGNED) &amp;&amp; (e).cte_bits == NBBY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_IS_STRUCTLIKE</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((k) == CTF_K_STRUCT || (k) == CTF_K_UNION)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dt_printarg</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>pa_dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>pa_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>pa_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pa_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pa_nest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pa_file</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_printarg_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dt_print_member</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_type_name</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"&lt;%ld&gt;"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_trailing_braces</name><parameter_list>(<parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name></expr>;</init> <condition><expr><name>d</name> <operator>&gt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>d</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></argument>, <argument><expr><literal type="string">"%*s}%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_nest</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>d</name> <operator>==</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_indent</name><parameter_list>(<parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name> <operator>+</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_nest</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_bitfield</name><parameter_list>(<parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>ctf_encoding_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_addr</name></name> <operator>+</operator> <name>off</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>cte_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>cte_bits</name></name> <operator>+</operator> <operator>(</operator><name>NBBY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>shift</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>ep</name><operator>-&gt;</operator><name>cte_bits</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>off</name> <operator>%</operator> <name>NBBY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>NBBY</name> <operator>-</operator> <name>shift</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>%</operator> <name>NBBY</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%#llx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_hex</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>caddr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%#llx"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;invalid size %u&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_int</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_addr</name></name> <operator>+</operator> <name>off</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown encoding&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>cte_format</name></name> <operator>&amp;</operator> <name>CTF_INT_VARARGS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>/</operator> <name>NBBY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator> <operator>(</operator><name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>%</operator> <name>NBBY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_bitfield</name><argument_list>(<argument><expr><name>pap</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CTF_IS_CHAR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"'%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"'\\0'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"'\\%03o'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_print_hex</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_float</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_addr</name></name> <operator>+</operator> <name>off</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>cte_format</name></name> <operator>==</operator> <name>CTF_FP_SINGLE</name> <operator>&amp;&amp;</operator>
<name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NBBY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%+.7e"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>.</operator><name>cte_format</name></name> <operator>==</operator> <name>CTF_FP_DOUBLE</name> <operator>&amp;&amp;</operator>
<name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NBBY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%+.7e"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>.</operator><name>cte_format</name></name> <operator>==</operator> <name>CTF_FP_LDOUBLE</name> <operator>&amp;&amp;</operator>
<name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>==</operator> sizeof <operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <operator>*</operator> <name>NBBY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%+.16LE"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown encoding&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_ptr</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_addr</name></name> <operator>+</operator> <name>off</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>bid</name> <init>= <expr><call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_syminfo_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bid</name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>bid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_K_FUNCTION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_print_hex</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_lookup_by_addr</name><argument_list>(<argument><expr><name><name>pap</name><operator>-&gt;</operator><name>pa_dtp</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_print_hex</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s`%s"</literal></expr></argument>, <argument><expr><name><name>dts</name><operator>.</operator><name>dts_object</name></name></expr></argument>,
<argument><expr><name><name>dts</name><operator>.</operator><name>dts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_array</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_addr</name></name> <operator>+</operator> <name>off</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>car</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>eltsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>boolean_t</name></type> <name>isstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>rtype</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>car</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eltsize</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>car</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>rtype</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>car</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<operator>(</operator><name>kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;invalid type %lu&gt;"</literal></expr></argument>, <argument><expr><name><name>car</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>isstring</name> <operator>=</operator> <name>B_FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_INTEGER</name> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <call><name>CTF_IS_CHAR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>car</name><operator>.</operator><name>ctr_nelems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>addr</name> <operator>+</operator> <name>eltsize</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>car</name><operator>.</operator><name>ctr_nelems</name></name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>isstring</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isstring</name> <operator>||</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"[ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isstring</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>car</name><operator>.</operator><name>ctr_nelems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isstring</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>addr</name> <operator>+</operator> <name>eltsize</name> <operator>*</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>dt_printarg_t</name></type> <name>pa</name> <init>= <expr><operator>*</operator><name>pap</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_nest</name></name> <operator>+=</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_addr</name></name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>eltsize</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_type_visit</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>car</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>,
<argument><expr><name>dt_print_member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_print_trailing_braces</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>car</name><operator>.</operator><name>ctr_nelems</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CTF_IS_STRUCTLIKE</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>isstring</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isstring</name> <operator>||</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CTF_IS_STRUCTLIKE</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_print_indent</name><argument_list>(<argument><expr><name>pap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_structlike</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_enum</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_addr</name></name> <operator>+</operator> <name>off</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;invalid enum size %u&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ename</name> <operator>=</operator> <call><name>ctf_enum_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_print_tag</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;forward decl&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<typedef>typedef <function_decl><type><name>void</name></type> <name>dt_printarg_f</name><parameter_list>(<parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>, <parameter><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>dt_printarg_f</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>dt_printfuncs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>dt_print_int</name></expr>,
<expr><name>dt_print_float</name></expr>,
<expr><name>dt_print_ptr</name></expr>,
<expr><name>dt_print_array</name></expr>,
<expr><name>dt_print_ptr</name></expr>,
<expr><name>dt_print_structlike</name></expr>,
<expr><name>dt_print_structlike</name></expr>,
<expr><name>dt_print_enum</name></expr>,
<expr><name>dt_print_tag</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_print_member</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_printarg_t</name> <modifier>*</modifier></type><name>pap</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_file</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>pap</name><operator>-&gt;</operator><name>pa_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>boolean_t</name></type> <name>arraymember</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>boolean_t</name></type> <name>brief</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>rtype</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_print_trailing_braces</name><argument_list>(<argument><expr><name>pap</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pap</name><operator>-&gt;</operator><name>pa_depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtype</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<operator>(</operator><name>kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<name><name>kind</name> <argument_list type="generic">&lt; <argument><expr><name>CTF_K_INTEGER</name> <operator>||</operator> <name>kind</name></expr></argument> &gt;</argument_list></name> <name>CTF_K_FORWARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_print_indent</name><argument_list>(<argument><expr><name>pap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s = &lt;invalid type %lu&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_print_type_name</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arraymember</name> <operator>=</operator> <operator>(</operator><name><name>pap</name><operator>-&gt;</operator><name>pa_nest</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>brief</name> <operator>=</operator> <operator>(</operator><name>arraymember</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CTF_IS_STRUCTLIKE</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>brief</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>arraymember</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_print_indent</name><argument_list>(<argument><expr><name>pap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>type</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator>
<name><name>type</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_INTEGER</name> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>bits</name> <init>= <expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>size</name> <init>= <expr><name>bits</name> <operator>/</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>%</operator> <name>NBBY</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>off</name> <operator>%</operator> <name>NBBY</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>size</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator>
<name>size</name> <operator>!=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" :%lu"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" ="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dt_printfuncs</name><index>[<expr><name>kind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>rtype</name><operator>,</operator> <name>off</name><operator>,</operator> <name>pap</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>brief</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dtrace_print</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>,
<parameter><decl><type><name>caddr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_printarg_t</name></type> <name>pa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>libid</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>typename</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'`'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>s</name> <operator>-</operator> <name>typename</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>object</name><index>[<expr><name>s</name> <operator>-</operator> <name>typename</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dmp</name> <operator>=</operator> <call><name>dt_module_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_pid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>libid</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>libid</name> <operator>&gt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_nctflibs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ctfp</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_libctfp</name><index>[<expr><name>libid</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ctfp</name> <operator>=</operator> <call><name>dt_module_getctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctfp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_ctfp</name></name> <operator>=</operator> <name>ctfp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_nest</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>pa_file</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_type_visit</name><argument_list>(<argument><expr><name><name>pa</name><operator>.</operator><name>pa_ctfp</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>dt_print_member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_print_trailing_braces</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
