<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_decl.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libctf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct_decl>struct <name>dt_node</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>dt_decl</name> <block>{
<decl_stmt><decl><type><name>ushort_t</name></type> <name>dd_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>dd_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>dd_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>dd_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_decl</name></name> <modifier>*</modifier></type><name>dd_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_decl_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_SIGNED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_UNSIGNED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_SHORT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_LONG</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_LONGLONG</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_CONST</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_RESTRICT</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_VOLATILE</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_PAREN</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DA_USER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <name>dt_dclass</name> <block>{
<decl><name>DT_DC_DEFAULT</name></decl>,
<decl><name>DT_DC_AUTO</name></decl>,
<decl><name>DT_DC_REGISTER</name></decl>,
<decl><name>DT_DC_STATIC</name></decl>,
<decl><name>DT_DC_EXTERN</name></decl>,
<decl><name>DT_DC_TYPEDEF</name></decl>,
<decl><name>DT_DC_SELF</name></decl>,
<decl><name>DT_DC_THIS</name></decl>
}</block></enum></type> <name>dt_dclass_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_scope</name> <block>{
<decl_stmt><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type><name>ds_decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_scope</name></name> <modifier>*</modifier></type><name>ds_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ds_ident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ds_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>ds_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_dclass_t</name></type> <name>ds_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ds_enumval</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_scope_t</name>;</typedef>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_alloc</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_decl_free</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_decl_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_push</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_pop_param</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_top</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_ident</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_decl_class</name><parameter_list>(<parameter><decl><type><name>dt_dclass_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DP_VARARGS</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DP_DYNAMIC</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DP_VOID</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DP_ANON</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_decl_prototype</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_spec</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_attr</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_func</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_sou</name><parameter_list>(<parameter><decl><type><name>uint_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_decl_member</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_decl_enum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_decl_enumerator</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_decl_type</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_typeinfo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_scope_create</name><parameter_list>(<parameter><decl><type><name>dt_scope_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_scope_destroy</name><parameter_list>(<parameter><decl><type><name>dt_scope_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_scope_push</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_decl_t</name> <modifier>*</modifier></type><name>dt_scope_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
