<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_parser.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libctf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_errtags.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_ident.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_decl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_xlator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_list.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>dt_node</name> <block>{
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>dn_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dn_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>dn_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>dn_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>dn_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dn_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dn_reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>dn_attr</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_string</name></decl>;</decl_stmt>
}</block> <decl><name>_const</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>_ident</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name><name>_links</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>_nodes</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_descs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_acts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>_locals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>_attr</name></decl>;</decl_stmt>
}</block> <decl><name>_clause</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>_desc</name></decl>;</decl_stmt>
}</block> <decl><name>_pdesc</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>_xlator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>_id</name></decl>;</decl_stmt>
}</block> <decl><name>_member</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>_xlator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_xmemb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_membs</name></decl>;</decl_stmt>
}</block> <decl><name>_xlator</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_provider</name></name> <modifier>*</modifier></type><name>_pvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_probes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_redecl</name></decl>;</decl_stmt>
}</block> <decl><name>_provider</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_conditional</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>_alternate_body</name></decl>;</decl_stmt>
}</block> <decl><name>_conditional</name></decl>;</struct>
}</block> <decl><name>dn_u</name></decl>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>dn_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type><name>dn_link</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_node_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_value</name></cpp:macro> <cpp:value>dn_u._const._value</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_string</name></cpp:macro> <cpp:value>dn_u._const._string</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_ident</name></cpp:macro> <cpp:value>dn_u._nodes._ident</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_args</name></cpp:macro> <cpp:value>dn_u._nodes._links[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_child</name></cpp:macro> <cpp:value>dn_u._nodes._links[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_left</name></cpp:macro> <cpp:value>dn_u._nodes._links[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_right</name></cpp:macro> <cpp:value>dn_u._nodes._links[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_expr</name></cpp:macro> <cpp:value>dn_u._nodes._links[2]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_aggfun</name></cpp:macro> <cpp:value>dn_u._nodes._links[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_aggtup</name></cpp:macro> <cpp:value>dn_u._nodes._links[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_pdescs</name></cpp:macro> <cpp:value>dn_u._clause._descs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_pred</name></cpp:macro> <cpp:value>dn_u._clause._pred</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_acts</name></cpp:macro> <cpp:value>dn_u._clause._acts</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_locals</name></cpp:macro> <cpp:value>dn_u._clause._locals</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_ctxattr</name></cpp:macro> <cpp:value>dn_u._clause._attr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_spec</name></cpp:macro> <cpp:value>dn_u._pdesc._spec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_desc</name></cpp:macro> <cpp:value>dn_u._pdesc._desc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_membname</name></cpp:macro> <cpp:value>dn_u._member._name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_membexpr</name></cpp:macro> <cpp:value>dn_u._member._expr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_membxlator</name></cpp:macro> <cpp:value>dn_u._member._xlator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_membid</name></cpp:macro> <cpp:value>dn_u._member._id</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_xlator</name></cpp:macro> <cpp:value>dn_u._xlator._xlator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_xmember</name></cpp:macro> <cpp:value>dn_u._xlator._xmemb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_members</name></cpp:macro> <cpp:value>dn_u._xlator._membs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_provname</name></cpp:macro> <cpp:value>dn_u._provider._name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_provider</name></cpp:macro> <cpp:value>dn_u._provider._pvp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_provred</name></cpp:macro> <cpp:value>dn_u._provider._redecl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_probes</name></cpp:macro> <cpp:value>dn_u._provider._probes</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_conditional</name></cpp:macro> <cpp:value>dn_u._conditional._conditional</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_body</name></cpp:macro> <cpp:value>dn_u._conditional._body</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dn_alternate_body</name></cpp:macro> <cpp:value>dn_u._conditional._alternate_body</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_FREE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_INT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_STRING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_IDENT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_VAR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_SYM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_TYPE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_FUNC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_OP1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_OP2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_OP3</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_DEXPR</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_DFUNC</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_AGG</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_PDESC</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_CLAUSE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_INLINE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_MEMBER</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_XLATOR</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_PROBE</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_PROVIDER</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_PROG</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NODE_IF</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_SIGNED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_COOKED</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_REF</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_LVALUE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_WRITABLE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_BITFIELD</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NF_USERLAND</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_TYPE_NAMELEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_integer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_scalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_arith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_vfptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_dynamic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_stack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_symaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_usymaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_strcompat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_pointer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_void</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_ptrcompat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_argcompat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_posconst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_is_actfunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_int</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_ident</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_type</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_vatype</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_decl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_func</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_offsetof</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_op1</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_op2</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_op3</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_statement</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_pdesc_by_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_pdesc_by_id</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_clause</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_inline</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_member</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_xlator</name><parameter_list>(<parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_probe</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_provider</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_program</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_if</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_link</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_cook</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dt_node_xalloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_free</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dtrace_attribute_t</name></type> <name>dt_node_list_cook</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_list_free</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_link_free</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_attr_assign</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_type_assign</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>, <parameter><decl><type><name>boolean_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_type_propagate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_node_type_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>dt_node_type_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_node_resolve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>dt_node_sizeof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_promote</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_diftype</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_diftype_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_node_printr</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_printd</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_node_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_node_root</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<struct_decl>struct <name>dtrace_typeinfo</name>;</struct_decl>
<struct_decl>struct <name>dt_pcb</name>;</struct_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CHAR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((e).cte_format &amp; (CTF_INT_CHAR | CTF_INT_SIGNED)) == (CTF_INT_CHAR | CTF_INT_SIGNED) &amp;&amp; (e).cte_bits == NBBY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_VOID</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((e).cte_offset == 0 &amp;&amp; (e).cte_bits == 0)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_type_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dtrace_typeinfo</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_type_pointer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dtrace_typeinfo</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_type_name</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<typedef>typedef <type><enum>enum <block>{
<decl><name>YYS_CLAUSE</name></decl>,
<decl><name>YYS_DEFINE</name></decl>,
<decl><name>YYS_EXPR</name></decl>,
<decl><name>YYS_DONE</name></decl>,
<decl><name>YYS_CONTROL</name></decl>
}</block></enum></type> <name>yystate_t</name>;</typedef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dnerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_errtag_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dnwarn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_errtag_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>xyerror</name><parameter_list>(<parameter><decl><type><name>dt_errtag_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>xywarn</name><parameter_list>(<parameter><decl><type><name>dt_errtag_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>xyvwarn</name><parameter_list>(<parameter><decl><type><name>dt_errtag_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yywarn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yyvwarn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yylabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yybegin</name><parameter_list>(<parameter><decl><type><name>yystate_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>yyinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_pcb</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yyparse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yyinput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
