<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_list.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_list.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type>
<name>dt_list_append</name><parameter_list>(<parameter><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>new</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_list_prepend</name><parameter_list>(<parameter><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>new</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_list_insert</name><parameter_list>(<parameter><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>after_me</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>after_me</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>new</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_list_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dl_next</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_list_delete</name><parameter_list>(<parameter><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>existing</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dl_prev</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dl_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dl_next</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dl_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_prev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dl_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
