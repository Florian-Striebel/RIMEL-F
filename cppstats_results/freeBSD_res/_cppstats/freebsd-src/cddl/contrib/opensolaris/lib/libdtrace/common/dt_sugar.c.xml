<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_sugar.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_printf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_grammar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_ident.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>dt_sugar_parse</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtsp_dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dtsp_pdescs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtsp_num_conditions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtsp_num_ifs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dtsp_clause_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_sugar_parse_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dt_sugar_visit_stmts</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_sugar_new_error_var</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_PTR</name></expr></argument>, <argument><expr><call><name>dt_node_ident</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"self"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dt_node_ident</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"%error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_sugar_append_clause</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_clause_list</name></name> <operator>=</operator> <call><name>dt_node_link</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_clause_list</name></name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_sugar_prepend_clause</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_clause_list</name></name> <operator>=</operator> <call><name>dt_node_link</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_clause_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_sugar_new_condition_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>condid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>condid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>condid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%%condition_%d"</literal></expr></argument>, <argument><expr><call><name>ABS</name><argument_list>(<argument><expr><name>condid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_PTR</name></expr></argument>, <argument><expr><call><name>dt_node_ident</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"this"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dt_node_ident</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_sugar_new_condition_impl</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>condid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newcond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>body</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newpred</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newpred</name> <operator>=</operator> <call><name>dt_node_op1</name><argument_list>(<argument><expr><name>DT_TOK_LNEG</name></expr></argument>, <argument><expr><call><name>dt_sugar_new_error_var</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>condid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_LAND</name></expr></argument>, <argument><expr><call><name>dt_node_int</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_LAND</name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_condition_var</name><argument_list>(<argument><expr><name>condid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>body</name> <operator>=</operator> <call><name>dt_node_statement</name><argument_list>(<argument><expr><call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_ASGN</name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_condition_var</name><argument_list>(<argument><expr><name>newcond</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_node_clause</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_pdescs</name></name></expr></argument>, <argument><expr><name>newpred</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_sugar_new_condition</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>condid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_num_conditions</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_append_clause</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><call><name>dt_sugar_new_condition_impl</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,
<argument><expr><name>pred</name></expr></argument>, <argument><expr><name>condid</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_num_conditions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>dtsp_num_conditions</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_sugar_visit_all</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_NODE_FREE</name></expr>:</case>
<case>case <expr><name>DT_NODE_INT</name></expr>:</case>
<case>case <expr><name>DT_NODE_STRING</name></expr>:</case>
<case>case <expr><name>DT_NODE_SYM</name></expr>:</case>
<case>case <expr><name>DT_NODE_TYPE</name></expr>:</case>
<case>case <expr><name>DT_NODE_PROBE</name></expr>:</case>
<case>case <expr><name>DT_NODE_PDESC</name></expr>:</case>
<case>case <expr><name>DT_NODE_IDENT</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DT_NODE_FUNC</name></expr>:</case>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>DT_NODE_OP1</name></expr>:</case>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_OP2</name></expr>:</case>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_LBRAC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>ln</name><operator>-&gt;</operator><name>dn_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_OP3</name></expr>:</case>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_DEXPR</name></expr>:</case>
<case>case <expr><name>DT_NODE_DFUNC</name></expr>:</case>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_AGG</name></expr>:</case>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_aggtup</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_aggfun</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_aggfun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_CLAUSE</name></expr>:</case>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_pdescs</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_pred</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_acts</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>DT_NODE_INLINE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idnode_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>inp</name><operator>-&gt;</operator><name>din_root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DT_NODE_MEMBER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_XLATOR</name></expr>:</case>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_members</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>DT_NODE_PROVIDER</name></expr>:</case>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_probes</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>DT_NODE_PROG</name></expr>:</case>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>DT_NODE_IF</name></expr>:</case>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_num_ifs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_conditional</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_body</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_alternate_body</name></name></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dnerror</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"bad node %p, kind %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dnp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_sugar_new_clearerror_clause</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>dt_node_statement</name><argument_list>(<argument><expr><call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_ASGN</name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_error_var</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>dt_node_int</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>dt_node_clause</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_pdescs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_sugar_do_if</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>if_stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precondition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>if_stmt</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_IF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newid</name> <operator>=</operator> <call><name>dt_sugar_new_condition</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,
<argument><expr><name><name>if_stmt</name><operator>-&gt;</operator><name>dn_conditional</name></name></expr></argument>, <argument><expr><name>precondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_stmts</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>if_stmt</name><operator>-&gt;</operator><name>dn_body</name></name></expr></argument>, <argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>if_stmt</name><operator>-&gt;</operator><name>dn_alternate_body</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pred</name> <init>=
<expr><call><name>dt_node_op1</name><argument_list>(<argument><expr><name>DT_TOK_LNEG</name></expr></argument>, <argument><expr><call><name>dt_sugar_new_condition_var</name><argument_list>(<argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_stmts</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>if_stmt</name><operator>-&gt;</operator><name>dn_alternate_body</name></name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_condition</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><name>precondition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_sugar_new_basic_block</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>condid</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>stmts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>condid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_num_conditions</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>dt_node_op1</name><argument_list>(<argument><expr><name>DT_TOK_LNEG</name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_error_var</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_LAND</name></expr></argument>,
<argument><expr><call><name>dt_node_op1</name><argument_list>(<argument><expr><name>DT_TOK_LNEG</name></expr></argument>, <argument><expr><call><name>dt_sugar_new_error_var</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dt_sugar_new_condition_var</name><argument_list>(<argument><expr><name>condid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dt_sugar_append_clause</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,
<argument><expr><call><name>dt_node_clause</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtsp_pdescs</name></name></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><name>stmts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_sugar_visit_stmts</name><parameter_list>(<parameter><decl><type><name>dt_sugar_parse_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>stmts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precondition</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>prev_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>next_stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>first_stmt_in_basic_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>stmt</name> <operator>=</operator> <name>stmts</name></expr>;</init> <condition><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>stmt</name> <operator>=</operator> <name>next_stmt</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next_stmt</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first_stmt_in_basic_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_stmt_in_basic_block</name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev_stmt</name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_stmt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev_stmt</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>first_stmt_in_basic_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_new_basic_block</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>precondition</name></expr></argument>,
<argument><expr><name>first_stmt_in_basic_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_sugar_do_if</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>precondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_stmt_in_basic_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_stmt</name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>first_stmt_in_basic_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_new_basic_block</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>precondition</name></expr></argument>,
<argument><expr><name>first_stmt_in_basic_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_sugar_makeerrorclause</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>acts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pdesc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pdesc</name> <operator>=</operator> <call><name>dt_node_pdesc_by_name</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"dtrace:::ERROR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acts</name> <operator>=</operator> <call><name>dt_node_statement</name><argument_list>(<argument><expr><call><name>dt_node_op2</name><argument_list>(<argument><expr><name>DT_TOK_ASGN</name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_error_var</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>dt_node_int</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_node_clause</name><argument_list>(<argument><expr><name>pdesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>acts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_compile_sugar</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_sugar_parse_t</name></type> <name>dp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>condid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>dtsp_dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>dtsp_pdescs</name></name> <operator>=</operator> <name><name>clause</name><operator>-&gt;</operator><name>dn_pdescs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yyintdecimal</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyintsuffix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yyintprefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_visit_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>.</operator><name>dtsp_num_ifs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dp</name><operator>.</operator><name>dtsp_num_conditions</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_append_clause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><call><name>dt_node_clause</name><argument_list>(<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>dn_pdescs</name></name></expr></argument>,
<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>dn_pred</name></name></expr></argument>, <argument><expr><name><name>clause</name><operator>-&gt;</operator><name>dn_acts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clause</name><operator>-&gt;</operator><name>dn_pred</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>condid</name> <operator>=</operator> <call><name>dt_sugar_new_condition</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>,
<argument><expr><name><name>clause</name><operator>-&gt;</operator><name>dn_pred</name></name></expr></argument>, <argument><expr><name>condid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>clause</name><operator>-&gt;</operator><name>dn_acts</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_new_basic_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><name>condid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_visit_stmts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><name><name>clause</name><operator>-&gt;</operator><name>dn_acts</name></name></expr></argument>, <argument><expr><name>condid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>.</operator><name>dtsp_num_conditions</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_sugar_prepend_clause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>,
<argument><expr><call><name>dt_sugar_new_clearerror_clause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>.</operator><name>dtsp_clause_list</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>dp</name><operator>.</operator><name>dtsp_clause_list</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_has_sugar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_has_sugar</name></name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_sugar_prepend_clause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><call><name>dt_sugar_makeerrorclause</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>dp</name><operator>.</operator><name>dtsp_clause_list</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
