<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_buf.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_buf.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type>
<name>dt_buf_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>_dtrace_bufsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>=</operator> <call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_resizes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_buf_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"dt_buf_destroy(%s): size=%lu resizes=%u\n"</literal></expr></argument>,
<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_resizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_buf_reset</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_name</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_buf_write</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>adj</name> <init>= <expr><call><name>roundup</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>off</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>+</operator> <name>adj</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name> <operator>+</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>new_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>+</operator> <name>adj</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name> <operator>+</operator> <name>new_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_buf</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>=</operator> <call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name></expr></argument>, <argument><expr><name>new_buf</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>=</operator> <name>new_buf</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_resizes</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_buf_concat</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_buf_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dbu_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dbu_err</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dbu_buf</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>-</operator> <name><name>src</name><operator>-&gt;</operator><name>dbu_buf</name></name><operator>)</operator></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>size_t</name></type>
<name>dt_buf_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>roundup</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>size_t</name></type>
<name>dt_buf_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dt_buf_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>dt_buf_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>dt_buf_claim</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_buf</name></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbu_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbu_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
