<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_printf.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libctf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct_decl>struct <name>dt_node</name>;</struct_decl>
<struct_decl>struct <name>dt_ident</name>;</struct_decl>
<struct_decl>struct <name>dt_pfconv</name>;</struct_decl>
<struct_decl>struct <name>dt_pfargv</name>;</struct_decl>
<struct_decl>struct <name>dt_pfargd</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>int</name></type> <name>dt_pfcheck_f</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_pfargv</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dt_pfargd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>dt_pfprint_f</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dt_pfargd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>dt_pfconv</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfc_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfc_ofmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfc_tstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfcheck_f</name> <modifier>*</modifier></type><name>pfc_check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfprint_f</name> <modifier>*</modifier></type><name>pfc_print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>pfc_cctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>pfc_ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>pfc_dctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>pfc_dtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_pfconv</name></name> <modifier>*</modifier></type><name>pfc_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pfconv_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_pfdict</name> <block>{
<decl_stmt><decl><type><name>dt_pfconv_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pdi_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pdi_nbuckets</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pfdict_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_pfargd</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfd_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pfd_preflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pfd_fmt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pfd_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfd_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfd_dynwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfd_prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfconv_t</name> <modifier>*</modifier></type><name>pfd_conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>pfd_rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_pfargd</name></name> <modifier>*</modifier></type><name>pfd_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pfargd_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_ALT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_ZPAD</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_LEFT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_SPOS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_DYNWIDTH</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_DYNPREC</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_GROUP</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_SPACE</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_AGG</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PFCONV_SIGNED</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dt_pfargv</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>pfv_dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pfv_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pfargd_t</name> <modifier>*</modifier></type><name>pfv_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pfv_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pfv_flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pfargv_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dt_pfwalk</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_pfargv_t</name> <modifier>*</modifier></type><name>pfw_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pfw_aid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pfw_fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfw_err</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pfwalk_t</name>;</typedef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_pfdict_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_pfdict_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_pfargv_t</name> <modifier>*</modifier></type><name>dt_printf_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_printf_destroy</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PRINTF_EXACTLEN</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PRINTF_AGGREGATION</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_printf_validate</name><parameter_list>(<parameter><decl><type><name>dt_pfargv_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dt_ident</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>dtrace_actkind_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_printa_validate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dt_node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_stack</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>caddr_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_ustack</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>caddr_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_mod</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>caddr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_umod</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>caddr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
