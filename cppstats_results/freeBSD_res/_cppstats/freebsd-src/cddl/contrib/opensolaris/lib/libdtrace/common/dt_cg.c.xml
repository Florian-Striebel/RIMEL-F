<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_cg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/isa_defs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_grammar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dt_cg_node</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>dt_irnode_t</name> <modifier>*</modifier></type>
<name>dt_cg_node_alloc</name><parameter_list>(<parameter><decl><type><name>uint_t</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_irnode_t</name> <modifier>*</modifier></type><name>dip</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_irnode_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dip</name><operator>-&gt;</operator><name>di_label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name> <operator>=</operator> <name>instr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dip</name><operator>-&gt;</operator><name>di_extern</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dip</name><operator>-&gt;</operator><name>di_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>dip</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>ctf_file_t</name> <modifier>*</modifier></type>
<name>dt_cg_membinfo</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ctf_membinfo_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_FORWARD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dt_type_lookup</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator>
<name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>==</operator> <name>fp</name> <operator>&amp;&amp;</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>==</operator> <name>type</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>ctf_member_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_xsetx</name><parameter_list>(<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>lbl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><ternary><condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>DT_INT_PRIVATE</name></expr> </then><else>: <expr><name>DT_INT_SHARED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intoff</name> <init>= <expr><call><name>dt_inttab_insert</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name> <init>= <expr><call><name>DIF_INSTR_SETX</name><argument_list>(<argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><name>intoff</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>intoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>intoff</name> <operator>&gt;</operator> <name>DIF_INTOFF_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_INT2BIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_last</name><operator>-&gt;</operator><name>di_extern</name></name> <operator>=</operator> <name>idp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_setx</name><parameter_list>(<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_cg_xsetx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>clp2</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint_t</name></type>
<name>dt_cg_load</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint_t</name></type> <name><name>ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>DIF_OP_LDUB</name></expr>, <expr><name>DIF_OP_LDUH</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_LDUW</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_LDX</name></expr>,
<expr><name>DIF_OP_LDSB</name></expr>, <expr><name>DIF_OP_LDSH</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_LDSW</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_LDX</name></expr>,
<expr><name>DIF_OP_ULDUB</name></expr>, <expr><name>DIF_OP_ULDUH</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_ULDUW</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_ULDX</name></expr>,
<expr><name>DIF_OP_ULDSB</name></expr>, <expr><name>DIF_OP_ULDSH</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_ULDSW</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_OP_ULDX</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_BITFIELD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>clp2</name><argument_list>(<argument><expr><call><name>P2ROUNDUP</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>size</name></expr></argument> &gt;</argument_list></name> <literal type="number">8</literal> <operator>||</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error -- cg cannot load "</literal>
<literal type="string">"size %ld when passed by value\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_USERLAND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>|=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>ops</name><index>[<expr><name>size</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_ptrsize</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dreg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sreg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>kind</name> <operator>==</operator> <name>CTF_K_POINTER</name> <operator>||</operator> <name>kind</name> <operator>==</operator> <name>CTF_K_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_ARRAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>=</operator> <call><name>ctf_errno</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>ctr_contents</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sreg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>sreg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>dreg</name></expr></argument>, <argument><expr><name>sreg</name></expr></argument>, <argument><expr><name>dreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>sreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_field_get</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>,
<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_membinfo_t</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"cg: bad field: off %lu type &lt;%ld&gt; "</literal>
<literal type="string">"bits %u\n"</literal></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_PTR</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_DOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>clp2</name><argument_list>(<argument><expr><call><name>P2ROUNDUP</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>NBBY</name> <operator>-</operator>
<name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>%</operator> <name>NBBY</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>%</operator> <name>NBBY</name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SLL</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SRA</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>clp2</name><argument_list>(<argument><expr><call><name>P2ROUNDUP</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>NBBY</name> <operator>-</operator>
<operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>%</operator> <name>NBBY</name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>%</operator> <name>NBBY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SRL</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_AND</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_cg_field_set</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>,
<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cmask</name></decl>, <decl><type ref="prev"/><name>fmask</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_membinfo_t</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ofp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_PTR</name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_DOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_PTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>dt_cg_membinfo</name><argument_list>(<argument><expr><name>ofp</name> <operator>=</operator> <name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>=</operator> <call><name>ctf_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>ctm_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"cg: bad field: off %lu type &lt;%ld&gt; "</literal>
<literal type="string">"bits %u\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>ctm_offset</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>ctm_type</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r3</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>clp2</name><argument_list>(<argument><expr><call><name>P2ROUNDUP</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>NBBY</name> <operator>-</operator>
<operator>(</operator><name><name>m</name><operator>.</operator><name>ctm_offset</name></name> <operator>%</operator> <name>NBBY</name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>ctm_offset</name></name> <operator>%</operator> <name>NBBY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fmask</name> <operator>=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>cte_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>fmask</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LOAD</name><argument_list>(
<argument><expr><call><name>dt_cg_load</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>ctm_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>cmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_AND</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>fmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_AND</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SLL</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_OR</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r1</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_store</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_BITFIELD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>clp2</name><argument_list>(<argument><expr><call><name>P2ROUNDUP</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>cte_bits</name></name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_COPYS</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_BITFIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_cg_field_set</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STB</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STH</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STW</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STX</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error -- cg cannot store "</literal>
<literal type="string">"size %lu when passed by value\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_BITFIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_typecast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>srcsize</name> <init>= <expr><call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dstsize</name> <init>= <expr><call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dt_node_is_scalar</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dstsize</name> <operator>==</operator> <name>srcsize</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>^</operator> <name><name>dst</name><operator>-&gt;</operator><name>dn_flags</name></name><operator>)</operator> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dstsize</name> <operator>&gt;</operator> <name>srcsize</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dstsize</name> <operator>&gt;</operator> <name>srcsize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NBBY</name> <operator>-</operator> <name>srcsize</name> <operator>*</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>dstsize</name> <operator>-</operator> <name>srcsize</name><operator>)</operator> <operator>*</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SLL</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator> <operator>||</operator> <name>n</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SRA</name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SRA</name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SRL</name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dstsize</name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NBBY</name> <operator>-</operator> <name>dstsize</name> <operator>*</operator> <name>NBBY</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SLL</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then>
<expr><name>DIF_OP_SRA</name></expr> </then><else>: <expr><name>DIF_OP_SRL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>rg</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>rg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_arglist</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idsig_t</name> <modifier>*</modifier></type><name>isp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name>args</name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>DIF_INSTR_FLUSHTS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name>args</name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_diftype_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_node_diftype</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></argument>, <argument><expr><name>dnp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dn_reg</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_typecast</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dn_reg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>dtdt_flags</name></name> <operator>&amp;</operator> <name>DIF_TF_BYREF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_PUSHTR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>dtdt_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dtdt_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <name>DIF_REG_R0</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_PUSHTV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <name>DIF_REG_R0</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_PUSHTS</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dtdt_kind</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>DIF_REG_R0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_diftupregs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOTUPREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_arithmetic_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>,
<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_ptr_op</name> <init>= <expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_ADD</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_SUB</name> <operator>||</operator>
<name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_ADD_EQ</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_SUB_EQ</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lp_is_ptr</name> <init>= <expr><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rp_is_ptr</name> <init>= <expr><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lp_is_ptr</name> <operator>&amp;&amp;</operator> <name>rp_is_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_ptr_op</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_ptr_op</name> <operator>&amp;&amp;</operator> <name>rp_is_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_ptrsize</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_MUL</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_ptr_op</name> <operator>&amp;&amp;</operator> <name>lp_is_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_ptrsize</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_MUL</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lp_is_ptr</name> <operator>&amp;&amp;</operator> <name>rp_is_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_ptrsize</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>,
<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_UDIV</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>uint_t</name></type>
<name>dt_cg_stvar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint_t</name></type> <name><name>aops</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>DIF_OP_STGAA</name></expr>, <expr><name>DIF_OP_STTAA</name></expr>, <expr><name>DIF_OP_NOP</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint_t</name></type> <name><name>sops</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>DIF_OP_STGS</name></expr>, <expr><name>DIF_OP_STTS</name></expr>, <expr><name>DIF_OP_STLS</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_LOCAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_TLS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr> ?</condition><then> <expr><name><name>aops</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>sops</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_prearith_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><call><name>dt_ident_resolve</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STV</name><argument_list>(<argument><expr><call><name>dt_cg_stvar</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>rbit</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_LVALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_store</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>rbit</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_postarith_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>,
<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nreg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_pointer</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nreg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>nreg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>nreg</name></expr></argument>, <argument><expr><name>nreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><call><name>dt_ident_resolve</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STV</name><argument_list>(<argument><expr><call><name>dt_cg_stvar</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name>nreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>rbit</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oreg</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_LVALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name>nreg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_store</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name>oreg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>rbit</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>nreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_cg_compare_signed</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name></type> <name>dn</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_string</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>dt_node_is_string</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>dt_node_is_arith</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>dt_node_is_arith</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_promote</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dn</name><operator>.</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_compare_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_true</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_post</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>opc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_string</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dt_node_is_string</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opc</name> <operator>=</operator> <name>DIF_OP_SCMP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>opc</name> <operator>=</operator> <name>DIF_OP_CMP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_CMP</name><argument_list>(<argument><expr><name>opc</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>lbl_true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BA</name></expr></argument>, <argument><expr><name>lbl_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_xsetx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lbl_true</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_post</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_ternary_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_false</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_post</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_irnode_t</name> <modifier>*</modifier></type><name>dip</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_expr</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_expr</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_expr</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>DIF_REG_R0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dip</name> <operator>=</operator> <call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>dip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BA</name></expr></argument>, <argument><expr><name>lbl_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_false</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_post</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_logical_and</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_false</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_post</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BA</name></expr></argument>, <argument><expr><name>lbl_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_false</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_post</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_logical_xor</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_next</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_tail</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_next</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_XOR</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_tail</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_logical_or</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_true</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_false</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_post</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BNE</name></expr></argument>, <argument><expr><name>lbl_true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_xsetx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lbl_true</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BA</name></expr></argument>, <argument><expr><name>lbl_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_false</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_post</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_logical_neg</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_zero</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lbl_post</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BE</name></expr></argument>, <argument><expr><name>lbl_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BA</name></expr></argument>, <argument><expr><name>lbl_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_xsetx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lbl_zero</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>lbl_post</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_asgn_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_node_resolve</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>DT_IDENT_XLSOU</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ctf_membinfo_t</name></type> <name>ctm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>mnp</name></decl>, <decl><type ref="prev"/><name>dn</name></decl>, <decl><type ref="prev"/><name>mn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_kind</name></name> <operator>=</operator> <name>DT_NODE_OP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_op</name></name> <operator>=</operator> <name>DT_TOK_DOT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_left</name></name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_right</name></name> <operator>=</operator> <operator>&amp;</operator><name>mn</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mn</name><operator>.</operator><name>dn_kind</name></name> <operator>=</operator> <name>DT_NODE_IDENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mn</name><operator>.</operator><name>dn_op</name></name> <operator>=</operator> <name>DT_TOK_IDENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>,
<argument><expr><call><name>ctf_type_size</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_ALLOCS</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mnp</name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name></expr>;</init> <condition><expr><name>mnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mnp</name> <operator>=</operator> <name><name>mnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_typecast</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>, <argument><expr><name>mnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_member_info</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>,
<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>=</operator>
<call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctm</name><operator>.</operator><name>ctm_offset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name><name>ctm</name><operator>.</operator><name>ctm_offset</name></name> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_ADD</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_type_propagate</name><argument_list>(<argument><expr><name>mnp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_string</name></name> <operator>=</operator> <name><name>mnp</name><operator>-&gt;</operator><name>dn_membname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_reg</name></name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_store</name><argument_list>(<argument><expr><name>mnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_node_type_propagate</name><argument_list>(<argument><expr><name>mnp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_string</name></name> <operator>=</operator> <name><name>mnp</name><operator>-&gt;</operator><name>dn_membname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dn</name><operator>.</operator><name>dn_reg</name></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_store</name><argument_list>(<argument><expr><name>mnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>==</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_ident_resolve</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_arglist</name><argument_list>(<argument><expr><name>idp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_args</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STV</name><argument_list>(<argument><expr><call><name>dt_cg_stvar</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>rbit</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_LVALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_store</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>rbit</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_assoc_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_LOCAL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_arglist</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_TLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDTAA</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDGAA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LDV</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>stvop</name> <init>= <expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>DIF_OP_LDTAA</name></expr> ?</condition><then> <expr><name>DIF_OP_STTAA</name></expr> </then><else>: <expr><name>DIF_OP_STGAA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>label</name> <init>= <expr><call><name>dt_irlist_label</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_TST</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>DIF_OP_BNE</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_ALLOCS</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STV</name><argument_list>(<argument><expr><name>stvop</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LDV</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>DIF_INSTR_NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_array_op</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_probe</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>saved</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_LOCAL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>==</operator> <name>DIF_VAR_ARGS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_XLPTR</name> <operator>||</operator>
<name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_XLSOU</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>dt_xlator_dynamic</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_value</name></name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name><index>[<expr><name>saved</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_value</name></name> <operator>=</operator> <name>saved</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_TLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDTA</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDGA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LDA</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>!=</operator> <name>DIF_VAR_ARGS</name> <operator>||</operator> <operator>!</operator><call><name>dt_node_is_scalar</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>dt_node_type_size</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NBBY</name> <operator>-</operator> <name>size</name> <operator>*</operator> <name>NBBY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SLL</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then>
<expr><name>DIF_OP_SRA</name></expr> </then><else>: <expr><name>DIF_OP_SRL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_inline</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idnode_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idnode_t</name> <modifier>*</modifier></type><name>pinp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_INLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>dt_idops_inline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name></name></expr>;</init>
<condition><expr><name>pnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pnp</name> <operator>=</operator> <name><name>pnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inp</name><operator>-&gt;</operator><name>din_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pinp</name> <operator>=</operator> <name><name>inp</name><operator>-&gt;</operator><name>din_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>di_iarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pinp</name><operator>-&gt;</operator><name>din_root</name></name> <operator>=</operator> <name>pnp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>din_root</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>inp</name><operator>-&gt;</operator><name>din_root</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_typecast</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>din_root</name></name></expr></argument>, <argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inp</name><operator>-&gt;</operator><name>din_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pinp</name> <operator>=</operator> <name><name>inp</name><operator>-&gt;</operator><name>din_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>di_iarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pinp</name><operator>-&gt;</operator><name>din_root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <name>dt_xlmemb</name> <block>{
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>dtxl_idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dtxl_dlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>dtxl_drp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtxl_sreg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtxl_dreg</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_xlmemb_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_cg_xlate_member</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_xlmemb_t</name> <modifier>*</modifier></type><name>dx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><name><name>dx</name><operator>-&gt;</operator><name>dtxl_idp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name> <init>= <expr><name><name>dx</name><operator>-&gt;</operator><name>dtxl_dlp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name> <init>= <expr><name><name>dx</name><operator>-&gt;</operator><name>dtxl_drp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>mnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>treg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dxp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mnp</name> <operator>=</operator> <call><name>dt_xlator_member</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mnp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <name><name>dx</name><operator>-&gt;</operator><name>dtxl_sreg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>treg</name> <operator>=</operator> <name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>off</name> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_ADD</name></expr></argument>, <argument><expr><name><name>dx</name><operator>-&gt;</operator><name>dtxl_dreg</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>,
<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_scalar</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STB</name></expr></argument>, <argument><expr><name>treg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STH</name></expr></argument>, <argument><expr><name>treg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STW</name></expr></argument>, <argument><expr><name>treg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_STORE</name><argument_list>(<argument><expr><name>DIF_OP_STX</name></expr></argument>, <argument><expr><name>treg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error -- unexpected "</literal>
<literal type="string">"size: %lu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dt_node_is_string</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>szreg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>szreg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_COPYS</name><argument_list>(<argument><expr><name>treg</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>szreg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>szreg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>DIF_INSTR_FLUSHTS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_PUSHTS</name><argument_list>(<argument><expr><name>DIF_OP_PUSHTV</name></expr></argument>, <argument><expr><name>DIF_TYPE_CTF</name></expr></argument>,
<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name>treg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_PUSHTS</name><argument_list>(<argument><expr><name>DIF_OP_PUSHTV</name></expr></argument>, <argument><expr><name>DIF_TYPE_CTF</name></expr></argument>,
<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_PUSHTS</name><argument_list>(<argument><expr><name>DIF_OP_PUSHTV</name></expr></argument>, <argument><expr><name>DIF_TYPE_CTF</name></expr></argument>,
<argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_CALL</name><argument_list>(<argument><expr><name>DIF_SUBR_BCOPY</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>szreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>treg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_cg_xlate_expand</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>,
<parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_xlmemb_t</name></type> <name>dlm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dreg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dreg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>dreg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>DIF_INSTR_FLUSHTS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_PUSHTS</name><argument_list>(<argument><expr><name>DIF_OP_PUSHTV</name></expr></argument>, <argument><expr><name>DIF_TYPE_CTF</name></expr></argument>, <argument><expr><name>DIF_REG_R0</name></expr></argument>, <argument><expr><name>dreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_CALL</name><argument_list>(<argument><expr><name>DIF_SUBR_ALLOCA</name></expr></argument>, <argument><expr><name>dreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlm</name><operator>.</operator><name>dtxl_idp</name></name> <operator>=</operator> <name>idp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlm</name><operator>.</operator><name>dtxl_dlp</name></name> <operator>=</operator> <name>dlp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlm</name><operator>.</operator><name>dtxl_drp</name></name> <operator>=</operator> <name>drp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlm</name><operator>.</operator><name>dtxl_sreg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlm</name><operator>.</operator><name>dtxl_dreg</name></name> <operator>=</operator> <name>dreg</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_member_iter</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>dt_cg_xlate_member</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>dreg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_cg_node</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>drp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>octfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_membinfo_t</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>stroff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>op</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_TOK_COMMA</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_ASGN</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_ADD_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_SUB_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_MUL_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_DIV_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>DIF_OP_SDIV</name></expr> </then><else>: <expr><name>DIF_OP_UDIV</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_MOD_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>DIF_OP_SREM</name></expr> </then><else>: <expr><name>DIF_OP_UREM</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_AND_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_XOR_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_OR_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LSH_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_SLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_RSH_EQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>DIF_OP_SRA</name></expr> </then><else>: <expr><name>DIF_OP_SRL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_asgn_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_QUESTION</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_ternary_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LOR</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_logical_or</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LXOR</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_logical_xor</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LAND</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_logical_and</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_BOR</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_XOR</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_BAND</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_EQU</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_compare_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_NEQ</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_compare_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_BNE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LT</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_compare_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>dt_cg_compare_signed</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DIF_OP_BL</name></expr> </then><else>: <expr><name>DIF_OP_BLU</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LE</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_compare_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>dt_cg_compare_signed</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DIF_OP_BLE</name></expr> </then><else>: <expr><name>DIF_OP_BLEU</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_GT</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_compare_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>dt_cg_compare_signed</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DIF_OP_BG</name></expr> </then><else>: <expr><name>DIF_OP_BGU</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_GE</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_compare_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>dt_cg_compare_signed</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DIF_OP_BGE</name></expr> </then><else>: <expr><name>DIF_OP_BGEU</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LSH</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_SLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_RSH</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>DIF_OP_SRA</name></expr> </then><else>: <expr><name>DIF_OP_SRL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_ADD</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_SUB</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_MUL</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_DIV</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>DIF_OP_SDIV</name></expr> </then><else>: <expr><name>DIF_OP_UDIV</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_MOD</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_arithmetic_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>DIF_OP_SREM</name></expr> </then><else>: <expr><name>DIF_OP_UREM</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LNEG</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_logical_neg</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_BNEG</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_NOT</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_PREINC</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_prearith_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_POSTINC</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_postarith_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_PREDEC</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_prearith_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_POSTDEC</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_postarith_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>DIF_OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_IPOS</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_INEG</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_SUB</name></expr></argument>, <argument><expr><name>DIF_REG_R0</name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_DEREF</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_dynamic</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_node_resolve</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>DT_IDENT_XLPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_cg_xlate_expand</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>ubit</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_USERLAND</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator>
<operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_USERLAND</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LOAD</name><argument_list>(<argument><expr><call><name>dt_cg_load</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>ctfp</name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_NF_USERLAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>ubit</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_ADDROF</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>rbit</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_NF_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>rbit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DT_TOK_SIZEOF</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>dt_node_sizeof</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DT_TOK_STRINGOF</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_child</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_XLATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_XLATOR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_xlator</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_CGREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_arg</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(
<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_XLATE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_XLARG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_XLATE</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_last</name><operator>-&gt;</operator><name>di_extern</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_xmember</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_OP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_LPAR</name></expr>:</case>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_typecast</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name></name></expr></argument>, <argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_PTR</name></expr>:</case>
<case>case <expr><name>DT_TOK_DOT</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_node_resolve</name><argument_list>(
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>DT_IDENT_XLSOU</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_node_resolve</name><argument_list>(
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name></name></expr></argument>, <argument><expr><name>DT_IDENT_XLPTR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>mnp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dxp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mnp</name> <operator>=</operator> <call><name>dt_xlator_member</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mnp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_typecast</name><argument_list>(<argument><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr></argument>, <argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ctfp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>==</operator> <name>DT_TOK_PTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctfp</name> <operator>=</operator> <call><name>dt_cg_membinfo</name><argument_list>(<argument><expr><name>octfp</name> <operator>=</operator> <name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_right</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>=</operator> <call><name>ctf_errno</name><argument_list>(<argument><expr><name>octfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>.</operator><name>ctm_offset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>ctm_offset</name></name> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_FMT</name><argument_list>(<argument><expr><name>DIF_OP_ADD</name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name>drp</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>ubit</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_USERLAND</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator>
<operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_USERLAND</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LOAD</name><argument_list>(<argument><expr><call><name>dt_cg_load</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>,
<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>ctm_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_NF_USERLAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>ubit</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_BITFIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_field_get</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>, <argument><expr><name>ctfp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_left</name><operator>-&gt;</operator><name>dn_reg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_STRING</name></expr>:</case>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stroff</name> <operator>=</operator> <call><name>dt_strtab_insert</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stroff</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stroff</name> <operator>&gt;</operator> <name>DIF_STROFF_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_STR2BIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_SETS</name><argument_list>(<argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>stroff</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_TOK_IDENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_CGREG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_MOV</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_VAR</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_INLINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_cg_inline</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_NODE_FUNC</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name><operator>)</operator><operator>-&gt;</operator><name>di_kind</name> <operator>!=</operator> <name>DT_IDENT_FUNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dnerror</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>D_CG_EXPR</name></expr></argument>, <argument><expr><literal type="string">"%s %s( ) may not be "</literal>
<literal type="string">"called from a D expression (D program "</literal>
<literal type="string">"context required)\n"</literal></expr></argument>,
<argument><expr><call><name>dt_idkind_name</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_arglist</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_args</name></name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_CALL</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>DT_NODE_VAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_XLSOU</name> <operator>||</operator>
<name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_XLPTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>==</operator> <name>DIF_VAR_ARGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_array_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>&gt;</operator> <name>DIF_VAR_ARRAY_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_assoc_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_cg_array_op</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>dlp</name></expr></argument>, <argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDLS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_TLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDTS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>DIF_OP_LDGS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_DIFR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LDV</name><argument_list>(<argument><expr><name>op</name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_NODE_SYM</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_syminfo_t</name> <modifier>*</modifier></type><name>sip</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"cg failed for symbol %s`%s:"</literal>
<literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_object</name></name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>dts_name</name></name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_xsetx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr></argument>,
<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>.</operator><name>st_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_REF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_LOAD</name><argument_list>(<argument><expr><call><name>dt_cg_load</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>ctfp</name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>,
<argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error -- node type %u is "</literal>
<literal type="string">"not valid for an identifier\n"</literal></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>DT_TOK_INT</name></expr>:</case>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name>drp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_cg_setx</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error -- token type %u is not a "</literal>
<literal type="string">"valid D compilation token\n"</literal></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>dt_cg</name><parameter_list>(<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name> <operator>=</operator>
<call><name>dt_regset_create</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_difintregs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_regset_reset</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_inttab_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name> <operator>=</operator> <call><name>dt_inttab_create</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_strtab_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name> <operator>=</operator> <call><name>dt_strtab_create</name><argument_list>(<argument><expr><name>BUFSIZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dt_irlist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dret</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dret</name></name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_resolve</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>DT_IDENT_XLPTR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dnerror</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>D_CG_DYN</name></expr></argument>, <argument><expr><literal type="string">"expression cannot evaluate to result "</literal>
<literal type="string">"of a translated pointer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_MEMBER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dxp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_membxlator</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|=</operator> <name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <call><name>dt_regset_alloc</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_cg_node</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_node_resolve</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>DT_IDENT_XLSOU</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><call><name>dt_cg_xlate_expand</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>instr</name> <operator>=</operator> <call><name>DIF_INSTR_RET</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>, <argument><expr><call><name>dt_cg_node_alloc</name><argument_list>(<argument><expr><name>DT_LBL_NONE</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_MEMBER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_IDFLG_CGREG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dt_regset_free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_regset_assert_free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
