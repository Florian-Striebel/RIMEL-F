<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/cmd/dtrace/dtrace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;spawn.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>dtrace_cmd</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dc_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dtrace_cmd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>dtrace_probespec_t</name></type> <name>dc_spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dc_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dc_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dc_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>dc_prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dc_ofile</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>dtrace_cmd_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODE_VERS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODE_EXEC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODE_ANON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODE_LINK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODE_LIST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODE_HEADER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_USAGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DTRACE_OPTSTR</name><index>[]</index></name> <init>=
<expr><literal type="string">"3:6:aAb:Bc:CD:ef:FGhHi:I:lL:m:n:o:p:P:qs:SU:vVwx:X:Z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>g_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>g_objv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_objc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>g_cmdv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_cmdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>g_psv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_psc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_pslive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>g_pname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_flowindent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_intr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_impatient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_newline</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_siginfo</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_cflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_oflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_exec</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_mode</name> <init>= <expr><name>DMODE_EXEC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_status</name> <init>= <expr><name>E_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_grabanon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_ofile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>g_ofp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>g_dtp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>g_etcfile</name> <init>= <expr><literal type="string">"/etc/system"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_etcbegin</name> <init>= <expr><literal type="string">"* vvvv Added by DTrace"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_etcend</name> <init>= <expr><literal type="string">"* ^^^^ Added by DTrace"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>g_etc</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"*"</literal></expr>,
<expr><literal type="string">"* The following forceload directives were added by dtrace(1M) to allow for"</literal></expr>,
<expr><literal type="string">"* tracing during boot. If these directives are removed, the system will"</literal></expr>,
<expr><literal type="string">"* continue to function, but tracing will not occur during boot as desired."</literal></expr>,
<expr><literal type="string">"* To remove these directives (and this block comment) automatically, run"</literal></expr>,
<expr><literal type="string">"* \"dtrace -A\" without additional arguments. See the \"Anonymous Tracing\""</literal></expr>,
<expr><literal type="string">"* chapter of the Solaris Dynamic Tracing Guide for details."</literal></expr>,
<expr><literal type="string">"*"</literal></expr>,
<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>predact</name><index>[]</index></name> <init>= <expr><literal type="string">"[[ predicate ] action ]"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s [-32|-64] [-aACeFGhHlqSvVwZ] "</literal>
<literal type="string">"[-b bufsz] [-c cmd] [-D name[=def]]\n\t[-I path] [-L path] "</literal>
<literal type="string">"[-o output] [-p pid] [-s script] [-U name]\n\t"</literal>
<literal type="string">"[-x opt[=val]] [-X a|c|s|t]\n\n"</literal>
<literal type="string">"\t[-P provider %s]\n"</literal>
<literal type="string">"\t[-m [ provider: ] module %s]\n"</literal>
<literal type="string">"\t[-f [[ provider: ] module: ] func %s]\n"</literal>
<literal type="string">"\t[-n [[[ provider: ] module: ] func: ] name %s]\n"</literal>
<literal type="string">"\t[-i probe-id %s] [ args ... ]\n\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>,
<argument><expr><name>predact</name></expr></argument>, <argument><expr><name>predact</name></expr></argument>, <argument><expr><name>predact</name></expr></argument>, <argument><expr><name>predact</name></expr></argument>, <argument><expr><name>predact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\tpredicate -&gt; '/' D-expression '/'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t action -&gt; '{' D-statements '}'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal>
<literal type="string">"\t-32 generate 32-bit D programs and ELF files\n"</literal>
<literal type="string">"\t-64 generate 64-bit D programs and ELF files\n\n"</literal>
<literal type="string">"\t-a claim anonymous tracing state\n"</literal>
<literal type="string">"\t-A generate driver.conf(4) directives for anonymous tracing\n"</literal>
<literal type="string">"\t-b set trace buffer size\n"</literal>
<literal type="string">"\t-c run specified command and exit upon its completion\n"</literal>
<literal type="string">"\t-C run cpp(1) preprocessor on script files\n"</literal>
<literal type="string">"\t-D define symbol when invoking preprocessor\n"</literal>
<literal type="string">"\t-e exit after compiling request but prior to enabling probes\n"</literal>
<literal type="string">"\t-f enable or list probes matching the specified function name\n"</literal>
<literal type="string">"\t-F coalesce trace output by function\n"</literal>
<literal type="string">"\t-G generate an ELF file containing embedded dtrace program\n"</literal>
<literal type="string">"\t-h generate a header file with definitions for static probes\n"</literal>
<literal type="string">"\t-H print included files when invoking preprocessor\n"</literal>
<literal type="string">"\t-i enable or list probes matching the specified probe id\n"</literal>
<literal type="string">"\t-I add include directory to preprocessor search path\n"</literal>
<literal type="string">"\t-l list probes matching specified criteria\n"</literal>
<literal type="string">"\t-L add library directory to library search path\n"</literal>
<literal type="string">"\t-m enable or list probes matching the specified module name\n"</literal>
<literal type="string">"\t-n enable or list probes matching the specified probe name\n"</literal>
<literal type="string">"\t-o set output file\n"</literal>
<literal type="string">"\t-p grab specified process-ID and cache its symbol tables\n"</literal>
<literal type="string">"\t-P enable or list probes matching the specified provider name\n"</literal>
<literal type="string">"\t-q set quiet mode (only output explicitly traced data)\n"</literal>
<literal type="string">"\t-s enable or list probes according to the specified D script\n"</literal>
<literal type="string">"\t-S print D compiler intermediate code\n"</literal>
<literal type="string">"\t-U undefine symbol when invoking preprocessor\n"</literal>
<literal type="string">"\t-v set verbose mode (report stability attributes, arguments)\n"</literal>
<literal type="string">"\t-V report DTrace API version\n"</literal>
<literal type="string">"\t-w permit destructive actions\n"</literal>
<literal type="string">"\t-x enable or modify compiler and tracing options\n"</literal>
<literal type="string">"\t-X specify ISO C conformance settings for preprocessor\n"</literal>
<literal type="string">"\t-Z permit probe descriptions that match zero probes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>verror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">": %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verror</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g_dtp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>E_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dfatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NEED_ERRLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_errfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">": %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NEED_ERRLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dt_get_errloc</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_errfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_errfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"File '%s', line %d\n"</literal></expr></argument>, <argument><expr><name>p_errfile</name></expr></argument>, <argument><expr><name>errline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>E_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verror</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>notice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g_quiet</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verror</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>oprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g_ofp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to write to %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>g_ofile</name></expr> ?</condition><then> <expr><name>g_ofile</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>make_argv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><literal type="string">"\f\n\r\t\v "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>argv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dof_prune</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mark</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to fstat %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>sz</name> <operator>=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory for %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to read %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open %s for writing"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"dof-data-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mark</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dof-data-"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cleaned up old anonymous "</literal>
<literal type="string">"enabling in %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>mark</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>mark</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>mark</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name> <operator>-</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to write to %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sz</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mark</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>mark</name></expr>]</index></name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>mark</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name> <operator>-</operator> <name>mark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to write to %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bootdof_add</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>nbargv</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"nextboot"</literal></expr>, <expr><literal type="string">"-a"</literal></expr>,
<expr><literal type="string">"-e"</literal></expr>, <expr><literal type="string">"dtraceall_load=\"YES\""</literal></expr>,
<expr><literal type="string">"-e"</literal></expr>, <expr><literal type="string">"dtrace_dof_load=\"YES\""</literal></expr>,
<expr><literal type="string">"-e"</literal></expr>, <expr><literal type="string">"dtrace_dof_name=\"/boot/dtrace.dof\""</literal></expr>,
<expr><literal type="string">"-e"</literal></expr>, <expr><literal type="string">"dtrace_dof_type=\"dtrace_dof\""</literal></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>posix_spawnp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><literal type="string">"nextboot"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nbargv</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"failed to execute nextboot: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>E_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"waiting for nextboot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"nextboot returned with status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>E_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>etcsystem_prune</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>g_etcfile</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmpname</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to fstat %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>sz</name> <operator>=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory for %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to read %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>g_etcbegin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"embedded nul byte in %s; manual repair of %s "</literal>
<literal type="string">"required\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>g_etcbegin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"multiple start sentinels in %s; manual repair of %s "</literal>
<literal type="string">"required\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>g_etcend</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"missing end sentinel in %s; manual repair of %s "</literal>
<literal type="string">"required\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"end sentinel preceeds start sentinel in %s; manual "</literal>
<literal type="string">"repair of %s required\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>g_etcend</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpname</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>sz</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"%s.dtrace.%d"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to create %s"</literal></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to write to %s"</literal></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>chown</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name><name>sbuf</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>sbuf</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to chown(2) %s to uid %d, gid %d"</literal></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sbuf</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sbuf</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"rename of %s to %s failed"</literal></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cleaned up forceload directives in %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>etcsystem_add</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mods</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nmods</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g_ofp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>g_ofile</name> <operator>=</operator> <name>g_etcfile</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open output file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>g_etcbegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>g_etc</name><index>[<expr><name>line</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>g_etc</name><index>[<expr><name>line</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>nmods</name> <operator>=</operator> <call><name>dtrace_provider_modules</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>mods</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mods</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nmods</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mods</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"unexpectedly large number of modules!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mods</name><index>[<expr><name>nmods</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"dtrace"</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>nmods</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"forceload: drv/%s\n"</literal></expr></argument>, <argument><expr><name><name>mods</name><index>[<expr><name>line</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>g_etcend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to close output file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"added forceload directives to %s\n"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_probe_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_probeinfo_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n\tProbe Description Attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tIdentifier Names: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_attr</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tData Semantics: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_attr</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tDependency Class: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_class_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_attr</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n\tArgument Attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tIdentifier Names: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_arga</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tData Semantics: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_arga</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tDependency Class: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_class_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_arga</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n\tArgument Types\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>dtp_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dtp_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_flags</name> <operator>&amp;</operator> <name>DTT_FL_USER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>user</name> <operator>=</operator> <literal type="string">"userland "</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>user</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_ctfp</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dtp_argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtt_type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(unknown)"</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\targs[%d]: %s%s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dtp_argc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tNone\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>info_stmt</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_stmtdesc_t</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>, <parameter><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>edp</name> <init>= <expr><name><name>stp</name><operator>-&gt;</operator><name>dtsd_ecbdesc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name> <init>= <expr><operator>&amp;</operator><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probeinfo_t</name></type> <name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>edp</name> <operator>==</operator> <operator>*</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n%s:%s:%s:%s\n"</literal></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_probe_info</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_probe_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>edp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>exec_prog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_proginfo_t</name></type> <name>dpi</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_exec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dtrace_program_info</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dtrace_program_exec</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpi</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to enable '%s'"</literal></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"%s '%s' matched %u probe%s\n"</literal></expr></argument>,
<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_desc</name></name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name></expr></argument>,
<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_matches</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>dpi</name><operator>.</operator><name>dpi_matches</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\nStability attributes for %s %s:\n"</literal></expr></argument>,
<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_desc</name></name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n\tMinimum Probe Description Attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tIdentifier Names: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_descattr</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tData Semantics: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_descattr</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tDependency Class: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_class_name</name><argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_descattr</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n\tMinimum Statement Attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tIdentifier Names: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_stmtattr</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tData Semantics: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_stmtattr</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\t\tDependency Class: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_class_name</name><argument_list>(<argument><expr><name><name>dpi</name><operator>.</operator><name>dpi_stmtattr</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_exec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_stmt_iter</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>dtrace_stmt_f</name> <operator>*</operator><operator>)</operator><name>info_stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>g_total</name> <operator>+=</operator> <name><name>dpi</name><operator>.</operator><name>dpi_matches</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>anon_prog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl></parameter>, <parameter><decl><type><name>dof_hdr_t</name> <modifier>*</modifier></type><name>dof</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uchar_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dof</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to create DOF image for '%s'"</literal></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>dof</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>dof</name><operator>-&gt;</operator><name>dofh_filesz</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"dof-data-%d="</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"dof-data-%d=0x%x"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">",0x%x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dtrace_dof_destroy</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>dof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>link_prog</name><parameter_list>(<parameter><decl><type><name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>g_ofile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">".d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s.o"</literal></expr></argument>, <argument><expr><call><name>basename</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>g_cmdc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"d.out.%td"</literal></expr></argument>, <argument><expr><name>dcp</name> <operator>-</operator> <name>g_cmdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"d.out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_program_link</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name></expr></argument>, <argument><expr><name>DTRACE_D_PROBES</name></expr></argument>,
<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_ofile</name></name></expr></argument>, <argument><expr><name>g_objc</name></expr></argument>, <argument><expr><name>g_objv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to link %s %s"</literal></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_desc</name></name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>list_probe</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_probeinfo_t</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%5d %10s %17s %33s %s\n"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g_verbose</name> <operator>&amp;&amp;</operator> <call><name>dtrace_probe_info</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_probe_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_intr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>list_stmt</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_stmtdesc_t</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>, <parameter><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>edp</name> <init>= <expr><name><name>stp</name><operator>-&gt;</operator><name>dtsd_ecbdesc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>edp</name> <operator>==</operator> <operator>*</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_probe_iter</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name></name></expr></argument>, <argument><expr><name>list_probe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"failed to match %s:%s:%s:%s: %s\n"</literal></expr></argument>,
<argument><expr><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name><operator>.</operator><name>dtpd_provider</name></name></expr></argument>, <argument><expr><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name><operator>.</operator><name>dtpd_mod</name></name></expr></argument>,
<argument><expr><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name><operator>.</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name><operator>.</operator><name>dtpd_name</name></name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>edp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_prog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_stmt_iter</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>dtrace_stmt_f</name> <operator>*</operator><operator>)</operator><name>list_stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>compile_file</name><parameter_list>(<parameter><decl><type><name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open %s"</literal></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>arg0</name> <operator>=</operator> <name><name>g_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name> <operator>=</operator> <call><name>dtrace_program_fcompile</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><name>g_cflags</name></expr></argument>, <argument><expr><name>g_argc</name></expr></argument>, <argument><expr><name>g_argv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to compile script %s"</literal></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_desc</name></name> <operator>=</operator> <literal type="string">"script"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name> <operator>=</operator> <name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>compile_str</name><parameter_list>(<parameter><decl><type><name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dcp</name><operator>-&gt;</operator><name>dc_prog</name></name> <operator>=</operator> <call><name>dtrace_program_strcompile</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>,
<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name></expr></argument>, <argument><expr><name>g_cflags</name> <operator>|</operator> <name>DTRACE_C_PSPEC</name></expr></argument>, <argument><expr><name>g_argc</name></expr></argument>, <argument><expr><name>g_argv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"invalid probe specifier %s"</literal></expr></argument>, <argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr></argument>, <argument><expr><literal type="string">"{/;"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_desc</name></name> <operator>=</operator> <literal type="string">"description"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_name</name></name> <operator>=</operator> <name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>prochandler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>psinfo_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><call><name>Ppsinfo</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>SIG2STR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>wstatus</name> <init>= <expr><call><name>proc_getwstat</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d: %s\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><call><name>Pstate</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch <condition>(<expr><call><name>proc_state</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>PS_UNDEAD</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>prp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_wstat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d terminated by %s\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><call><name>proc_signame</name><argument_list>(<argument><expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_wstat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>wstatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d terminated by %d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name>wstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_wstat</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d exited with status %d\n"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_wstat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>wstatus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d exited with status %d\n"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>wstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d has exited\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>g_pslive</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PS_LOST</name></expr>:</case>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"pid %d exec'd a set-id or unobservable program\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_pslive</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>errhandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_errdata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dteda_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_HANDLE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>drophandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_dropdata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtdda_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_HANDLE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>setopthandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_setoptdata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtsda_option</name></name></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_quiet</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>dtsda_newval</name></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtsda_option</name></name></expr></argument>, <argument><expr><literal type="string">"flowindent"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_flowindent</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>dtsda_newval</name></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_HANDLE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFDUMPHDR</name><parameter_list>(<parameter><type><name>hdr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) printf("%s: %s%s\n", g_pname, hdr, strlen(hdr) &gt; 0 ? ":" : "");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFDUMPSTR</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) printf("%s: %20s =&gt; ", g_pname, #field); if ((ptr)-&gt;field != NULL) { const char *c = (ptr)-&gt;field; (void) printf("\""); do { if (*c == '\n') { (void) printf("\\n"); continue; } (void) printf("%c", *c); } while (*c++ != '\0'); (void) printf("\"\n"); } else { (void) printf("&lt;NULL&gt;\n"); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFDUMPASSTR</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) printf("%s: %20s =&gt; %s\n", g_pname, #field, str);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFDUMP</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) printf("%s: %20s =&gt; %lld\n", g_pname, #field, (long long)(ptr)-&gt;field);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFDUMPPTR</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) printf("%s: %20s =&gt; %s\n", g_pname, #field, (ptr)-&gt;field != NULL ? "&lt;non-NULL&gt;" : "&lt;NULL&gt;");</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bufhandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_bufdata_t</name> <modifier>*</modifier></type><name>bufdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>bufdata</name><operator>-&gt;</operator><name>dtbda_aggdata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name><name>bufdata</name><operator>-&gt;</operator><name>dtbda_recdesc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name><name>bufdata</name><operator>-&gt;</operator><name>dtbda_flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>c</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>printed</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name><name>flagnames</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"AGGVAL"</literal></expr>, <expr><name>DTRACE_BUFDATA_AGGVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AGGKEY"</literal></expr>, <expr><name>DTRACE_BUFDATA_AGGKEY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AGGFORMAT"</literal></expr>, <expr><name>DTRACE_BUFDATA_AGGFORMAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AGGLAST"</literal></expr>, <expr><name>DTRACE_BUFDATA_AGGLAST</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"???"</literal></expr>, <expr><name>UINT32_MAX</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<if_stmt><if>if <condition>(<expr><name><name>bufdata</name><operator>-&gt;</operator><name>dtbda_probe</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <name><name>bufdata</name><operator>-&gt;</operator><name>dtbda_probe</name><operator>-&gt;</operator><name>dtpda_pdesc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>agg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtada_pdesc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; Called buffer handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">" dtrace_bufdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPSTR</name><argument_list>(<argument><expr><name>bufdata</name></expr></argument>, <argument><expr><name>dtbda_buffered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPPTR</name><argument_list>(<argument><expr><name>bufdata</name></expr></argument>, <argument><expr><name>dtbda_probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPPTR</name><argument_list>(<argument><expr><name>bufdata</name></expr></argument>, <argument><expr><name>dtbda_aggdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPPTR</name><argument_list>(<argument><expr><name>bufdata</name></expr></argument>, <argument><expr><name>dtbda_recdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><literal type="string">"0x%x "</literal></expr></argument>, <argument><expr><name><name>bufdata</name><operator>-&gt;</operator><name>dtbda_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>flagnames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>flagnames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>c</name></expr></argument>,
<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>printed</name><operator>++</operator></expr> ?</condition><then> <expr><literal type="string">" | "</literal></expr> </then><else>: <expr><literal type="string">"("</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>flagnames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name><name>flagnames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>printed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>BUFDUMPASSTR</name><argument_list>(<argument><expr><name>bufdata</name></expr></argument>, <argument><expr><name>dtbda_flags</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">" dtrace_probedesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPSTR</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>dtpd_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPSTR</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>dtpd_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPSTR</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>dtpd_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPSTR</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>dtpd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">" dtrace_recdesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMP</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>dtrd_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMP</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>dtrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>agg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d (data: "</literal></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>agg</name><operator>-&gt;</operator><name>dtada_data</name></name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><literal type="string">"%s%02x"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>*</operator><name>data</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>c</name></expr></argument>,
<argument><expr><literal type="string">"%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lim</name> <operator>&lt;</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr> ?</condition><then> <expr><literal type="string">" ..."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPASSTR</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>dtrd_offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>BUFDUMP</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>dtrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>agg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>agg</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">" dtrace_aggdesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPSTR</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>dtagd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMP</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>dtagd_varid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMP</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>dtagd_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMP</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>dtagd_nrecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFDUMPHDR</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_HANDLE_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>chewrec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_actkind_t</name></type> <name>act</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_NEXT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>act</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>dtpda_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>DTRACEACT_EXIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g_status</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_NEXT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_THIS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>chew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_pdesc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name></type> <name>cpu</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_cpu</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>heading</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g_impatient</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g_newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_ABORT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>heading</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_flowindent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%3s %6s %32s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"CPU"</literal></expr></argument>, <argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><literal type="string">"FUNCTION:NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%3s %-41s\n"</literal></expr></argument>, <argument><expr><literal type="string">"CPU"</literal></expr></argument>, <argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>heading</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_flowindent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_quiet</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>DTRACE_FUNCNAMELEN</name> <operator>+</operator> <name>DTRACE_NAMELEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,
<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%3d %6d %32s "</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_indent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_flow</name></name> <operator>==</operator> <name>DTRACEFLOW_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>indent</name> <operator>+</operator> <name>DTRACE_FUNCNAMELEN</name> <operator>+</operator> <name>DTRACE_NAMELEN</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%*s%s%s:%s"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_prefix</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>,
<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>indent</name> <operator>+</operator> <name>DTRACE_FUNCNAMELEN</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%*s%s%s"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtpda_prefix</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%3d %-41s "</literal></expr></argument>, <argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>DTRACE_CONSUME_THIS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>go</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>val</name></decl>;</decl_stmt>
}</block> <decl><name><name>bufs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"buffer size"</literal></expr>, <expr><literal type="string">"bufsize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aggregation size"</literal></expr>, <expr><literal type="string">"aggsize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"speculation size"</literal></expr>, <expr><literal type="string">"specsize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dynamic variable size"</literal></expr>, <expr><literal type="string">"dynvarsize"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>rates</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cleaning rate"</literal></expr>, <expr><literal type="string">"cleanrate"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"status rate"</literal></expr>, <expr><literal type="string">"statusrate"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"couldn't get option %s"</literal></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"couldn't get option %s"</literal></expr></argument>, <argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_go</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"could not enable tracing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mul</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>nsize</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>==</operator> <name>DTRACEOPT_UNSET</name> <operator>||</operator> <name>nsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>&gt;=</operator> <name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>mul</name><operator>)</operator> <operator>&lt;=</operator> <name>nsize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>mul</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nsize</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>mul</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s lowered to %lld%c\n"</literal></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>nsize</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>mul</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">" kmgtpe"</literal><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s lowered to %lld bytes\n"</literal></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>nval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nval</name> <operator>==</operator> <name>DTRACEOPT_UNSET</name> <operator>||</operator> <name>nval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>nval</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><name>nval</name> <operator>&gt;</operator> <name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr> ?</condition><then> <expr><literal type="string">"reduced"</literal></expr> </then><else>: <expr><literal type="string">"increased"</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nval</name> <operator>&lt;=</operator> <name>NANOSEC</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>NANOSEC</name> <operator>%</operator> <name>nval</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s %s to %lld hz\n"</literal></expr></argument>, <argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>NANOSEC</name> <operator>/</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nval</name> <operator>%</operator> <name>NANOSEC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s %s to once every %lld seconds\n"</literal></expr></argument>,
<argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>nval</name> <operator>/</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>NANOSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s %s to once every %lld nanoseconds\n"</literal></expr></argument>,
<argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>intr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_intr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_intr</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_impatient</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>siginfo</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>g_siginfo</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>installsighands</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>, <decl><type ref="prev"/><name>oact</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>intr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oact</name><operator>.</operator><name>sa_handler</name></name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oact</name><operator>.</operator><name>sa_handler</name></name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oact</name><operator>.</operator><name>sa_handler</name></name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oact</name><operator>.</operator><name>sa_handler</name></name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>siginfo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oact</name><operator>.</operator><name>sa_handler</name></name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_bufdesc_t</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_status_t</name></type> <name><name>status</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_cmd_t</name> <modifier>*</modifier></type><name>dcp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>g_ofp</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>g_pname</name> <operator>=</operator> <call><name>basename</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>usage</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g_argv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>g_cmdv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_cmd_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>g_psv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ps_prochandle</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory for arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g_argv</name><index>[<expr><name>g_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>g_pname</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>optind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>DTRACE_OPTSTR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: illegal option -- 3%s\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>usage</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>&amp;=</operator> <operator>~</operator><name>DTRACE_O_LP64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_ILP32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s: illegal option -- 6%s\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>usage</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>&amp;=</operator> <operator>~</operator><name>DTRACE_O_ILP32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_LP64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>g_grabanon</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name>g_mode</name> <operator>=</operator> <name>DMODE_ANON</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_exec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>g_exec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>g_mode</name> <operator>=</operator> <name>DMODE_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_NODEV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_cflags</name> <operator>|=</operator> <name>DTRACE_C_ZDEFS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_exec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><name>g_mode</name> <operator>=</operator> <name>DMODE_LINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_NODEV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_cflags</name> <operator>|=</operator> <name>DTRACE_C_ZDEFS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_exec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>g_mode</name> <operator>=</operator> <name>DMODE_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_cflags</name> <operator>|=</operator> <name>DTRACE_C_ZDEFS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name>g_mode</name> <operator>=</operator> <name>DMODE_VERS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>DTRACE_OPTSTR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>usage</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_argv</name><index>[<expr><name>g_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: only one of the [-AGhlV] options "</literal>
<literal type="string">"can be specified at a time\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_mode</name> <operator>==</operator> <name>DMODE_VERS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>, <argument><expr><name>_dtrace_version</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_mode</name> <operator>==</operator> <name>DMODE_LINK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>g_oflags</name> <operator>&amp;</operator> <operator>(</operator><name>DTRACE_O_ILP32</name> <operator>|</operator> <name>DTRACE_O_LP64</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EV_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>ehdr</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open64</name><argument_list>(<argument><expr><name><name>g_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>elf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ELF_K_ELF</name> <operator>||</operator>
<call><name>gelf_getehdr</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ehdr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ehdr</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name> <operator>==</operator> <name>ELFCLASS64</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>g_oflags</name> <operator>&amp;</operator> <name>DTRACE_O_ILP32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"can't mix 32-bit and 64-bit "</literal>
<literal type="string">"object files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_LP64</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ehdr</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>g_oflags</name> <operator>&amp;</operator> <name>DTRACE_O_LP64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"can't mix 32-bit and 64-bit "</literal>
<literal type="string">"object files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_ILP32</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>g_dtp</name> <operator>=</operator> <call><name>dtrace_open</name><argument_list>(<argument><expr><name>DTRACE_VERSION</name></expr></argument>, <argument><expr><name>g_oflags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>g_oflags</name> <operator>&amp;</operator> <name>DTRACE_O_NODEV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>g_exec</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>g_grabanon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g_oflags</name> <operator>|=</operator> <name>DTRACE_O_NODEV</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to initialize dtrace: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"bufsize"</literal></expr></argument>, <argument><expr><literal type="string">"12m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"aggsize"</literal></expr></argument>, <argument><expr><literal type="string">"12m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"bufsize"</literal></expr></argument>, <argument><expr><literal type="string">"4m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"aggsize"</literal></expr></argument>, <argument><expr><literal type="string">"4m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"temporal"</literal></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g_mode</name> <operator>==</operator> <name>DMODE_LINK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"linkmode"</literal></expr></argument>, <argument><expr><literal type="string">"dynamic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"unodefs"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_objc</name> <operator>=</operator> <name>g_argc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g_objv</name> <operator>=</operator> <name>g_argv</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g_argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>g_mode</name> <operator>==</operator> <name>DMODE_ANON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"linkmode"</literal></expr></argument>, <argument><expr><literal type="string">"primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>optind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>DTRACE_OPTSTR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"grabanon"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>,
<argument><expr><literal type="string">"bufsize"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -b %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>g_ofp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>g_cflags</name> <operator>|=</operator> <name>DTRACE_C_CPP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"define"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -D %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>dcp</name> <operator>=</operator> <operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>g_cmdc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_func</name></name> <operator>=</operator> <name>compile_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name> <operator>=</operator> <name>DTRACE_PROBESPEC_FUNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"flowindent"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"cpphdrs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>dcp</name> <operator>=</operator> <operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>g_cmdc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_func</name></name> <operator>=</operator> <name>compile_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name> <operator>=</operator> <name>DTRACE_PROBESPEC_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"incdir"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -I %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"libdir"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -L %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>dcp</name> <operator>=</operator> <operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>g_cmdc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_func</name></name> <operator>=</operator> <name>compile_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name> <operator>=</operator> <name>DTRACE_PROBESPEC_MOD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>dcp</name> <operator>=</operator> <operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>g_cmdc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_func</name></name> <operator>=</operator> <name>compile_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name> <operator>=</operator> <name>DTRACE_PROBESPEC_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>dcp</name> <operator>=</operator> <operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>g_cmdc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_func</name></name> <operator>=</operator> <name>compile_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name> <operator>=</operator> <name>DTRACE_PROBESPEC_PROVIDER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>g_ofile</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>dcp</name> <operator>=</operator> <operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>g_cmdc</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_func</name></name> <operator>=</operator> <name>compile_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_spec</name></name> <operator>=</operator> <name>DTRACE_PROBESPEC_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dcp</name><operator>-&gt;</operator><name>dc_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>g_cflags</name> <operator>|=</operator> <name>DTRACE_C_DIFV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"undef"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -U %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>g_verbose</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"destructive"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -x %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"stdc"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to set -X %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><name>g_cflags</name> <operator>|=</operator> <name>DTRACE_C_ZDEFS</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>DTRACE_OPTSTR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>usage</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>g_ofp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>g_mode</name> <operator>!=</operator> <name>DMODE_EXEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: -B not valid in combination"</literal>
<literal type="string">" with [-AGl] options\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_ofp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>g_ofile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: -B not valid in combination"</literal>
<literal type="string">" with -o option\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>optind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>DTRACE_OPTSTR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>make_argv</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>dtrace_proc_create</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>P</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g_psv</name><index>[<expr><name>g_psc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>==</operator> <name>optarg</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"invalid pid: %s\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>dtrace_proc_grab</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>P</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g_psv</name><index>[<expr><name>g_psc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_cmdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>dc_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>g_mode</name> <operator>!=</operator> <name>DMODE_LIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_handle_err</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errhandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to establish error handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_handle_drop</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drophandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to establish drop handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_handle_proc</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prochandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to establish proc handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_handle_setopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>setopthandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to establish setopt handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_ofp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>dtrace_handle_buffered</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufhandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to establish buffered handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"flowindent"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_flowindent</name> <operator>=</operator> <name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"grabanon"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_grabanon</name> <operator>=</operator> <name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_quiet</name> <operator>=</operator> <name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>g_mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DMODE_EXEC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>g_ofile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>g_ofp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>g_ofile</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open output file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_cmdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exec_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>g_grabanon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DMODE_ANON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>g_ofile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>g_ofile</name> <operator>=</operator> <literal type="string">"/kernel/drv/dtrace.conf"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>g_ofile</name> <operator>=</operator> <literal type="string">"/boot/dtrace.dof"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dof_prune</name><argument_list>(<argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>etcsystem_prune</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g_ofp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>g_ofile</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open output file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_cmdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>anon_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>dtrace_dof_create</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dc_prog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>anon_prog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>dtrace_geterr_dof</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>anon_prog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>dtrace_getopt_dof</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to close output file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"saved anonymous enabling in %s\n"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bootdof_add</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>etcsystem_add</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"run update_drv(1M) or reboot to enable changes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DMODE_LINK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: -G requires one or more "</literal>
<literal type="string">"scripts or enabling options\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_cmdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>link_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>g_ofile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>objv</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>g_cmdc</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_cmdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dc_ofile</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_program_link</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DTRACE_D_PROBES</name></expr></argument>,
<argument><expr><name>g_ofile</name></expr></argument>, <argument><expr><name>g_cmdc</name></expr></argument>, <argument><expr><name>objv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DMODE_LIST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>g_ofile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>g_ofp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>g_ofile</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open output file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>installsighands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"%5s %10s %17s %33s %s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><literal type="string">"PROVIDER"</literal></expr></argument>, <argument><expr><literal type="string">"MODULE"</literal></expr></argument>, <argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_cmdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_cmdv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_probe_iter</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>list_probe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DMODE_HEADER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: -h requires one or more "</literal>
<literal type="string">"scripts or enabling options\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g_ofile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g_cmdc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: -h requires an "</literal>
<literal type="string">"output file if multiple scripts are "</literal>
<literal type="string">"specified\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>g_cmdv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dc_arg</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">".d"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: -h requires an "</literal>
<literal type="string">"output file if no scripts are "</literal>
<literal type="string">"specified\n"</literal></expr></argument>, <argument><expr><name>g_pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>E_USAGE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g_ofile</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name><name>g_cmdv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dc_ofile</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>g_cmdv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dc_ofile</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s.h"</literal></expr></argument>, <argument><expr><call><name>basename</name><argument_list>(<argument><expr><name><name>g_cmdv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dc_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g_ofp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>g_ofile</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"failed to open header file '%s'"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"/*\n * Generated by dtrace(1M).\n */\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_program_header</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>g_ofp</name></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fclose</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to create header file %s"</literal></expr></argument>, <argument><expr><name>g_ofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>g_total</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>g_grabanon</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>g_cflags</name> <operator>&amp;</operator> <name>DTRACE_C_ZDEFS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"no probes %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>g_cmdc</name></expr> ?</condition><then> <expr><literal type="string">"matched"</literal></expr> </then><else>: <expr><literal type="string">"specified"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>go</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"flowindent"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_flowindent</name> <operator>=</operator> <name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"grabanon"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_grabanon</name> <operator>=</operator> <name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_quiet</name> <operator>=</operator> <name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><literal type="string">"destructive"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>notice</name><argument_list>(<argument><expr><literal type="string">"allowing destructive actions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>installsighands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_psc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dtrace_proc_continue</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name><name>g_psv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>g_pslive</name> <operator>=</operator> <name>g_psc</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_intr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dtrace_sleep</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>g_siginfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>dtrace_aggregate_print</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>g_ofp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_siginfo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>g_newline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>||</operator> <name>g_intr</name> <operator>||</operator> <operator>(</operator><name>g_psc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>g_pslive</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_stop</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"couldn't stop tracing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>dtrace_work</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>g_ofp</name></expr></argument>, <argument><expr><name>chew</name></expr></argument>, <argument><expr><name>chewrec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACE_WORKSTATUS_DONE</name></expr>:</case>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DTRACE_WORKSTATUS_OKAY</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_impatient</name> <operator>&amp;&amp;</operator> <call><name>dtrace_errno</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"processing aborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>g_ofp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>g_ofp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>oprintf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_impatient</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_aggregate_print</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>, <argument><expr><name>g_ofp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>dtrace_errno</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dfatal</name><argument_list>(<argument><expr><literal type="string">"failed to print aggregations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>g_dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>g_status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></switch></block_content></block></function>
</unit>
