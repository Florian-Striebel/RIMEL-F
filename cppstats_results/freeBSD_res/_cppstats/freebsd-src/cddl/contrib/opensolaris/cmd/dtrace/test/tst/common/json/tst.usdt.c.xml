<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/cmd/dtrace/test/tst/common/json/tst.usdt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sdt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"usdt.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>"{" " \"sizes\": [ \"first\", 2, %f ]," " \"index\": %d," " \"facts\": {" " \"odd\": \"%s\"," " \"even\": \"%s\"" " }," " \"action\": \"%s\"" "}\n"</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>waiting</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>int</name></type>
<name>waiting</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>size</name> <init>= <expr><literal type="number">250.5</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>waiting</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>odd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>even</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">1.78</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>odd</name> <operator>=</operator> <ternary><condition><expr><name>idx</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>even</name> <operator>=</operator> <ternary><condition><expr><name>idx</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>action</name> <operator>=</operator> <ternary><condition><expr><name>idx</name> <operator>==</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="string">"ignore"</literal></expr> </then><else>: <expr><literal type="string">"print"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>json</name></expr></argument>, <argument><expr><name>FMT</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>, <argument><expr><name>even</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUNYAN_FAKE_LOG_DEBUG</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>BUNYAN_FAKE_LOG_DEBUG</name><argument_list>(<argument><expr><call><name>__DECONST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="string">"{\"finished\": true}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
