<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/iidesc.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>iidesc_find</name> <block>{
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iif_tgt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iif_ret</name></decl>;</decl_stmt>
}</block></struct></type> <name>iidesc_find_t</name>;</typedef>
<function><type><name>iidesc_t</name> <modifier>*</modifier></type>
<name>iidesc_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ii</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ii</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>iidesc_hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>hash_name</name><argument_list>(<argument><expr><name>nbuckets</name></expr></argument>, <argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>h</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>iidesc_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_find_t</name> <modifier>*</modifier></type><name>find</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>tgt</name> <init>= <expr><name><name>find</name><operator>-&gt;</operator><name>iif_tgt</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>!=</operator> <name><name>tgt</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>||</operator>
<operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>, <argument><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>find</name><operator>-&gt;</operator><name>iif_ret</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>iidesc_add</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_find_t</name></type> <name>find</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>find</name><operator>.</operator><name>iif_tgt</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>.</operator><name>iif_ret</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_match</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>iidesc_cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>find</name><operator>.</operator><name>iif_ret</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>find</name><operator>.</operator><name>iif_ret</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>old</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iidesc_free</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>iter_iidescs_by_name</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name></type> <name>tmpdesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpdesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpdesc</name><operator>.</operator><name>ii_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_match</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpdesc</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tmpdesc</name><operator>.</operator><name>ii_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>iidesc_t</name> <modifier>*</modifier></type>
<name>iidesc_dup</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>tgt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tgt</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tgt</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <ternary><condition><expr><name><name>src</name><operator>-&gt;</operator><name>ii_name</name></name></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_owner</name></name> <operator>=</operator> <ternary><condition><expr><name><name>src</name><operator>-&gt;</operator><name>ii_owner</name></name></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ii_owner</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_args</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tgt</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ii_args</name></name></expr></argument>, <argument><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_args</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tgt</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>tgt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>iidesc_t</name> <modifier>*</modifier></type>
<name>iidesc_dup_rename</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>tgt</name> <init>= <expr><call><name>iidesc_dup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tgt</name><operator>-&gt;</operator><name>ii_owner</name></name> <operator>=</operator> <ternary><condition><expr><name>owner</name></expr> ?</condition><then> <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tgt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>iidesc_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>ii_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>ii_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>ii_owner</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>ii_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>iidesc_dump</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"type: %d name %s\n"</literal></expr></argument>, <argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name></expr> ?</condition><then> <expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name></expr> </then><else>: <expr><literal type="string">"(anon)"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>iidesc_count_type</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iitype_t</name></type> <name>match</name> <init>= <expr><operator>(</operator><name>iitype_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>private</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>==</operator> <name>match</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>iidesc_stats</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GFun: %5d SFun: %5d GVar: %5d SVar: %5d T %5d SOU: %5d\n"</literal></expr></argument>,
<argument><expr><call><name>hash_iter</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>iidesc_count_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>II_GFUN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>hash_iter</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>iidesc_count_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>II_SFUN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>hash_iter</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>iidesc_count_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>II_GVAR</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>hash_iter</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>iidesc_count_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>II_SVAR</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>hash_iter</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>iidesc_count_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>II_TYPE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>hash_iter</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>iidesc_count_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>II_SOU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
