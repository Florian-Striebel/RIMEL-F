<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/stack.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SEEDSIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<struct>struct <name>stk</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>st_nument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>st_data</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>st_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>
<function><type><name>stk_t</name> <modifier>*</modifier></type>
<name>stack_new</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freep</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stk_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>stk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_nument</name></name> <operator>=</operator> <name>STACK_SEEDSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_data</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_nument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_free</name></name> <operator>=</operator> <name>freep</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>sp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>stack_free</name><parameter_list>(<parameter><decl><type><name>stk_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_free</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sp</name><operator>-&gt;</operator><name>st_free</name></name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>stack_pop</name><parameter_list>(<parameter><decl><type><name>stk_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>st_data</name><index>[<expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name><operator>--</operator></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>stack_peek</name><parameter_list>(<parameter><decl><type><name>stk_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>st_data</name><index>[<expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>stack_push</name><parameter_list>(<parameter><decl><type><name>stk_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name> <operator>==</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_nument</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_nument</name></name> <operator>+=</operator> <name>STACK_SEEDSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_data</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_data</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_nument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>st_data</name><index>[<expr><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>stack_level</name><parameter_list>(<parameter><decl><type><name>stk_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>st_top</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
