<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/traverse.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>tddescenders</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>tdtrav_cb_f</name></type> <name><name>tdnops</name><index>[]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>tdtrav_init</name><parameter_list>(<parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vgenp</name></decl></parameter>, <parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>firstops</name></decl></parameter>,
<parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>preops</name></decl></parameter>, <parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>postops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tdtd</name><operator>-&gt;</operator><name>vgen</name></name> <operator>=</operator> <operator>++</operator><operator>(</operator><operator>*</operator><name>vgenp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdtd</name><operator>-&gt;</operator><name>firstops</name></name> <operator>=</operator> <ternary><condition><expr><name>firstops</name></expr> ?</condition><then> <expr><name>firstops</name></expr> </then><else>: <expr><name>tdnops</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdtd</name><operator>-&gt;</operator><name>preops</name></name> <operator>=</operator> <ternary><condition><expr><name>preops</name></expr> ?</condition><then> <expr><name>preops</name></expr> </then><else>: <expr><name>tdnops</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdtd</name><operator>-&gt;</operator><name>postops</name></name> <operator>=</operator> <ternary><condition><expr><name>postops</name></expr> ?</condition><then> <expr><name>postops</name></expr> </then><else>: <expr><name>tdnops</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdtd</name><operator>-&gt;</operator><name>private</name></name> <operator>=</operator> <name>private</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdtrav_plain</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr></argument>, <argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdtrav_func</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fndef_t</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>t_fndef</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_ret</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fn</name><operator>-&gt;</operator><name>fn_ret</name></name></expr></argument>, <argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fn</name><operator>-&gt;</operator><name>fn_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdtrav_array</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ardef_t</name> <modifier>*</modifier></type><name>ardef</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>t_ardef</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr></argument>,
<argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>ardef</name><operator>-&gt;</operator><name>ad_idxtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ardef</name><operator>-&gt;</operator><name>ad_idxtype</name></name></expr></argument>, <argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdtrav_su</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>t_members</name></name></expr>;</init> <condition><expr><name>ml</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>, <argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdtrav_assert</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><name>node</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>nodep</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>tdtrav_cb_f</name></type> <name><name>tdnops</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>tddescenders</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
<expr><name>NULL</name></expr></block></expr></init><operator>,</operator>
NULL<operator>,</operator>
tdtrav_plain<operator>,</operator>
tdtrav_array<operator>,</operator>
tdtrav_func<operator>,</operator>
tdtrav_su<operator>,</operator>
tdtrav_su<operator>,</operator>
NULL<operator>,</operator>
NULL<operator>,</operator>
tdtrav_plain<operator>,</operator>
NULL<operator>,</operator>
tdtrav_plain<operator>,</operator>
tdtrav_plain<operator>,</operator>
tdtrav_plain</function_decl>
};
<function><type><name>int</name></type>
<name>tdtraverse</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>thisp</name></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdtrav_cb_f</name></type> <name>travcb</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>descender</name>)<parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>descend</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>travcb</name> <operator>=</operator> <name><name>tdtd</name><operator>-&gt;</operator><name>firstops</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>t_type</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>travcb</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>thisp</name></expr></argument>, <argument><expr><name><name>tdtd</name><operator>-&gt;</operator><name>private</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>descend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>t_vgen</name></name> <operator>==</operator> <name><name>tdtd</name><operator>-&gt;</operator><name>vgen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>t_vgen</name></name> <operator>=</operator> <name><name>tdtd</name><operator>-&gt;</operator><name>vgen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>descend</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>travcb</name> <operator>=</operator> <name><name>tdtd</name><operator>-&gt;</operator><name>preops</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>t_type</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>travcb</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>thisp</name></expr></argument>, <argument><expr><name><name>tdtd</name><operator>-&gt;</operator><name>private</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>descend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>descend</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>descender</name> <operator>=</operator> <name><name>tddescenders</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>t_type</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>rc</name> <operator>=</operator> <call><name>descender</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>travcb</name> <operator>=</operator> <name><name>tdtd</name><operator>-&gt;</operator><name>postops</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>t_type</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>rc</name> <operator>=</operator> <call><name>travcb</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>thisp</name></expr></argument>, <argument><expr><name><name>tdtd</name><operator>-&gt;</operator><name>private</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>iitraverse_td</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdtrav_data_t</name> <modifier>*</modifier></type><name>tdtd</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name></expr></argument>, <argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>tdtraverse</name><argument_list>(<argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ii</name><operator>-&gt;</operator><name>ii_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>iitraverse</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vgenp</name></decl></parameter>, <parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>firstops</name></decl></parameter>, <parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>preops</name></decl></parameter>,
<parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>postops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdtrav_data_t</name></type> <name>tdtd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tdtrav_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdtd</name></expr></argument>, <argument><expr><name>vgenp</name></expr></argument>, <argument><expr><name>firstops</name></expr></argument>, <argument><expr><name>preops</name></expr></argument>, <argument><expr><name>postops</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>iitraverse_td</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>iitraverse_hash</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>iihash</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vgenp</name></decl></parameter>, <parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>firstops</name></decl></parameter>,
<parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>preops</name></decl></parameter>, <parameter><decl><type><name>tdtrav_cb_f</name> <modifier>*</modifier></type><name>postops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdtrav_data_t</name></type> <name>tdtd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tdtrav_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdtd</name></expr></argument>, <argument><expr><name>vgenp</name></expr></argument>, <argument><expr><name>firstops</name></expr></argument>, <argument><expr><name>preops</name></expr></argument>, <argument><expr><name>postops</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>hash_iter</name><argument_list>(<argument><expr><name>iihash</name></expr></argument>, <argument><expr><name>iitraverse_td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdtd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
