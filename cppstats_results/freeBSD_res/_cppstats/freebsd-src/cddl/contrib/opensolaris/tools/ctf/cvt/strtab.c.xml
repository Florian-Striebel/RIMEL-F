<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/strtab.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRTAB_HASHSZ</name></cpp:macro> <cpp:value>211</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRTAB_BUFSZ</name></cpp:macro> <cpp:value>(64 * 1024)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>strtab_grow</name><parameter_list>(<parameter><decl><type><name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>strtab_create</name><parameter_list>(<parameter><decl><type><name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_hash</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>STRTAB_HASHSZ</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>strhash_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_hashsz</name></name> <operator>=</operator> <name>STRTAB_HASHSZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name> <operator>=</operator> <name>STRTAB_BUFSZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_nstrs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strtab_grow</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>strtab_destroy</name><parameter_list>(<parameter><decl><type><name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>strhash_t</name> <modifier>*</modifier></type><name>hp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hashsz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name>hq</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hq</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>str_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>ulong_t</name></type>
<name>strtab_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>key</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>h</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>strtab_compare</name><parameter_list>(<parameter><decl><type><name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>strhash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>b</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>str_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>str_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resid</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><operator>++</operator><name>b</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>resid</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>resid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>strtab_copyin</name><parameter_list>(<parameter><decl><type><name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>b</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resid</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name> <operator>==</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strtab_grow</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>resid</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name> <operator>-</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>resid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>size_t</name></type>
<name>strtab_insert</name><parameter_list>(<parameter><decl><type><name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>strhash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>strtab_hash</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hashsz</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>str_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strtab_compare</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>str_off</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>strhash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>str_data</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>str_buf</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>str_off</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>str_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>str_next</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strtab_copyin</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_nstrs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>str_size</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>str_off</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>size_t</name></type>
<name>strtab_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>str_size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>ssize_t</name></type>
<name>strtab_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>,
<parameter><function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>total</name> <operator>+=</operator> <name>res</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_nbufs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_ptr</name></name> <operator>-</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>total</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>strtab_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>strtab_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>strhash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hashsz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>str_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>str_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>b</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>str_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resid</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%lu] %lu \""</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>hp</name><operator>-&gt;</operator><name>str_off</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>str_len</name></name></expr>;</init> <condition><expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name> <operator>-=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><operator>++</operator><name>b</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>resid</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>sp</name><operator>-&gt;</operator><name>str_bufsz</name></name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>resid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
