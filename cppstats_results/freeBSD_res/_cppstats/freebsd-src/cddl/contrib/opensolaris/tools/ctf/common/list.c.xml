<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/common/list.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<struct>struct <name>list</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>l_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>l_next</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>void</name></type>
<name>list_add</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>l_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>slist_add</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>nextp</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>nextp</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><operator>*</operator><name>nextp</name></expr>;</condition> <incr><expr><name>nextp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>nextp</name><operator>)</operator><operator>-&gt;</operator><name>l_next</name></name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>nextp</name><operator>)</operator><operator>-&gt;</operator><name>l_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><name>nextp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>list_defcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>d1</name> <operator>!=</operator> <name>d2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>list_remove</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>le</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>le2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>led</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>list_defcmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>le</name> <operator>=</operator> <operator>*</operator><name>list</name></expr><operator>,</operator> <expr><name>le2</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>le</name></expr>;</condition> <incr><expr><name>le2</name> <operator>=</operator> <operator>&amp;</operator><name><name>le</name><operator>-&gt;</operator><name>l_next</name></name></expr><operator>,</operator> <expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>l_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>l_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>le2</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>led</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>l_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>led</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>list_free</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>datafree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>le</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>l_data</name></name> <operator>&amp;&amp;</operator> <name>datafree</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>datafree</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>l_data</name></name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>list_iter</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>lnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cumrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbrc</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnext</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cbrc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>l_data</name></name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cbrc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cumrc</name> <operator>+=</operator> <name>cbrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name>lnext</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>cumrc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>list_count_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>list_count</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>list_iter</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>list_count_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>list_empty</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>list</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>list_find</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmpl</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>l_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>l_data</name></name></expr></argument>, <argument><expr><name>tmpl</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>l_data</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>list_first</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>list</name></expr> ?</condition><then> <expr><name><name>list</name><operator>-&gt;</operator><name>l_data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>list_concat</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list1</name></decl></parameter>, <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <operator>*</operator><name>list1</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>last</name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>l_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>list1</name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>slist_merge</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list1p</name></decl></parameter>, <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list2</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>list1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>last1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>list1p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>list1p</name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list1</name> <operator>=</operator> <operator>*</operator><name>list1p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name><name>list1</name><operator>-&gt;</operator><name>l_data</name></name></expr></argument>, <argument><expr><name><name>list2</name><operator>-&gt;</operator><name>l_data</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next2</name> <operator>=</operator> <name><name>list2</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>list1p</name> <operator>=</operator> <name>last1</name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list2</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>list1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>list2</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>list1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last1</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last1</name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>list2</name> <operator>=</operator> <name>next2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last1</name> <operator>=</operator> <name>list1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>list1</name> <operator>=</operator> <name><name>list1</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>last1</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>list2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
