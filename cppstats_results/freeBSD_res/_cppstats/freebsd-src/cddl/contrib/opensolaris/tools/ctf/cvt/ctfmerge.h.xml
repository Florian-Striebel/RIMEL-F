<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/ctfmerge.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"barrier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fifo.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>wip</name> <block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>wip_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>wip_cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>wip_td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wip_nmerged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wip_batchid</name></decl>;</decl_stmt>
}</block></struct></type> <name>wip_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>workqueue</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>wq_next_batchid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_maxbatchsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wip_t</name> <modifier>*</modifier></type><name>wq_wip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_nwipslots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_nthreads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_ithrottle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>wq_queue_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>wq_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>wq_work_avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>wq_work_removed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_ninqueue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_nextpownum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>wq_donequeue_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>wq_donequeue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_lastdonebatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>wq_done_cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>wq_alldone_cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_alldone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wq_nomorefiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>wq_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>barrier_t</name></type> <name>wq_bar1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>barrier_t</name></type> <name>wq_bar2</name></decl>;</decl_stmt>
}</block></struct></type> <name>workqueue_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
