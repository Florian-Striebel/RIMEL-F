<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/dwarf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libdwarf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dwarf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctf_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TID_FILEMAX</name></cpp:macro> <cpp:value>0x3fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TID_VOID</name></cpp:macro> <cpp:value>0x40000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TID_LONG</name></cpp:macro> <cpp:value>0x40000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TID_MFGTID_BASE</name></cpp:macro> <cpp:value>0x40000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_ATTR_REQ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDESC_HASH_BUCKETS</name></cpp:macro> <cpp:value>511</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dwarf</name> <block>{
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dw_dw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Error</name></type> <name>dw_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Off</name></type> <name>dw_maxoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>dw_td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>dw_tidhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>dw_fwdhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>dw_enumhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>dw_void</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>dw_long</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dw_ptrsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tid_t</name></type> <name>dw_mfgtid_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dw_nunres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dw_cuname</name></decl>;</decl_stmt>
}</block></struct></type> <name>dwarf_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>die_create_one</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>die_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>tid_t</name></type>
<name>mfgtid_next</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>++</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_mfgtid_last</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tdesc_add</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_tidhash</name></name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>tdesc_lookup</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name></type> <name>tmpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tdp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmpl</name><operator>.</operator><name>t_id</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hash_find</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_tidhash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>tdp</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tdesc_size</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTRINSIC</name></expr>:</case>
<case>case <expr><name>POINTER</name></expr>:</case>
<case>case <expr><name>ARRAY</name></expr>:</case>
<case>case <expr><name>FUNCTION</name></expr>:</case>
<case>case <expr><name>STRUCT</name></expr>:</case>
<case>case <expr><name>UNION</name></expr>:</case>
<case>case <expr><name>ENUM</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>FORWARD</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>TYPEDEF</name></expr>:</case>
<case>case <expr><name>VOLATILE</name></expr>:</case>
<case>case <expr><name>CONST</name></expr>:</case>
<case>case <expr><name>RESTRICT</name></expr>:</case>
<expr_stmt><expr><name>tdp</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"tdp %u: tdesc_size on unknown type %d\n"</literal></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tdesc_bitsize</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTRINSIC</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_intr</name><operator>-&gt;</operator><name>intr_nbits</name></name><operator>)</operator></expr>;</return>
<case>case <expr><name>ARRAY</name></expr>:</case>
<case>case <expr><name>FUNCTION</name></expr>:</case>
<case>case <expr><name>STRUCT</name></expr>:</case>
<case>case <expr><name>UNION</name></expr>:</case>
<case>case <expr><name>ENUM</name></expr>:</case>
<case>case <expr><name>POINTER</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>*</operator> <name>NBBY</name><operator>)</operator></expr>;</return>
<case>case <expr><name>FORWARD</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>TYPEDEF</name></expr>:</case>
<case>case <expr><name>VOLATILE</name></expr>:</case>
<case>case <expr><name>RESTRICT</name></expr>:</case>
<case>case <expr><name>CONST</name></expr>:</case>
<expr_stmt><expr><name>tdp</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"tdp %u: tdesc_bitsize on unknown type %d\n"</literal></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>tdesc_basetype</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPEDEF</name></expr>:</case>
<case>case <expr><name>VOLATILE</name></expr>:</case>
<case>case <expr><name>RESTRICT</name></expr>:</case>
<case>case <expr><name>CONST</name></expr>:</case>
<expr_stmt><expr><name>tdp</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><name>tdp</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Dwarf_Off</name></type>
<name>die_off</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_dieoffset</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"failed to get offset for die: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Dwarf_Die</name></type>
<name>die_sibling</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>sib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dwarf_siblingof</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_dw</name></name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>sib</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>DW_DLV_NO_ENTRY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to find type sibling: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Dwarf_Die</name></type>
<name>die_child</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dwarf_child</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>child</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>DW_DLV_NO_ENTRY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to find type child: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Dwarf_Half</name></type>
<name>die_tag</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>tag</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_tag</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>tag</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get tag for type: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Dwarf_Attribute</name></type>
<name>die_attr</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dwarf_attr</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>attr</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>DW_DLV_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: no attr 0x%x\n"</literal></expr></argument>, <argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get attribute for type: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_signed</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_signed</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>valp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get signed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_unsigned</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_unsigned</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>valp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get unsigned: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_bool</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_flag</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>valp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get flag: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_string</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_string</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name> <operator>||</operator>
<name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get string: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Dwarf_Off</name></type>
<name>die_attr_ref</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_unsigned</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get ref: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>die_name</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>die_string</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_isdecl</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Bool</name></type> <name>val</name></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>die_bool</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_declaration</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>val</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_isglobal</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>vis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Bool</name></type> <name>ext</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_signed</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_visibility</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>vis</name> <operator>==</operator> <name>DW_VIS_exported</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>die_bool</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_external</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ext</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>die_add</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdesc_add</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tdp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>die_lookup_pass1</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Off</name></type> <name>ref</name> <init>= <expr><call><name>die_attr_ref</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tdp</name> <operator>=</operator> <call><name>tdesc_lookup</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>tdp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>die_add</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_mem_offset</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>req</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>loc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>locnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>form</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>DW_AT_data_member_location</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: can only process attribute "</literal>
<literal type="string">"DW_AT_data_member_location\n"</literal></expr></argument>, <argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>die_attr</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_whatform</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>form</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>form</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_sec_offset</name></expr>:</case>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_loclist</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>locnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>locnum</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>loc</name><operator>-&gt;</operator><name>ld_s</name><operator>-&gt;</operator><name>lr_atom</name></name> <operator>!=</operator> <name>DW_OP_plus_uconst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: cannot parse member offset with "</literal>
<literal type="string">"operator other than DW_OP_plus_uconst\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name><name>loc</name><operator>-&gt;</operator><name>ld_s</name><operator>-&gt;</operator><name>lr_number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_dw</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>-&gt;</operator><name>ld_s</name></name></expr></argument>, <argument><expr><name>DW_DLA_LOC_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_dw</name></name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><name>DW_DLA_LOCDESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_unsigned</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>valp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: cannot parse member offset with form "</literal>
<literal type="string">"%u\n"</literal></expr></argument>, <argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>tdesc_intr_common</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intr_t</name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>intr</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>intr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_signed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_nbits</name></name> <operator>=</operator> <name>sz</name> <operator>*</operator> <name>NBBY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tdp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>INTRINSIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_intr</name></name> <operator>=</operator> <name>intr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdesc_add</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>tdp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>tdesc_intr_void</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dw</name><operator>-&gt;</operator><name>dw_void</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_void</name></name> <operator>=</operator> <call><name>tdesc_intr_common</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>TID_VOID</name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_void</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>tdesc_intr_long</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dw</name><operator>-&gt;</operator><name>dw_long</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_long</name></name> <operator>=</operator> <call><name>tdesc_intr_common</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>TID_LONG</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>,
<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_ptrsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_long</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>tdesc_intr_clone</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bitsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>old</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"tdp %u: attempt to make a bit field from an "</literal>
<literal type="string">"unresolved type\n"</literal></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>t_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <call><name>mfgtid_next</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>INTRINSIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_intr</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>intr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>t_intr</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>t_intr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>intr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>t_intr</name><operator>-&gt;</operator><name>intr_nbits</name></name> <operator>=</operator> <name>bitsz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdesc_add</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>new</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tdesc_array_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>arrtdp</name></decl></parameter>,
<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>dimtdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>uval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>sval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>ctdp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>dim2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ardef_t</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dim2</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ctdp</name> <operator>=</operator> <name>arrtdp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DW_TAG_subrange_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ctdp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctdp</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <call><name>mfgtid_next</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: creating new type %u for sub-dimension\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdesc_array_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim2</name></expr></argument>, <argument><expr><name>arrtdp</name></expr></argument>, <argument><expr><name>ctdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: unexpected non-subrange node in array\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dimtdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>ARRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dimtdp</name><operator>-&gt;</operator><name>t_ardef</name></name> <operator>=</operator> <name>ar</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ardef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>DW_AT_upper_bound</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_nelems</name></name> <operator>=</operator> <name>uval</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>die_signed</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>DW_AT_upper_bound</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_nelems</name></name> <operator>=</operator> <name>sval</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>DW_AT_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_nelems</name></name> <operator>=</operator> <name>uval</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>die_signed</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>DW_AT_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_nelems</name></name> <operator>=</operator> <name>sval</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_nelems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_idxtype</name></name> <operator>=</operator> <call><name>tdesc_intr_long</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ad_contents</name></name> <operator>=</operator> <name>ctdp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>ad_contents</name><operator>-&gt;</operator><name>t_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dimtdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>ad_contents</name><operator>-&gt;</operator><name>t_size</name></name> <operator>*</operator> <name><name>ar</name><operator>-&gt;</operator><name>ad_nelems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dimtdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_array_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>arrtdp</name> <init>= <expr><call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>uval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>dim</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu &lt;%llx&gt;: creating array\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dim</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_TAG_subrange_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to retrieve array bounds\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tdesc_array_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>arrtdp</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>DW_AT_byte_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>dimtdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name>uval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dimtdp</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr>;</init>
<condition><expr><name><name>dimtdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>ARRAY</name></expr>;</condition>
<incr><expr><name>dimtdp</name> <operator>=</operator> <name><name>dimtdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dimtdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu &lt;%llx&gt;: array nelems %u size %u\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_nelems</name></name></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_array_resolve</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>tdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"trying to resolve array %d (cont %d)\n"</literal></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>tdesc_size</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"unable to resolve array %s (%d) contents %d\n"</literal></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name>sz</name> <operator>*</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_nelems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"resolved array %d: %u bytes\n"</literal></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_array_failed</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>tdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Array %d: failed to size contents type %s (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cont</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_enum_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>uval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>sval</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_isdecl</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: creating enum\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>ENUM</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_byte_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uval</name></expr></argument>, <argument><expr><name>DW_ATTR_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name>uval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>elist_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>elastp</name> <init>= <expr><operator>&amp;</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_emem</name></name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>elist_t</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_TAG_enumerator</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die_create_one</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>elist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_name</name></name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_signed</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_const_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_number</name></name> <operator>=</operator> <name>sval</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_const_value</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>uval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>el_number</name></name> <operator>=</operator> <name>uval</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: enum %llu: member without "</literal>
<literal type="string">"value\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: enum %llu: created %s = %d\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_name</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>el_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>elastp</name> <operator>=</operator> <name>el</name></expr>;</expr_stmt>
<expr_stmt><expr><name>elastp</name> <operator>=</operator> <operator>&amp;</operator><name><name>el</name><operator>-&gt;</operator><name>el_next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>mem</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_enumhash</name></name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <name>II_SOU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name> <operator>=</operator> <name>tdp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iidesc_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_enum_match</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>arg1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>fullp</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_emem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fullp</name> <operator>=</operator> <name>tdp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_enum_resolve</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>tdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>full</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_find_iter</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_enumhash</name></name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>die_enum_match</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>full</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"tdp %u: enum %s has no members\n"</literal></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tdp %u: enum %s redirected to %u\n"</literal></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>full</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_fwd_map</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>fwd</name> <init>= <expr><name>arg1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sou</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tdp %u: mapped forward %s to sou %u\n"</literal></expr></argument>, <argument><expr><name><name>fwd</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>fwd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sou</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fwd</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>=</operator> <name>sou</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_sou_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>bitsz</name></decl>, <decl><type ref="prev"/><name>bitoff</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>bysz</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>mlastp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>die_isdecl</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>type</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: creating %s %s\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>FORWARD</name></expr> ?</condition><then> <expr><literal type="string">"forward decl"</literal></expr> </then><else>: <expr><name>typename</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>FORWARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_fwdhash</name></name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_find_iter</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_fwdhash</name></name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>die_fwd_map</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>DW_AT_byte_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>DW_ATTR_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mlastp</name> <operator>=</operator> <operator>&amp;</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_members</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Off</name></type> <name>memoff</name> <init>= <expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>tag</name> <init>= <expr><call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>mloff</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <name>DW_TAG_member</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die_create_one</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: mem %llu: creating member\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>memoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mlist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_mem_offset</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_data_member_location</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mloff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: got mloff %llx\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>mloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_offset</name></name> <operator>=</operator> <name>mloff</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_bit_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>=</operator> <name>bitsz</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>=</operator> <call><name>tdesc_bitsize</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_bit_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitoff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_offset</name></name> <operator>+=</operator> <name>bitoff</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>DW_AT_byte_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bysz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>bysz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_offset</name></name> <operator>+=</operator> <name>bysz</name> <operator>*</operator> <name>NBBY</name> <operator>-</operator> <name>bitoff</name> <operator>-</operator>
<name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_offset</name></name> <operator>+=</operator> <call><name>tdesc_bitsize</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>)</argument_list></call> <operator>-</operator>
<name>bitoff</name> <operator>-</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: mem %llu: created \"%s\" (off %u sz %u)\n"</literal></expr></argument>,
<argument><expr><name>off</name></expr></argument>, <argument><expr><name>memoff</name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_offset</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mlastp</name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mlastp</name> <operator>=</operator> <operator>&amp;</operator><name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>mem</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_members</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsz</name> <init>= <expr><literal type="number">7</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>newsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>newsz</name></expr></argument>, <argument><expr><literal type="string">"orphan %s"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: worked around %s %s\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ii</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <name>II_SOU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name> <operator>=</operator> <name>tdp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iidesc_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_struct_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_sou_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>STRUCT</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_union_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_sou_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>UNION</name></expr></argument>, <argument><expr><literal type="string">"union"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_sou_resolve</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>tdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"resolving sou %s\n"</literal></expr></argument>, <argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_members</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>tdesc_basetype</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>=</operator> <call><name>tdesc_bitsize</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>t_members</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>ARRAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_nelems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>tdesc_basetype</name><argument_list>(<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>STRUCT</name> <operator>||</operator>
<name><name>mt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>UNION</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>mt</name><operator>-&gt;</operator><name>t_members</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>STRUCT</name> <operator>||</operator> <name><name>mt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>UNION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mt</name> <operator>=</operator> <call><name>tdesc_basetype</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>INTRINSIC</name> <operator>&amp;&amp;</operator>
<name><name>mt</name><operator>-&gt;</operator><name>t_intr</name><operator>-&gt;</operator><name>intr_nbits</name></name> <operator>!=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tdp %u: creating bitfield for %d bits\n"</literal></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name> <operator>=</operator> <call><name>tdesc_intr_clone</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_sou_failed</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>tdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>STRUCT</name></expr> ?</condition><then> <expr><literal type="string">"struct"</literal></expr> </then><else>: <expr><literal type="string">"union"</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_members</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ml</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s %d &lt;%x&gt;: failed to size member \"%s\" "</literal>
<literal type="string">"of type %s (%d &lt;%x&gt;)\n"</literal></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_funcptr_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fndef_t</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu &lt;%llx&gt;: creating function pointer\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_TAG_formal_parameter</name> <operator>&amp;&amp;</operator>
<name>tag</name> <operator>!=</operator> <name>DW_TAG_unspecified_parameters</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die_create_one</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>die_isdecl</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fndef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>FUNCTION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>die_attr</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_ret</name></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_ret</name></name> <operator>=</operator> <call><name>tdesc_intr_void</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>arg</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>DW_TAG_formal_parameter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>DW_TAG_unspecified_parameters</name> <operator>&amp;&amp;</operator>
<name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_vargs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: adding %d argument%s\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_args</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>arg</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_nargs</name></name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_TAG_formal_parameter</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_fndef</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>intr_t</name> <modifier>*</modifier></type>
<name>die_base_name_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlong</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nshort</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nchar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>fmt</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intr_t</name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"base type name \"%s\" is too long\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"signed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"unsigned"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nlong</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nchar</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nshort</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nint</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>nshort</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>nint</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>nlong</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nlong</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nshort</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nint</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="string">"char"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nshort</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nlong</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="string">"short"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nlong</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="string">"long"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="string">"int"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>intr</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>intr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_signed</name></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_iformat</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"unsigned "</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>nlong</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"long "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>newp</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>intr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<typedef>typedef <type><struct>struct <name>fp_size_map</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name><name>fsm_typesz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name><name>fsm_enc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>fp_size_map_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>fp_size_map_t</name></type> <name><name>fp_encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><name>CTF_FP_SINGLE</name></expr>, <expr><name>CTF_FP_CPLX</name></expr>, <expr><name>CTF_FP_IMAGRY</name></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><name>CTF_FP_DOUBLE</name></expr>, <expr><name>CTF_FP_DCPLX</name></expr>, <expr><name>CTF_FP_DIMAGRY</name></expr> }</block></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><name>CTF_FP_LDOUBLE</name></expr>, <expr><name>CTF_FP_LDCPLX</name></expr>, <expr><name>CTF_FP_LDIMAGRY</name></expr> }</block></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><name>CTF_FP_LDOUBLE</name></expr>, <expr><name>CTF_FP_LDCPLX</name></expr>, <expr><name>CTF_FP_LDIMAGRY</name></expr> }</block></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>uint_t</name></type>
<name>die_base_type2enc</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>enc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>fp_size_map_t</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>fp_encodings</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>szidx</name> <init>= <expr><name><name>dw</name><operator>-&gt;</operator><name>dw_ptrsz</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>mult</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <name>DW_ATE_complex_float</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enc</name> <operator>==</operator> <name>DW_ATE_imaginary_float</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>enc</name> <operator>==</operator> <name>DW_ATE_SUN_imaginary_float</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>fsm_typesz</name><index>[<expr><name>szidx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>fsm_typesz</name><index>[<expr><name>szidx</name></expr>]</index></name> <operator>*</operator> <name>mult</name> <operator>==</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>fsm_enc</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>map</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: unrecognized real type size %u\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>intr_t</name> <modifier>*</modifier></type>
<name>die_base_from_dwarf</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intr_t</name> <modifier>*</modifier></type><name>intr</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>intr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>enc</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>die_signed</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>DW_AT_encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>, <argument><expr><name>DW_ATTR_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>enc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ATE_unsigned</name></expr>:</case>
<case>case <expr><name>DW_ATE_address</name></expr>:</case>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_ATE_unsigned_char</name></expr>:</case>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_iformat</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_ATE_signed</name></expr>:</case>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_signed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_ATE_signed_char</name></expr>:</case>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_signed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_iformat</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_ATE_boolean</name></expr>:</case>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_signed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_iformat</name></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_ATE_float</name></expr>:</case>
<case>case <expr><name>DW_ATE_complex_float</name></expr>:</case>
<case>case <expr><name>DW_ATE_imaginary_float</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>DW_ATE_SUN_imaginary_float</name></expr>:</case>
<case>case <expr><name>DW_ATE_SUN_interval_float</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_type</name></name> <operator>=</operator> <name>INTR_REAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_signed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_fformat</name></name> <operator>=</operator> <call><name>die_base_type2enc</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: unknown base type encoding 0x%llx\n"</literal></expr></argument>,
<argument><expr><name>off</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>intr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_base_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intr_t</name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: creating base type\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>die_unsigned</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>DW_AT_byte_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>DW_ATTR_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: base type without name\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>intr</name> <operator>=</operator> <call><name>die_base_name_parse</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: name \"%s\" remapped to \"%s\"\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: using dwarf data for base \"%s\"\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>intr</name> <operator>=</operator> <call><name>die_base_from_dwarf</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>intr</name><operator>-&gt;</operator><name>intr_nbits</name></name> <operator>=</operator> <name>sz</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>INTRINSIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_intr</name></name> <operator>=</operator> <name>intr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_through_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>attr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu &lt;%llx&gt;: creating %s type %d\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>die_attr</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>=</operator> <call><name>tdesc_intr_void</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>POINTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_size</name></name> <operator>=</operator> <name><name>dw</name><operator>-&gt;</operator><name>dw_ptrsz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPEDEF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <name>II_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name> <operator>=</operator> <name>tdp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iidesc_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_typedef_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_through_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>TYPEDEF</name></expr></argument>, <argument><expr><literal type="string">"typedef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_const_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_through_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>CONST</name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_pointer_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_through_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>POINTER</name></expr></argument>, <argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_restrict_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_through_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>RESTRICT</name></expr></argument>, <argument><expr><literal type="string">"restrict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_volatile_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>die_through_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>VOLATILE</name></expr></argument>, <argument><expr><literal type="string">"volatile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_function_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><name>tdp</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu &lt;%llx&gt;: creating function definition\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_TAG_formal_parameter</name> <operator>&amp;&amp;</operator>
<name>tag</name> <operator>!=</operator> <name>DW_TAG_variable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die_create_one</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>die_isdecl</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>name</name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ii</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <ternary><condition><expr><call><name>die_isglobal</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>II_GFUN</name></expr> </then><else>: <expr><name>II_SFUN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>==</operator> <name>II_SFUN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_owner</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_cuname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: function %s is %s\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>==</operator> <name>II_GFUN</name></expr> ?</condition><then> <expr><literal type="string">"global"</literal></expr> </then><else>: <expr><literal type="string">"static"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_attr</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name> <operator>=</operator> <call><name>tdesc_intr_void</name><argument_list>(<argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: looking at sub member at %llu\n"</literal></expr></argument>,
<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_TAG_formal_parameter</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name1</name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"die %llu: func arg %d has no name\n"</literal></expr></argument>,
<argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_vargs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: function has %d argument%s\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_args</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ii</name><operator>-&gt;</operator><name>ii_nargs</name></name></expr>;</condition>
<incr><expr><name>arg</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_TAG_formal_parameter</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_args</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>iidesc_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_variable_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><name>tdp</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: creating object definition\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_isdecl</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>name</name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ii</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <ternary><condition><expr><call><name>die_isglobal</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>II_GVAR</name></expr> </then><else>: <expr><name>II_SVAR</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name></name> <operator>=</operator> <call><name>die_lookup_pass1</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>==</operator> <name>II_SVAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_owner</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_cuname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>iidesc_add</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>die_fwd_resolve</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>fwd</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>fwdp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fwd</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>&amp;</operator> <name>TDESC_F_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fwd</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"tdp %u: unforwarded %s\n"</literal></expr></argument>, <argument><expr><name><name>fwd</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>,
<argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>fwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fwdp</name> <operator>=</operator> <name><name>fwd</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fwd</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_RESOLVED</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_lexblk_descend</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <name>off</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><name>tdp</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>child</name> <init>= <expr><call><name>die_child</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_create</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_F_NOTDP</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>die_creator</name> <block>{
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>dc_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dc_flags</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dc_create</name>)<parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>die_creator_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>die_creator_t</name></type> <name><name>die_creators</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DW_TAG_array_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_array_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_enumeration_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_enum_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_lexical_block</name></expr>, <expr><name>DW_F_NOTDP</name></expr>, <expr><name>die_lexblk_descend</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_pointer_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_pointer_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_structure_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_struct_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_subroutine_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_funcptr_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_typedef</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_typedef_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_union_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_union_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_base_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_base_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_const_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_const_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_subprogram</name></expr>, <expr><name>DW_F_NOTDP</name></expr>, <expr><name>die_function_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_variable</name></expr>, <expr><name>DW_F_NOTDP</name></expr>, <expr><name>die_variable_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_volatile_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_volatile_create</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DW_TAG_restrict_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>die_restrict_create</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>die_creator_t</name> <modifier>*</modifier></type>
<name>die_tag2ctor</name><parameter_list>(<parameter><decl><type><name>Dwarf_Half</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>die_creator_t</name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dc</name> <operator>=</operator> <name>die_creators</name></expr>;</init> <condition><expr><name><name>dc</name><operator>-&gt;</operator><name>dc_create</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>dc_tag</name></name> <operator>==</operator> <name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_create_one</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Off</name></type> <name>off</name> <init>= <expr><call><name>die_off</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>die_creator_t</name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"die %llu &lt;%llx&gt;: create_one\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>dw</name><operator>-&gt;</operator><name>dw_maxoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"illegal die offset %llu (max %llu)\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_maxoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>die_tag</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dc</name> <operator>=</operator> <call><name>die_tag2ctor</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"die %llu: ignoring tag type %x\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tdp</name> <operator>=</operator> <call><name>tdesc_lookup</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>dc</name><operator>-&gt;</operator><name>dc_flags</name></name> <operator>&amp;</operator> <name>DW_F_NOTDP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tdp</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdesc_add</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tdp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>dc</name><operator>-&gt;</operator><name>dc_create</name></name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_create</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>die_create_one</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>die</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>tdtrav_cb_f</name></type> <name><name>die_resolvers</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>die_array_resolve</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>die_sou_resolve</name></expr>,
<expr><name>die_sou_resolve</name></expr>,
<expr><name>die_enum_resolve</name></expr>,
<expr><name>die_fwd_resolve</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>tdtrav_cb_f</name></type> <name><name>die_fail_reporters</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>die_array_failed</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>die_sou_failed</name></expr>,
<expr><name>die_sou_failed</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>die_resolve</name><parameter_list>(<parameter><decl><type><name>dwarf_t</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>iitraverse_hash</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_curvgen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>die_resolvers</name></expr></argument>, <argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"resolve: pass %d, %u left\n"</literal></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: failed to resolve the following "</literal>
<literal type="string">"types:\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>iitraverse_hash</name><argument_list>(<argument><expr><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dw</name><operator>-&gt;</operator><name>dw_td</name><operator>-&gt;</operator><name>td_curvgen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>die_fail_reporters</name></expr></argument>, <argument><expr><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"failed to resolve types\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>dw</name><operator>-&gt;</operator><name>dw_nunres</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>boolean_t</name></type>
<name>should_have_dwarf</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>shdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>symdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nsyms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>boolean_t</name></type> <name>found</name> <init>= <expr><name>B_FALSE</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_SYMTAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"cannot convert stripped objects\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsyms</name> <operator>=</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>/</operator> <name><name>shdr</name><operator>.</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>symdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>symdx</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>symdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>symdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_FUNC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_TLS</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_link</name></name></expr></argument>, <argument><expr><name><name>sym</name><operator>.</operator><name>st_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Bbss.bss"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Ttbss.bss"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Ddata.data"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Ttdata.data"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Drodata.rodata"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>B_TRUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>B_FALSE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>dw_read</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>filename</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>abboff</name></decl>, <decl><type ref="prev"/><name>hdrlen</name></decl>, <decl><type ref="prev"/><name>lang</name></decl>, <decl><type ref="prev"/><name>nxthdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>vers</name></decl>, <decl><type ref="prev"/><name>addrsz</name></decl>, <decl><type ref="prev"/><name>offsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>cu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>child</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dwarf_t</name></type> <name>dw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prod</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dwarf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_td</name></name> <operator>=</operator> <name>td</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_ptrsz</name></name> <operator>=</operator> <call><name>elf_ptrsz</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_mfgtid_last</name></name> <operator>=</operator> <name>TID_MFGTID_BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_tidhash</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>TDESC_HASH_BUCKETS</name></expr></argument>, <argument><expr><name>tdesc_idhash</name></expr></argument>, <argument><expr><name>tdesc_idcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_fwdhash</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>TDESC_HASH_BUCKETS</name></expr></argument>, <argument><expr><name>tdesc_namehash</name></expr></argument>,
<argument><expr><name>tdesc_namecmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_enumhash</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>TDESC_HASH_BUCKETS</name></expr></argument>, <argument><expr><name>tdesc_namehash</name></expr></argument>,
<argument><expr><name>tdesc_namecmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dwarf_elf_init</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>DW_DLC_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>.</operator><name>dw_dw</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>DW_DLV_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>should_have_dwarf</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_errno</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DW_DLE_DEBUG_INFO_NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"failed to initialize DWARF: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dwarf_next_cu_header_b</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_dw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abboff</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>addrsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offsz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxthdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dw</name><operator>.</operator><name>dw_err</name><operator>.</operator><name>err_error</name></name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"rc = %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cu</name> <operator>=</operator> <call><name>die_sibling</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>child</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>should_have_dwarf</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"file does not contain dwarf type data "</literal>
<literal type="string">"(try compiling with -g)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_maxoff</name></name> <operator>=</operator> <name>nxthdr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dw</name><operator>.</operator><name>dw_maxoff</name></name> <operator>&gt;</operator> <name>TID_FILEMAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"file contains too many types\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"DWARF version: %d\n"</literal></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vers</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>vers</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"file contains incompatible version %d DWARF code "</literal>
<literal type="string">"(version 2, 3 or 4 required)\n"</literal></expr></argument>, <argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>die_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>DW_AT_producer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"DWARF emitter: %s\n"</literal></expr></argument>, <argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dwarf_attrval_unsigned</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>DW_AT_language</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lang</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>lang</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LANG_C</name></expr>:</case>
<case>case <expr><name>DW_LANG_C89</name></expr>:</case>
<case>case <expr><name>DW_LANG_C99</name></expr>:</case>
<case>case <expr><name>DW_LANG_C11</name></expr>:</case>
<case>case <expr><name>DW_LANG_C_plus_plus</name></expr>:</case>
<case>case <expr><name>DW_LANG_C_plus_plus_03</name></expr>:</case>
<case>case <expr><name>DW_LANG_C_plus_plus_11</name></expr>:</case>
<case>case <expr><name>DW_LANG_C_plus_plus_14</name></expr>:</case>
<case>case <expr><name>DW_LANG_Mips_Assembler</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"file contains DWARF for unsupported "</literal>
<literal type="string">"language %#x"</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"die %llu: failed to get language attribute: %s\n"</literal></expr></argument>,
<argument><expr><call><name>die_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dwarf_errmsg</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dw</name><operator>.</operator><name>dw_cuname</name></name> <operator>=</operator> <call><name>die_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><call><name>basename</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_cuname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_cuname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dw</name><operator>.</operator><name>dw_cuname</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CU name: %s\n"</literal></expr></argument>, <argument><expr><name><name>dw</name><operator>.</operator><name>dw_cuname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>child</name> <operator>=</operator> <call><name>die_child</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dwarf_next_cu_header_b</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_dw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abboff</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>addrsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offsz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxthdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLV_NO_ENTRY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"multiple compilation units not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dwarf_finish</name><argument_list>(<argument><expr><name><name>dw</name><operator>.</operator><name>dw_dw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dw</name><operator>.</operator><name>dw_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>die_resolve</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_fixups</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>dw</name><operator>.</operator><name>dw_ptrsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
