<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/tdata.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse.h"</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>tdesc_layouthash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>POINTER</name></expr>:</case>
<case>case <expr><name>TYPEDEF</name></expr>:</case>
<case>case <expr><name>VOLATILE</name></expr>:</case>
<case>case <expr><name>CONST</name></expr>:</case>
<case>case <expr><name>RESTRICT</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_name</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FUNCTION</name></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_fndef</name><operator>-&gt;</operator><name>fn_nargs</name></name> <operator>+</operator>
<name><name>tdp</name><operator>-&gt;</operator><name>t_fndef</name><operator>-&gt;</operator><name>fn_vargs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_fndef</name><operator>-&gt;</operator><name>fn_ret</name><operator>-&gt;</operator><name>t_name</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARRAY</name></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_nelems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name><operator>-&gt;</operator><name>ad_contents</name><operator>-&gt;</operator><name>t_name</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STRUCT</name></expr>:</case>
<case>case <expr><name>UNION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_members</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_members</name><operator>-&gt;</operator><name>ml_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ENUM</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_emem</name><operator>-&gt;</operator><name>el_name</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Unexpected unnamed %d tdesc (ID %d)\n"</literal></expr></argument>,
<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>hash_name</name><argument_list>(<argument><expr><name>nbuckets</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>nbuckets</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdesc_layoutcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp1</name> <init>= <expr><name>arg1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tdp2</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp1</name><operator>-&gt;</operator><name>t_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tdp2</name><operator>-&gt;</operator><name>t_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tdp2</name><operator>-&gt;</operator><name>t_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tdp1</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>, <argument><expr><name><name>tdp2</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdesc_idhash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name> <operator>%</operator> <name>nbuckets</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdesc_idcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp1</name> <init>= <expr><name>arg1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tdp2</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp1</name><operator>-&gt;</operator><name>t_id</name></name> <operator>==</operator> <name><name>tdp2</name><operator>-&gt;</operator><name>t_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>tdp1</name><operator>-&gt;</operator><name>t_id</name></name> <operator>&gt;</operator> <name><name>tdp2</name><operator>-&gt;</operator><name>t_id</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdesc_namehash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>nbuckets</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdesc_namecmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp1</name> <init>= <expr><name>arg1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tdp2</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>tdp1</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>, <argument><expr><name><name>tdp2</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdesc_print</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%7d %s\n"</literal></expr></argument>, <argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr></argument>, <argument><expr><call><name>tdesc_name</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_intr</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_intr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_ardef</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_ardef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_mlist</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><name><name>tdp</name><operator>-&gt;</operator><name>t_members</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>oml</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ml</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oml</name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oml</name><operator>-&gt;</operator><name>ml_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>oml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_elist</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>elist_t</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name><name>tdp</name><operator>-&gt;</operator><name>t_emem</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>elist_t</name> <modifier>*</modifier></type><name>oel</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>el</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oel</name> <operator>=</operator> <name>el</name></expr>;</expr_stmt>
<expr_stmt><expr><name>el</name> <operator>=</operator> <name><name>el</name><operator>-&gt;</operator><name>el_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oel</name><operator>-&gt;</operator><name>el_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>oel</name><operator>-&gt;</operator><name>el_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>free_cbs</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
<expr><name>NULL</name></expr></block></expr></init><operator>,</operator>
free_intr<operator>,</operator>
NULL<operator>,</operator>
free_ardef<operator>,</operator>
NULL<operator>,</operator>
free_mlist<operator>,</operator>
free_mlist<operator>,</operator>
free_elist<operator>,</operator>
NULL<operator>,</operator>
NULL<operator>,</operator>
NULL<operator>,</operator>
NULL<operator>,</operator>
NULL<operator>,</operator>
NULL</function_decl>
};
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tdesc_free_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tdp</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>free_cbs</name><index>[<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>free_cbs</name><index>[<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_type</name></name></expr>]</index></name><operator>(</operator><name>tdp</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdesc_free</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tdesc_free_cb</name><argument_list>(<argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdata_label_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le1</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le2</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>le1</name><operator>-&gt;</operator><name>le_idx</name></name> <operator>-</operator> <name><name>le2</name><operator>-&gt;</operator><name>le_idx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdata_label_add</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>le</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>le_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>le_idx</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>td</name><operator>-&gt;</operator><name>td_nextid</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>idx</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>slist_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>tdata_label_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdata_label_top_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>topp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>topp</name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>labelent_t</name> <modifier>*</modifier></type>
<name>tdata_label_top</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>list_iter</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>, <argument><expr><name>tdata_label_top_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>top</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdata_label_find_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>tmpl</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>le_name</name></name></expr></argument>, <argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>le_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>tdata_label_find</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name></type> <name>let</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"BASE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>labelent_t</name> <operator>*</operator><operator>)</operator><call><name>list_first</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name><name>ret</name><operator>-&gt;</operator><name>le_idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>let</name><operator>.</operator><name>le_name</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <operator>(</operator><name>labelent_t</name> <operator>*</operator><operator>)</operator><call><name>list_find</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>let</name></expr></argument>,
<argument><expr><name>tdata_label_find_cb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>ret</name><operator>-&gt;</operator><name>le_idx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tdata_label_newmax_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>newmaxp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>le_idx</name></name> <operator>&gt;</operator> <operator>*</operator><name>newmaxp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>le_idx</name></name> <operator>=</operator> <operator>*</operator><name>newmaxp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdata_label_newmax</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newmax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>list_iter</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>, <argument><expr><name>tdata_label_newmax_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tdata_label_free_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>private</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>le_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>le_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdata_label_free</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>, <argument><expr><name>tdata_label_free_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>td_labels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>tdata_t</name> <modifier>*</modifier></type>
<name>tdata_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tdata_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>td_layouthash</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>TDATA_LAYOUT_HASH_SIZE</name></expr></argument>, <argument><expr><name>tdesc_layouthash</name></expr></argument>,
<argument><expr><name>tdesc_layoutcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>td_idhash</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>TDATA_ID_HASH_SIZE</name></expr></argument>, <argument><expr><name>tdesc_idhash</name></expr></argument>,
<argument><expr><name>tdesc_idcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>td_iihash</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>IIDESC_HASH_SIZE</name></expr></argument>, <argument><expr><name>iidesc_hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>td_nextid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>td_curvgen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new</name><operator>-&gt;</operator><name>td_mergelock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>new</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdata_free</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hash_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>iidesc_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_layouthash</name></name></expr></argument>, <argument><expr><name>tdesc_free_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_idhash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_fwdlist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdata_label_free</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_parlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_parname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>td_mergelock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>build_hashes</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>ctdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>ctdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_idhash</name></name></expr></argument>, <argument><expr><name>ctdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_layouthash</name></name></expr></argument>, <argument><expr><name>ctdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>tdtrav_cb_f</name></type> <name><name>build_hashes_cbs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>tdtrav_assert</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>,
<expr><name>build_hashes</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tdata_build_hashes_common</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>iitraverse_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>td_curvgen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>build_hashes_cbs</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdata_build_hashes</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>tdata_build_hashes_common</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>tdata_merge</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td1</name></decl></parameter>, <parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>td1</name><operator>-&gt;</operator><name>td_curemark</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>td1</name><operator>-&gt;</operator><name>td_curemark</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_curemark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td1</name><operator>-&gt;</operator><name>td_curvgen</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>td1</name><operator>-&gt;</operator><name>td_curvgen</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_curvgen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td1</name><operator>-&gt;</operator><name>td_nextid</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>td1</name><operator>-&gt;</operator><name>td_nextid</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_nextid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_merge</name><argument_list>(<argument><expr><name><name>td1</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdata_build_hashes_common</name><argument_list>(<argument><expr><name>td1</name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td1</name><operator>-&gt;</operator><name>td_fwdlist</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_fwdlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td2</name><operator>-&gt;</operator><name>td_fwdlist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>slist_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td1</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>, <argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_labels</name></name></expr></argument>,
<argument><expr><name>tdata_label_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td2</name><operator>-&gt;</operator><name>td_labels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_free</name><argument_list>(<argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_layouthash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td2</name><operator>-&gt;</operator><name>td_layouthash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_free</name><argument_list>(<argument><expr><name><name>td2</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td2</name><operator>-&gt;</operator><name>td_iihash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdata_free</name><argument_list>(<argument><expr><name>td2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
