<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/fixup_tdescs.c"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctf_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fix_ptrptr_to_struct</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>strs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"as"</literal></expr>, <expr><literal type="string">"fdbuffer"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mems</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a_objectdir"</literal></expr>, <expr><literal type="string">"fd_shadow"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>acts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"vnode"</literal></expr>, <expr><literal type="string">"page"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tgts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"vnode_t"</literal></expr>, <expr><literal type="string">"page_t"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>act</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tgt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>lookupname</name><argument_list>(<argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>STRUCT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>str</name><operator>-&gt;</operator><name>t_members</name></name></expr>;</init> <condition><expr><name>ml</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><name><name>mems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ml</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>POINTER</name> <operator>||</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_name</name></name> <operator>||</operator>
<name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>POINTER</name> <operator>||</operator>
<name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>act</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>act</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>STRUCT</name> <operator>||</operator> <operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>act</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>, <argument><expr><name><name>acts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tgt</name> <operator>=</operator> <call><name>lookupname</name><argument_list>(<argument><expr><name><name>tgts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>tgt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>TYPEDEF</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p2</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>POINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p2</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>td_nextid</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p2</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>=</operator> <name>tgt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>POINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>td_nextid</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Fixed %s-&gt;%s =&gt; ptrptr struct %s bug\n"</literal></expr></argument>,
<argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>acts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fix_ptr_to_struct</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>strs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"vmem"</literal></expr>, <expr><literal type="string">"id_space"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mems</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">"is_vmem"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vmt</name> <operator>=</operator> <call><name>lookupname</name><argument_list>(<argument><expr><literal type="string">"vmem_t"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>vmt</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>TYPEDEF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>lookupname</name><argument_list>(<argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>str</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>STRUCT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>str</name><operator>-&gt;</operator><name>t_members</name></name></expr>;</init> <condition><expr><name>ml</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><name><name>mems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>POINTER</name> <operator>||</operator>
<name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_name</name></name> <operator>||</operator>
<operator>(</operator><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>STRUCT</name> <operator>&amp;&amp;</operator>
<name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>FORWARD</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name><operator>-&gt;</operator><name>t_tdesc</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>, <argument><expr><literal type="string">"vmem"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Fixed %s-&gt;%s =&gt; ptr struct vmem bug\n"</literal></expr></argument>,
<argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>POINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>td_nextid</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>t_tdesc</name></name> <operator>=</operator> <name>vmt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_type</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>cvt_fixstabs</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fix_ptrptr_to_struct</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fix_ptr_to_struct</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<struct>struct <name>match</name> <block>{
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>m_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m_name</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>matching_iidesc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iidesc</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name> <modifier>*</modifier></type><name>match</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>iidesc</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>m_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>iidesc</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>!=</operator> <name>II_TYPE</name> <operator>&amp;&amp;</operator> <name><name>iidesc</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>!=</operator> <name>II_SOU</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>m_ret</name></name> <operator>=</operator> <name><name>iidesc</name><operator>-&gt;</operator><name>ii_dtype</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>tdesc_t</name> <modifier>*</modifier></type>
<name>lookup_tdesc</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>match</name></name></type> <name>match</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>name</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>iter_iidescs_by_name</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>matching_iidesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>match</name><operator>.</operator><name>m_ret</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fix_small_cpu_struct</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ptrsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>cput</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>machcpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>ml</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>cpum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>foundcpucyc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cput</name> <operator>=</operator> <call><name>lookup_tdesc</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="string">"cpu_t"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cput</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>TYPEDEF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cpu</name> <operator>=</operator> <name><name>cput</name><operator>-&gt;</operator><name>t_tdesc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cpu</name> <operator>=</operator> <call><name>lookup_tdesc</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>cpu</name><operator>-&gt;</operator><name>t_name</name></name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cpu</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>STRUCT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>t_members</name></name></expr><operator>,</operator> <expr><name>lml</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>ml</name></expr>;</condition>
<incr><expr><name>lml</name> <operator>=</operator> <name>ml</name></expr><operator>,</operator> <expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>ml_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><literal type="string">"cpu_cyclic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>foundcpucyc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>foundcpucyc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>lml</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>lml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><literal type="string">"cpu_m"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>streq</name><argument_list>(<argument><expr><name><name>lml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>, <argument><expr><literal type="string">"cpu_m_pad"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CTFCONVERT_PERMISSIVE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"last cpu_t member before cpu_m is %s; "</literal>
<literal type="string">"it must be cpu_m_pad.\n"</literal></expr></argument>, <argument><expr><name><name>lml</name><operator>-&gt;</operator><name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>machcpu</name> <operator>=</operator> <call><name>lookup_tdesc</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="string">"machcpu"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>machcpu</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>machcpu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>machcpu</name><operator>-&gt;</operator><name>t_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"machcpu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>machcpu</name><operator>-&gt;</operator><name>t_id</name></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>td_nextid</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>machcpu</name><operator>-&gt;</operator><name>t_type</name></name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>machcpu</name><operator>-&gt;</operator><name>t_type</name></name> <operator>!=</operator> <name>STRUCT</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Adding cpu_m machcpu %s to cpu struct\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>machcpu</name><operator>-&gt;</operator><name>t_type</name></name> <operator>==</operator> <name>FORWARD</name></expr> ?</condition><then> <expr><literal type="string">"forward"</literal></expr> </then><else>: <expr><literal type="string">"struct"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cpum</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>cpum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpum</name><operator>-&gt;</operator><name>ml_offset</name></name> <operator>=</operator> <name><name>lml</name><operator>-&gt;</operator><name>ml_offset</name></name> <operator>+</operator> <operator>(</operator><name>ptrsize</name> <operator>*</operator> <name>NBBY</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpum</name><operator>-&gt;</operator><name>ml_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpum</name><operator>-&gt;</operator><name>ml_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"cpu_m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpum</name><operator>-&gt;</operator><name>ml_type</name></name> <operator>=</operator> <name>machcpu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpum</name><operator>-&gt;</operator><name>ml_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lml</name><operator>-&gt;</operator><name>ml_next</name></name> <operator>=</operator> <name>cpum</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>cvt_fixups</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ptrsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fix_small_cpu_struct</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>ptrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
