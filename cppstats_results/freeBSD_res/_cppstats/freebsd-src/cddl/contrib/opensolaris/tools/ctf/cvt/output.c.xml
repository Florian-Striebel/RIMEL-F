<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/output.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"symbol.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>iidesc_match</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>iim_fuzzy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iim_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iim_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iim_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>iim_bind</name></decl>;</decl_stmt>
}</block></struct></type> <name>iidesc_match_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>burst_iitypes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>ii</name><operator>-&gt;</operator><name>ii_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>II_GFUN</name></expr>:</case>
<case>case <expr><name>II_SFUN</name></expr>:</case>
<case>case <expr><name>II_GVAR</name></expr>:</case>
<case>case <expr><name>II_SVAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ii</name><operator>-&gt;</operator><name>ii_flags</name></name> <operator>&amp;</operator> <name>IIDESC_F_USED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>ii</name><operator>-&gt;</operator><name>ii_dtype</name><operator>-&gt;</operator><name>t_flags</name></name> <operator>|=</operator> <name>TDESC_F_ISROOT</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>iitraverse_td</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_tdtd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_type_by_id</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdp</name></decl></parameter>, <parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier><name>tdpp</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name> <operator>&gt;</operator> <name><name>iiburst</name><operator>-&gt;</operator><name>iib_maxtypeid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_maxtypeid</name></name> <operator>=</operator> <name><name>tdp</name><operator>-&gt;</operator><name>t_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>slist_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iiburst</name><operator>-&gt;</operator><name>iib_types</name></name></expr></argument>, <argument><expr><name>tdp</name></expr></argument>, <argument><expr><name>tdesc_idcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>tdtrav_cb_f</name></type> <name><name>burst_types_cbs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>tdtrav_assert</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>,
<expr><name>save_type_by_id</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>iiburst_t</name> <modifier>*</modifier></type>
<name>iiburst_new</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iiburst_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_td</name></name> <operator>=</operator> <name>td</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_funcs</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_nfuncs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_objts</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iidesc_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_nobjts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>iiburst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>iiburst_types</name><parameter_list>(<parameter><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdtrav_data_t</name></type> <name>tdtd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tdtrav_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdtd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iiburst</name><operator>-&gt;</operator><name>iib_td</name><operator>-&gt;</operator><name>td_curvgen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>burst_types_cbs</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>iiburst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_tdtd</name></name> <operator>=</operator> <operator>&amp;</operator><name>tdtd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_iter</name><argument_list>(<argument><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>burst_iitypes</name></expr></argument>, <argument><expr><name>iiburst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>iiburst_free</name><parameter_list>(<parameter><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_objts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_types</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iiburst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>matching_iidesc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iidesc</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_match_t</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name><name>iidesc</name><operator>-&gt;</operator><name>ii_name</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>iim_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>iidesc</name><operator>-&gt;</operator><name>ii_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>II_GFUN</name></expr>:</case>
<case>case <expr><name>II_GVAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>iim_bind</name></name> <operator>==</operator> <name>STB_GLOBAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>iim_ret</name></name> <operator>=</operator> <name>iidesc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>iim_fuzzy</name></name> <operator>&amp;&amp;</operator> <name><name>match</name><operator>-&gt;</operator><name>iim_ret</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>iim_ret</name></name> <operator>=</operator> <name>iidesc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>II_SFUN</name></expr>:</case>
<case>case <expr><name>II_SVAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>iim_bind</name></name> <operator>==</operator> <name>STB_LOCAL</name> <operator>&amp;&amp;</operator>
<name><name>match</name><operator>-&gt;</operator><name>iim_file</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>streq</name><argument_list>(<argument><expr><name><name>iidesc</name><operator>-&gt;</operator><name>ii_owner</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>iim_file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>iim_ret</name></name> <operator>=</operator> <name>iidesc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>iidesc_t</name> <modifier>*</modifier></type>
<name>find_iidesc</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>iidesc_match_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>iim_ret</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iter_iidescs_by_name</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>iim_name</name></name></expr></argument>,
<argument><expr><name>matching_iidesc</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>iim_ret</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_for_weak</name><parameter_list>(<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>weak</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>weakfile</name></decl></parameter>,
<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nent</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>strdata</name></decl></parameter>,
<parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>retsym</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>curfilep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpfile1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>tmpsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>candidate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmpsym</name><operator>.</operator><name>st_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpsym</name><operator>.</operator><name>st_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>weak</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_WEAK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>STT_FILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curfile</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>strdata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>+</operator> <name><name>sym</name><operator>.</operator><name>st_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>weak</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>type</name> <operator>||</operator>
<name><name>weak</name><operator>-&gt;</operator><name>st_value</name></name> <operator>!=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>weak</name><operator>-&gt;</operator><name>st_size</name></name> <operator>!=</operator> <name><name>sym</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_WEAK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>.</operator><name>st_shndx</name></name> <operator>!=</operator> <name><name>weak</name><operator>-&gt;</operator><name>st_shndx</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STB_LOCAL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>curfile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>weakfile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>curfile</name></expr></argument>, <argument><expr><name>weakfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>candidate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpfile1</name> <operator>=</operator> <name>curfile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpsym</name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>curfilep</name> <operator>=</operator> <name>curfile</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>retsym</name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>candidate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curfilep</name> <operator>=</operator> <name>tmpfile1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>retsym</name> <operator>=</operator> <name>tmpsym</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>iidesc_t</name> <modifier>*</modifier></type>
<name>copy_from_strong</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>strongdesc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>weakname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>weakfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>iidesc_dup_rename</name><argument_list>(<argument><expr><name>strongdesc</name></expr></argument>, <argument><expr><name>weakname</name></expr></argument>, <argument><expr><name>weakfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar_t</name></type> <name>type</name> <init>= <expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STT_OBJECT</name></expr>:</case>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <name>II_GVAR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STT_FUNC</name></expr>:</case>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ii_type</name></name> <operator>=</operator> <name>II_GFUN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>td_iihash</name></name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>new</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>iiburst_t</name> <modifier>*</modifier></type>
<name>sort_iidescs</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fuzzymatch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dynsym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>shdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>stidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_match_t</name></type> <name>match</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>iim_fuzzy</name></name> <operator>=</operator> <name>fuzzymatch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>iim_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stidx</name> <operator>=</operator> <call><name>findelfsecidx</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>dynsym</name></expr> ?</condition><then> <expr><literal type="string">".dynsym"</literal></expr> </then><else>: <expr><literal type="string">".symtab"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"%s: Can't open symbol table\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scn</name> <operator>=</operator> <call><name>elf_getscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>stidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nent</name> <operator>=</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>/</operator> <name><name>shdr</name><operator>.</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scn</name> <operator>=</operator> <call><name>elf_getscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strdata</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iiburst</name> <operator>=</operator> <call><name>iiburst_new</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>nent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tolist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>ssym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_match_t</name></type> <name>smatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iidesc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Couldn't read symbol %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>iim_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>strdata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>+</operator> <name><name>sym</name><operator>.</operator><name>st_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>iim_bind</name></name> <operator>=</operator> <call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STT_FILE</name></expr>:</case>
<expr_stmt><expr><name>bname</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>match</name><operator>.</operator><name>iim_name</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name><operator>.</operator><name>iim_file</name></name> <operator>=</operator> <ternary><condition><expr><name>bname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>match</name><operator>.</operator><name>iim_name</name></name></expr> </then><else>: <expr><name>bname</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>STT_OBJECT</name></expr>:</case>
<expr_stmt><expr><name>tolist</name> <operator>=</operator> <name><name>iiburst</name><operator>-&gt;</operator><name>iib_objts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <operator>&amp;</operator><name><name>iiburst</name><operator>-&gt;</operator><name>iib_nobjts</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STT_FUNC</name></expr>:</case>
<expr_stmt><expr><name>tolist</name> <operator>=</operator> <name><name>iiburst</name><operator>-&gt;</operator><name>iib_funcs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <operator>&amp;</operator><name><name>iiburst</name><operator>-&gt;</operator><name>iib_nfuncs</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>ignore_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>iim_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>iidesc</name> <operator>=</operator> <call><name>find_iidesc</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iidesc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tolist</name><index>[<expr><operator>*</operator><name>curr</name></expr>]</index></name> <operator>=</operator> <name>iidesc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iidesc</name><operator>-&gt;</operator><name>ii_flags</name></name> <operator>|=</operator> <name>IIDESC_F_USED</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>curr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_for_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>iim_file</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nent</name></expr></argument>, <argument><expr><name>strdata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ssym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smatch</name><operator>.</operator><name>iim_file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>curr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>smatch</name><operator>.</operator><name>iim_fuzzy</name></name> <operator>=</operator> <name>fuzzymatch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smatch</name><operator>.</operator><name>iim_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>strdata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>+</operator> <name><name>ssym</name><operator>.</operator><name>st_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smatch</name><operator>.</operator><name>iim_bind</name></name> <operator>=</operator> <call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>ssym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Weak symbol %s resolved to %s\n"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>iim_name</name></name></expr></argument>,
<argument><expr><name><name>smatch</name><operator>.</operator><name>iim_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iidesc</name> <operator>=</operator> <call><name>find_iidesc</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iidesc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tolist</name><index>[<expr><operator>*</operator><name>curr</name></expr>]</index></name> <operator>=</operator> <call><name>copy_from_strong</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>,
<argument><expr><name>iidesc</name></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>iim_name</name></name></expr></argument>, <argument><expr><name><name>match</name><operator>.</operator><name>iim_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tolist</name><index>[<expr><operator>*</operator><name>curr</name></expr>]</index></name><operator>-&gt;</operator><name>ii_flags</name> <operator>|=</operator> <name>IIDESC_F_USED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>curr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>iiburst_types</name><argument_list>(<argument><expr><name>iiburst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdata_label_newmax</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>iiburst</name><operator>-&gt;</operator><name>iib_maxtypeid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>iiburst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_file</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srcname</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dstname</name></decl></parameter>,
<parameter><decl><type><name>caddr_t</name></type> <name>ctfdata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ctfsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>sehdr</name></decl>, <decl><type ref="prev"/><name>dehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>sscn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dscn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>sdata</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ddata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>shdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Word</name></type> <name>symtab_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symtab_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>new_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>ctfnameoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dynsym</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CTF_USE_DYNSYM</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep_stabs</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CTF_KEEP_STABS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>secxlate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcidx</name></decl>, <decl><type ref="prev"/><name>dstidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curnmoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_newehdr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>gelf_getclass</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>dstname</name></expr></argument>, <argument><expr><literal type="string">"Cannot copy ehdr to temp file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dehdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sehdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GElf_Ehdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_update_ehdr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>symtab_type</name> <operator>=</operator> <ternary><condition><expr><name>dynsym</name></expr> ?</condition><then> <expr><name>SHT_DYNSYM</name></expr> </then><else>: <expr><name>SHT_SYMTAB</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagelf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_LAYOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_newphdr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>dstname</name></expr></argument>, <argument><expr><literal type="string">"Cannot make phdrs in temp file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GElf_Phdr</name></type> <name>phdr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gelf_getphdr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_update_phdr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>secxlate</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sehdr</name><operator>.</operator><name>e_shnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>srcidx</name> <operator>=</operator> <name>dstidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>srcidx</name> <operator>&lt;</operator> <name><name>sehdr</name><operator>.</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>srcidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name> <init>= <expr><call><name>elf_getscn</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>shdr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sname</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>sehdr</name><operator>.</operator><name>e_shstrndx</name></name></expr></argument>, <argument><expr><name><name>shdr1</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>srcname</name></expr></argument>, <argument><expr><literal type="string">"Can't find string at %u"</literal></expr></argument>,
<argument><expr><name><name>shdr1</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><name>CTF_ELF_SCN_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>secxlate</name><index>[<expr><name>srcidx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>keep_stabs</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><literal type="string">".stab"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><literal type="string">".debug"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><literal type="string">".rel.debug"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><literal type="string">".rela.debug"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>secxlate</name><index>[<expr><name>srcidx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dynsym</name> <operator>&amp;&amp;</operator> <name><name>shdr1</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_SYMTAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>secxlate</name><index>[<expr><name>srcidx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>secxlate</name><index>[<expr><name>srcidx</name></expr>]</index></name> <operator>=</operator> <name>dstidx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curnmoff</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name><name>dehdr</name><operator>.</operator><name>e_phoff</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>srcidx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>srcidx</name> <operator>&lt;</operator> <name><name>sehdr</name><operator>.</operator><name>e_shnum</name></name></expr>;</condition> <incr><expr><name>srcidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sscn</name> <operator>=</operator> <call><name>elf_getscn</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>sscn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>secxlate</name><index>[<expr><name>srcidx</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>changing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dscn</name> <operator>=</operator> <call><name>elf_newscn</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>changing</name> <operator>&amp;&amp;</operator> <name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>new_offset</name> <operator>%</operator> <name><name>shdr</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <name><name>shdr</name><operator>.</operator><name>sh_addralign</name></name> <operator>-</operator> <name>pad</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_offset</name></name> <operator>=</operator> <name>new_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_link</name></name> <operator>=</operator> <name><name>secxlate</name><index>[<expr><name><name>shdr</name><operator>.</operator><name>sh_link</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_REL</name> <operator>||</operator> <name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_RELA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_info</name></name> <operator>=</operator> <name><name>secxlate</name><index>[<expr><name><name>shdr</name><operator>.</operator><name>sh_info</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>sehdr</name><operator>.</operator><name>e_shstrndx</name></name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>srcname</name></expr></argument>, <argument><expr><literal type="string">"Can't find string at %u"</literal></expr></argument>,
<argument><expr><name><name>shdr</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gelf_update_shdr</name><argument_list>(<argument><expr><name>dscn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>dstname</name></expr></argument>, <argument><expr><literal type="string">"Cannot update sect %s"</literal></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sdata</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>sscn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>srcname</name></expr></argument>, <argument><expr><literal type="string">"Cannot get sect %s data"</literal></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddata</name> <operator>=</operator> <call><name>elf_newdata</name><argument_list>(<argument><expr><name>dscn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>dstname</name></expr></argument>, <argument><expr><literal type="string">"Can't make sect %s data"</literal></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>sdata</name></expr></argument>, <argument><expr><name>ddata</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>Elf_Data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_align</name></name> <operator>=</operator> <name><name>sdata</name><operator>-&gt;</operator><name>d_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_off</name></name> <operator>=</operator> <name><name>sdata</name><operator>-&gt;</operator><name>d_off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_size</name></name> <operator>=</operator> <name><name>sdata</name><operator>-&gt;</operator><name>d_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_type</name></name> <operator>=</operator> <name><name>sdata</name><operator>-&gt;</operator><name>d_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_version</name></name> <operator>=</operator> <name><name>sdata</name><operator>-&gt;</operator><name>d_version</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>srcidx</name> <operator>==</operator> <name><name>sehdr</name><operator>.</operator><name>e_shstrndx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>seclen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CTF_ELF_SCN_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_size</name></name> <operator>+</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>+</operator>
<name>seclen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>sdata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>+</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr></argument>,
<argument><expr><name>CTF_ELF_SCN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctfnameoff</name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>+=</operator> <name>seclen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_size</name></name> <operator>+=</operator> <name>seclen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>changing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>symtab_type</name> <operator>&amp;&amp;</operator> <name><name>shdr</name><operator>.</operator><name>sh_entsize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nsym</name> <init>= <expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>/</operator> <name><name>shdr</name><operator>.</operator><name>sh_entsize</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>symtab_idx</name> <operator>=</operator> <name><name>secxlate</name><index>[<expr><name>srcidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>sdata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsym</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newscn</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Could not get symbol %d\n"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>.</operator><name>st_shndx</name></name> <operator>&gt;=</operator> <name>SHN_LORESERVE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newscn</name> <operator>=</operator> <name><name>secxlate</name><index>[<expr><name><name>sym</name><operator>.</operator><name>st_shndx</name></name></expr>]</index></name><operator>)</operator> <operator>!=</operator>
<name><name>sym</name><operator>.</operator><name>st_shndx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sym</name><operator>.</operator><name>st_shndx</name></name> <operator>=</operator>
<operator>(</operator><ternary><condition><expr><name>newscn</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>newscn</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_update_sym</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sdata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>sdata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>gelf_update_shdr</name><argument_list>(<argument><expr><name>dscn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>dstname</name></expr></argument>, <argument><expr><literal type="string">"Cannot update sect %s"</literal></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name><name>shdr</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>!=</operator> <name>SHT_NOBITS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>symtab_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"%s: Cannot find %s section\n"</literal></expr></argument>, <argument><expr><name>srcname</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>dynsym</name></expr> ?</condition><then> <expr><literal type="string">"SHT_DYNSYM"</literal></expr> </then><else>: <expr><literal type="string">"SHT_SYMTAB"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dscn</name> <operator>=</operator> <call><name>elf_newscn</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>dscn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_name</name></name> <operator>=</operator> <name>ctfnameoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>=</operator> <name>SHT_PROGBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>=</operator> <name>ctfsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_link</name></name> <operator>=</operator> <name>symtab_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_addralign</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>changing</name> <operator>&amp;&amp;</operator> <name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>new_offset</name> <operator>%</operator> <name><name>shdr</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <name><name>shdr</name><operator>.</operator><name>sh_addralign</name></name> <operator>-</operator> <name>pad</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>.</operator><name>sh_offset</name></name> <operator>=</operator> <name>new_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ddata</name> <operator>=</operator> <call><name>elf_newdata</name><argument_list>(<argument><expr><name>dscn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>=</operator> <name>ctfdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_size</name></name> <operator>=</operator> <name>ctfsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_align</name></name> <operator>=</operator> <name><name>shdr</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>d_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_update_shdr</name><argument_list>(<argument><expr><name>dscn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sehdr</name><operator>.</operator><name>e_phnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>align</name> <init>= <expr><call><name>gelf_fsize</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ELF_T_ADDR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><name>new_offset</name> <operator>%</operator> <name>align</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <name>align</name> <operator>-</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dehdr</name><operator>.</operator><name>e_shoff</name></name> <operator>=</operator> <name>new_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dehdr</name><operator>.</operator><name>e_shstrndx</name></name> <operator>=</operator> <name><name>secxlate</name><index>[<expr><name><name>sehdr</name><operator>.</operator><name>e_shstrndx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_update_ehdr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>elf_update</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ELF_C_WRITE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>dstname</name></expr></argument>, <argument><expr><literal type="string">"Cannot finalize temp file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>secxlate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>caddr_t</name></type>
<name>make_ctf_data</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iiburst_t</name> <modifier>*</modifier></type><name>iiburst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>iiburst</name> <operator>=</operator> <call><name>sort_iidescs</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CTF_FUZZY_MATCH</name></expr></argument>,
<argument><expr><name>flags</name> <operator>&amp;</operator> <name>CTF_USE_DYNSYM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ctf_gen</name><argument_list>(<argument><expr><name>iiburst</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CTF_COMPRESS</name> <operator>|</operator> <name>CTF_SWAP_BYTES</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iiburst_free</name><argument_list>(<argument><expr><name>iiburst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>write_ctf</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>telf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byteorder</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>curname</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"%s: Cannot open for re-reading"</literal></expr></argument>, <argument><expr><name>curname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>elf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>curname</name></expr></argument>, <argument><expr><literal type="string">"Cannot re-read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"Cannot open temp file %s for writing"</literal></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>telf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>tfd</name></expr></argument>, <argument><expr><name>ELF_C_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>curname</name></expr></argument>, <argument><expr><literal type="string">"Cannot write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ehdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> <operator>==</operator> <name>_BIG_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>byteorder</name> <operator>=</operator> <name>ELFDATA2MSB</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>byteorder</name> <operator>=</operator> <name>ELFDATA2LSB</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>ehdr</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_DATA</name></expr>]</index></name> <operator>==</operator> <name>byteorder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CTF_SWAP_BYTES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>curname</name></expr></argument>, <argument><expr><literal type="string">"Failed to get EHDR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>make_ctf_data</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>elf</name></expr></argument>, <argument><expr><name>curname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>curname</name></expr></argument>, <argument><expr><name>telf</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>elf_end</name><argument_list>(<argument><expr><name>telf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>elf_end</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>tfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
