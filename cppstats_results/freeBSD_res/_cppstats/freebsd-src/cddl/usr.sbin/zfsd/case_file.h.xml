<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/home/user/cppstats/results/freeBSD_res/_cppstats/freebsd-src/cddl/usr.sbin/zfsd/case_file.h"><decl_stmt><decl><type><name>class</name></type> <name>CaseFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Vdev</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt; <argument><expr><name>CaseFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>CaseFileList</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>class</name></type> <name>CaseFile</name>
<block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>CaseFile</name> <modifier>*</modifier></type><name>Find</name><argument_list>(<argument><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>poolGUID</name></expr></argument>, <argument><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>vdevGUID</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>CaseFile</name> <modifier>*</modifier></type><name>Find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>physPath</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ReEvaluateByGuid</name><argument_list>(<argument><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>poolGUID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ZfsEvent</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>CaseFile</name> <modifier>&amp;</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><name>Vdev</name> <modifier>&amp;</modifier></type><name>vdev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeSerialize</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Empty</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LogAll</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PurgeAll</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <macro><name>PoolGUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <macro><name>VdevGUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>vdev_state</name> <macro><name>VdevState</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator><macro><name>PoolGUIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator><macro><name>VdevGUIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator><macro><name>PhysicalPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>ReEvaluate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>devPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>physPath</name></decl></parameter>,
<parameter><decl><type><name>Vdev</name> <modifier>*</modifier></type><name>vdev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>ReEvaluate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ZfsEvent</name> <modifier>&amp;</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>RegisterCallout</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DevdCtl</name><operator>::</operator><name>Event</name> <operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>CloseIfSolved</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Log</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>ShouldDegrade</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>ShouldFault</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<label><name>protected</name>:</label>
<enum>enum <block>{
<decl><name>ZFS_DEGRADE_IO_COUNT</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>CalloutFunc_t</name></type> <name>OnGracePeriodEnded</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DeSerializeSelector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dirEntry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeSerializeFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>CaseFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Vdev</name> <operator>&amp;</operator><name>vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CaseFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>RefreshVdevState</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PurgeEvents</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PurgeTentativeEvents</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Serialize</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>DeSerialize</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ifstream</name> <operator>&amp;</operator><name>caseStream</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>SerializeEvList</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DevdCtl</name><operator>::</operator><name>EventList</name> <name>events</name></expr></argument>, <argument><expr><name>int</name> <name>fd</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>prefix</name><operator>=</operator><name>NULL</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>Close</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>OnGracePeriodEnded</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ActivateSpare</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>vdev_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isspare</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Vdev</name></type> <name>BeingReplacedBy</name><parameter_list>(<parameter><decl><type><name>zpool_handle_t</name> <modifier>*</modifier></type><name>zhp</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>CaseFileList</name></type> <name>s_activeCases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>string</name></type> <name>s_caseFilePath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>timeval</name></type> <name>s_removeGracePeriod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>EventList</name> <name>m_events</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>EventList</name> <name>m_tentativeEvents</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>m_poolGUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>m_vdevGUID</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vdev_state</name></type> <name>m_vdevState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>m_poolGUIDString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>m_vdevGUIDString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>m_vdevPhysPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Callout</name></type> <name>m_tentativeTimer</name></decl>;</decl_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>nvlist_t</name> <modifier>*</modifier></type><name>CaseVdev</name><argument_list>(<argument><expr><name>zpool_handle_t</name> <operator>*</operator><name>zhp</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>DevdCtl</name><operator>::</operator><name>Guid</name>
<name>CaseFile</name><operator>::</operator><macro><name>PoolGUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_poolGUID</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>DevdCtl</name><operator>::</operator><name>Guid</name>
<name>CaseFile</name><operator>::</operator><macro><name>VdevGUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_vdevGUID</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <name>vdev_state</name>
<name>CaseFile</name><operator>::</operator><macro><name>VdevState</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_vdevState</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>string</name> <operator>&amp;</operator>
<name>CaseFile</name><operator>::</operator><macro><name>PoolGUIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_poolGUIDString</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>string</name> <operator>&amp;</operator>
<name>CaseFile</name><operator>::</operator><macro><name>VdevGUIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_vdevGUIDString</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>string</name> <operator>&amp;</operator>
<name>CaseFile</name><operator>::</operator><macro><name>PhysicalPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_vdevPhysPath</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
</unit>
