<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ls/print.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)print.c 8.4 (Berkeley) 4/17/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>printaname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_long</name></type></decl></parameter>, <parameter><decl><type><name>u_long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printdev</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>dev_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printtime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>printtype</name><parameter_list>(<parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printsize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>endcolor_termcap</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>endcolor_ansi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>endcolor</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>colortype</name><parameter_list>(<parameter><decl><type><name>mode_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>aclmode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOPRINT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;fts_number == NO_PRINT)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><enum>enum <name>Colors</name> <block>{
<decl><name>C_DIR</name></decl>,
<decl><name>C_LNK</name></decl>,
<decl><name>C_SOCK</name></decl>,
<decl><name>C_FIFO</name></decl>,
<decl><name>C_EXEC</name></decl>,
<decl><name>C_BLK</name></decl>,
<decl><name>C_CHR</name></decl>,
<decl><name>C_SUID</name></decl>,
<decl><name>C_SGID</name></decl>,
<decl><name>C_WSDIR</name></decl>,

<decl><name>C_WDIR</name></decl>,

<decl><name>C_NUMCOLORS</name></decl>
}</block></enum></type> <name>Colors</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defcolors</name> <init>= <expr><literal type="string">"exfxcxdxbxegedabagacad"</literal></expr></init></decl>;</decl_stmt>


<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>underline</name></decl>;</decl_stmt>
}</block> <decl><name><name>colors</name><index>[<expr><name>C_NUMCOLORS</name></expr>]</index></name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>padding_for_month</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>month_max_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>printscol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DISPLAY</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>list</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOPRINT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printaname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_inode</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>printname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f_octal</name> <operator>||</operator> <name>f_octal_escape</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>prn_octal</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_nonprint</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>prn_printable</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>prn_normal</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_abmon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mon</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>mon</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_3</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_5</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_7</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">7</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_8</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_9</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">9</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_10</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_11</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">11</literal></expr>:</case> <return>return <expr><operator>(</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>ABMON_12</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>mbswidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>month</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>donelen</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>donelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>clen</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>month</name> <operator>+</operator> <name>donelen</name></expr></argument>, <argument><expr><name>MB_LEN_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>clen</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>donelen</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>width</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compute_abbreviated_month_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>months_width</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>mbswidth</name><argument_list>(<argument><expr><call><name>get_abmon</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>month_max_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>months_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>month_max_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>month_max_size</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>padding_for_month</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>month_max_size</name> <operator>-</operator> <name><name>months_width</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>printlong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DISPLAY</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NAMES</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>color_printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dp</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>!=</operator> <name>FTS_ROOTLEVEL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>f_longform</name> <operator>||</operator> <name>f_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"total %lu\n"</literal></expr></argument>, <argument><expr><call><name>howmany</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>btotal</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>list</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_NOPRINT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_statp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_inode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*ju "</literal></expr></argument>,
<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_inode</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*jd "</literal></expr></argument>,
<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_block</name></name></expr></argument>, <argument><expr><call><name>howmany</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_blocks</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strmode</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aclmode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_pointer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %*ju %-*s %-*s "</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_nlink</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>st_nlink</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_user</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_group</name></name></expr></argument>,
<argument><expr><name><name>np</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_flags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-*s "</literal></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_flags</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_label</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-*s "</literal></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_label</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printdev</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_size</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printsize</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_size</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_accesstime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printtime</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_birthtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printtime</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_birthtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_statustime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printtime</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printtime</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color_printed</name> <operator>=</operator> <call><name>colortype</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printname</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f_color</name> <operator>&amp;&amp;</operator> <name>color_printed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>endcolor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>f_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printtype</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printlink</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>printstream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DISPLAY</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chcnt</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>list</name></name></expr><operator>,</operator> <expr><name>chcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_number</name></name> <operator>==</operator> <name>NO_PRINT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>chcnt</name> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>fts_link</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>termwidth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <call><name>printaname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_inode</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_link</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>chcnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>printcol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DISPLAY</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>FTSENT</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lastentries</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier><modifier>*</modifier></type><name>narray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numcols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numrows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabwidth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f_notabs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tabwidth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tabwidth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>entries</name></name> <operator>&gt;</operator> <name>lastentries</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>narray</name> <operator>=</operator>
<call><name>realloc</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>entries</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FTSENT</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printscol</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lastentries</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <name>narray</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>list</name></name></expr><operator>,</operator> <expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_link</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_number</name></name> <operator>!=</operator> <name>NO_PRINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>colwidth</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>maxlen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_inode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colwidth</name> <operator>+=</operator> <name><name>dp</name><operator>-&gt;</operator><name>s_inode</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colwidth</name> <operator>+=</operator> <name><name>dp</name><operator>-&gt;</operator><name>s_block</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colwidth</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>colwidth</name> <operator>=</operator> <operator>(</operator><name>colwidth</name> <operator>+</operator> <name>tabwidth</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>tabwidth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>termwidth</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>colwidth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printscol</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>numcols</name> <operator>=</operator> <name>termwidth</name> <operator>/</operator> <name>colwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numrows</name> <operator>=</operator> <name>num</name> <operator>/</operator> <name>numcols</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>%</operator> <name>numcols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>numrows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dp</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>!=</operator> <name>FTS_ROOTLEVEL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>f_longform</name> <operator>||</operator> <name>f_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"total %lu\n"</literal></expr></argument>, <argument><expr><call><name>howmany</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>btotal</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>numrows</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>colwidth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_sortacross</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>chcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>numcols</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <call><name>printaname</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>base</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_inode</name></name></expr></argument>,
<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>s_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_sortacross</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>numrows</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>chcnt</name> <operator>+</operator> <name>tabwidth</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>tabwidth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&lt;=</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f_sortacross</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>numcols</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><ternary><condition><expr><name>f_notabs</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\t'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chcnt</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>endcol</name> <operator>+=</operator> <name>colwidth</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>printaname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>inodefield</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>sizefield</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chcnt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>color_printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_statp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_inode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*ju "</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>inodefield</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*jd "</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sizefield</name></expr></argument>, <argument><expr><call><name>howmany</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_blocks</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>color_printed</name> <operator>=</operator> <call><name>colortype</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <call><name>printname</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f_color</name> <operator>&amp;&amp;</operator> <name>color_printed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>endcolor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>f_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chcnt</name> <operator>+=</operator> <call><name>printtype</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>chcnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>printdev</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%#*jx "</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>ls_strftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>posb</name></decl>, <decl><type ref="prev"/><name><name>nfmt</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>posb</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"%b"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>month_max_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>compute_abbreviated_month_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>month_max_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nfmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfmt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.*s%s%*s%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>posb</name> <operator>-</operator> <name>fmt</name><operator>)</operator></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>get_abmon</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>padding_for_month</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name>posb</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>nfmt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printtime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>ftime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>longstring</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>now</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>d_first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d_first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d_first</name> <operator>=</operator> <operator>(</operator><operator>*</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>D_MD_ORDER</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIXMONTHS</name></cpp:macro> <cpp:value>((365 / 2) * 86400)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name>f_timeformat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>f_timeformat</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_sectime</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><literal type="string">"%e %b %T %Y"</literal></expr> </then><else>: <expr><literal type="string">"%b %e %T %Y"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ftime</name> <operator>+</operator> <name>SIXMONTHS</name> <operator>&gt;</operator> <name>now</name> <operator>&amp;&amp;</operator> <name>ftime</name> <operator>&lt;</operator> <name>now</name> <operator>+</operator> <name>SIXMONTHS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><literal type="string">"%e %b %R"</literal></expr> </then><else>: <expr><literal type="string">"%b %e %R"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>format</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><literal type="string">"%e %b %Y"</literal></expr> </then><else>: <expr><literal type="string">"%b %e %Y"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ls_strftime</name><argument_list>(<argument><expr><name>longstring</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>longstring</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ftime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>longstring</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>printtype</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f_slash</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>==</operator> <name>S_IFDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_IFDIR</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFIFO</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFLNK</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFSOCK</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFWHT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IXOTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>putch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>writech</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printcolor_termcap</name><parameter_list>(<parameter><decl><type><name>Colors</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ansiseq</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>bold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>enter_bold</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>underline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>enter_underline</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ansiseq</name> <operator>=</operator> <call><name>tgoto</name><argument_list>(<argument><expr><name>ansi_fgcol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ansiseq</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>ansiseq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ansiseq</name> <operator>=</operator> <call><name>tgoto</name><argument_list>(<argument><expr><name>ansi_bgcol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ansiseq</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>ansiseq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printcolor_ansi</name><parameter_list>(<parameter><decl><type><name>Colors</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>bold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>underline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";3%d"</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";4%d"</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printcolor</name><parameter_list>(<parameter><decl><type><name>Colors</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>explicitansi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor_ansi</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor_termcap</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>endcolor_termcap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>ansi_coloff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sig</name></expr> ?</condition><then> <expr><name>writech</name></expr> </then><else>: <expr><name>putch</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>attrs_off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sig</name></expr> ?</condition><then> <expr><name>writech</name></expr> </then><else>: <expr><name>putch</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>endcolor_ansi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\33[m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>endcolor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>explicitansi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>endcolor_ansi</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>endcolor_termcap</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>colortype</name><parameter_list>(<parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_IFDIR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_IWOTH</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_ISTXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_WSDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_WDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFLNK</name></expr>:</case>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_LNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFSOCK</name></expr>:</case>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFIFO</name></expr>:</case>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_FIFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFBLK</name></expr>:</case>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_BLK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>S_IFCHR</name></expr>:</case>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_CHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default><empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IXOTH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_ISUID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_SUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_ISGID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_SGID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printcolor</name><argument_list>(<argument><expr><name>C_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>parsecolors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>legacy_warn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>C_NUMCOLORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bold</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>underline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>defcolors</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>defcolors</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>legacy_warn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"LSCOLORS should use "</literal>
<literal type="string">"characters a-h instead of 0-9 ("</literal>
<literal type="string">"see the manual page)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>legacy_warn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>underline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bold</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>underline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"invalid character '%c' in LSCOLORS"</literal>
<literal type="string">" env var"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>colorquit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>endcolor</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lnklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <name>FTS_ROOTLEVEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_parent</name><operator>-&gt;</operator><name>fts_accpath</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lnklen</name> <operator>=</operator> <call><name>readlink</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nls: %s: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>lnklen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printname</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printsize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f_humanval</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HUMANVALSTR_LEN</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>humanize_number</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>bytes</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<argument><expr><name>HN_AUTOSCALE</name></expr></argument>, <argument><expr><name>HN_B</name> <operator>|</operator> <name>HN_NOSPACE</name> <operator>|</operator> <name>HN_DECIMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s "</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>f_thousands</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><literal type="string">"%*j'd "</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*jd "</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>aclmode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>trivial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dev_t</name></type> <name>previous_dev</name> <init>= <expr><name>NODEV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>supports_acls</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>type</name> <init>= <expr><name>ACL_TYPE_ACCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_t</name></type> <name>facl</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>S_ISWHT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>previous_dev</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>&amp;&amp;</operator> <name>supports_acls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <name>FTS_ROOTLEVEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_parent</name><operator>-&gt;</operator><name>fts_accpath</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>previous_dev</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>previous_dev</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>supports_acls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lpathconf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>_PC_ACL_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_TYPE_NFS4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>supports_acls</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>supports_acls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lpathconf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>_PC_ACL_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>supports_acls</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>supports_acls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>facl</name> <operator>=</operator> <call><name>acl_get_link_np</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>facl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>acl_is_trivial_np</name><argument_list>(<argument><expr><name>facl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trivial</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>facl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trivial</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>facl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
