<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ls/cmp.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)cmp.c 8.1 (Berkeley) 5/31/93";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>namecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>revnamecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>modcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_samesort</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>revmodcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>modcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>acccmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_samesort</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>revacccmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>acccmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>birthcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_birthtim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_samesort</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>revbirthcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>birthcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>statcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator>
<name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_samesort</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>revstatcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>statcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>sizecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strcoll</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>revsizecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>sizecmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
