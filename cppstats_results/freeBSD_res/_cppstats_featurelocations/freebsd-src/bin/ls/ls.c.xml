<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ls/ls.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>copyright</name><index>[]</index></name> <init>=
<expr><literal type="string">"@(#) Copyright (c) 1989, 1993, 1994\n\
The Regents of the University of California. All rights reserved.\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)ls.c 8.5 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mac.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRBUF_SIZEOF</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 + CHAR_BIT * sizeof(t) / 3 + 1)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKENINES</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { intmax_t __i; for (__i = 1; n &gt; 0; __i *= 10) n--; n = __i - 1; } while(0)</cpp:value></cpp:define>









<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>display</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mastercmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>traverse</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_OPT</name></cpp:macro> <cpp:value>(CHAR_MAX + 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_opts</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"color"</literal></expr>, <expr><name>optional_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>COLOR_OPT</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>printfcn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DISPLAY</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>sortfcn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>long</name></type> <name>blocksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>termwidth</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>f_accesstime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_birthtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_humanval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_inode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_kblocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_listdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_listdot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_longform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_noautodot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_nofollow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_nonprint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_nosort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_notabs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_numericonly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_octal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_octal_escape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_recursive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_reversesort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_samesort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_sectime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_singlecol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_sizesort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_sortacross</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_statustime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_thousands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f_timeformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_timesort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_whiteout</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>colorflag</name> <init>= <expr><name>COLORFLAG_NEVER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>explicitansi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ansi_bgcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ansi_fgcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ansi_coloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attrs_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enter_bold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enter_underline</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_color_from_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>doit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CLICOLOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COLORTERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>doit</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CLICOLOR_FORCE"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>colorflag</name> <operator>==</operator> <name>COLORFLAG_NEVER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>colorflag</name> <operator>==</operator> <name>COLORFLAG_ALWAYS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>do_color_from_env</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_color_always</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"force"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_color_never</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_color_auto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"tty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"if-tty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dot</name><index>[]</index></name> <init>= <expr><literal type="string">"."</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>dotav</name><index>[]</index></name> <init>= <expr><block>{<expr><name>dot</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>fts_options</name></decl>, <decl><type ref="prev"/><name>notused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>termcapbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcapbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>tcapbuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <call><name>strtonum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>win</name><operator>.</operator><name>ws_col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <name><name>win</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f_nonprint</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>f_singlecol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <call><name>strtonum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errstr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fts_options</name> <operator>=</operator> <name>FTS_PHYSICAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LS_SAMESORT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_samesort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CLICOLOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorflag</name> <operator>=</operator> <name>COLORFLAG_AUTO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
<argument><expr><literal type="string">"+1ABCD:FGHILPRSTUWXZabcdfghiklmnopqrstuwxy,"</literal></expr></argument>, <argument><expr><name>long_opts</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>




<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name>f_singlecol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_longform</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>f_sortacross</name> <operator>=</operator> <name>f_longform</name> <operator>=</operator> <name>f_singlecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>f_longform</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_singlecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>f_sortacross</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_longform</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_singlecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>f_statustime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_accesstime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_birthtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name>f_accesstime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_statustime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_birthtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><name>f_birthtime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_accesstime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_statustime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>f_nosort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_SEEDOT</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name>f_listdot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>f_sizesort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_timesort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>f_timesort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_sizesort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>
<expr_stmt><expr><name>f_thousands</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>f_nonprint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal_escape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>f_timeformat</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>f_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_slash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>





<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"CLICOLOR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>colorflag</name> <operator>=</operator> <name>COLORFLAG_AUTO</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_COMFOLLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_nofollow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name>f_noautodot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>fts_options</name> <operator>&amp;=</operator> <operator>~</operator><name>FTS_PHYSICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_LOGICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_nofollow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>fts_options</name> <operator>&amp;=</operator> <operator>~</operator><name>FTS_COMFOLLOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fts_options</name> <operator>&amp;=</operator> <operator>~</operator><name>FTS_LOGICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_PHYSICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_nofollow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>f_recursive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name>f_sectime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><name>f_whiteout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><name>f_label</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>f_nonprint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal_escape</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>f_listdir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_recursive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>f_humanval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>f_inode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>f_humanval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_kblocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>f_stream</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_singlecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_longform</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>f_numericonly</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>f_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>f_slash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>f_nonprint</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal_escape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>f_reversesort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>f_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>f_nonprint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f_octal_escape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<expr_stmt><expr><name>f_samesort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_OPT</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>optarg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>do_color_always</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorflag</name> <operator>=</operator> <name>COLORFLAG_ALWAYS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>do_color_auto</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorflag</name> <operator>=</operator> <name>COLORFLAG_AUTO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>do_color_never</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorflag</name> <operator>=</operator> <name>COLORFLAG_NEVER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"unsupported --color value '%s' (must be always, auto, or never)"</literal></expr></argument>,
<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"color support not compiled in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_listdot</name> <operator>&amp;&amp;</operator> <call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_noautodot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_listdot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>do_color</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>tgetent</name><argument_list>(<argument><expr><name>termcapbuf</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ansi_fgcol</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"AF"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ansi_bgcol</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"AB"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attrs_off</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"me"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enter_bold</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"md"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enter_underline</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"us"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>ansi_coloff</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"op"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ansi_coloff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ansi_coloff</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"oc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ansi_fgcol</name> <operator>&amp;&amp;</operator> <name>ansi_bgcol</name> <operator>&amp;&amp;</operator> <name>ansi_coloff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>colorflag</name> <operator>==</operator> <name>COLORFLAG_ALWAYS</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>f_color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>explicitansi</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f_color</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>f_notabs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>colorquit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>colorquit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parsecolors</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LSCOLORS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_inode</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_longform</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_timesort</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name>f_sizesort</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_type</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>f_color</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_NOSTAT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_nofollow</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_longform</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_listdir</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>f_type</name> <operator>||</operator> <name>f_slash</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>f_color</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_COMFOLLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FTS_WHITEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f_whiteout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_WHITEOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>f_inode</name> <operator>||</operator> <name>f_longform</name> <operator>||</operator> <name>f_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f_kblocks</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getbsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>notused</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>/=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f_reversesort</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_timesort</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_sizesort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>revnamecmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_sizesort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>revsizecmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_accesstime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>revacccmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_birthtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>revbirthcmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_statustime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>revstatcmp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>revmodcmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_timesort</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_sizesort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>namecmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_sizesort</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>sizecmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_accesstime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>acccmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_birthtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>birthcmp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_statustime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>statcmp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sortfcn</name> <operator>=</operator> <name>modcmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>f_singlecol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>printfcn</name> <operator>=</operator> <name>printscol</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_longform</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>printfcn</name> <operator>=</operator> <name>printlong</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>f_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>printfcn</name> <operator>=</operator> <name>printstream</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>printfcn</name> <operator>=</operator> <name>printcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>traverse</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>fts_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>traverse</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dotav</name></expr></argument>, <argument><expr><name>fts_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>output</name></decl>;</decl_stmt>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>traverse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTS</name> <modifier>*</modifier></type><name>ftsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch_options</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftsp</name> <operator>=</operator>
<call><name>fts_open</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f_nosort</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>mastercmp</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fts_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>chp</name> <operator>=</operator> <call><name>fts_children</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chp</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_listdir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>ch_options</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>f_recursive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_label</name> <operator>&amp;&amp;</operator>
<name>options</name> <operator>&amp;</operator> <name>FTS_NOSTAT</name></expr> ?</condition><then> <expr><name>FTS_NAMEONLY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>fts_read</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_info</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FTS_DC</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: directory causes a cycle"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FTS_DNR</name></expr>:</case>
<case>case <expr><name>FTS_ERR</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FTS_D</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>!=</operator> <name>FTS_ROOTLEVEL</name> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>fts_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_listdot</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printname</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printname</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chp</name> <operator>=</operator> <call><name>fts_children</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>ch_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>chp</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_recursive</name> <operator>&amp;&amp;</operator> <name>chp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fts_set</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fts_read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>display</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DISPLAY</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NAMES</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>maxsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>maxinode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>btotal</name></decl>, <decl><type ref="prev"/><name>labelstrlen</name></decl>, <decl><type ref="prev"/><name>maxlen</name></decl>, <decl><type ref="prev"/><name>maxnlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>maxlabelstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>sizelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>maxgroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>maxuser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>flen</name></decl>, <decl><type ref="prev"/><name>ulen</name></decl>, <decl><type ref="prev"/><name>glen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>initmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entries</name></decl>, <decl><type ref="prev"/><name>needstats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>labelstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ngroup</name><index>[<expr><call><name>STRBUF_SIZEOF</name><argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nuser</name><index>[<expr><call><name>STRBUF_SIZEOF</name><argument_list>(<argument><expr><name>gid_t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name><name>width</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>needstats</name> <operator>=</operator> <name>f_inode</name> <operator>||</operator> <name>f_longform</name> <operator>||</operator> <name>f_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>btotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LS_COLWIDTHS_FIELDS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<expr_stmt><expr><name>initmax</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LS_COLWIDTHS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LS_COLWIDTHS_FIELDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>initmax</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LS_COLWIDTHS_FIELDS</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>initmax</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>initmax</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>initmax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initmax</name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>initmax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>initmax</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>initmax</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>initmax</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>LS_COLWIDTHS_FIELDS</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COLORLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f_color</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>f_notabs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>maxinode</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxblock</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxnlink</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxuser</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxgroup</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxflags</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxlabelstr</name> <operator>=</operator> <name><name>width</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKENINES</name><argument_list>(<argument><expr><name>maxinode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKENINES</name><argument_list>(<argument><expr><name>maxblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKENINES</name><argument_list>(<argument><expr><name>maxnlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKENINES</name><argument_list>(<argument><expr><name>maxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sizelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>list</name></expr><operator>,</operator> <expr><name>entries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>fts_link</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fts_info</name></name> <operator>==</operator> <name>FTS_ERR</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>fts_info</name></name> <operator>==</operator> <name>FTS_NS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_number</name></name> <operator>=</operator> <name>NO_PRINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fts_info</name></name> <operator>==</operator> <name>FTS_D</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_listdir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_number</name></name> <operator>=</operator> <name>NO_PRINT</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_listdot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_number</name></name> <operator>=</operator> <name>NO_PRINT</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fts_namelen</name></name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>fts_namelen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_octal</name> <operator>||</operator> <name>f_octal_escape</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>t</name> <init>= <expr><call><name>len_octal</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_namelen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>needstats</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>fts_statp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_blocks</name></name> <operator>&gt;</operator> <name>maxblock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxblock</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_blocks</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>&gt;</operator> <name>maxinode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxinode</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_ino</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>&gt;</operator> <name>maxnlink</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxnlink</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_nlink</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>btotal</name> <operator>+=</operator> <name><name>sp</name><operator>-&gt;</operator><name>st_blocks</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_longform</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f_numericonly</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>nuser</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nuser</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>ngroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ngroup</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <name>nuser</name></expr>;</expr_stmt>
<expr_stmt><expr><name>group</name> <operator>=</operator> <name>ngroup</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>user_from_uid</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"user_from_uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>group_from_gid</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"group_from_gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ulen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>maxuser</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxuser</name> <operator>=</operator> <name>ulen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>glen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>maxgroup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxgroup</name> <operator>=</operator> <name>glen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fflagstostr</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fflagstostr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>maxflags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxflags</name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>labelstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f_label</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mac_t</name></type> <name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mac_prepare_file_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"MAC label for %s/%s"</literal></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_parent</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>label_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <name>FTS_ROOTLEVEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_parent</name><operator>-&gt;</operator>
<name>fts_accpath</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>FTS_LOGICAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mac_get_file</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mac_get_link</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"MAC label for %s/%s"</literal></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_parent</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mac_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>label_out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mac_to_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>labelstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"MAC label for %s/%s"</literal></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_parent</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mac_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>label_out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mac_free</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>label_out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>labelstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>labelstr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>labelstrlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>labelstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>labelstrlen</name> <operator>&gt;</operator> <name>maxlabelstr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxlabelstr</name> <operator>=</operator> <name>labelstrlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>labelstrlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NAMES</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>labelstrlen</name> <operator>+</operator>
<name>ulen</name> <operator>+</operator> <name>glen</name> <operator>+</operator> <name>flen</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ulen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sizelen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%#jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>&lt;</operator> <name>sizelen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>=</operator> <name>sizelen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f_flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ulen</name> <operator>+</operator> <name>glen</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_label</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>np</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ulen</name> <operator>+</operator> <name>glen</name> <operator>+</operator> <literal type="number">2</literal>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>f_flags</name></expr> ?</condition><then> <expr><name>flen</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>labelstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>labelstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_pointer</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>entries</name></expr>;</expr_stmt>
</block_content>}</block></for>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>f_longform</name> <operator>||</operator> <name>f_size</name><operator>)</operator> <operator>||</operator> <name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>entries</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name>maxlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>needstats</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>btotal</name></name> <operator>=</operator> <name>btotal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_block</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><call><name>howmany</name><argument_list>(<argument><expr><name>maxblock</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_flags</name></name> <operator>=</operator> <name>maxflags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_label</name></name> <operator>=</operator> <name>maxlabelstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_group</name></name> <operator>=</operator> <name>maxgroup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_inode</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%ju"</literal></expr></argument>, <argument><expr><name>maxinode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_nlink</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>maxnlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sizelen</name> <operator>=</operator> <ternary><condition><expr><name>f_humanval</name></expr> ?</condition><then> <expr><name>HUMANVALSTR_LEN</name></expr> </then><else>:
<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%ju"</literal></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>&lt;</operator> <name>sizelen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>=</operator> <name>sizelen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_user</name></name> <operator>=</operator> <name>maxuser</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f_thousands</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>+=</operator> <operator>(</operator><name><name>d</name><operator>.</operator><name>s_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printfcn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f_longform</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>fts_link</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>fts_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>mastercmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a_info</name></decl>, <decl><type ref="prev"/><name>b_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a_info</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>fts_info</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_info</name> <operator>==</operator> <name>FTS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b_info</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>fts_info</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b_info</name> <operator>==</operator> <name>FTS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_info</name> <operator>==</operator> <name>FTS_NS</name> <operator>||</operator> <name>b_info</name> <operator>==</operator> <name>FTS_NS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>namecmp</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_info</name> <operator>!=</operator> <name>b_info</name> <operator>&amp;&amp;</operator>
<name><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <name>FTS_ROOTLEVEL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f_listdir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a_info</name> <operator>==</operator> <name>FTS_D</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b_info</name> <operator>==</operator> <name>FTS_D</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>sortfcn</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
