<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/options.h">




































<struct>struct <name>shparam</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nparam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>malloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>reset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optptr</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eflag</name></cpp:macro> <cpp:value>optval[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fflag</name></cpp:macro> <cpp:value>optval[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Iflag</name></cpp:macro> <cpp:value>optval[2]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iflag</name></cpp:macro> <cpp:value>optval[3]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mflag</name></cpp:macro> <cpp:value>optval[4]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nflag</name></cpp:macro> <cpp:value>optval[5]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sflag</name></cpp:macro> <cpp:value>optval[6]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xflag</name></cpp:macro> <cpp:value>optval[7]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vflag</name></cpp:macro> <cpp:value>optval[8]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Vflag</name></cpp:macro> <cpp:value>optval[9]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Eflag</name></cpp:macro> <cpp:value>optval[10]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Cflag</name></cpp:macro> <cpp:value>optval[11]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aflag</name></cpp:macro> <cpp:value>optval[12]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bflag</name></cpp:macro> <cpp:value>optval[13]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uflag</name></cpp:macro> <cpp:value>optval[14]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>privileged</name></cpp:macro> <cpp:value>optval[15]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tflag</name></cpp:macro> <cpp:value>optval[16]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pflag</name></cpp:macro> <cpp:value>optval[17]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hflag</name></cpp:macro> <cpp:value>optval[18]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nologflag</name></cpp:macro> <cpp:value>optval[19]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pipefailflag</name></cpp:macro> <cpp:value>optval[20]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verifyflag</name></cpp:macro> <cpp:value>optval[21]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSHORTOPTS</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOPTS</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>optval</name><index>[<expr><name>NOPTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>optletter</name><index>[<expr><name>NSHORTOPTS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_OPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>optval</name><index>[<expr><name>NOPTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>optletter</name><index>[<expr><name>NSHORTOPTS</name></expr>]</index></name> <init>= <expr><literal type="string">"efIimnsxvVECabupTPh"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>optname</name><index>[]</index></name> <init>=
<expr><literal type="string">"\007errexit"</literal>
<literal type="string">"\006noglob"</literal>
<literal type="string">"\011ignoreeof"</literal>
<literal type="string">"\013interactive"</literal>
<literal type="string">"\007monitor"</literal>
<literal type="string">"\006noexec"</literal>
<literal type="string">"\005stdin"</literal>
<literal type="string">"\006xtrace"</literal>
<literal type="string">"\007verbose"</literal>
<literal type="string">"\002vi"</literal>
<literal type="string">"\005emacs"</literal>
<literal type="string">"\011noclobber"</literal>
<literal type="string">"\011allexport"</literal>
<literal type="string">"\006notify"</literal>
<literal type="string">"\007nounset"</literal>
<literal type="string">"\012privileged"</literal>
<literal type="string">"\012trapsasync"</literal>
<literal type="string">"\010physical"</literal>
<literal type="string">"\010trackall"</literal>
<literal type="string">"\005nolog"</literal>
<literal type="string">"\010pipefail"</literal>
<literal type="string">"\006verify"</literal></expr></init></decl>
;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>minusc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>arg0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>shparam</name></name></type> <name>shellparam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>shoptarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>nextopt_optptr</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>procargs</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>optschanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>freeparam</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>shparam</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>nextopt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getoptsreset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
