<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/alias.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)alias.c 8.3 (Berkeley) 5/4/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alias.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATABSIZE</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name><name>atab</name><index>[<expr><name>ATABSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>aliases</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>unalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>alias</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>hashalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>setalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>app</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unalias</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>app</name> <operator>=</operator> <call><name>hashalias</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>app</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>app</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aliases</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>freealias</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>app</name></decl>;</decl_stmt>

<expr_stmt><expr><name>app</name> <operator>=</operator> <call><name>hashalias</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <operator>*</operator><name>app</name></expr>;</init> <condition><expr><name>ap</name></expr>;</condition> <incr><expr><name>app</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr><operator>,</operator> <expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ALIASINUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>app</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freealias</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>aliases</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rmaliases</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>app</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ATABSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>app</name> <operator>=</operator> <operator>&amp;</operator><name><name>atab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>app</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <operator>*</operator><name>app</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ALIASINUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>app</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>app</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>app</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freealias</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>aliases</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type>
<name>lookupalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aliases</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <operator>*</operator><call><name>hashalias</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ap</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>check</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ALIASINUSE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ap</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>comparealiases</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>alias</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>a1</name> <init>= <expr><name>p1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>alias</name></name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>a2</name> <init>= <expr><name>p2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>a1</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>a2</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1qstr</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printaliases</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sorted</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sorted</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>aliases</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ATABSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name><name>atab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>ap</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ap</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sorted</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>aliases</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>comparealiases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>aliases</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printalias</name><argument_list>(<argument><expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>int_pending</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>aliascmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printaliases</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>*</operator><name>argptr</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ap</name> <operator>=</operator> <call><name>lookupalias</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"%s: not found"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printalias</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>v</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setalias</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>unaliascmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rmaliases</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>argptr</name></expr>;</condition> <incr><expr><name>argptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>|=</operator> <call><name>unalias</name><argument_list>(<argument><expr><operator>*</operator><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>alias</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>hashalias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hashval</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hashval</name><operator>+=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>&amp;</operator><name><name>atab</name><index>[<expr><name>hashval</name> <operator>%</operator> <name>ATABSIZE</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
