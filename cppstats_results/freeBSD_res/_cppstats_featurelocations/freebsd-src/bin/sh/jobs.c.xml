<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/jobs.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)jobs.c 8.5 (Berkeley) 5/4/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CEOF</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"show.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>









<struct>struct <name>procstat</name> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOBSTOPPED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOBDONE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<struct>struct <name>job</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name></type> <name>ps0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>nprocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pgrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>foreground</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>remembered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>pipefail</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>jobctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jobtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>njobs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>backgndpid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>bgjob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jobmru</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>initialpgrp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ttyfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWAIT_BLOCK</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWAIT_SIG</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWAIT_SIG_TRAP</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>restartjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freejob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>waitcmdloop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>getjob_nonotfound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>getjob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>pid_t</name></type> <name>killjob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>dowait</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checkzombies</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cmdtxt</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cmdputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setcurjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>deljob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>getcurjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getjobstatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printjobcmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>showjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>jobctl</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>jobctl_notty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ttyfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttyfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jobctl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>out2fmt_flush</name><argument_list>(<argument><expr><literal type="string">"sh: can't access tty; job control turned off\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>setjobctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>on</name> <operator>==</operator> <name>jobctl</name> <operator>||</operator> <name>rootshell</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ttyfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ttyfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>_PATH_TTY</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator>
<operator>(</operator><name>ttyfd</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>F_DUPFD_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jobctl_notty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttyfd</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>F_DUPFD_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jobctl_notty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttyfd</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>initialpgrp</name> <operator>=</operator> <call><name>tcgetpgrp</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initialpgrp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>jobctl_notty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>initialpgrp</name> <operator>!=</operator> <call><name>getpgrp</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>initialpgrp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jobctl_notty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGTTIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rootpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tcsetpgrp</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>rootpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>initialpgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ttyfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tcsetpgrp</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>initialpgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttyfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>jobctl</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<function><type><name>int</name></type>
<name>fgcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pgrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>getjob</name><argument_list>(<argument><expr><operator>*</operator><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>jobctl</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"job not created under job control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printjobcmd</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pgrp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ttyfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tcsetpgrp</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>pgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>restartjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>waitforjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>bgcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>getjob</name><argument_list>(<argument><expr><operator>*</operator><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>jobctl</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"job not created under job control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>restartjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"[%td] "</literal></expr></argument>, <argument><expr><name>jp</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printjobcmd</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>argptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>argptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>restartjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setcurjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><operator>-</operator><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ps</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>ps</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>int</name></type>
<name>jobscmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name><name>argv</name><index>[]</index></name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SHOWJOBS_DEFAULT</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">"lps"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SHOWJOBS_VERBOSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SHOWJOBS_PGIDS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SHOWJOBS_PIDS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>showjobs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>(</operator><name>id</name> <operator>=</operator> <operator>*</operator><name>argptr</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>showjob</name><argument_list>(<argument><expr><call><name>getjob</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getjobstatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jp</name><operator>-&gt;</operator><name>pipefail</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>printjobcmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ps</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>ps</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>showjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>statebuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>statestr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>coredump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>curr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>jobno</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>procno</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>procno</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>SHOWJOBS_PGIDS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>jobno</name> <operator>=</operator> <name>jp</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>getcurjob</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>getcurjob</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>coredump</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getjobstatus</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <literal type="string">"Running"</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBSTOPPED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name> <operator>+</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ps</name> <operator>&gt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ps</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>WSTOPSIG</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <call><name>strsignal</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>statestr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <literal type="string">"Suspended"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <literal type="string">"Done"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fmtstr</name><argument_list>(<argument><expr><name>statebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>statebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Done(%d)"</literal></expr></argument>,
<argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <name>statebuf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <call><name>strsignal</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>statestr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>statestr</name> <operator>=</operator> <literal type="string">"Unknown signal"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WCOREDUMP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coredump</name> <operator>=</operator> <literal type="string">" (core dumped)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>ps</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr> ;</init> <condition><expr><name>procno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>ps</name><operator>++</operator></expr><operator>,</operator> <expr><name>procno</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SHOWJOBS_PIDS</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>SHOWJOBS_PGIDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>SHOWJOBS_VERBOSE</name> <operator>&amp;&amp;</operator> <name>ps</name> <operator>!=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jobno</name> <operator>==</operator> <name>curr</name> <operator>&amp;&amp;</operator> <name>ps</name> <operator>==</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>jobno</name> <operator>==</operator> <name>prev</name> <operator>&amp;&amp;</operator> <name>ps</name> <operator>==</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fmtstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"[%d] %c "</literal></expr></argument>, <argument><expr><name>jobno</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fmtstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">" %c "</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SHOWJOBS_VERBOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fmtstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>statestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>coredump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>statestr</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>coredump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SHOWJOBS_VERBOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printjobcmd</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><name>void</name></type>
<name>showjobs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>change</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jobno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"showjobs(%d) called\n"</literal><operator>,</operator> <name>change</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checkzombies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>jobno</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr> ;</init> <condition><expr><name>jobno</name> <operator>&lt;=</operator> <name>njobs</name></expr> ;</condition> <incr><expr><name>jobno</name><operator>++</operator></expr><operator>,</operator> <expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>jp</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>change</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>jp</name><operator>-&gt;</operator><name>changed</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>showjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SHOWJOBS_DEFAULT</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>SHOWJOBS_VERBOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>jp</name><operator>-&gt;</operator><name>remembered</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>iflag</name> <operator>||</operator> <name>jp</name> <operator>!=</operator> <name>bgjob</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>freejob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bgjob</name> <operator>==</operator> <name>jp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bgjob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr><operator>,</operator> <expr><name>ps</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>ps</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name> <operator>!=</operator> <name>nullstr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>jp</name><operator>-&gt;</operator><name>ps0</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><call><name>deljob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>waitcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>waitcmdloop</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>getjob_nonotfound</name><argument_list>(<argument><expr><operator>*</operator><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>waitcmdloop</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>argptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>argptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><name>retval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>waitcmdloop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>, <decl><type ref="prev"/><name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>






<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getjobstatus</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>iflag</name> <operator>||</operator> <operator>!</operator> <name><name>job</name><operator>-&gt;</operator><name>changed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>remembered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>bgjob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bgjob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr> ;</init> <condition><expr><name>jp</name> <operator>&lt;</operator> <name>jobtab</name> <operator>+</operator> <name>njobs</name></expr>;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>iflag</name> <operator>||</operator> <operator>!</operator> <name><name>jp</name><operator>-&gt;</operator><name>changed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>remembered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>==</operator> <name>bgjob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bgjob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr> ;</init> <condition>;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>&gt;=</operator> <name>jobtab</name> <operator>+</operator> <name>njobs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>dowait</name><argument_list>(<argument><expr><name>DOWAIT_BLOCK</name> <operator>|</operator> <name>DOWAIT_SIG</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>job</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>sig</name> <operator>=</operator> <name>pendingsig_waitcmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pendingsig_waitcmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>sig</name> <operator>+</operator> <literal type="number">128</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>jobidcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>getjob</name><argument_list>(<argument><expr><operator>*</operator><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr> ;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><ternary><condition><expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr>?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type>
<name>getjob_nonotfound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jobno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>found</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"%+"</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No current job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jobno</name> <operator>=</operator> <call><name>number</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jobno</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>jobno</name> <operator>&lt;=</operator> <name>njobs</name>
<operator>&amp;&amp;</operator> <name><name>jobtab</name><index>[<expr><name>jobno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>used</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>jobtab</name><index>[<expr><name>jobno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>jp</name> <operator>=</operator> <call><name>getcurjob</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No current job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>jp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>jp</name> <operator>=</operator> <call><name>getcurjob</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>jp</name> <operator>=</operator> <call><name>getcurjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No previous job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>jp</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>njobs</name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cmd</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: ambiguous"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>found</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>njobs</name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cmd</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>namelen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: ambiguous"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>found</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_number</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><call><name>number</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>njobs</name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pid</name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jp</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type>
<name>getjob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>getjob_nonotfound</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No such job: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>jp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>killjob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>getjob</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>jobctl</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>kill</name><argument_list>(<argument><expr><operator>-</operator><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type>
<name>makejob</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier><name>node</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nprocs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>njobs</name></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr> ;</init> <condition>;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>njobs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jobtab</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <name><name>jobtab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><name>jobmru</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>njobs</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name><name>jobtab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>jobtab</name></expr></argument>, <argument><expr><name>njobs</name> <operator>*</operator> <sizeof>sizeof <name><name>jp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>jobmru</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jobmru</name> <operator>=</operator> <operator>&amp;</operator><name><name>jp</name><index>[<expr><name>jobmru</name> <operator>-</operator> <name>jobtab</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>njobs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>jp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>&amp;</operator><name><name>jp</name><index>[<expr><name><name>jp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>-</operator>
<name>jobtab</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>bgjob</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bgjob</name> <operator>=</operator> <operator>&amp;</operator><name><name>jp</name><index>[<expr><name>bgjob</name> <operator>-</operator> <name>jobtab</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>njobs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps</name> <operator>==</operator> <operator>&amp;</operator><name><name>jobtab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>jp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps</name> <operator>=</operator> <operator>&amp;</operator><name><name>jp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps0</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>jobtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jobtab</name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <name>jobtab</name> <operator>+</operator> <name>njobs</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name><name>jobtab</name><index>[<expr><name>njobs</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>remembered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>pipefail</name></name> <operator>=</operator> <name>pipefailflag</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>jobctl</name></name> <operator>=</operator> <name>jobctl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>nprocs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name></name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>nprocs</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>procstat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>ps</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>jp</name><operator>-&gt;</operator><name>ps0</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"makejob(%p, %d) returns %%%td\n"</literal><operator>,</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>node</name><operator>,</operator> <name>nprocs</name><operator>,</operator>
<name>jp</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>jp</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setcurjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>cj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name>jobmru</name></expr>;</init> <condition><expr><name>jp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>jp</name></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>==</operator> <name>cj</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>jobmru</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>jobmru</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jobmru</name> <operator>=</operator> <name>cj</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cj</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>jobmru</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jobmru</name> <operator>=</operator> <name>cj</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deljob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name>jobmru</name></expr>;</init> <condition><expr><name>jp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>jp</name></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>jobmru</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type>
<name>getcurjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>nj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobmru</name></expr>;</init> <condition><expr><name>jp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>jp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name>jp</name> <operator>!=</operator> <name>nj</name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBSTOPPED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>jp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobmru</name></expr>;</init> <condition><expr><name>jp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>jp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name>jp</name> <operator>!=</operator> <name>nj</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>jp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function><type><name>pid_t</name></type>
<name>forkshell</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pgrp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"forkshell(%%%td, %p, %d) called\n"</literal><operator>,</operator> <name>jp</name> <operator>-</operator> <name>jobtab</name><operator>,</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>n</name><operator>,</operator>
<name>mode</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>FORK_BG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>jp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>checkzombies</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flushall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Fork failed, errno=%d\n"</literal><operator>,</operator> <name>errno</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot fork: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wasroot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Child shell %d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wasroot</name> <operator>=</operator> <name>rootshell</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rootshell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>main_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closescript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<expr_stmt><expr><name>forcelocal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_traps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><name>jobctl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wasroot</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>FORK_NOJOB</name> <operator>&amp;&amp;</operator> <name>mflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pgrp</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pgrp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pgrp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name>FORK_FG</name> <operator>&amp;&amp;</operator>
<name>ttyfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>tcsetpgrp</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>pgrp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"tcsetpgrp failed, errno=%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>FORK_BG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ignoresig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ignoresig</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>jp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator> <call><name>fd0_redirected_p</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>open</name><argument_list>(<argument><expr><name>_PATH_DEVNULL</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot open %s: %s"</literal></expr></argument>,
<argument><expr><name>_PATH_DEVNULL</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>FORK_BG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ignoresig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ignoresig</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>jp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator> <call><name>fd0_redirected_p</name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>open</name><argument_list>(<argument><expr><name>_PATH_DEVNULL</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot open %s: %s"</literal></expr></argument>,
<argument><expr><name>_PATH_DEVNULL</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>njobs</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>jobtab</name></expr> ;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wasroot</name> <operator>&amp;&amp;</operator> <name>iflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rootshell</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>FORK_NOJOB</name> <operator>&amp;&amp;</operator> <name>mflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pgrp</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pgrp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>setpgid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>pgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>FORK_BG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bgjob</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bgjob</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>bgjob</name><operator>-&gt;</operator><name>remembered</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>iflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>bgjob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>backgndpid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bgjob</name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>nullstr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>&amp;&amp;</operator> <name>rootshell</name> <operator>&amp;&amp;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>commandtext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>foreground</name></name> <operator>=</operator> <name>mode</name> <operator>==</operator> <name>FORK_FG</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><call><name>setcurjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"In parent shell: child = %d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>pid_t</name></type>
<name>vforkexecshell</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>pip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name></type> <name>jmploc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name> <modifier>*</modifier></type><name>savehandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inton</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"vforkexecshell(%%%td, %s, %p) called\n"</literal><operator>,</operator> <name>jp</name> <operator>-</operator> <name>jobtab</name><operator>,</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pip</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inton</name> <operator>=</operator> <call><name>is_int_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>savehandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>vfork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Vfork failed, errno=%d\n"</literal><operator>,</operator> <name>errno</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot fork: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Child shell %d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jmploc</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>exitstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>jmploc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shellexec</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>jp</name><operator>-&gt;</operator><name>ps</name><index>[<expr><name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>nullstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><call><name>setcurjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SETINTON</name><argument_list>(<argument><expr><name>inton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"In parent shell: child = %d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>int</name></type>
<name>waitforjob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>signaled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>propagate_int</name> <init>= <expr><name><name>jp</name><operator>-&gt;</operator><name>jobctl</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>foreground</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"waitforjob(%%%td) called\n"</literal><operator>,</operator> <name>jp</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>dowait</name><argument_list>(<argument><expr><name>DOWAIT_BLOCK</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>Tflag</name></expr> ?</condition><then> <expr><name>DOWAIT_SIG</name> <operator>|</operator>
<name>DOWAIT_SIG_TRAP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>jp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dotrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>jobctl</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ttyfd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>tcsetpgrp</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>rootpid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"tcsetpgrp failed, errno=%d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBSTOPPED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setcurjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getjobstatus</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signaled</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>signaled</name> <operator>=</operator> <call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>WSTOPSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>JOBS</name> <operator>||</operator> <name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBDONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>int_pending</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIGINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>CLEAR_PENDING_INT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>rootshell</name> <operator>&amp;&amp;</operator> <name>propagate_int</name> <operator>&amp;&amp;</operator>
<call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIGINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dummy_handler</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sig</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>pid_t</name></type>
<name>dowait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>, <decl><type ref="prev"/><name>osa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>omask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>thisjob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sigstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coredump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restore_sigchld</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"dowait(%d, %p) called\n"</literal><operator>,</operator> <name>mode</name><operator>,</operator> <name>job</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restore_sigchld</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>DOWAIT_SIG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sigfillset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>issigchldtrapped</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>restore_sigchld</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>dummy_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>iflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wflags</name> <operator>=</operator> <name>WUNTRACED</name> <operator>|</operator> <name>WCONTINUED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>wflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>DOWAIT_BLOCK</name> <operator>|</operator> <name>DOWAIT_SIG</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>DOWAIT_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wflags</name> <operator>|=</operator> <name>WNOHANG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>wait3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>wflags</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>rusage</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"wait returns %d, status=%d\n"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pid</name><operator>,</operator> <name>status</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>DOWAIT_SIG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>DOWAIT_SIG_TRAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>pendingsig</name></expr> </then><else>: <expr><name>pendingsig_waitcmd</name></expr></else></ternary><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sigsuspend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>int_pending</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ECHILD</name> <operator>&amp;&amp;</operator> <name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>JOBDONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>DOWAIT_SIG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>restore_sigchld</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pid</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thisjob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr> ;</init> <condition><expr><name>jp</name> <operator>&lt;</operator> <name>jobtab</name> <operator>+</operator> <name>njobs</name></expr> ;</condition> <incr><expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stopped</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name></expr> ;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>ps</name></name> <operator>+</operator> <name><name>jp</name><operator>-&gt;</operator><name>nprocs</name></name></expr> ;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Changing status of proc %d from 0x%x to 0x%x\n"</literal><operator>,</operator>
<operator>(</operator><name>int</name><operator>)</operator><name>pid</name><operator>,</operator> <name><name>sp</name><operator>-&gt;</operator><name>status</name></name><operator>,</operator>
<name>status</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WIFCONTINUED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>thisjob</name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stopped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>stopped</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><name>done</name></expr>?</condition><then> <expr><name>JOBDONE</name></expr> </then><else>: <expr><name>JOBSTOPPED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Job %td: changing state from %d to %d\n"</literal><operator>,</operator> <name>jp</name> <operator>-</operator> <name>jobtab</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name><name>jp</name><operator>-&gt;</operator><name>state</name></name><operator>,</operator> <name>state</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name> <operator>!=</operator> <name>job</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>jp</name><operator>-&gt;</operator><name>remembered</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name>iflag</name> <operator>&amp;&amp;</operator> <name>jp</name> <operator>!=</operator> <name>bgjob</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freejob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deljob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thisjob</name> <operator>||</operator> <name><name>thisjob</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><name>rootshell</name> <operator>||</operator> <operator>!</operator><name>iflag</name> <operator>||</operator> <name>thisjob</name> <operator>==</operator> <name>job</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>thisjob</name><operator>-&gt;</operator><name>foreground</name></name> <operator>&amp;&amp;</operator> <name><name>thisjob</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>JOBSTOPPED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>coredump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name><name>thisjob</name><operator>-&gt;</operator><name>ps</name></name></expr>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name><name>thisjob</name><operator>-&gt;</operator><name>ps</name></name> <operator>+</operator> <name><name>thisjob</name><operator>-&gt;</operator><name>nprocs</name></name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coredump</name> <operator>=</operator> <call><name>WCOREDUMP</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGINT</name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGPIPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sigstr</name> <operator>=</operator> <call><name>strsignal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sigstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out2str</name><argument_list>(<argument><expr><name>sigstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out2str</name><argument_list>(<argument><expr><literal type="string">"Unknown signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>coredump</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out2str</name><argument_list>(<argument><expr><literal type="string">" (core dumped)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>out2c</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushout</name><argument_list>(<argument><expr><name>out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Not printing status, rootshell=%d, job=%p\n"</literal><operator>,</operator> <name>rootshell</name><operator>,</operator> <name>job</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisjob</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><name>int</name></type> <name>job_warning</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>stoppedjobs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jobno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job_warning</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>jobno</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>jp</name> <operator>=</operator> <name>jobtab</name></expr>;</init> <condition><expr><name>jobno</name> <operator>&lt;=</operator> <name>njobs</name></expr>;</condition> <incr><expr><name>jobno</name><operator>++</operator></expr><operator>,</operator> <expr><name>jp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>JOBSTOPPED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out2fmt_flush</name><argument_list>(<argument><expr><literal type="string">"You have stopped jobs.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>job_warning</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkzombies</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>njobs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>dowait</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>backgndpidset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>backgndpid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>pid_t</name></type>
<name>backgndpidval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bgjob</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>forcelocal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bgjob</name><operator>-&gt;</operator><name>remembered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>backgndpid</name></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdnextc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cmdnleft</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCMDTEXT</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>commandtext</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmdnextc</name> <operator>=</operator> <name>name</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>MAXCMDTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdnleft</name> <operator>=</operator> <name>MAXCMDTEXT</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cmdnextc</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdtxtdogroup</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"; do "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"; done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdtxtredir</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deffd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>deffd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fd</name></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NTOFD</name> <operator>||</operator> <name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NFROMFD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>ndup</name><operator>.</operator><name>dupfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>ndup</name><operator>.</operator><name>dupfd</name></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdtxt</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nodelist</name></name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NSEMI</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NAND</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" &amp;&amp; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOR</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" || "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NPIPE</name></expr>:</case>
<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>cmdlist</name></name></expr> ;</init> <condition><expr><name>lp</name></expr> ;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>NSUBSHELL</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NREDIR</name></expr>:</case>
<case>case <expr><name>NBACKGND</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NIF</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"if "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nif</name><operator>.</operator><name>test</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"; then "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nif</name><operator>.</operator><name>ifpart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NWHILE</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"while "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxtdogroup</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUNTIL</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"until "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxtdogroup</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFOR</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nfor</name><operator>.</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" in ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCASE</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"case "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ncase</name><operator>.</operator><name>expr</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" in ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NDEFUN</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"() ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NNOT</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nnot</name><operator>.</operator><name>com</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCMD</name></expr>:</case>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>args</name></name></expr> ;</init> <condition><expr><name>np</name></expr> ;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name></expr> ;</init> <condition><expr><name>np</name></expr> ;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmdtxt</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>NARG</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NTO</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NAPPEND</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NTOFD</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&gt;&amp;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCLOBBER</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&gt;|"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFROM</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFROMTO</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFROMFD</name></expr>:</case>
<expr_stmt><expr><call><name>cmdtxtredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"&lt;&amp;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NHERE</name></expr>:</case>
<case>case <expr><name>NXHERE</name></expr>:</case>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt;..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>cmdputs</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdnleft</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>cmdnextc</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLVAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>cmdnleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subtype</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subtype</name> <operator>&amp;</operator> <name>VSTYPE</name><operator>)</operator> <operator>==</operator> <name>VSLENGTH</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>cmdnleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>subtype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="string">"}-+?=##%%\0X"</literal><index>[<expr><operator>(</operator><name>subtype</name> <operator>&amp;</operator> <name>VSTYPE</name><operator>)</operator> <operator>-</operator> <name>VSNORMAL</name></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdnleft</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>subtype</name> <operator>&amp;</operator> <name>VSTYPE</name><operator>)</operator> <operator>==</operator> <name>VSTRIMLEFTMAX</name> <operator>||</operator>
<operator>(</operator><name>subtype</name> <operator>&amp;</operator> <name>VSTYPE</name><operator>)</operator> <operator>==</operator> <name>VSTRIMRIGHTMAX</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>--</operator><name>cmdnleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name><name>q</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subtype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLENDVAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLBACKQ</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CTLBACKQ</name><operator>+</operator><name>CTLQUOTE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdnleft</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdnleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLARI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdnleft</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdnleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLENDARI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>cmdnleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CTLQUOTEMARK</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CTLQUOTEEND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdnleft</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>cmdnleft</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>cmdnextc</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
