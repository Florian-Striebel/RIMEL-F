<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/mksyntax.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char const copyright[] =
"@(#) Copyright (c) 1991, 1993\n\
The Regents of the University of California. All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)mksyntax.c 8.2 (Berkeley) 5/4/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>


<struct>struct <name>synclass</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>synclass</name></name></type> <name><name>synclass</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"CWORD"</literal></expr>, <expr><literal type="string">"character is nothing special"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CNL"</literal></expr>, <expr><literal type="string">"newline character"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CQNL"</literal></expr>, <expr><literal type="string">"newline character in quotes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CBACK"</literal></expr>, <expr><literal type="string">"a backslash character"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CSBACK"</literal></expr>, <expr><literal type="string">"a backslash character in single quotes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CSQUOTE"</literal></expr>, <expr><literal type="string">"single quote"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CDQUOTE"</literal></expr>, <expr><literal type="string">"double quote"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CENDQUOTE"</literal></expr>, <expr><literal type="string">"a terminating quote"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CBQUOTE"</literal></expr>, <expr><literal type="string">"backwards single quote"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CVAR"</literal></expr>, <expr><literal type="string">"a dollar sign"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CENDVAR"</literal></expr>, <expr><literal type="string">"a '}' character"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CLP"</literal></expr>, <expr><literal type="string">"a left paren in arithmetic"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CRP"</literal></expr>, <expr><literal type="string">"a right paren in arithmetic"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CEOF"</literal></expr>, <expr><literal type="string">"end of file"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CCTL"</literal></expr>, <expr><literal type="string">"like CWORD, except it must be escaped"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CSPCL"</literal></expr>, <expr><literal type="string">"these terminate a word"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CIGN"</literal></expr>, <expr><literal type="string">"character should be ignored"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>synclass</name></name></type> <name><name>is_entry</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ISDIGIT"</literal></expr>, <expr><literal type="string">"a digit"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISUPPER"</literal></expr>, <expr><literal type="string">"an upper case letter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISLOWER"</literal></expr>, <expr><literal type="string">"a lower case letter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISUNDER"</literal></expr>, <expr><literal type="string">"an underscore"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISSPECL"</literal></expr>, <expr><literal type="string">"the name of a special parameter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>writer</name><index>[]</index></name> <init>= <expr><literal type="string">"\
/*\n\
* This file was generated by the mksyntax program.\n\
*/\n\
\n"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>cfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>hfile</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>output_type_macros</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"syntax.c"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"syntax.c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"syntax.h"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"syntax.h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#include &lt;sys/cdefs.h&gt;\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#include &lt;limits.h&gt;\n\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"/* Syntax classes */\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name><name>synclass</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"#define %s %d"</literal></expr></argument>, <argument><expr><name><name>synclass</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> ;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> ;</condition> <incr><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">07</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>, <argument><expr><literal type="string">"/* %s */\n"</literal></expr></argument>, <argument><expr><name><name>synclass</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"/* Syntax classes for is_ functions */\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name><name>is_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"#define %s %#o"</literal></expr></argument>, <argument><expr><name><name>is_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> ;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> ;</condition> <incr><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">07</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>, <argument><expr><literal type="string">"/* %s */\n"</literal></expr></argument>, <argument><expr><name><name>is_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#define SYNBASE (1 - CHAR_MIN)\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#define PEOF -SYNBASE\n\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#define BASESYNTAX (basesyntax + SYNBASE)\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#define DQSYNTAX (dqsyntax + SYNBASE)\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#define SQSYNTAX (sqsyntax + SYNBASE)\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#define ARISYNTAX (arisyntax + SYNBASE)\n"</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_type_macros</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#include \"parser.h\"\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#include \"shell.h\"\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#include \"syntax.h\"\n\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"/* syntax table used when not in quotes */\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="string">"basesyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"CNL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"CBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="string">"CSQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"CDQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"`"</literal></expr></argument>, <argument><expr><literal type="string">"CBQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><literal type="string">"CVAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"CENDVAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;();&amp;| \t"</literal></expr></argument>, <argument><expr><literal type="string">"CSPCL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n/* syntax table used when in double quotes */\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="string">"dqsyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"CQNL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"CBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"CENDQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"`"</literal></expr></argument>, <argument><expr><literal type="string">"CBQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><literal type="string">"CVAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"CENDVAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"!*?[]=~:/-^"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n/* syntax table used when in single quotes */\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="string">"sqsyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"CQNL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"CSBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="string">"CENDQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"!*?[]=~:/-^"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n/* syntax table used when in arithmetic */\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="string">"arisyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"CQNL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="string">"CBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"`"</literal></expr></argument>, <argument><expr><literal type="string">"CBQUOTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"CIGN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><literal type="string">"CVAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="string">"CENDVAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"CLP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="string">"CRP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n/* character classification table */\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="string">"is_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"0123456789"</literal></expr></argument>, <argument><expr><literal type="string">"ISDIGIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></argument>, <argument><expr><literal type="string">"ISLOWER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></argument>, <argument><expr><literal type="string">"ISUPPER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>, <argument><expr><literal type="string">"ISUNDER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"#?$!-*@"</literal></expr></argument>, <argument><expr><literal type="string">"ISSPECL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>, <argument><expr><literal type="string">"extern const char %s[];\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>cfile</name></expr></argument>, <argument><expr><literal type="string">"const char %s[SYNBASE + CHAR_MAX + 1] = {\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>cfile</name></expr></argument>, <argument><expr><literal type="string">"\t[SYNBASE + %s] = %s,\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"PEOF"</literal></expr></argument>, <argument><expr><literal type="string">"CEOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLESC"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLVAR"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLENDVAR"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLBACKQ"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLBACKQ + CTLQUOTE"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLARI"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLENDARI"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLQUOTEMARK"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_one</name><argument_list>(<argument><expr><literal type="string">"CTLQUOTEEND"</literal></expr></argument>, <argument><expr><literal type="string">"CCTL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>, <argument><expr><name>cfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>cfile</name></expr></argument>, <argument><expr><literal type="string">"\t[SYNBASE + '%c'] = %s,\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>cfile</name></expr></argument>, <argument><expr><literal type="string">"\t[SYNBASE + '\\%c'] = %s,\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>macro</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"#define is_digit(c)\t((unsigned int)((c) - '0') &lt;= 9)"</literal></expr>,
<expr><literal type="string">"#define is_eof(c)\t((c) == PEOF)"</literal></expr>,
<expr><literal type="string">"#define is_alpha(c)\t((is_type+SYNBASE)[(int)c] &amp; (ISUPPER|ISLOWER))"</literal></expr>,
<expr><literal type="string">"#define is_name(c)\t((is_type+SYNBASE)[(int)c] &amp; (ISUPPER|ISLOWER|ISUNDER))"</literal></expr>,
<expr><literal type="string">"#define is_in_name(c)\t((is_type+SYNBASE)[(int)c] &amp; (ISUPPER|ISLOWER|ISUNDER|ISDIGIT))"</literal></expr>,
<expr><literal type="string">"#define is_special(c)\t((is_type+SYNBASE)[(int)c] &amp; (ISSPECL|ISDIGIT))"</literal></expr>,
<expr><literal type="string">"#define digit_val(c)\t((c) - '0')"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>output_type_macros</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>macro</name></expr> ;</init> <condition><expr><operator>*</operator><name>pp</name></expr> ;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
