<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/show.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)show.c 8.3 (Berkeley) 5/4/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"show.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>shtree</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>shcmd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sharg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>indent</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>trstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type>
<name>showtree</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>trputs</name><argument_list>(<argument><expr><literal type="string">"showtree called\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shtree</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>shtree</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nodelist</name></name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>indent</name><argument_list>(<argument><expr><name>ind</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NSEMI</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"; "</literal></expr>;</expr_stmt>
<goto>goto <name>binop</name>;</goto>
<case>case <expr><name>NAND</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">" &amp;&amp; "</literal></expr>;</expr_stmt>
<goto>goto <name>binop</name>;</goto>
<case>case <expr><name>NOR</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">" || "</literal></expr>;</expr_stmt>
<label><name>binop</name>:</label>
<expr_stmt><expr><call><name>shtree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shtree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCMD</name></expr>:</case>
<expr_stmt><expr><call><name>shcmd</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NPIPE</name></expr>:</case>
<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>cmdlist</name></name></expr> ;</init> <condition><expr><name>lp</name></expr> ;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>shcmd</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" | "</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>backgnd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &amp;"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"&lt;node type %d&gt;"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>shcmd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dftfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>args</name></name></expr> ;</init> <condition><expr><name>np</name></expr> ;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sharg</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name></expr> ;</init> <condition><expr><name>np</name></expr> ;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NTO</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NAPPEND</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&gt;&gt;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NTOFD</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&gt;&amp;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NCLOBBER</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&gt;|"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFROM</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFROMTO</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;&gt;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFROMFD</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;&amp;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NHERE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;&lt;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NXHERE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;&lt;"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"*error*"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dftfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>dftfd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NTOFD</name> <operator>||</operator> <name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NFROMFD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>ndup</name><operator>.</operator><name>dupfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>ndup</name><operator>.</operator><name>dupfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NHERE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"HERE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NXHERE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"XHERE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sharg</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fname</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>sharg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nodelist</name></name> <modifier>*</modifier></type><name>bqlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subtype</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NARG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;node type %d&gt;\n"</literal></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bqlist</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>backquote</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr> ;</init> <condition><expr><operator>*</operator><name>p</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTLESC</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTLVAR</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subtype</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subtype</name> <operator>==</operator> <name>VSLENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>subtype</name> <operator>&amp;</operator> <name>VSNUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>subtype</name> <operator>&amp;</operator> <name>VSTYPE</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VSNORMAL</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSMINUS</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSPLUS</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSQUESTION</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSASSIGN</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSTRIMLEFT</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSTRIMLEFTMAX</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSTRIMRIGHT</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSTRIMRIGHTMAX</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VSLENGTH</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;subtype %d&gt;"</literal></expr></argument>, <argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>CTLENDVAR</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTLBACKQ</name></expr>:</case>
<case>case <expr><name>CTLBACKQ</name><operator>|</operator><name>CTLQUOTE</name></expr>:</case>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shtree</name><argument_list>(<argument><expr><name><name>bqlist</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>indent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>amount</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pfx</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>amount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>pfx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>tracefile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>debug</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type>
<name>trputc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tracefile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>sh_trace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tracefile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>trputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tracefile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>trstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tracefile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr> ;</init> <condition><expr><operator>*</operator><name>p</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><name>CTLESC</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><name>CTLVAR</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><name>CTLVAR</name><operator>+</operator><name>CTLQUOTE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><name>CTLBACKQ</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<case>case <expr><name>CTLBACKQ</name><operator>+</operator><name>CTLQUOTE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt> <goto>goto <name>backslash</name>;</goto>
<label><name>backslash</name>:</label> <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">03</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;</operator> <literal type="number">07</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">07</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>trargs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tracefile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>trstring</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>opentrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>not_this_way</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"/tmp"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"/trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"./trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tracefile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't open %s: %s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\nTracing started.\n"</literal></expr></argument>, <argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>tracefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
