<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/arith_yylex.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arith_yacc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARITH_BOR</name> <operator>+</operator> <literal type="number">11</literal> <operator>!=</operator> <name>ARITH_BORASS</name> <operator>||</operator> <name>ARITH_ASS</name> <operator>+</operator> <literal type="number">11</literal> <operator>!=</operator> <name>ARITH_EQ</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Arithmetic tokens are out of order.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>arith_t</name></type>
<name>strtoarith_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>arith_t</name></type> <name>val</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>nptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<switch>switch <condition>(<expr><operator>*</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<return>return <expr><call><name>strtoimax</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>arith_t</name><operator>)</operator><call><name>strtoumax</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>arith_t</name><operator>)</operator><call><name>strtoumax</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <name>ARITH_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>ARITH_MIN</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>ARITH_MAX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>arith_buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
<default>default:</default>
<return>return <expr><name>ARITH_BAD</name></expr>;</return>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>strtoarith_t</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arith_buf</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><name>ARITH_NUM</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>buf</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>is_in_name</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>stalloc</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>yylval</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yylval</name><operator>.</operator><name>name</name><index>[<expr><name>buf</name> <operator>-</operator> <name>p</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>ARITH_VAR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_ASS</name> <operator>-</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<label><name>checkeq</name>:</label>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<label><name>checkeqcur</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_GE</name> <operator>-</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_RSHIFT</name> <operator>-</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<default>default:</default>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_GT</name> <operator>-</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_LE</name> <operator>-</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_LSHIFT</name> <operator>-</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<default>default:</default>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_LT</name> <operator>-</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>buf</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_BOR</name> <operator>-</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeqcur</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_OR</name> <operator>-</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>buf</name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_BAND</name> <operator>-</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeqcur</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_AND</name> <operator>-</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>buf</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_NOT</name> <operator>-</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_NE</name> <operator>-</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<goto>goto <name>out</name>;</goto>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_LPAREN</name> <operator>-</operator> <literal type="char">'('</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_RPAREN</name> <operator>-</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_MUL</name> <operator>-</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_DIV</name> <operator>-</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_REM</name> <operator>-</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARITH_BAD</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_ADD</name> <operator>-</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ARITH_BAD</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_SUB</name> <operator>-</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<case>case <expr><literal type="char">'~'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_BNOT</name> <operator>-</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_BXOR</name> <operator>-</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<goto>goto <name>checkeq</name>;</goto>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_QMARK</name> <operator>-</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>ARITH_COLON</name> <operator>-</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><name>arith_buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>
</unit>
