<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/arith_yacc.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arith.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arith_yacc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"var.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARITH_BOR</name> <operator>+</operator> <literal type="number">11</literal> <operator>!=</operator> <name>ARITH_BORASS</name> <operator>||</operator> <name>ARITH_ASS</name> <operator>+</operator> <literal type="number">11</literal> <operator>!=</operator> <name>ARITH_EQ</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Arithmetic tokens are out of order.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arith_startbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arith_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>yystype</name></name></type> <name>yylval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_token</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARITH_PRECEDENCE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>prec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[op - ARITH_BINOP_MIN] = prec</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>prec</name><index>[<expr><name>ARITH_BINOP_MAX</name> <operator>-</operator> <name>ARITH_BINOP_MIN</name></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_MUL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_DIV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_REM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_ADD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_SUB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_LSHIFT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_RSHIFT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_LT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_LE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_GT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_GE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_EQ</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_NE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_BAND</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_BXOR</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ARITH_PRECEDENCE</name><argument_list>(<argument><expr><name>ARITH_BOR</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARITH_MAX_PREC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>letcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__dead2</name> <name>void</name></type> <name>yyerror</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"arithmetic expression: %s: \"%s\""</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>arith_startbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>arith_lookupvarint</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>lookupvar</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uflag</name> <operator>&amp;&amp;</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"variable not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strtoarith_t</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"variable conversion error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>arith_prec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>prec</name><index>[<expr><name>op</name> <operator>-</operator> <name>ARITH_BINOP_MIN</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>higher_prec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>arith_prec</name><argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>arith_prec</name><argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>do_binop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>arith_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>arith_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>ARITH_REM</name></expr>:</case>
<case>case <expr><name>ARITH_DIV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>ARITH_MIN</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"divide error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>ARITH_REM</name></expr> ?</condition><then> <expr><name>a</name> <operator>%</operator> <name>b</name></expr> </then><else>: <expr><name>a</name> <operator>/</operator> <name>b</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>ARITH_MUL</name></expr>:</case>
<return>return <expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>a</name> <operator>*</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>b</name></expr>;</return>
<case>case <expr><name>ARITH_ADD</name></expr>:</case>
<return>return <expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>a</name> <operator>+</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>b</name></expr>;</return>
<case>case <expr><name>ARITH_SUB</name></expr>:</case>
<return>return <expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>a</name> <operator>-</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>b</name></expr>;</return>
<case>case <expr><name>ARITH_LSHIFT</name></expr>:</case>
<return>return <expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><name>ARITH_RSHIFT</name></expr>:</case>
<return>return <expr><name>a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><name>ARITH_LT</name></expr>:</case>
<return>return <expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_LE</name></expr>:</case>
<return>return <expr><name>a</name> <operator>&lt;=</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_GT</name></expr>:</case>
<return>return <expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_GE</name></expr>:</case>
<return>return <expr><name>a</name> <operator>&gt;=</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_EQ</name></expr>:</case>
<return>return <expr><name>a</name> <operator>==</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_NE</name></expr>:</case>
<return>return <expr><name>a</name> <operator>!=</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_BAND</name></expr>:</case>
<return>return <expr><name>a</name> <operator>&amp;</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_BXOR</name></expr>:</case>
<return>return <expr><name>a</name> <operator>^</operator> <name>b</name></expr>;</return>
<case>case <expr><name>ARITH_BOR</name></expr>:</case>
<return>return <expr><name>a</name> <operator>|</operator> <name>b</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>arith_t</name></type> <name>assignment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>primary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>yystype</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>arith_t</name></type> <name>result</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<switch>switch <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARITH_LPAREN</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>assignment</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last_token</name> <operator>!=</operator> <name>ARITH_RPAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"expecting ')'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_token</name> <operator>=</operator> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<case>case <expr><name>ARITH_NUM</name></expr>:</case>
<expr_stmt><expr><name>last_token</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<return>return <expr><name><name>val</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
<case>case <expr><name>ARITH_VAR</name></expr>:</case>
<expr_stmt><expr><name>last_token</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>noeval</name></expr> ?</condition><then> <expr><name><name>val</name><operator>-&gt;</operator><name>val</name></name></expr> </then><else>: <expr><call><name>arith_lookupvarint</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<case>case <expr><name>ARITH_ADD</name></expr>:</case>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
<case>case <expr><name>ARITH_SUB</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><call><name>primary</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>ARITH_NOT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>primary</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>ARITH_BNOT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
<return>return <expr><operator>~</operator><call><name>primary</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"expecting primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>binop2</name><parameter_list>(<parameter><decl><type><name>arith_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precedence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>yystype</name></name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>primary</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op2</name> <operator>=</operator> <name>last_token</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>&gt;=</operator> <name>ARITH_BINOP_MIN</name> <operator>&amp;&amp;</operator> <name>op2</name> <operator>&lt;</operator> <name>ARITH_BINOP_MAX</name> <operator>&amp;&amp;</operator>
<call><name>higher_prec</name><argument_list>(<argument><expr><name>op2</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>binop2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>, <argument><expr><call><name>arith_prec</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op2</name> <operator>=</operator> <name>last_token</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name>noeval</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><call><name>do_binop</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op2</name> <operator>&lt;</operator> <name>ARITH_BINOP_MIN</name> <operator>||</operator> <name>op2</name> <operator>&gt;=</operator> <name>ARITH_BINOP_MAX</name> <operator>||</operator>
<call><name>arith_prec</name><argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>precedence</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>binop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>yystype</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>arith_t</name></type> <name>a</name> <init>= <expr><call><name>primary</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>last_token</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>ARITH_BINOP_MIN</name> <operator>||</operator> <name>op</name> <operator>&gt;=</operator> <name>ARITH_BINOP_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>binop2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>ARITH_MAX_PREC</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>and</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>yystype</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>arith_t</name></type> <name>a</name> <init>= <expr><call><name>binop</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>last_token</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>ARITH_AND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>and</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name> <operator>|</operator> <operator>!</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>or</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>yystype</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>arith_t</name></type> <name>a</name> <init>= <expr><call><name>and</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>last_token</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>ARITH_OR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>or</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name> <operator>|</operator> <operator>!</operator><operator>!</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name> <operator>||</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>cond</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>yystype</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>arith_t</name></type> <name>a</name> <init>= <expr><call><name>or</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_token</name> <operator>!=</operator> <name>ARITH_QMARK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>assignment</name><argument_list>(<argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name> <operator>|</operator> <operator>!</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_token</name> <operator>!=</operator> <name>ARITH_COLON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"expecting ':'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cond</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name> <operator>|</operator> <operator>!</operator><operator>!</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>arith_t</name></type> <name>assignment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noeval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>yystype</name></name></type> <name>val</name> <init>= <expr><name>yylval</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sresult</name><index>[<expr><call><name>DIGITS</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>ARITH_VAR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cond</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>ARITH_ASS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>&lt;</operator> <name>ARITH_ASS_MIN</name> <operator>||</operator> <name>op</name> <operator>&gt;=</operator> <name>ARITH_ASS_MAX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cond</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>assignment</name><argument_list>(<argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>noeval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>noeval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>ARITH_ASS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>do_binop</name><argument_list>(<argument><expr><name>op</name> <operator>-</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><call><name>arith_lookupvarint</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sresult</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sresult</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ARITH_FORMAT_STR</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setvar</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sresult</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>arith_t</name></type> <name>arith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stackmark</name></name></type> <name>smark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arith_buf</name> <operator>=</operator> <name>arith_startbuf</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>assignment</name><argument_list>(<argument><expr><call><name>yylex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_token</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><literal type="string">"expecting EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>letcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>concat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arith_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>STARTSTACKSTR</name><argument_list>(<argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name>argv</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STPUTC</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>ap</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STPUTC</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STPUTC</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>grabstackstr</name><argument_list>(<argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>arith</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><name>ARITH_FORMAT_STR</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><name>i</name></expr>;</return>
</block_content>}</block></function>
</unit>
