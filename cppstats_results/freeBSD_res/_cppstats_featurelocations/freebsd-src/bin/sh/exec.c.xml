<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/exec.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)exec.c 8.4 (Berkeley) 6/8/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"show.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alias.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDTABLESIZE</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>



<struct>struct <name>tblentry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>param</name></name></type> <name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>special</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>cmdtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmdname</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name><name>cmdtable</name><index>[<expr><name>CMDTABLESIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cmdtable_cd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tryexec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printentry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdlookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delete_cmd_entry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addcmdentry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cmdentry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>










<function><type><name>void</name></type>
<name>shellexec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tryexec</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cmdname</name> <operator>=</operator> <call><name>padvance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tryexec</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ENOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>ENOTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errorwithstatus</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="string">"%s: not found"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errorwithstatus</name><argument_list>(<argument><expr><literal type="number">126</literal></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>isbinary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nul</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hasletter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nul</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nul</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>











<expr_stmt><expr><name>hasletter</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>data</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hasletter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hasletter</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>tryexec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>execve</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ENOEXEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>pread</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isbinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOEXEC</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>argv</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>argv</name> <operator>=</operator> <call><name>__DECONST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>_PATH_BSHELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>execve</name><argument_list>(<argument><expr><name>_PATH_BSHELL</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>char</name> <modifier>*</modifier></type>
<name>padvance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>popt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>namelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>*</operator><name>path</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>popt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></else></if_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name> <operator>+</operator> <name>namelen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STARTSTACKSTR</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECKSTRSPACE</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>popt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>popt</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>popt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>stalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>hashcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdentry</name></name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">"rv"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verbose</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>cmdtable</name></expr> ;</init> <condition><expr><name>pp</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>cmdtable</name><index>[<expr><name>CMDTABLESIZE</name></expr>]</index></name></expr> ;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>cmdp</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr> ;</init> <condition><expr><name>cmdp</name></expr> ;</condition> <incr><expr><name>cmdp</name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDNORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printentry</name><argument_list>(<argument><expr><name>cmdp</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <operator>*</operator><name>argptr</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDNORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete_cmd_entry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>find_command</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>DO_ERR</name></expr></argument>, <argument><expr><call><name>pathval</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDUNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printentry</name><argument_list>(<argument><expr><name>cmdp</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>outfmt</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><literal type="string">"%s: not found\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>flushall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>printentry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDNORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>pathval</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>padvance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDBUILTIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"builtin %s"</literal></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"function %s"</literal></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>commandtext</name><argument_list>(<argument><expr><call><name>getfuncnode</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"internal error: cmdtype %d"</literal></expr></argument>, <argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>find_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cmdentry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>act</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>, <decl><type ref="prev"/><name>loc_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cd</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDNORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name> <operator>&amp;&amp;</operator> <name>act</name> <operator>&amp;</operator> <name>DO_NOFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>success</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>find_builtin</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <operator>&amp;</operator><name>loc_cmd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDBUILTIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<goto>goto <name>success</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>e</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><operator>(</operator><name>fullname</name> <operator>=</operator> <call><name>padvance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fullname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>statb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>readcmdfile</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>!=</operator> <name>CMDFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s not defined in %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>success</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notdef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>statb</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>statb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0100</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>statb</name><operator>.</operator><name>st_gid</name></name> <operator>==</operator> <call><name>getegid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>statb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>statb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"searchexec \"%s\" returns \"%s\"\n"</literal><operator>,</operator> <name>name</name><operator>,</operator> <name>fullname</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <operator>&amp;</operator><name>loc_cmd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDNORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<goto>goto <name>success</name>;</goto>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>act</name> <operator>&amp;</operator> <name>DO_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>ENOTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outfmt</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><literal type="string">"%s: not found\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outfmt</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDUNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>

<label><name>success</name>:</label>
<if_stmt><if>if <condition>(<expr><name>cd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmdtable_cd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>special</name></name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>find_builtin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>special</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>builtincmd</name></expr> ;</init> <condition><expr><operator>*</operator><name>bp</name></expr> ;</condition> <incr><expr><name>bp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>bp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>special</name> <operator>=</operator> <operator>(</operator><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>BUILTIN_SPECIAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><name>BUILTIN_SPECIAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>hashcd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmdtable_cd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>changepath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>newval</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>clearcmdentry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tblp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tblp</name> <operator>=</operator> <name>cmdtable</name></expr> ;</init> <condition><expr><name>tblp</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>cmdtable</name><index>[<expr><name>CMDTABLESIZE</name></expr>]</index></name></expr> ;</condition> <incr><expr><name>tblp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>tblp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDNORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>cmdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>cmdtable_cd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>










<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lastcmdentry</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type>
<name>cmdlookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hashval</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hashval</name> <operator>+=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cmdtable</name><index>[<expr><name>hashval</name> <operator>%</operator> <name>CMDTABLESIZE</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cmdp</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr> ;</init> <condition><expr><name>cmdp</name></expr> ;</condition> <incr><expr><name>cmdp</name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>add</name> <operator>&amp;&amp;</operator> <name>cmdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <operator>*</operator><name>pp</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>tblentry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDUNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lastcmdentry</name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt>
<return>return <expr><name>cmdp</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>delete_cmd_entry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <operator>*</operator><name>lastcmdentry</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lastcmdentry</name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>cmdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>addcmdentry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cmdentry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unreffunc</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>cmdtype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>u</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdp</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>special</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>defun</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdentry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDFUNCTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>u</name><operator>.</operator><name>func</name></name> <operator>=</operator> <call><name>copyfunc</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>special</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addcmdentry</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>unsetfunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unreffunc</name><argument_list>(<argument><expr><name><name>cmdp</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_cmd_entry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>isfunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cmdp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_absolute_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>pwd</name> <operator>=</operator> <call><name>lookupvar</name><argument_list>(<argument><expr><literal type="string">"PWD"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pwd</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outcslow</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outcslow</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>typecmd_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdentry</name></name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tblentry</name></name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <call><name>pathval</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>parsekwd</name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>pp</name> <operator>==</operator> <operator>*</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>equal</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is a shell keyword\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ap</name> <operator>=</operator> <call><name>lookupalias</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>TYPECMD_SMALLV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"alias %s="</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1qstr</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outcslow</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is an alias for %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdp</name> <operator>=</operator> <call><name>cmdlookup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>cmdtype</name></name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>cmdtype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>special</name></name> <operator>=</operator> <name><name>cmdp</name><operator>-&gt;</operator><name>special</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>find_command</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>entry</name><operator>.</operator><name>cmdtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CMDNORMAL</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path2</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>padvance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt2</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is%s "</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>cmdp</name> <operator>&amp;&amp;</operator> <name>cmd</name> <operator>==</operator> <name>TYPECMD_TYPE</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">" a tracked alias for"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>print_absolute_path</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>eaccess</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is "</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>print_absolute_path</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outfmt</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error1</name> <operator>|=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CMDFUNCTION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is a shell function\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CMDBUILTIN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>entry</name><operator>.</operator><name>special</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is a special shell builtin\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s is a shell builtin\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>TYPECMD_SMALLV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outfmt</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><literal type="string">"%s: not found\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error1</name> <operator>|=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <call><name>pathval</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>error1</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>typecmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>typecmd_impl</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>TYPECMD_TYPE</name></expr></argument>, <argument><expr><call><name>bltinlookup</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
