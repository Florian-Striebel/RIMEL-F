<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/trap.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)trap.c 8.5 (Berkeley) 6/5/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"show.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myhistedit.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_DFL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CATCH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IGN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_HARD_IGN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_RESET</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sigmode</name><index>[<expr><name>NSIG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>pendingsig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>pendingsig_waitcmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_dotrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name><name>trap</name><index>[<expr><name>NSIG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name><name>gotsig</name><index>[<expr><name>NSIG</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ignore_sigchld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_trapsig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exiting_exitstatus</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getsigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>sig_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>sigstring_to_signum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_number</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>signo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>signo</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>signo</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>signo</name> <operator>&lt;</operator> <name>NSIG</name><operator>)</operator></expr> ?</condition><then> <expr><name>signo</name></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="string">"EXIT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="string">"SIG"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sig</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>sys_nsig</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys_signame</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>sys_signame</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>printsignals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>sys_nsig</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys_signame</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>sys_signame</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sys_signame</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>outlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>&gt;</operator> <literal type="number">71</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <name>sys_nsig</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>out1c</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>trapcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>printsignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <name>argptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>signo</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>signo</name> <operator>&lt;</operator> <name>sys_nsig</name></expr> ;</condition> <incr><expr><name>signo</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>&lt;</operator> <name>NSIG</name> <operator>&amp;&amp;</operator> <name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><literal type="string">"trap -- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1qstr</name><argument_list>(<argument><expr><name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1str</name><argument_list>(<argument><expr><literal type="string">" EXIT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sys_signame</name><index>[<expr><name>signo</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>sys_signame</name><index>[<expr><name>signo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">" %d\n"</literal></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_number</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>*</operator><name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>argv</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>signo</name> <operator>=</operator> <call><name>sigstring_to_signum</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"bad signal %s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>savestr</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>clear_traps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>trap</name></expr> ;</init> <condition><expr><name>tp</name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>trap</name><index>[<expr><name>NSIG</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>tp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <operator>&amp;</operator><name><name>trap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>tp</name> <operator>-</operator> <name>trap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>have_traps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>trap</name></expr> ;</init> <condition><expr><name>tp</name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>trap</name><index>[<expr><name>NSIG</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>tp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>tp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>setsignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sig_t</name></type> <name>sigact</name> <init>= <expr><name>SIG_DFL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_DFL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>t</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_CATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_IGN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>S_DFL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>signo</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIGINT</name></expr>:</case>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_CATCH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGQUIT</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_CATCH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGTERM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rootshell</name> <operator>&amp;&amp;</operator> <name>iflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_IGN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<case>case <expr><name>SIGTSTP</name></expr>:</case>
<case>case <expr><name>SIGTTOU</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rootshell</name> <operator>&amp;&amp;</operator> <name>mflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>S_IGN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>sigmode</name><index>[<expr><name>signo</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getsigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sigact</name> <operator>==</operator> <name>SIG_IGN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>signo</name> <operator>==</operator> <name>SIGTSTP</name> <operator>||</operator>
<name>signo</name> <operator>==</operator> <name>SIGTTIN</name> <operator>||</operator> <name>signo</name> <operator>==</operator> <name>SIGTTOU</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>S_IGN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>S_HARD_IGN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>S_RESET</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <name>S_HARD_IGN</name> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <name>action</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_DFL</name></expr>:</case> <expr_stmt><expr><name>sigact</name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_CATCH</name></expr>:</case> <expr_stmt><expr><name>sigact</name> <operator>=</operator> <name>onsig</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IGN</name></expr>:</case> <expr_stmt><expr><name>sigact</name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sigact</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>getsigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>sig_t</name> <modifier>*</modifier></type><name>sigact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sigaction</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>sigact</name> <operator>=</operator> <operator>(</operator><name>sig_t</name><operator>)</operator> <name><name>sa</name><operator>.</operator><name>sa_handler</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ignoresig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sigmode</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sigmode</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>!=</operator> <name>S_IGN</name> <operator>&amp;&amp;</operator> <name><name>sigmode</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>!=</operator> <name>S_HARD_IGN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sigmode</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>=</operator> <name>S_IGN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>issigchldtrapped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>trap</name><index>[<expr><name>SIGCHLD</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>trap</name><index>[<expr><name>SIGCHLD</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>onsig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name>SIGINT</name> <operator>&amp;&amp;</operator> <name><name>trap</name><index>[<expr><name>SIGINT</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>suppressint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SET_PENDING_INT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>onint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name>SIGINT</name> <operator>||</operator> <name>signo</name> <operator>==</operator> <name>SIGQUIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pendingsig_waitcmd</name> <operator>=</operator> <name>signo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trap</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>trap</name><index>[<expr><name>signo</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>signo</name> <operator>!=</operator> <name>SIGCHLD</name> <operator>||</operator> <operator>!</operator><name>ignore_sigchld</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gotsig</name><index>[<expr><name>signo</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pendingsig</name> <operator>=</operator> <name>signo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pendingsig_waitcmd</name> <operator>=</operator> <name>signo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>dotrap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stackmark</name></name></type> <name>smark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>savestatus</name></decl>, <decl><type ref="prev"/><name>prev_evalskip</name></decl>, <decl><type ref="prev"/><name>prev_skipcount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_dotrap</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>pendingsig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pendingsig_waitcmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSIG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gotsig</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gotsig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>trap</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_sigchld</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>









<expr_stmt><expr><name>prev_evalskip</name> <operator>=</operator> <name>evalskip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_skipcount</name> <operator>=</operator> <name>skipcount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_trapsig</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savestatus</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evalstring</name><argument_list>(<argument><expr><call><name>stsavestr</name><argument_list>(<argument><expr><name><name>trap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>prev_evalskip</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <name>prev_evalskip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <name>prev_skipcount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>savestatus</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_sigchld</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>NSIG</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>in_dotrap</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>trap_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>setinteractive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>setsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>exitshell</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"exitshell(%d) pid=%d\n"</literal><operator>,</operator> <name>status</name><operator>,</operator> <call><name>getpid</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exiting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exiting_exitstatus</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exitshell_savedstatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>exitshell_savedstatus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name></type> <name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_dotrap</name> <operator>&amp;&amp;</operator> <name>last_trapsig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <name>last_trapsig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exiting_exitstatus</name> <operator>=</operator> <name>sig</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exiting_exitstatus</name> <operator>=</operator> <name>oexitstatus</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>oexitstatus</name> <operator>=</operator> <name>exiting_exitstatus</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setjmp</name><argument_list>(<argument><expr><name><name>loc1</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>loc1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <name><name>trap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FORCEINTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evalstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setjmp</name><argument_list>(<argument><expr><name><name>loc2</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FORCEINTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JOBS</name></expr></cpp:if>
<expr_stmt><expr><call><name>setjobctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>histsave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGSTOP</name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGTSTP</name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGTTIN</name> <operator>&amp;&amp;</operator>
<name>sig</name> <operator>!=</operator> <name>SIGTTOU</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigs</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_UNBLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>exiting_exitstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
