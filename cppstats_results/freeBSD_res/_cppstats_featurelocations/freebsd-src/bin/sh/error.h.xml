<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/error.h">












































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<struct>struct <name>jmploc</name> <block>{
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>loc</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>jmploc</name></name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>exception</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXINT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEXIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>









<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>suppressint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>intpending</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTOFF</name></cpp:macro> <cpp:value>suppressint++</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTON</name></cpp:macro> <cpp:value>{ if (--suppressint == 0 &amp;&amp; intpending) onint(); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_int_on</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>suppressint</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETINTON</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { suppressint = (s); if (suppressint == 0 &amp;&amp; intpending) onint(); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCEINTON</name></cpp:macro> <cpp:value>{suppressint = 0; if (intpending) onint();}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PENDING_INT</name></cpp:macro> <cpp:value>intpending = 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_PENDING_INT</name></cpp:macro> <cpp:value>intpending = 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int_pending</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>intpending</cpp:value></cpp:define>

<decl_stmt><decl><type><name>void</name></type> <name>exraise</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <name>__dead2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>onint</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>__dead2</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __printflike<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__printf0like</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list> <name>__dead2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>errorwithstatus</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__printf0like</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list> <name>__dead2</name></decl>;</decl_stmt>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setjmp</name><parameter_list>(<parameter><type><name>jmploc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_setjmp(jmploc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>longjmp</name><parameter_list>(<parameter><type><name>jmploc</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_longjmp(jmploc, val)</cpp:value></cpp:define>
</unit>
