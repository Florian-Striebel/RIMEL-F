<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/input.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)input.c 8.3 (Berkeley) 6/9/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alias.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myhistedit.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOF_NLEFT</name></cpp:macro> <cpp:value>-99</cpp:value></cpp:define>

<struct>struct <name>strpush</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>strpush</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prevstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevnleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevlleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>parsefile</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nextc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strpush</name></name> <modifier>*</modifier></type><name>strpush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>strpush</name></name></type> <name>basestrpush</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>int</name></type> <name>plinno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parsenleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>parselleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parsenextc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>basebuf</name><index>[<expr><name>BUFSIZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>parsefile</name></name></type> <name>basepf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>nextc</name> <operator>=</operator> <name>basebuf</name></expr>,
<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>basebuf</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type><name>parsefile</name> <init>= <expr><operator>&amp;</operator><name>basepf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>whichprompt</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pushfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>preadfd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>popstring</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>resetinput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popallfiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <name>parsenleft</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>pgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pgetc_macro</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>preadfd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>parsenextc</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<label><name>retry</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>el</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rl_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>el_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rl_cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>el_resize</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rl_cp</name> <operator>=</operator> <call><name>el_gets</name><argument_list>(<argument><expr><name>el</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>el_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rl_cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <ternary><condition><expr><name>el_len</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>el_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <name>BUFSIZ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>BUFSIZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>rl_cp</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>!=</operator> <name>el_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>el_len</name> <operator>-=</operator> <name>nr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rl_cp</name> <operator>+=</operator> <name>nr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rl_cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator><operator>~</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out2fmt_flush</name><argument_list>(<argument><expr><literal type="string">"sh: turning off NDELAY mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nr</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>preadbuffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>savec</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>parsenleft</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name><operator>-&gt;</operator><name>ap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="char">' '</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>popstring</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>parsenleft</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>parsenextc</name><operator>++</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>parsenleft</name> <operator>==</operator> <name>EOF_NLEFT</name> <operator>||</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PEOF</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><name>parselleft</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parselleft</name> <operator>=</operator> <call><name>preadfd</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <name>parsenleft</name> <operator>=</operator> <name>EOF_NLEFT</name></expr>;</expr_stmt>
<return>return <expr><name>PEOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><name>parsenextc</name> <operator>-</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>parselleft</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>q</name></expr>;</init> <condition><expr><name>q</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>parselleft</name> <operator>-=</operator> <name>end</name> <operator>-</operator> <name>r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parselleft</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>parselleft</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parsenleft</name> <operator>=</operator> <name>parselleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>parsenleft</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>parsenextc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>-=</operator> <name>parsenleft</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>parsenleft</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>savec</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hist</name> <operator>&amp;&amp;</operator>
<name><name>parsenextc</name><index>[<expr><call><name>strspn</name><argument_list>(<argument><expr><name>parsenextc</name></expr></argument>, <argument><expr><literal type="string">" \t\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HistEvent</name></type> <name>he</name></decl>;</decl_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>history</name><argument_list>(<argument><expr><name>hist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>he</name></expr></argument>, <argument><expr><ternary><condition><expr><name>whichprompt</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>H_ENTER</name></expr> </then><else>: <expr><name>H_ADD</name></expr></else></ternary></expr></argument>,
<argument><expr><name>parsenextc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out2str</name><argument_list>(<argument><expr><name>parsenextc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushout</name><argument_list>(<argument><expr><name>out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>savec</name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>parsenextc</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>preadateof</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parsenleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>parsenleft</name> <operator>==</operator> <name>EOF_NLEFT</name> <operator>||</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>pungetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>parsenleft</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>parsenextc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>pushstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>alias</name></name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strpush</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>strpush</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>parsefile</name><operator>-&gt;</operator><name>basestrpush</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>prevstring</name></name> <operator>=</operator> <name>parsenextc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>prevnleft</name></name> <operator>=</operator> <name>parsenleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>prevlleft</name></name> <operator>=</operator> <name>parselleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>ap</name></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ALIASINUSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parsenextc</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parsenleft</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>popstring</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>strpush</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>ap</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parsenextc</name> <operator>!=</operator> <name><name>sp</name><operator>-&gt;</operator><name>ap</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>parsenextc</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>parsenextc</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>forcealias</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>ap</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALIASINUSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>parsenextc</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>prevstring</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parsenleft</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>prevnleft</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>prevlleft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>strpush</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <operator>&amp;</operator><operator>(</operator><name><name>parsefile</name><operator>-&gt;</operator><name>basestrpush</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type>
<name>setinputfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>push</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oflags</name> <init>= <expr><name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verify</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>verify</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>verifyflag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_VERIFY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>errorwithstatus</name><argument_list>(<argument><expr><ternary><condition><expr><name>e</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>ENOTDIR</name></expr> ?</condition><then> <expr><literal type="number">127</literal></expr> </then><else>: <expr><literal type="number">126</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"cannot open %s: %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd2</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_DUPFD_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Out of file descriptors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>fd2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setinputfd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>setinputfd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>push</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>push</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pushfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>BUFSIZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>BUFSIZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <name>parsenleft</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>plinno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>setinputstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>push</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>push</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pushfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parsenextc</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <name>parsenleft</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>plinno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>nleft</name></name> <operator>=</operator> <name>parsenleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>lleft</name></name> <operator>=</operator> <name>parselleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>nextc</name></name> <operator>=</operator> <name>parsenextc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>linno</name></name> <operator>=</operator> <name>plinno</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <operator>(</operator>struct <name>parsefile</name> <operator>*</operator><operator>)</operator><call><name>ckmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>parsefile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>parsefile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>strpush</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pf</name><operator>-&gt;</operator><name>basestrpush</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parsefile</name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>popfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>parsefile</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>strpush</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popstring</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>parsefile</name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parsenleft</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>nleft</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parselleft</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>lleft</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parsenextc</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>nextc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>plinno</name> <operator>=</operator> <name><name>parsefile</name><operator>-&gt;</operator><name>linno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type>
<name>getcurrentfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>parsefile</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>popfilesupto</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>parsefile</name> <operator>!=</operator> <name>file</name> <operator>&amp;&amp;</operator> <name>parsefile</name> <operator>!=</operator> <operator>&amp;</operator><name>basepf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>parsefile</name> <operator>!=</operator> <name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"popfilesupto() misused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popallfiles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>parsefile</name> <operator>!=</operator> <operator>&amp;</operator><name>basepf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>closescript</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popallfiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsefile</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
