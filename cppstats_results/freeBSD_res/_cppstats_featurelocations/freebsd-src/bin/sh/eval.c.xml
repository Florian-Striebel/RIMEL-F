<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/eval.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)eval.c 8.9 (Berkeley) 6/8/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"show.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myhistedit.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>int</name></type> <name>evalskip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skipcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>loopnest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>funcnest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>builtin_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>commandname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arglist</name></name> <modifier>*</modifier></type><name>cmdenviron</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exitstatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oexitstatus</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evalloop</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evalfor</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>evalcase</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evalsubshell</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evalredir</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>exphere</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arglist</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expredir</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evalpipe</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_valid_fast_cmdsubst</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>evalcommand</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>backcmd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prehash</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>void</name></type>
<name>reseteval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>loopnest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>evalcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>concat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STARTSTACKSTR</name><argument_list>(<argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <name>argv</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STPUTS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>ap</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STPUTC</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STPUTC</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>grabstackstr</name><argument_list>(<argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evalstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>builtin_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>exitstatus</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>evalstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stackmark</name></name></type> <name>smark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags_exit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>any</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags_exit</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>EV_EXIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>EV_EXIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>any</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setinputstring</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>parsecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NEOF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags_exit</name> <operator>&amp;&amp;</operator> <call><name>preadateof</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>any</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>popfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>any</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags_exit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exraise</name><argument_list>(<argument><expr><name>EXEXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>evaltree</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>do_etest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stackmark</name></name></type> <name>smark</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_etest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evaltree(NULL) called\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HISTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>displayhist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evaltree(%p: %d) called\n"</literal><operator>,</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>n</name><operator>,</operator> <name><name>n</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NSEMI</name></expr>:</case>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NAND</name></expr>:</case>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>, <argument><expr><name>EV_TESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>||</operator> <name>exitstatus</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOR</name></expr>:</case>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>, <argument><expr><name>EV_TESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>||</operator> <name>exitstatus</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NREDIR</name></expr>:</case>
<expr_stmt><expr><call><name>evalredir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NSUBSHELL</name></expr>:</case>
<expr_stmt><expr><call><name>evalsubshell</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_etest</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EV_TESTED</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NBACKGND</name></expr>:</case>
<expr_stmt><expr><call><name>evalsubshell</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NIF</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nif</name><operator>.</operator><name>test</name></name></expr></argument>, <argument><expr><name>EV_TESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exitstatus</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nif</name><operator>.</operator><name>ifpart</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>nif</name><operator>.</operator><name>elsepart</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nif</name><operator>.</operator><name>elsepart</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>NWHILE</name></expr>:</case>
<case>case <expr><name>NUNTIL</name></expr>:</case>
<expr_stmt><expr><call><name>evalloop</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFOR</name></expr>:</case>
<expr_stmt><expr><call><name>evalfor</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCASE</name></expr>:</case>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>evalcase</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCLIST</name></expr>:</case>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>body</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCLISTFALLTHRU</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>body</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NDEFUN</name></expr>:</case>
<expr_stmt><expr><call><name>defun</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NNOT</name></expr>:</case>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nnot</name><operator>.</operator><name>com</name></name></expr></argument>, <argument><expr><name>EV_TESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <operator>!</operator><name>exitstatus</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NPIPE</name></expr>:</case>
<expr_stmt><expr><call><name>evalpipe</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_etest</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EV_TESTED</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCMD</name></expr>:</case>
<expr_stmt><expr><call><name>evalcommand</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>backcmd</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_etest</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EV_TESTED</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"Node type = %d\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pendingsig</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dotrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>eflag</name> <operator>&amp;&amp;</operator> <name>exitstatus</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>do_etest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exitshell</name><argument_list>(<argument><expr><name>exitstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EV_EXIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exraise</name><argument_list>(<argument><expr><name>EXEXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>evalloop</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>loopnest</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evalskip</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch1</name></name></expr></argument>, <argument><expr><name>EV_TESTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <name>SKIPCONT</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>skipcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <name>SKIPBREAK</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>skipcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <name>SKIPRETURN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NWHILE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exitstatus</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exitstatus</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nbinary</name><operator>.</operator><name>ch2</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>loopnest</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>evalfor</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>arglist</name></name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emptyarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>argp</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>nfor</name><operator>.</operator><name>args</name></name></expr> ;</init> <condition><expr><name>argp</name></expr> ;</condition> <incr><expr><name>argp</name> <operator>=</operator> <name><name>argp</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>oexitstatus</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>, <argument><expr><name>EXP_FULL</name> <operator>|</operator> <name>EXP_TILDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>loopnest</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arglist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>setvar</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nfor</name><operator>.</operator><name>var</name></name></expr></argument>, <argument><expr><name><name>arglist</name><operator>.</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nfor</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <name>SKIPCONT</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>skipcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <name>SKIPBREAK</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>skipcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>loopnest</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name><name>union</name> <name>node</name></name> <modifier>*</modifier></type>
<name>evalcase</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>patp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arglist</name></name></type> <name>arglist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emptyarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oexitstatus</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ncase</name><operator>.</operator><name>expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>, <argument><expr><name>EXP_TILDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>ncase</name><operator>.</operator><name>cases</name></name></expr> ;</init> <condition><expr><name>cp</name></expr> ;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>patp</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>pattern</name></name></expr> ;</init> <condition><expr><name>patp</name></expr> ;</condition> <incr><expr><name>patp</name> <operator>=</operator> <name><name>patp</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>casematch</name><argument_list>(<argument><expr><name>patp</name></expr></argument>, <argument><expr><name><name>arglist</name><operator>.</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>next</name></name> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NCLISTFALLTHRU</name> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>body</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>next</name></name> <operator>&amp;&amp;</operator>
<name><name>cp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NCLISTFALLTHRU</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>body</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>cp</name><operator>-&gt;</operator><name>nclist</name><operator>.</operator><name>body</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>evalsubshell</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backgnd</name> <init>= <expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NBACKGND</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>oexitstatus</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expredir</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>redirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>backgnd</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>EV_EXIT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>have_traps</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
<call><name>forkshell</name><argument_list>(<argument><expr><name>jp</name> <operator>=</operator> <call><name>makejob</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>backgnd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>backgnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator><operator>~</operator> <name>EV_TESTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redirect</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>redirect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator> <name>backgnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <call><name>waitforjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>evalredir</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name></type> <name>jmploc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name> <modifier>*</modifier></type><name>savehandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>in_redirect</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>oexitstatus</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expredir</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>redirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>savehandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jmploc</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popredir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>EXERROR</name> <operator>&amp;&amp;</operator> <name>in_redirect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>FORCEINTON</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>loc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>jmploc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redirect</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>redirect</name></name></expr></argument>, <argument><expr><name>REDIR_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_redirect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>nredir</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popredir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>exphere</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>redir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>arglist</name></name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name></type> <name>jmploc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name> <modifier>*</modifier></type><name>savehandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>localvar</name></name> <modifier>*</modifier></type><name>savelocalvars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_longjmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>saveoptreset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>redir</name><operator>-&gt;</operator><name>nhere</name><operator>.</operator><name>expdoc</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>savelocalvars</name> <operator>=</operator> <name>localvars</name></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saveoptreset</name> <operator>=</operator> <name><name>shellparam</name><operator>.</operator><name>reset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>forcelocal</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>savehandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jmploc</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_longjmp</name> <operator>=</operator> <name>exception</name> <operator>!=</operator> <name>EXERROR</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>jmploc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name><name>redir</name><operator>-&gt;</operator><name>nhere</name><operator>.</operator><name>doc</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redir</name><operator>-&gt;</operator><name>nhere</name><operator>.</operator><name>expdoc</name></name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>forcelocal</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poplocalvars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>savelocalvars</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name>saveoptreset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_longjmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>loc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>expredir</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>redir</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>redir</name> <operator>=</operator> <name>n</name></expr> ;</init> <condition><expr><name>redir</name></expr> ;</condition> <incr><expr><name>redir</name> <operator>=</operator> <name><name>redir</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>arglist</name></name></type> <name>fn</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>emptyarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>redir</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFROM</name></expr>:</case>
<case>case <expr><name>NTO</name></expr>:</case>
<case>case <expr><name>NFROMTO</name></expr>:</case>
<case>case <expr><name>NAPPEND</name></expr>:</case>
<case>case <expr><name>NCLOBBER</name></expr>:</case>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name><name>redir</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fn</name></expr></argument>, <argument><expr><name>EXP_TILDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redir</name><operator>-&gt;</operator><name>nfile</name><operator>.</operator><name>expfname</name></name> <operator>=</operator> <name><name>fn</name><operator>.</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFROMFD</name></expr>:</case>
<case>case <expr><name>NTOFD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>redir</name><operator>-&gt;</operator><name>ndup</name><operator>.</operator><name>vname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name><name>redir</name><operator>-&gt;</operator><name>ndup</name><operator>.</operator><name>vname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fn</name></expr></argument>, <argument><expr><name>EXP_TILDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixredir</name><argument_list>(<argument><expr><name>redir</name></expr></argument>, <argument><expr><name><name>fn</name><operator>.</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NXHERE</name></expr>:</case>
<expr_stmt><expr><call><name>exphere</name><argument_list>(<argument><expr><name>redir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>evalpipe</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nodelist</name></name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pipelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evalpipe(%p) called\n"</literal><operator>,</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pipelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>cmdlist</name></name></expr> ;</init> <condition><expr><name>lp</name></expr> ;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>pipelen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>makejob</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>pipelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>cmdlist</name></name></expr> ;</init> <condition><expr><name>lp</name></expr> ;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>prehash</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prevfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>prevfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Pipe call failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>forkshell</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>backgnd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prevfd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>prevfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>prevfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>prevfd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prevfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>prevfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prevfd</name> <operator>=</operator> <name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>npipe</name><operator>.</operator><name>backgnd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <call><name>waitforjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evalpipe: job done exit status %d\n"</literal><operator>,</operator> <name>exitstatus</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_valid_fast_cmdsubst</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NCMD</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>evalbackcmd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>backcmd</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>pip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stackmark</name></name></type> <name>smark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name></type> <name>jmploc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name> <modifier>*</modifier></type><name>savehandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>localvar</name></name> <modifier>*</modifier></type><name>savelocalvars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>saveoptreset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>nleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>jp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>oexitstatus</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_valid_fast_cmdsubst</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>savelocalvars</name> <operator>=</operator> <name>localvars</name></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saveoptreset</name> <operator>=</operator> <name><name>shellparam</name><operator>.</operator><name>reset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>forcelocal</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>savehandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jmploc</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exception</name> <operator>==</operator> <name>EXERROR</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>forcelocal</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poplocalvars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>savelocalvars</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name>saveoptreset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>loc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>jmploc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evalcommand</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EV_BACKCMD</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>forcelocal</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poplocalvars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>savelocalvars</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name>saveoptreset</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Pipe call failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>makejob</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>forkshell</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>FORK_NOJOB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>FORCEINTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>EV_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>jp</name></name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>popstackmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evalbackcmd done: fd=%d buf=%p nleft=%d jp=%p\n"</literal><operator>,</operator>
<name><name>result</name><operator>-&gt;</operator><name>fd</name></name><operator>,</operator> <name><name>result</name><operator>-&gt;</operator><name>buf</name></name><operator>,</operator> <name><name>result</name><operator>-&gt;</operator><name>nleft</name></name><operator>,</operator> <name><name>result</name><operator>-&gt;</operator><name>jp</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mustexpandto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argtext</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argtext</name> <operator>==</operator> <name>CTLQUOTEMARK</name> <operator>||</operator> <operator>*</operator><name>argtext</name> <operator>==</operator> <name>CTLQUOTEEND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argtext</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argtext</name> <operator>==</operator> <name>CTLESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argtext</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>BASESYNTAX</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>argtext</name></expr>]</index></name> <operator>==</operator> <name>CCTL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argtext</name> <operator>!=</operator> <operator>*</operator><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argtext</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argtext</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isdeclarationcmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>narg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>have_command</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>mustexpandto</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>have_command</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>narg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






</block_content>}</block></while>
<return>return <expr><operator>(</operator><call><name>mustexpandto</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"export"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>mustexpandto</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>mustexpandto</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>have_command</name> <operator>||</operator> <operator>!</operator><call><name>isfunc</name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xtracecommand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>arglist</name></name> <modifier>*</modifier></type><name>varlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ps4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ps4</name> <operator>=</operator> <call><name>expandstr</name><argument_list>(<argument><expr><call><name>ps4val</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out2str</name><argument_list>(<argument><expr><ternary><condition><expr><name>ps4</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>ps4</name></expr> </then><else>: <expr><call><name>ps4val</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>varlist</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>varlist</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out2c</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outbin</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>text</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out2qstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out2qstr</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out2c</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>out2qstr</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>out2c</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>safe_builtin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>safe_builtin_always</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>EXPORTCMD</name> <operator>||</operator> <name>idx</name> <operator>==</operator> <name>TRAPCMD</name> <operator>||</operator> <name>idx</name> <operator>==</operator> <name>ULIMITCMD</name> <operator>||</operator>
<name>idx</name> <operator>==</operator> <name>UMASKCMD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>argc</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SETCMD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>argc</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator>
<name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator>
<name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>evalcommand</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>backcmd</name></name> <modifier>*</modifier></type><name>backcmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arglist</name></name></type> <name>arglist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>arglist</name></name></type> <name>varlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>varflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdentry</name></name></type> <name>cmdentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name></type> <name>jmploc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>jmploc</name></name> <modifier>*</modifier></type><name>savehandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>savecmdname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>shparam</name></name></type> <name>saveparam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>localvar</name></name> <modifier>*</modifier></type><name>savelocalvars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>parsefile</name></name> <modifier>*</modifier></type><name>savetopfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signaled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_clearcmdentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>pathval</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"evalcommand(%p, %d) called\n"</literal><operator>,</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cmd</name><operator>,</operator> <name>flags</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emptyarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emptyarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_clearcmdentry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oexitstatus</name> <operator>=</operator> <name>exitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appendarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>, <argument><expr><name>nullstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>argp</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>args</name></name></expr> ;</init> <condition><expr><name>argp</name></expr> ;</condition> <incr><expr><name>argp</name> <operator>=</operator> <name><name>argp</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>varflag</name> <operator>&amp;&amp;</operator> <call><name>isassignment</name><argument_list>(<argument><expr><name><name>argp</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>varflag</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name>varlist</name></expr> </then><else>: <expr><operator>&amp;</operator><name>arglist</name></expr></else></ternary></expr></argument>,
<argument><expr><name>EXP_VARTILDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>varflag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>varflag</name> <operator>=</operator> <ternary><condition><expr><call><name>isdeclarationcmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argp</name><operator>-&gt;</operator><name>narg</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>expandarg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>, <argument><expr><name>EXP_FULL</name> <operator>|</operator> <name>EXP_TILDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>appendarglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arglist</name></expr></argument>, <argument><expr><name>nullstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expredir</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>arglist</name><operator>.</operator><name>count</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>&amp;</operator><name><name>arglist</name><operator>.</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>&amp;&amp;</operator> <name>funcnest</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>xflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xtracecommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varlist</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>=</operator> <name>CMDBUILTIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>BLTINCMD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>special</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>PATH</name><index>[]</index></name> <init>= <expr><literal type="string">"PATH="</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bltinonly</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>varlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>varlist</name><operator>.</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PATH</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PATH</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>varlist</name><operator>.</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PATH</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


















<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_clearcmdentry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bltinonly</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>find_builtin</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmdentry</name><operator>.</operator><name>special</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>BLTINCMD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_command</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdentry</name></expr></argument>, <argument><expr><name>cmd_flags</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>!=</operator> <name>CMDBUILTIN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>BLTINCMD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bltinonly</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>COMMANDCMD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>_PATH_STDPATH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_clearcmdentry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cmd_flags</name> <operator>|=</operator> <name>DO_NOFUNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bltinonly</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>cmd_flags</name> <operator>&amp;</operator> <name>DO_NOFUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>special</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDNORMAL</name> <operator>||</operator> <name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDUNKNOWN</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EV_EXIT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>have_traps</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EV_BACKCMD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>!=</operator> <name>CMDBUILTIN</name> <operator>||</operator>
<operator>!</operator><call><name>safe_builtin</name><argument_list>(<argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>makejob</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>FORK_FG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EV_BACKCMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>FORK_NOJOB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Pipe call failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDNORMAL</name> <operator>&amp;&amp;</operator>
<name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>varlist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>mode</name> <operator>==</operator> <name>FORK_FG</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>FORK_NOJOB</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>disvforkset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>iflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vforkexecshell</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>environment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>EV_BACKCMD</name></expr> ?</condition><then> <expr><name>pip</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>parent</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>forkshell</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>parent</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EV_BACKCMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>FORCEINTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>EV_BACKCMD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EV_EXIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDFUNCTION</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>trputs</name><argument_list>(<argument><expr><literal type="string">"Shell function: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>trargs</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>saveparam</name> <operator>=</operator> <name>shellparam</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>malloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>nparam</name></name> <operator>=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>optp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shellparam</name><operator>.</operator><name>optnext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savelocalvars</name> <operator>=</operator> <name>localvars</name></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reffunc</name><argument_list>(<argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>savehandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jmploc</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>popredir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unreffunc</name><argument_list>(<argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poplocalvars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>savelocalvars</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeparam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shellparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shellparam</name> <operator>=</operator> <name>saveparam</name></expr>;</expr_stmt>
<expr_stmt><expr><name>funcnest</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>loc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>jmploc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>funcnest</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redirect</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name></expr></argument>, <argument><expr><name>REDIR_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>varlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mklocal</name><argument_list>(<argument><expr><name><name>varlist</name><operator>.</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>oexitstatus</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>evaltree</name><argument_list>(<argument><expr><call><name>getfuncnode</name><argument_list>(<argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>EV_TESTED</name> <operator>|</operator> <name>EV_EXIT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unreffunc</name><argument_list>(<argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>poplocalvars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localvars</name> <operator>=</operator> <name>savelocalvars</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeparam</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shellparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shellparam</name> <operator>=</operator> <name>saveparam</name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>funcnest</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popredir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>evalskip</name> <operator>==</operator> <name>SKIPRETURN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exitshell</name><argument_list>(<argument><expr><name>exitstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>cmdtype</name></name> <operator>==</operator> <name>CMDBUILTIN</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>trputs</name><argument_list>(<argument><expr><literal type="string">"builtin command: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>trargs</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name>EXECCMD</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>REDIR_PUSH</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>EV_BACKCMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>memout</name><operator>.</operator><name>nextc</name></name> <operator>=</operator> <name><name>memout</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>REDIR_BACKQ</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>savecmdname</name> <operator>=</operator> <name>commandname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savetopfile</name> <operator>=</operator> <call><name>getcurrentfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdenviron</name> <operator>=</operator> <operator>&amp;</operator><name>varlist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>savehandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>jmploc</name><operator>.</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>EXINT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <name>SIGINT</name><operator>+</operator><literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>cmddone</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>&amp;</operator><name>jmploc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redirect</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outclearerror</name><argument_list>(<argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmdentry</name><operator>.</operator><name>special</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>listsetvar</name><argument_list>(<argument><expr><name>cmdenviron</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cmdentry</name><operator>.</operator><name>special</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>VNOSET</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bltinsetlocale</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>commandname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argptr</name> <operator>=</operator> <name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nextopt_optptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>builtin_flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <call>(<modifier>*</modifier><name>builtinfunc</name><index>[<expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name></expr>]</index>)<argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flushall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>outiserror</name><argument_list>(<argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"write error on stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exitstatus</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>exitstatus</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>cmddone</name>:</label>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bltinunsetlocale</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmdenviron</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <operator>&amp;</operator><name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <operator>&amp;</operator><name>errout</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freestdout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <name>savehandler</name></expr>;</expr_stmt>
<expr_stmt><expr><name>commandname</name> <operator>=</operator> <name>savecmdname</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exitshell</name><argument_list>(<argument><expr><name>exitstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>EV_BACKCMD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>backcmd</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>memout</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backcmd</name><operator>-&gt;</operator><name>nleft</name></name> <operator>=</operator> <ternary><condition><expr><name><name>memout</name><operator>.</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>
<expr><name><name>memout</name><operator>.</operator><name>nextc</name></name> <operator>-</operator> <name><name>memout</name><operator>.</operator><name>buf</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memout</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memout</name><operator>.</operator><name>nextc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memout</name><operator>.</operator><name>bufend</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memout</name><operator>.</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name> <operator>!=</operator> <name>EXECCMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popredir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>EXERROR</name> <operator>||</operator> <name><name>cmdentry</name><operator>.</operator><name>special</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exraise</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>popfilesupto</name><argument_list>(<argument><expr><name>savetopfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>EV_BACKCMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>FORCEINTON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>trputs</name><argument_list>(<argument><expr><literal type="string">"normal command: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>trargs</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redirect</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>redirect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>varlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setvareq</name><argument_list>(<argument><expr><name><name>varlist</name><operator>.</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VEXPORT</name><operator>|</operator><name>VSTACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>envp</name> <operator>=</operator> <call><name>environment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shellexec</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>cmdentry</name><operator>.</operator><name>u</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<goto>goto <name>out</name>;</goto>

<label><name>parent</name>:</label>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>FORK_FG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exitstatus</name> <operator>=</operator> <call><name>waitforjob</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>&amp;&amp;</operator> <name>loopnest</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>signaled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <name>SKIPBREAK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <name>loopnest</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>FORK_NOJOB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>backcmd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>pip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backcmd</name><operator>-&gt;</operator><name>jp</name></name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setvar</name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>, <argument><expr><name>lastarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_clearcmdentry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearcmdentry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>prehash</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cmdentry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NCMD</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>args</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>goodname</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>args</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_command</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>ncmd</name><operator>.</operator><name>args</name><operator>-&gt;</operator><name>narg</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>pathval</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>bltincmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out2fmt_flush</name><argument_list>(<argument><expr><literal type="string">"%s: not found\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">127</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><name>exitstatus</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>breakcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_digit</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Illegal number: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>loopnest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>loopnest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><operator>*</operator><name>argv</name> <operator>==</operator> <literal type="char">'c'</literal><operator>)</operator></expr>?</condition><then> <expr><name>SKIPCONT</name></expr> </then><else>: <expr><name>SKIPBREAK</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>commandcmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>bltinlookup</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>nextopt</name><argument_list>(<argument><expr><literal type="string">"pvV"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>_PATH_STDPATH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>TYPECMD_SMALLV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>TYPECMD_BIGV</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>argptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"wrong number of arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>typecmd_impl</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"commandcmd bad call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>returncmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>number</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>oexitstatus</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>evalskip</name> <operator>=</operator> <name>SKIPRETURN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skipcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>falsecmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>truecmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>execcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>optschanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmdenviron</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setvareq</name><argument_list>(<argument><expr><name><name>cmdenviron</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VEXPORT</name><operator>|</operator><name>VSTACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>shellexec</name><argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>environment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pathval</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>timescmd</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>ru</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>shumins</name></decl>, <decl><type ref="prev"/><name>shsmins</name></decl>, <decl><type ref="prev"/><name>chumins</name></decl>, <decl><type ref="prev"/><name>chsmins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>shusecs</name></decl>, <decl><type ref="prev"/><name>shssecs</name></decl>, <decl><type ref="prev"/><name>chusecs</name></decl>, <decl><type ref="prev"/><name>chssecs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_SELF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ru</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>shumins</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shusecs</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>%</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shsmins</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shssecs</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>%</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ru</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chumins</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chusecs</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>%</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chsmins</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chssecs</name> <operator>=</operator> <name><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>%</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out1fmt</name><argument_list>(<argument><expr><literal type="string">"%ldm%.3fs %ldm%.3fs\n%ldm%.3fs %ldm%.3fs\n"</literal></expr></argument>, <argument><expr><name>shumins</name></expr></argument>,
<argument><expr><name>shusecs</name></expr></argument>, <argument><expr><name>shsmins</name></expr></argument>, <argument><expr><name>shssecs</name></expr></argument>, <argument><expr><name>chumins</name></expr></argument>, <argument><expr><name>chusecs</name></expr></argument>, <argument><expr><name>chsmins</name></expr></argument>, <argument><expr><name>chssecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
