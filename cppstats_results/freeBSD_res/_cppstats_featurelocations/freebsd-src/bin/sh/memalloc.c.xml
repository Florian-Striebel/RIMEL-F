<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/sh/memalloc.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)memalloc.c 8.3 (Berkeley) 5/4/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"output.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"expand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>badalloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>pointer</name></type>
<name>ckmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pointer</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_int_on</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>badalloc</name><argument_list>(<argument><expr><literal type="string">"Unsafe ckmalloc() call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Out of space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>pointer</name></type>
<name>ckrealloc</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_int_on</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>badalloc</name><argument_list>(<argument><expr><literal type="string">"Unsafe ckrealloc() call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Out of space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ckfree</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_int_on</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>badalloc</name><argument_list>(<argument><expr><literal type="string">"Unsafe ckfree() call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>savestr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINSIZE</name></cpp:macro> <cpp:value>496</cpp:value></cpp:define>


<struct>struct <name>stack_block</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>stack_block</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE</name><parameter_list>(<parameter><type><name>sp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char*)(sp) + ALIGN(sizeof(struct stack_block)))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stack_block</name></name> <modifier>*</modifier></type><name>stackp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stacknxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stacknleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sstrend</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>stnewblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stack_block</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <name>MINSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <name>MINSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>allocsize</name> <operator>=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stack_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>ckmalloc</name><argument_list>(<argument><expr><name>allocsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>stackp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknxt</name> <operator>=</operator> <call><name>SPACE</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknleft</name> <operator>=</operator> <name>allocsize</name> <operator>-</operator> <operator>(</operator><name>stacknxt</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sstrend</name> <operator>=</operator> <name>stacknxt</name> <operator>+</operator> <name>stacknleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stackp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>pointer</name></type>
<name>stalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <name>stacknleft</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stnewblock</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>stacknxt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknxt</name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknleft</name> <operator>-=</operator> <name>nbytes</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>stunalloc</name><parameter_list>(<parameter><decl><type><name>pointer</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><literal type="string">"stunalloc\n"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>stacknleft</name> <operator>+=</operator> <name>stacknxt</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknxt</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>stsavestr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>stalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>setstackmark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stackmark</name></name> <modifier>*</modifier></type><name>mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mark</name><operator>-&gt;</operator><name>stackp</name></name> <operator>=</operator> <name>stackp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mark</name><operator>-&gt;</operator><name>stacknxt</name></name> <operator>=</operator> <name>stacknxt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mark</name><operator>-&gt;</operator><name>stacknleft</name></name> <operator>=</operator> <name>stacknleft</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>stacknxt</name> <operator>==</operator> <call><name>SPACE</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>popstackmark</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stackmark</name></name> <modifier>*</modifier></type><name>mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stack_block</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>stackp</name> <operator>!=</operator> <name><name>mark</name><operator>-&gt;</operator><name>stackp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>stackp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stackp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>stacknxt</name> <operator>=</operator> <name><name>mark</name><operator>-&gt;</operator><name>stacknxt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknleft</name> <operator>=</operator> <name><name>mark</name><operator>-&gt;</operator><name>stacknleft</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stacknleft</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sstrend</name> <operator>=</operator> <name>stacknxt</name> <operator>+</operator> <name>stacknleft</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sstrend</name> <operator>=</operator> <name>stacknxt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>growstackblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stack_block</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stack_block</name></name> <modifier>*</modifier></type><name>oldstackp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <name>stacknleft</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name>stacknleft</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>min</name> <operator>&gt;=</operator>
<name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stack_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Out of space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>min</name> <operator>+=</operator> <name>stacknleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>+=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stack_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>oldspace</name> <operator>=</operator> <name>stacknxt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldlen</name> <operator>=</operator> <name>stacknleft</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>stacknxt</name> <operator>==</operator> <call><name>SPACE</name><argument_list>(<argument><expr><name>stackp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>INTOFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldstackp</name> <operator>=</operator> <name>stackp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stackp</name> <operator>=</operator> <name><name>oldstackp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>ckrealloc</name><argument_list>(<argument><expr><operator>(</operator><name>pointer</name><operator>)</operator><name>oldstackp</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>stackp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stackp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknxt</name> <operator>=</operator> <call><name>SPACE</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stacknleft</name> <operator>=</operator> <name>newlen</name> <operator>-</operator> <operator>(</operator><name>stacknxt</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sstrend</name> <operator>=</operator> <name>stacknxt</name> <operator>+</operator> <name>stacknleft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>INTON</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>newlen</name> <operator>-=</operator> <call><name>ALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stack_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>stalloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oldspace</name></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stunalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>growstrstackblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>growstackblock</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stackblock</name><argument_list>()</argument_list></call> <operator>+</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>growstackstr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stackblocksize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>growstrstackblock</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>makestrspace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <call><name>stackblock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>growstrstackblock</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>stputbin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CHECKSTRSPACE</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>stputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>stputbin</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
