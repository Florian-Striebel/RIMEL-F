<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/test/test.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>main</name></cpp:macro> <cpp:value>testcmd</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bltin/bltin.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__dead2</name> <name>__printf0like</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verrx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


















<enum>enum <name>token_types</name> <block>{
<decl><name>UNOP</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>BINOP</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>BUNOP</name> <init>= <expr><literal type="number">0x300</literal></expr></init></decl>,
<decl><name>BBINOP</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,
<decl><name>PAREN</name> <init>= <expr><literal type="number">0x500</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>token</name> <block>{
<decl><name>EOI</name></decl>,
<decl><name>OPERAND</name></decl>,
<decl><name>FILRD</name> <init>= <expr><name>UNOP</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>FILWR</name></decl>,
<decl><name>FILEX</name></decl>,
<decl><name>FILEXIST</name></decl>,
<decl><name>FILREG</name></decl>,
<decl><name>FILDIR</name></decl>,
<decl><name>FILCDEV</name></decl>,
<decl><name>FILBDEV</name></decl>,
<decl><name>FILFIFO</name></decl>,
<decl><name>FILSOCK</name></decl>,
<decl><name>FILSYM</name></decl>,
<decl><name>FILGZ</name></decl>,
<decl><name>FILTT</name></decl>,
<decl><name>FILSUID</name></decl>,
<decl><name>FILSGID</name></decl>,
<decl><name>FILSTCK</name></decl>,
<decl><name>STREZ</name></decl>,
<decl><name>STRNZ</name></decl>,
<decl><name>FILUID</name></decl>,
<decl><name>FILGID</name></decl>,
<decl><name>FILNT</name> <init>= <expr><name>BINOP</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>FILOT</name></decl>,
<decl><name>FILEQ</name></decl>,
<decl><name>STREQ</name></decl>,
<decl><name>STRNE</name></decl>,
<decl><name>STRLT</name></decl>,
<decl><name>STRGT</name></decl>,
<decl><name>INTEQ</name></decl>,
<decl><name>INTNE</name></decl>,
<decl><name>INTGE</name></decl>,
<decl><name>INTGT</name></decl>,
<decl><name>INTLE</name></decl>,
<decl><name>INTLT</name></decl>,
<decl><name>UNOT</name> <init>= <expr><name>BUNOP</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>BAND</name> <init>= <expr><name>BBINOP</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>BOR</name></decl>,
<decl><name>LPAREN</name> <init>= <expr><name>PAREN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>RPAREN</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_TYPE</name><parameter_list>(<parameter><type><name>token</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token) &amp; 0xff00)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>t_op</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>op_text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>op_num</name></decl>;</decl_stmt>
}</block> <decl><name><name>ops1</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"="</literal></expr>, <expr><name>STREQ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"&lt;"</literal></expr>, <expr><name>STRLT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"&gt;"</literal></expr>, <expr><name>STRGT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"!"</literal></expr>, <expr><name>UNOT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"("</literal></expr>, <expr><name>LPAREN</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">")"</literal></expr>, <expr><name>RPAREN</name></expr>}</block></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>opsm1</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"r"</literal></expr>, <expr><name>FILRD</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><name>FILWR</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><name>FILEX</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"e"</literal></expr>, <expr><name>FILEXIST</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><name>FILREG</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><name>FILDIR</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><name>FILCDEV</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"b"</literal></expr>, <expr><name>FILBDEV</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"p"</literal></expr>, <expr><name>FILFIFO</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"u"</literal></expr>, <expr><name>FILSUID</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><name>FILSGID</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><name>FILSTCK</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><name>FILGZ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><name>FILTT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"z"</literal></expr>, <expr><name>STREZ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><name>STRNZ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><name>FILSYM</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"O"</literal></expr>, <expr><name>FILUID</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"G"</literal></expr>, <expr><name>FILGID</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"L"</literal></expr>, <expr><name>FILSYM</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"S"</literal></expr>, <expr><name>FILSOCK</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><name>BAND</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><name>BOR</name></expr>}</block></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>ops2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"=="</literal></expr>, <expr><name>STREQ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"!="</literal></expr>, <expr><name>STRNE</name></expr>}</block></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>opsm2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"eq"</literal></expr>, <expr><name>INTEQ</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ne"</literal></expr>, <expr><name>INTNE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ge"</literal></expr>, <expr><name>INTGE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gt"</literal></expr>, <expr><name>INTGT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"le"</literal></expr>, <expr><name>INTLE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lt"</literal></expr>, <expr><name>INTLT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nt"</literal></expr>, <expr><name>FILNT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ot"</literal></expr>, <expr><name>FILOT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ef"</literal></expr>, <expr><name>FILEQ</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nargc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t_wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>parenlevel</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>aexpr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>binop</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>equalf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>filstat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>token</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>intmax_t</name></type> <name>getq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>intcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isunopoperand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>islparenoperand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>isrparenoperand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>newerf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nexpr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oexpr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>olderf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>primary</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syntax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>enum</name> <name>token</name></name></type> <name>t_lex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"missing ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>--</operator><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nargc</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_wp</name> <operator>=</operator> <operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parenlevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>t_wp</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>nargc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>t_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>oexpr</name><argument_list>(<argument><expr><call><name>t_lex</name><argument_list>(<argument><expr><operator>*</operator><name>t_wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>!</operator><call><name>oexpr</name><argument_list>(<argument><expr><call><name>t_lex</name><argument_list>(<argument><expr><operator>*</operator><name>t_wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax</name><argument_list>(<argument><expr><operator>*</operator><name>t_wp</name></expr></argument>, <argument><expr><literal type="string">"unexpected operator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>syntax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>op</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>oexpr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>aexpr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>BOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>oexpr</name><argument_list>(<argument><expr><call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t_wp</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nargc</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>aexpr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nexpr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <name>BAND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>aexpr</name><argument_list>(<argument><expr><call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t_wp</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nargc</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nexpr</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>UNOT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name>nexpr</name><argument_list>(<argument><expr><call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>primary</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>primary</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>token</name></name></type> <name>nn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>LPAREN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parenlevel</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nn</name> <operator>=</operator> <call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>RPAREN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parenlevel</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>oexpr</name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RPAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"closing paren expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parenlevel</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TOKEN_TYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UNOP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>nargc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"argument expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STREZ</name></expr>:</case>
<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>t_wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>STRNZ</name></expr>:</case>
<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>t_wp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILTT</name></expr>:</case>
<return>return <expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>getn</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>t_wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>filstat</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>t_wp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nn</name> <operator>=</operator> <call><name>t_lex</name><argument_list>(<argument><expr><ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>t_wp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TOKEN_TYPE</name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BINOP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>binop</name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>t_wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>binop</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>token</name></name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opnd1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>op</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opnd2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opnd1</name> <operator>=</operator> <operator>*</operator><name>t_wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opnd2</name> <operator>=</operator> <ternary><condition><expr><name>nargc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>--</operator><name>nargc</name><operator>,</operator> <operator>*</operator><operator>++</operator><name>t_wp</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"argument expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STREQ</name></expr>:</case>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>STRNE</name></expr>:</case>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>STRLT</name></expr>:</case>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>STRGT</name></expr>:</case>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>INTEQ</name></expr>:</case>
<return>return <expr><call><name>intcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>INTNE</name></expr>:</case>
<return>return <expr><call><name>intcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>INTGE</name></expr>:</case>
<return>return <expr><call><name>intcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>INTGT</name></expr>:</case>
<return>return <expr><call><name>intcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>INTLE</name></expr>:</case>
<return>return <expr><call><name>intcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>INTLT</name></expr>:</case>
<return>return <expr><call><name>intcmp</name><argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILNT</name></expr>:</case>
<return>return <expr><call><name>newerf</name> <argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILOT</name></expr>:</case>
<return>return <expr><call><name>olderf</name> <argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILEQ</name></expr>:</case>
<return>return <expr><call><name>equalf</name> <argument_list>(<argument><expr><name>opnd1</name></expr></argument>, <argument><expr><name>opnd2</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>filstat</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>token</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>FILSYM</name></expr> ?</condition><then> <expr><call><name>lstat</name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stat</name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILRD</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>eaccess</name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>FILWR</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>eaccess</name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>FILEX</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>eaccess</name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>geteuid</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IXOTH</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILEXIST</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>eaccess</name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>FILREG</name></expr>:</case>
<return>return <expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILDIR</name></expr>:</case>
<return>return <expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILCDEV</name></expr>:</case>
<return>return <expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILBDEV</name></expr>:</case>
<return>return <expr><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILFIFO</name></expr>:</case>
<return>return <expr><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILSOCK</name></expr>:</case>
<return>return <expr><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILSYM</name></expr>:</case>
<return>return <expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>FILSUID</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_ISUID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILSGID</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_ISGID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILSTCK</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_ISVTX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILGZ</name></expr>:</case>
<return>return <expr><name><name>s</name><operator>.</operator><name>st_size</name></name> <operator>&gt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILUID</name></expr>:</case>
<return>return <expr><name><name>s</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <call><name>geteuid</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>FILGID</name></expr>:</case>
<return>return <expr><name><name>s</name><operator>.</operator><name>st_gid</name></name> <operator>==</operator> <call><name>getegid</name><argument_list>()</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_op_1char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>t_op</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>t_op</name></name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>op</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name><name>op</name><operator>-&gt;</operator><name>op_text</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>op_num</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>OPERAND</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_op_2char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>t_op</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>t_op</name></name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>op</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>op_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>op_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>op_num</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>OPERAND</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_op</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OPERAND</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>find_op_1char</name><argument_list>(<argument><expr><name>ops1</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name>ops1</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><call><name>find_op_1char</name><argument_list>(<argument><expr><name>opsm1</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name>opsm1</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>find_op_2char</name><argument_list>(<argument><expr><name>ops2</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name>ops2</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><call><name>find_op_2char</name><argument_list>(<argument><expr><name>opsm2</name></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name>opsm2</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><name>OPERAND</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>OPERAND</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>token</name></name></type>
<name>t_lex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EOI</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>find_op</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>TOKEN_TYPE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UNOP</name> <operator>||</operator> <call><name>TOKEN_TYPE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BUNOP</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>isunopoperand</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>num</name> <operator>==</operator> <name>LPAREN</name> <operator>&amp;&amp;</operator> <call><name>islparenoperand</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>num</name> <operator>==</operator> <name>RPAREN</name> <operator>&amp;&amp;</operator> <call><name>isrparenoperand</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OPERAND</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isunopoperand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>t_wp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>parenlevel</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>t_wp</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>find_op</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>TOKEN_TYPE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BINOP</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>parenlevel</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">')'</literal> <operator>||</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>islparenoperand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>t_wp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>parenlevel</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>find_op</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>TOKEN_TYPE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BINOP</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>isrparenoperand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>t_wp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nargc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>parenlevel</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>getn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: bad number"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"%s: bad number"</literal></expr> </then><else>:
<expr><literal type="string">"%s: out of range"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: bad number"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>intmax_t</name></type>
<name>getq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: bad number"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"%s: bad number"</literal></expr> </then><else>:
<expr><literal type="string">"%s: out of range"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: bad number"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>intcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>q1</name> <operator>=</operator> <call><name>getq</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name>getq</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q1</name> <operator>&gt;</operator> <name>q2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q1</name> <operator>&lt;</operator> <name>q2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>newerf</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>stat</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>.</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>b2</name><operator>.</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>.</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>b2</name><operator>.</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>b1</name><operator>.</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator> <name><name>b2</name><operator>.</operator><name>st_mtim</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>olderf</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>newerf</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>equalf</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>stat</name> <argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>stat</name> <argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>b1</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>b2</name><operator>.</operator><name>st_dev</name></name> <operator>&amp;&amp;</operator>
<name><name>b1</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>b2</name><operator>.</operator><name>st_ino</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
