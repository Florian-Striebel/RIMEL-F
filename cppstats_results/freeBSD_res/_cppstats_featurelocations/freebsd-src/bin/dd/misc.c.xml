<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/dd/misc.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)misc.c 8.3 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function><type><name>double</name></type>
<name>secs_elapsed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>ts_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>secs</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"clock_gettime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clock_getres</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"clock_getres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <operator>(</operator><name><name>end</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>st</name><operator>.</operator><name>start</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>+</operator> \
<operator>(</operator><name><name>end</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>st</name><operator>.</operator><name>start</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1e-9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>ts_res</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>ts_res</name><operator>.</operator><name>tv_nsec</name></name> <operator>*</operator> <literal type="number">1e-9</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>secs</name> <operator>&lt;</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>secs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>summary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>secs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_NOINFO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <call><name>secs_elapsed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%ju+%ju records in\n%ju+%ju records out\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>.</operator><name>in_full</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>in_part</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>out_full</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>out_part</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>swab</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%ju odd length swab %s\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>.</operator><name>swab</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>.</operator><name>swab</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"block"</literal></expr> </then><else>: <expr><literal type="string">"blocks"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>trunc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%ju truncated %s\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>.</operator><name>trunc</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>.</operator><name>trunc</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"block"</literal></expr> </then><else>: <expr><literal type="string">"blocks"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_NOXFER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%ju bytes transferred in %.6f secs (%.0f bytes/sec)\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>bytes</name></name> <operator>/</operator> <name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>need_summary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>progress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>si</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>iec</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>persec</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>secs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <call><name>secs_elapsed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>humanize_number</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>HN_AUTOSCALE</name></expr></argument>,
<argument><expr><name>HN_DECIMAL</name> <operator>|</operator> <name>HN_DIVISOR_1000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>humanize_number</name><argument_list>(<argument><expr><name>iec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>HN_AUTOSCALE</name></expr></argument>,
<argument><expr><name>HN_DECIMAL</name> <operator>|</operator> <name>HN_IEC_PREFIXES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>humanize_number</name><argument_list>(<argument><expr><name>persec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>persec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>st</name><operator>.</operator><name>bytes</name></name> <operator>/</operator> <name>secs</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>,
<argument><expr><name>HN_AUTOSCALE</name></expr></argument>, <argument><expr><name>HN_DECIMAL</name> <operator>|</operator> <name>HN_DIVISOR_1000</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %'ju bytes (%s, %s) transferred %.3fs, %s/s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>iec</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name>persec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%-*s\r"</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_progress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>siginfo_handler</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>need_summary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>sigalarm_handler</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>need_progress</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>terminate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>summary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><ternary><condition><expr><name>sig</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
