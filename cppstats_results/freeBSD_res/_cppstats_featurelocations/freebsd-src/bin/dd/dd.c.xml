<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/dd/dd.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char const copyright[] =
"@(#) Copyright (c) 1991, 1993, 1994\n\
The Regents of the University of California. All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)dd.c 8.5 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/capsicum.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/conf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/disklabel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mtio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;capsicum_helpers.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dd_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dd_in</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getfdtype</name><parameter_list>(<parameter><decl><type><name>IO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>IO</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STAT</name></type> <name>st</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cfunc</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>cpy_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>off_t</name></type> <name>pending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ddflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cbsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>files_cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>ctab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>fill_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>speed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>need_summary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>need_progress</name></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>itv</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jcl</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>caph_cache_catpages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>caph_enter</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to enter capability mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>, <argument><expr><name>siginfo_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_PROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>sigalarm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>files_cnt</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dd_in</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>dd_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parity</name><parameter_list>(<parameter><decl><type><name>u_char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iflags</name></decl>, <decl><type ref="prev"/><name>oflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cap_rights_t</name></type> <name>rights</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>cmds</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>FIODTYPE</name></expr>, <expr><name>MTIOCTOP</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"stdin"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>STDIN_FILENO</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_IDIRECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iflags</name> <operator>|=</operator> <name>O_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>iflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>getfdtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cap_rights_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rights</name></expr></argument>, <argument><expr><name>CAP_READ</name></expr></argument>, <argument><expr><name>CAP_SEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>caph_rights_limit</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rights</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to limit capability rights"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>files_cnt</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>in</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISTAPE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"files is not supported for non-tape devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cap_rights_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rights</name></expr></argument>, <argument><expr><name>CAP_FTRUNCATE</name></expr></argument>, <argument><expr><name>CAP_IOCTL</name></expr></argument>, <argument><expr><name>CAP_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_FDATASYNC</name> <operator>|</operator> <name>C_FSYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cap_rights_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rights</name></expr></argument>, <argument><expr><name>CAP_FSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>STDOUT_FILENO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"stdout"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_OFSYNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oflags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oflags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to get fd flags for stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_FSYNC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to set fd flags for stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>oflags</name> <operator>=</operator> <name>O_CREAT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_SEEK</name> <operator>|</operator> <name>C_NOTRUNC</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_TRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_OFSYNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_FSYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_ODIRECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>oflags</name></expr></argument>, <argument><expr><name>DEFFILEMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>oflags</name></expr></argument>, <argument><expr><name>DEFFILEMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>NOREAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cap_rights_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rights</name></expr></argument>, <argument><expr><name>CAP_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>getfdtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>caph_rights_limit</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rights</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to limit capability rights"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>caph_ioctls_limit</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>cmds</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to limit capability rights"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>STDIN_FILENO</name> <operator>&amp;&amp;</operator> <name><name>out</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>STDIN_FILENO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>caph_limit_stdin</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to limit capability rights"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>STDOUT_FILENO</name> <operator>&amp;&amp;</operator> <name><name>out</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>STDOUT_FILENO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>caph_limit_stdout</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to limit capability rights"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>STDERR_FILENO</name> <operator>&amp;&amp;</operator> <name><name>out</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>STDERR_FILENO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>caph_limit_stderr</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to limit capability rights"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_BLOCK</name> <operator>|</operator> <name>C_UNBLOCK</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>dbsz</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"input buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>in</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>in</name><operator>.</operator><name>dbsz</name></name></expr></argument>, <argument><expr><name>cbsz</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cbsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>out</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>+</operator> <name>cbsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"output buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pos_in</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pos_out</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_OF</name> <operator>|</operator> <name>C_SEEK</name> <operator>|</operator> <name>C_NOTRUNC</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>C_OF</name> <operator>|</operator> <name>C_SEEK</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>out</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISTRUNC</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>offset</name></name> <operator>*</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"truncating %s"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_LCASE</name> <operator>|</operator> <name>C_UCASE</name> <operator>|</operator> <name>C_ASCII</name> <operator>|</operator> <name>C_EBCDIC</name> <operator>|</operator> <name>C_PARITY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>ctab</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_PARITY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_ASCII</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">200</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>casetab</name><index>[<expr><name>cnt</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_LCASE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_UCASE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_PARITY</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_PARSET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_PAREVEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parity</name><argument_list>(<argument><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_PARODD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0377</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parity</name><argument_list>(<argument><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>casetab</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctab</name> <operator>=</operator> <name>casetab</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"clock_gettime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getfdtype</name><parameter_list>(<parameter><decl><type><name>IO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISTRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FIODTYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>io</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>D_TAPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISTAPE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>D_DISK</name> <operator>|</operator> <name>D_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISSEEK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>D_TAPE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISCHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ESPIPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISPIPE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ISSEEK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>speed_limit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>t_prev</name></decl>, <decl><type ref="prev"/><name>t_usleep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t_now</name></decl>, <decl><type ref="prev"/><name>t_io</name></decl>, <decl><type ref="prev"/><name>t_target</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t_now</name> <operator>=</operator> <call><name>secs_elapsed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_io</name> <operator>=</operator> <name>t_now</name> <operator>-</operator> <name>t_prev</name> <operator>-</operator> <name>t_usleep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_target</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>in</name><operator>.</operator><name>dbsz</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>speed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_usleep</name> <operator>=</operator> <name>t_target</name> <operator>-</operator> <name>t_io</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t_usleep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>t_usleep</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t_usleep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>t_prev</name> <operator>=</operator> <name>t_now</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>swapbytes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dd_in</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>cpy_cnt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>in_full</name></name> <operator>+</operator> <name><name>st</name><operator>.</operator><name>in_part</name></name> <operator>&gt;=</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>cpy_cnt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>speed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>speed_limit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_SYNC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_FILL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><name>fill_char</name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_BLOCK</name> <operator>|</operator> <name>C_UNBLOCK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbrcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fill</name>:</label>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_NOERROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>summary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISSEEK</name> <operator>&amp;&amp;</operator>
<call><name>lseek</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>in</name><operator>.</operator><name>dbsz</name></name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_SYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_SYNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbsz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbrcnt</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>dbrcnt</name></name> <operator>==</operator> <name><name>in</name><operator>.</operator><name>dbsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>in_full</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_IFULLBLOCK</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fill</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>in_part</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>+=</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>C_NOERROR</name> <operator>|</operator> <name>C_NOTRUNC</name> <operator>|</operator> <name>C_SYNC</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>C_BS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dd_out</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_SWAB</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>swab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>swapbytes</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>+=</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>cfunc</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_summary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>summary</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_progress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>progress</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>dd_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cfunc</name> <operator>==</operator> <name>def</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>def_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cfunc</name> <operator>==</operator> <name>block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cfunc</name> <operator>==</operator> <name>unblock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unblock_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_OSYNC</name> <operator>&amp;&amp;</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>&amp;&amp;</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>&lt;</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_FILL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><name>fill_char</name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>-</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_BLOCK</name> <operator>|</operator> <name>C_UNBLOCK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>-</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>-</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>||</operator> <name>pending</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dd_out</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>seek_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>out</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISTRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>seek_offset</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"truncating %s"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_FSYNC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fsyncing %s"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_FDATASYNC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fdatasync</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fdatasyncing %s"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dd_out</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>outp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sparse</name></decl>;</decl_stmt>

















<expr_stmt><expr><name>outp</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>force</name></expr> ?</condition><then> <expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr> </then><else>: <expr><name><name>out</name><operator>.</operator><name>dbsz</name></name></expr></else></ternary></expr>;</init><condition>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>sparse</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_SPARSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sparse</name> <operator>=</operator> <call><name>BISZERO</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sparse</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pending</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pending</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>out</name><operator>.</operator><name>seek_offset</name></name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>seek_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s: seek error creating sparse file"</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pending</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>outp</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>seek_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: end of device"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>outp</name> <operator>+=</operator> <name>nw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>nw</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nw</name> <operator>==</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>out_full</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>out_part</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>nw</name> <operator>!=</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISTAPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: short write on tape device"</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ISCHR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>warned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: short write on character device"</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <name>nw</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>cnt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>-=</operator> <name>n</name><operator>)</operator> <operator>&lt;</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>db</name></name> <operator>+</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
