<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/dd/conv.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)conv.c 8.3 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>







<function><type><name>void</name></type>
<name>def</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>inp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <name>ctab</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>inp</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <operator>(</operator><name>cnt</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition> <incr><expr><operator>++</operator><name>inp</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name><name>t</name><index>[<expr><operator>*</operator><name>inp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>&gt;=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dd_out</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>def_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>block</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>inp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>maxlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>intrunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>intrunc</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>inp</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name></expr><operator>,</operator> <expr><name>cnt</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name></expr>;</init> <condition><expr><name>cnt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>inp</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><operator>--</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>intrunc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>=</operator> <name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name>inp</name> <operator>+</operator> <name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>inp</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr><operator>,</operator> <expr><name>outp</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbp</name></name></expr>;</init> <condition><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cbsz</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <name>ctab</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>inp</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition>
<incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>outp</name><operator>++</operator> <operator>=</operator> <name><name>t</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>inp</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition>
<incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>outp</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>&lt;</operator> <name>cbsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>cbsz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ctab</name></expr> ?</condition><then> <expr><name><name>ctab</name><index>[<expr><literal type="char">' '</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cbsz</name> <operator>-</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>||</operator> <operator>*</operator><name>inp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>trunc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>inp</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><operator>--</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>intrunc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>+=</operator> <name>cbsz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>+=</operator> <name>cbsz</name><operator>)</operator> <operator>&gt;=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dd_out</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outp</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbp</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>block_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>.</operator><name>trunc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ctab</name></expr> ?</condition><then> <expr><name><name>ctab</name><index>[<expr><literal type="char">' '</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>cbsz</name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>+=</operator> <name>cbsz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>unblock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>inp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <name>ctab</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>inp</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <operator>(</operator><name>cnt</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>dbrcnt</name></name><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition> <incr><expr><operator>++</operator><name>inp</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name><name>t</name><index>[<expr><operator>*</operator><name>inp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>inp</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>&gt;=</operator> <name>cbsz</name></expr>;</condition> <incr><expr><name>inp</name> <operator>+=</operator> <name>cbsz</name></expr><operator>,</operator> <expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>-=</operator> <name>cbsz</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>inp</name> <operator>+</operator> <name>cbsz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&gt;=</operator> <name>inp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><operator>--</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>inp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>t</name> <operator>-</operator> <name>inp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><name>inp</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>out</name><operator>.</operator><name>dbp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>&gt;=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dd_out</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbp</name></name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unblock_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>dbcnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: short input record"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>db</name></name> <operator>+</operator> <name><name>in</name><operator>.</operator><name>dbcnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&gt;=</operator> <name><name>in</name><operator>.</operator><name>db</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><operator>--</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name><name>in</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>t</name> <operator>-</operator> <name><name>in</name><operator>.</operator><name>db</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>dbp</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbp</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbcnt</name></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>out</name><operator>.</operator><name>dbcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>out</name><operator>.</operator><name>dbp</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
