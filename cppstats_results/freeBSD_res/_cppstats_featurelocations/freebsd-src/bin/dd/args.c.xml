<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/dd/args.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)args.c 8.3 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>c_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>c_conv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>c_iflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>c_oflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_bs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_cbs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_conv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_count</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_files</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_fillchar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_ibs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_if</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_iflag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_obs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_of</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_oflag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_seek</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_skip</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_speed</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_status</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uintmax_t</name></type> <name>get_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>off_t</name></type> <name>get_off_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>arg</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>noset</name></decl>;</decl_stmt>
}</block> <decl><name><name>args</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"bs"</literal></expr>, <expr><name>f_bs</name></expr>, <expr><name>C_BS</name></expr>, <expr><name>C_BS</name><operator>|</operator><name>C_IBS</name><operator>|</operator><name>C_OBS</name><operator>|</operator><name>C_OSYNC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cbs"</literal></expr>, <expr><name>f_cbs</name></expr>, <expr><name>C_CBS</name></expr>, <expr><name>C_CBS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"conv"</literal></expr>, <expr><name>f_conv</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"count"</literal></expr>, <expr><name>f_count</name></expr>, <expr><name>C_COUNT</name></expr>, <expr><name>C_COUNT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"files"</literal></expr>, <expr><name>f_files</name></expr>, <expr><name>C_FILES</name></expr>, <expr><name>C_FILES</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fillchar"</literal></expr>, <expr><name>f_fillchar</name></expr>, <expr><name>C_FILL</name></expr>, <expr><name>C_FILL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ibs"</literal></expr>, <expr><name>f_ibs</name></expr>, <expr><name>C_IBS</name></expr>, <expr><name>C_BS</name><operator>|</operator><name>C_IBS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"if"</literal></expr>, <expr><name>f_if</name></expr>, <expr><name>C_IF</name></expr>, <expr><name>C_IF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iflag"</literal></expr>, <expr><name>f_iflag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iseek"</literal></expr>, <expr><name>f_skip</name></expr>, <expr><name>C_SKIP</name></expr>, <expr><name>C_SKIP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"obs"</literal></expr>, <expr><name>f_obs</name></expr>, <expr><name>C_OBS</name></expr>, <expr><name>C_BS</name><operator>|</operator><name>C_OBS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"of"</literal></expr>, <expr><name>f_of</name></expr>, <expr><name>C_OF</name></expr>, <expr><name>C_OF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oflag"</literal></expr>, <expr><name>f_oflag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oseek"</literal></expr>, <expr><name>f_seek</name></expr>, <expr><name>C_SEEK</name></expr>, <expr><name>C_SEEK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek"</literal></expr>, <expr><name>f_seek</name></expr>, <expr><name>C_SEEK</name></expr>, <expr><name>C_SEEK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"skip"</literal></expr>, <expr><name>f_skip</name></expr>, <expr><name>C_SKIP</name></expr>, <expr><name>C_SKIP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"speed"</literal></expr>, <expr><name>f_speed</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>f_status</name></expr>, <expr><name>C_STATUS</name></expr>,<expr><name>C_STATUS</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>oper</name></decl>;</decl_stmt>




<function><type><name>void</name></type>
<name>jcl</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>arg</name></name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>oper</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>argv</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oper</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>oper</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to allocate space for the argument \"%s\""</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>oper</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown operand %s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"no value specified for %s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>oper</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ap</name> <operator>=</operator> <operator>(</operator>struct <name>arg</name> <operator>*</operator><operator>)</operator><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>arg</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>c_arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown operand %s"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>noset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: illegal argument combination or already set"</literal></expr></argument>,
<argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name><name>ap</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ap</name><operator>-&gt;</operator><name>f</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_BS</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_BLOCK</name> <operator>|</operator> <name>C_LCASE</name> <operator>|</operator> <name>C_SWAB</name> <operator>|</operator> <name>C_UCASE</name> <operator>|</operator>
<name>C_UNBLOCK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ddflags</name> <operator>&amp;=</operator> <operator>~</operator><name>C_BS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_BS</name> <operator>&amp;&amp;</operator> <name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_IBS</name> <operator>|</operator> <name>C_OBS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"bs supersedes ibs and obs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_BLOCK</name> <operator>|</operator> <name>C_UNBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_CBS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"record operations require cbs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cbsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"cbs cannot be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cfunc</name> <operator>=</operator> <ternary><condition><expr><name>ddflags</name> <operator>&amp;</operator> <name>C_BLOCK</name></expr> ?</condition><then> <expr><name>block</name></expr> </then><else>: <expr><name>unblock</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_CBS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <operator>(</operator><name>C_ASCII</name> <operator>|</operator> <name>C_EBCDIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name>C_ASCII</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name>C_UNBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cfunc</name> <operator>=</operator> <name>unblock</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name>C_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cfunc</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"cbs meaningless if not doing record operations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cfunc</name> <operator>=</operator> <name>def</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>arg</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>arg</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_bs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>res</name></expr></argument> &gt;</argument_list></name> <name>SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bs must be between 1 and %zd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>res</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_cbs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>res</name></expr></argument> &gt;</argument_list></name> <name>SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"cbs must be between 1 and %zd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cbsz</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>res</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_count</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>UINTMAX_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cpy_cnt</name> <operator>=</operator> <name>UINTMAX_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cpy_cnt</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_files</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>files_cnt</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>files_cnt</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"files must be between 1 and %zu"</literal></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_fillchar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"need exactly one fill char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fill_char</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_ibs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_BS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>res</name></expr></argument> &gt;</argument_list></name> <name>SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ibs must be between 1 and %zd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>dbsz</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>res</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_if</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>iflag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>noset</name></decl>;</decl_stmt>
}</block> <decl><name><name>ilist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"direct"</literal></expr>, <expr><name>C_IDIRECT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fullblock"</literal></expr>, <expr><name>C_IFULLBLOCK</name></expr>, <expr><name>C_SYNC</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_iflag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iflag</name></name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>ilist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iflag</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>c_iflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown iflag %s"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name><name>ip</name><operator>-&gt;</operator><name>noset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: illegal conversion combination"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name><name>ip</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_iflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>iflag</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>iflag</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_obs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ddflags</name> <operator>&amp;</operator> <name>C_BS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>res</name></expr></argument> &gt;</argument_list></name> <name>SSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"obs must be between 1 and %zd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>dbsz</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>res</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_of</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_seek</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>get_off_t</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_skip</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>get_off_t</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_speed</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>speed</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_status</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name>C_NOINFO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"noxfer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name>C_NOXFER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"progress"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name>C_PROGRESS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown status %s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>conv</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>set</name></decl>, <decl><type ref="prev"/><name>noset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>ctab</name></decl>;</decl_stmt>
}</block> <decl><name><name>clist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ascii"</literal></expr>, <expr><name>C_ASCII</name></expr>, <expr><name>C_EBCDIC</name></expr>, <expr><name>e2a_POSIX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"block"</literal></expr>, <expr><name>C_BLOCK</name></expr>, <expr><name>C_UNBLOCK</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ebcdic"</literal></expr>, <expr><name>C_EBCDIC</name></expr>, <expr><name>C_ASCII</name></expr>, <expr><name>a2e_POSIX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fdatasync"</literal></expr>, <expr><name>C_FDATASYNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fsync"</literal></expr>, <expr><name>C_FSYNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ibm"</literal></expr>, <expr><name>C_EBCDIC</name></expr>, <expr><name>C_ASCII</name></expr>, <expr><name>a2ibm_POSIX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lcase"</literal></expr>, <expr><name>C_LCASE</name></expr>, <expr><name>C_UCASE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"noerror"</literal></expr>, <expr><name>C_NOERROR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"notrunc"</literal></expr>, <expr><name>C_NOTRUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oldascii"</literal></expr>, <expr><name>C_ASCII</name></expr>, <expr><name>C_EBCDIC</name></expr>, <expr><name>e2a_32V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oldebcdic"</literal></expr>, <expr><name>C_EBCDIC</name></expr>, <expr><name>C_ASCII</name></expr>, <expr><name>a2e_32V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oldibm"</literal></expr>, <expr><name>C_EBCDIC</name></expr>, <expr><name>C_ASCII</name></expr>, <expr><name>a2ibm_32V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"osync"</literal></expr>, <expr><name>C_OSYNC</name></expr>, <expr><name>C_BS</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pareven"</literal></expr>, <expr><name>C_PAREVEN</name></expr>, <expr><name>C_PARODD</name><operator>|</operator><name>C_PARSET</name><operator>|</operator><name>C_PARNONE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"parnone"</literal></expr>, <expr><name>C_PARNONE</name></expr>, <expr><name>C_PARODD</name><operator>|</operator><name>C_PARSET</name><operator>|</operator><name>C_PAREVEN</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"parodd"</literal></expr>, <expr><name>C_PARODD</name></expr>, <expr><name>C_PAREVEN</name><operator>|</operator><name>C_PARSET</name><operator>|</operator><name>C_PARNONE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"parset"</literal></expr>, <expr><name>C_PARSET</name></expr>, <expr><name>C_PARODD</name><operator>|</operator><name>C_PAREVEN</name><operator>|</operator><name>C_PARNONE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"sparse"</literal></expr>, <expr><name>C_SPARSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"swab"</literal></expr>, <expr><name>C_SWAB</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sync"</literal></expr>, <expr><name>C_SYNC</name></expr>, <expr><name>C_IFULLBLOCK</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucase"</literal></expr>, <expr><name>C_UCASE</name></expr>, <expr><name>C_LCASE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unblock"</literal></expr>, <expr><name>C_UNBLOCK</name></expr>, <expr><name>C_BLOCK</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_conv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>conv</name></name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>clist</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>clist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>conv</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>c_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown conversion %s"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ddflags</name> <operator>&amp;</operator> <name><name>cp</name><operator>-&gt;</operator><name>noset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: illegal conversion combination"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name><name>cp</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>ctab</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ctab</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>ctab</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_conv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>conv</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>conv</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>oflag</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>set</name></decl>;</decl_stmt>
}</block> <decl><name><name>olist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"direct"</literal></expr>, <expr><name>C_ODIRECT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fsync"</literal></expr>, <expr><name>C_OFSYNC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sync"</literal></expr>, <expr><name>C_OFSYNC</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>f_oflag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oflag</name></name> <modifier>*</modifier></type><name>op</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>olist</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>olist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oflag</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>c_oflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown open flag %s"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ddflags</name> <operator>|=</operator> <name><name>op</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_oflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>oflag</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>oflag</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>intmax_t</name></type>
<name>postfix_to_mult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>mult</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>expr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">50</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>mult</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>uintmax_t</name></type>
<name>get_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>mult</name></decl>, <decl><type ref="prev"/><name>prevnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtoumax</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: invalid numeric value"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <call><name>postfix_to_mult</name><argument_list>(<argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mult</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevnum</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>*=</operator> <name>mult</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>/</operator> <name>mult</name> <operator>!=</operator> <name>prevnum</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>erange</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>expr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <call><name>get_num</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevnum</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>*=</operator> <name>mult</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>/</operator> <name>mult</name> <operator>==</operator> <name>prevnum</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<label><name>erange</name>:</label>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: illegal numeric value"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>num</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>off_t</name></type>
<name>get_off_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>mult</name></decl>, <decl><type ref="prev"/><name>prevnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtoimax</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: invalid numeric value"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <call><name>postfix_to_mult</name><argument_list>(<argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mult</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevnum</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>*=</operator> <name>mult</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prevnum</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>num</name> <operator>/</operator> <name>mult</name> <operator>!=</operator> <name>prevnum</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>erange</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>expr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>expr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>(</operator><name>intmax_t</name><operator>)</operator><call><name>get_off_t</name><argument_list>(<argument><expr><name>expr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevnum</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>*=</operator> <name>mult</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prevnum</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>num</name> <operator>/</operator> <name>mult</name> <operator>==</operator> <name>prevnum</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<label><name>erange</name>:</label>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: illegal numeric value"</literal></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>num</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
