<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/dd/dd.h">






































<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dbcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dbrcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dbsz</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISCHR</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPIPE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISTAPE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSEEK</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOREAD</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISTRUNC</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<decl_stmt><decl><type><name>u_int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>seek_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>IO</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>in_full</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>in_part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>out_full</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>out_part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>trunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>swab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>start</name></decl>;</decl_stmt>
}</block></struct></type> <name>STAT</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ASCII</name></cpp:macro> <cpp:value>0x0000000000000001ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_BLOCK</name></cpp:macro> <cpp:value>0x0000000000000002ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_BS</name></cpp:macro> <cpp:value>0x0000000000000004ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_CBS</name></cpp:macro> <cpp:value>0x0000000000000008ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_COUNT</name></cpp:macro> <cpp:value>0x0000000000000010ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_EBCDIC</name></cpp:macro> <cpp:value>0x0000000000000020ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_FILES</name></cpp:macro> <cpp:value>0x0000000000000040ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_IBS</name></cpp:macro> <cpp:value>0x0000000000000080ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_IF</name></cpp:macro> <cpp:value>0x0000000000000100ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_LCASE</name></cpp:macro> <cpp:value>0x0000000000000200ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_NOERROR</name></cpp:macro> <cpp:value>0x0000000000000400ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_NOTRUNC</name></cpp:macro> <cpp:value>0x0000000000000800ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_OBS</name></cpp:macro> <cpp:value>0x0000000000001000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_OF</name></cpp:macro> <cpp:value>0x0000000000002000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_OSYNC</name></cpp:macro> <cpp:value>0x0000000000004000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_PAREVEN</name></cpp:macro> <cpp:value>0x0000000000008000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_PARNONE</name></cpp:macro> <cpp:value>0x0000000000010000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_PARODD</name></cpp:macro> <cpp:value>0x0000000000020000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_PARSET</name></cpp:macro> <cpp:value>0x0000000000040000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SEEK</name></cpp:macro> <cpp:value>0x0000000000080000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SKIP</name></cpp:macro> <cpp:value>0x0000000000100000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SPARSE</name></cpp:macro> <cpp:value>0x0000000000200000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SWAB</name></cpp:macro> <cpp:value>0x0000000000400000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SYNC</name></cpp:macro> <cpp:value>0x0000000000800000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_UCASE</name></cpp:macro> <cpp:value>0x0000000001000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_UNBLOCK</name></cpp:macro> <cpp:value>0x0000000002000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_FILL</name></cpp:macro> <cpp:value>0x0000000004000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_STATUS</name></cpp:macro> <cpp:value>0x0000000008000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_NOXFER</name></cpp:macro> <cpp:value>0x0000000010000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_NOINFO</name></cpp:macro> <cpp:value>0x0000000020000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_PROGRESS</name></cpp:macro> <cpp:value>0x0000000040000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_FSYNC</name></cpp:macro> <cpp:value>0x0000000080000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_FDATASYNC</name></cpp:macro> <cpp:value>0x0000000100000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_OFSYNC</name></cpp:macro> <cpp:value>0x0000000200000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_IFULLBLOCK</name></cpp:macro> <cpp:value>0x0000000400000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_IDIRECT</name></cpp:macro> <cpp:value>0x0000000800000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ODIRECT</name></cpp:macro> <cpp:value>0x0000001000000000ULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_PARITY</name></cpp:macro> <cpp:value>(C_PAREVEN | C_PARODD | C_PARNONE | C_PARSET)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BISZERO</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) &gt; 0 &amp;&amp; *((const char *)p) == 0 &amp;&amp; !memcmp( (const void *)(p), (const void *) ((const char *)p + 1), (s) - 1))</cpp:value></cpp:define>


</unit>
