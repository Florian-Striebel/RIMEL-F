<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ps/keyword.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)keyword.c 8.5 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxo/xo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ps.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>VAR</name> <modifier>*</modifier></type><name>findvar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct kinfo_proc, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct rusage, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LWPFMT</name></cpp:macro> <cpp:value>"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLWPFMT</name></cpp:macro> <cpp:value>"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UIDFMT</name></cpp:macro> <cpp:value>"u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIDFMT</name></cpp:macro> <cpp:value>"d"</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>VAR</name></type> <name><name>var</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"%cpu"</literal></expr>, <expr><literal type="string">"%CPU"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"percent-cpu"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>pcpu</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%mem"</literal></expr>, <expr><literal type="string">"%MEM"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"percent-memory"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>pmem</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acflag"</literal></expr>, <expr><literal type="string">"ACFLG"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"accounting-flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_acflag</name></expr></argument>)</argument_list></call></expr>,
<expr><name>USHORT</name></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"acflg"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"acflag"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"args"</literal></expr>, <expr><literal type="string">"COMMAND"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"arguments"</literal></expr>, <expr><name>COMM</name><operator>|</operator><name>LJUST</name><operator>|</operator><name>USER</name></expr>, <expr><name>arguments</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"blocked"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sigmask"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"caught"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sigcatch"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"class"</literal></expr>, <expr><literal type="string">"CLASS"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"login-class"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>loginclass</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"comm"</literal></expr>, <expr><literal type="string">"COMMAND"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"command"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>ucomm</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"command"</literal></expr>, <expr><literal type="string">"COMMAND"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"command"</literal></expr>, <expr><name>COMM</name><operator>|</operator><name>LJUST</name><operator>|</operator><name>USER</name></expr>, <expr><name>command</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cow"</literal></expr>, <expr><literal type="string">"COW"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"copy-on-write-faults"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_cow</name></expr></argument>)</argument_list></call></expr>,
<expr><name>UINT</name></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cpu"</literal></expr>, <expr><literal type="string">"C"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"on-cpu"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>cpunum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cputime"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"time"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dsiz"</literal></expr>, <expr><literal type="string">"DSIZ"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"data-size"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_dsize</name></expr></argument>)</argument_list></call></expr>, <expr><name>PGTOK</name></expr>,
<expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"egid"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"gid"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"egroup"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"group"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"emul"</literal></expr>, <expr><literal type="string">"EMUL"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"emulation-envirnment"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>emulname</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"etime"</literal></expr>, <expr><literal type="string">"ELAPSED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"elapsed-time"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>elapsed</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"etimes"</literal></expr>, <expr><literal type="string">"ELAPSED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"elapsed-times"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>elapseds</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"euid"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"uid"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"F"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_flag</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"f2"</literal></expr>, <expr><literal type="string">"F2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"flags2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_flag2</name></expr></argument>)</argument_list></call></expr>, <expr><name>INT</name></expr>, <expr><literal type="string">"08x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fib"</literal></expr>, <expr><literal type="string">"FIB"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"fib"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_fibnum</name></expr></argument>)</argument_list></call></expr>, <expr><name>INT</name></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"flags2"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"f2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gid"</literal></expr>, <expr><literal type="string">"GID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"gid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_groups</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><name>UIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"group"</literal></expr>, <expr><literal type="string">"GROUP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"group"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>egroupname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ignored"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sigignore"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"inblk"</literal></expr>, <expr><literal type="string">"INBLK"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"read-blocks"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>, <expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_inblock</name></expr></argument>)</argument_list></call></expr>,
<expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"inblock"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"inblk"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"jail"</literal></expr>, <expr><literal type="string">"JAIL"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"jail-name"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>jailname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"jid"</literal></expr>, <expr><literal type="string">"JID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"jail-id"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_jid</name></expr></argument>)</argument_list></call></expr>, <expr><name>INT</name></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"jobc"</literal></expr>, <expr><literal type="string">"JOBC"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"job-control-count"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_jobc</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SHORT</name></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ktrace"</literal></expr>, <expr><literal type="string">"KTRACE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ktrace"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_traceflag</name></expr></argument>)</argument_list></call></expr>, <expr><name>INT</name></expr>,
<expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"label"</literal></expr>, <expr><literal type="string">"LABEL"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"label"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>label</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lim"</literal></expr>, <expr><literal type="string">"LIM"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"memory-limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>maxrss</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lockname"</literal></expr>, <expr><literal type="string">"LOCK"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"lock-name"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>lockname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"login"</literal></expr>, <expr><literal type="string">"LOGIN"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"login-name"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>logname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"logname"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"login"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lstart"</literal></expr>, <expr><literal type="string">"STARTED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"start-time"</literal></expr>, <expr><name>LJUST</name><operator>|</operator><name>USER</name></expr>, <expr><name>lstarted</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lwp"</literal></expr>, <expr><literal type="string">"LWP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"thread-id"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_tid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>LWPFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"majflt"</literal></expr>, <expr><literal type="string">"MAJFLT"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"major-faults"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>, <expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_majflt</name></expr></argument>)</argument_list></call></expr>,
<expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"minflt"</literal></expr>, <expr><literal type="string">"MINFLT"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"minor-faults"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>, <expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_minflt</name></expr></argument>)</argument_list></call></expr>,
<expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"msgrcv"</literal></expr>, <expr><literal type="string">"MSGRCV"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"received-messages"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>,
<expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_msgrcv</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"msgsnd"</literal></expr>, <expr><literal type="string">"MSGSND"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"sent-messages"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>,
<expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_msgsnd</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mwchan"</literal></expr>, <expr><literal type="string">"MWCHAN"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"wait-channel"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>mwchan</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ni"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"nice"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nice"</literal></expr>, <expr><literal type="string">"NI"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"nice"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_nice</name></expr></argument>)</argument_list></call></expr>, <expr><name>CHAR</name></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nivcsw"</literal></expr>, <expr><literal type="string">"NIVCSW"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"involuntary-context-switches"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>,
<expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_nivcsw</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nlwp"</literal></expr>, <expr><literal type="string">"NLWP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"threads"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_numthreads</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>NLWPFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nsignals"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"nsigs"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nsigs"</literal></expr>, <expr><literal type="string">"NSIGS"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"signals-taken"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>,
<expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_nsignals</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nswap"</literal></expr>, <expr><literal type="string">"NSWAP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"swaps"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>, <expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_nswap</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>,
<expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nvcsw"</literal></expr>, <expr><literal type="string">"NVCSW"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"voluntary-context-switches"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>,
<expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_nvcsw</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"nwchan"</literal></expr>, <expr><literal type="string">"NWCHAN"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"wait-channel-address"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>nwchan</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"oublk"</literal></expr>, <expr><literal type="string">"OUBLK"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"written-blocks"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>rvar</name></expr>,
<expr><call><name>ROFF</name><argument_list>(<argument><expr><name>ru_oublock</name></expr></argument>)</argument_list></call></expr>, <expr><name>LONG</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"oublock"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"oublk"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"paddr"</literal></expr>, <expr><literal type="string">"PADDR"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"process-address"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_paddr</name></expr></argument>)</argument_list></call></expr>,
<expr><name>KPTR</name></expr>, <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pagein"</literal></expr>, <expr><literal type="string">"PAGEIN"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"pageins"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>pagein</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pcpu"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"%cpu"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pending"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sig"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pgid"</literal></expr>, <expr><literal type="string">"PGID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"process-group"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_pgid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pid"</literal></expr>, <expr><literal type="string">"PID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"pid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_pid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pmem"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"%mem"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ppid"</literal></expr>, <expr><literal type="string">"PPID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"ppid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_ppid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"pri"</literal></expr>, <expr><literal type="string">"PRI"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"priority"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>pri</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"re"</literal></expr>, <expr><literal type="string">"RE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"residency-time"</literal></expr>, <expr><name>INF127</name></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_swtime</name></expr></argument>)</argument_list></call></expr>,
<expr><name>UINT</name></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rgid"</literal></expr>, <expr><literal type="string">"RGID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"real-gid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_rgid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>UIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rgroup"</literal></expr>, <expr><literal type="string">"RGROUP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"real-group"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>rgroupname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rss"</literal></expr>, <expr><literal type="string">"RSS"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"rss"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_rssize</name></expr></argument>)</argument_list></call></expr>, <expr><name>PGTOK</name></expr>, <expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rtprio"</literal></expr>, <expr><literal type="string">"RTPRIO"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"realtime-priority"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>priorityr</name></expr>,
<expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_pri</name></expr></argument>)</argument_list></call></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ruid"</literal></expr>, <expr><literal type="string">"RUID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"real-uid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_ruid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>UIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ruser"</literal></expr>, <expr><literal type="string">"RUSER"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"real-user"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>runame</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sid"</literal></expr>, <expr><literal type="string">"SID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"sid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_sid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sig"</literal></expr>, <expr><literal type="string">"PENDING"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"signals-pending"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_siglist</name></expr></argument>)</argument_list></call></expr>,
<expr><name>INT</name></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sigcatch"</literal></expr>, <expr><literal type="string">"CAUGHT"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"signals-caught"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>,
<expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_sigcatch</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sigignore"</literal></expr>, <expr><literal type="string">"IGNORED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"signals-ignored"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>,
<expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_sigignore</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sigmask"</literal></expr>, <expr><literal type="string">"BLOCKED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"signal-mask"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_sigmask</name></expr></argument>)</argument_list></call></expr>,
<expr><name>UINT</name></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"sl"</literal></expr>, <expr><literal type="string">"SL"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"sleep-time"</literal></expr>, <expr><name>INF127</name></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_slptime</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><literal type="string">"d"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ssiz"</literal></expr>, <expr><literal type="string">"SSIZ"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"stack-size"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_ssize</name></expr></argument>)</argument_list></call></expr>, <expr><name>PGTOK</name></expr>,
<expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"start"</literal></expr>, <expr><literal type="string">"STARTED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"start-time"</literal></expr>, <expr><name>LJUST</name><operator>|</operator><name>USER</name></expr>, <expr><name>started</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"stat"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"state"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"state"</literal></expr>, <expr><literal type="string">"STAT"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"state"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>state</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"svgid"</literal></expr>, <expr><literal type="string">"SVGID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"saved-gid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_svgid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>UIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"svuid"</literal></expr>, <expr><literal type="string">"SVUID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"saved-uid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_svuid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>UIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"systime"</literal></expr>, <expr><literal type="string">"SYSTIME"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"system-time"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>systime</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tdaddr"</literal></expr>, <expr><literal type="string">"TDADDR"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"thread-address"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_tdaddr</name></expr></argument>)</argument_list></call></expr>,
<expr><name>KPTR</name></expr>, <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tdev"</literal></expr>, <expr><literal type="string">"TDEV"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"terminal-device"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tdev</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tdnam"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"tdname"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tdname"</literal></expr>, <expr><literal type="string">"TDNAME"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"thread-name"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>tdnam</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tid"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"lwp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"time"</literal></expr>, <expr><literal type="string">"TIME"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"cpu-time"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>cputime</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tpgid"</literal></expr>, <expr><literal type="string">"TPGID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"terminal-process-gid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>,
<expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_tpgid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tracer"</literal></expr>, <expr><literal type="string">"TRACER"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"tracer"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_tracer</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tsid"</literal></expr>, <expr><literal type="string">"TSID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"terminal-sid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_tsid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>,
<expr><name>PIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tsiz"</literal></expr>, <expr><literal type="string">"TSIZ"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"text-size"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_tsize</name></expr></argument>)</argument_list></call></expr>, <expr><name>PGTOK</name></expr>,
<expr><literal type="string">"ld"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tt"</literal></expr>, <expr><literal type="string">"TT "</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"terminal-name"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tty"</literal></expr>, <expr><literal type="string">"TTY"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"tty"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>longtname</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ucomm"</literal></expr>, <expr><literal type="string">"UCOMM"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"accounting-name"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>ucomm</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"uid"</literal></expr>, <expr><literal type="string">"UID"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"uid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_uid</name></expr></argument>)</argument_list></call></expr>, <expr><name>UINT</name></expr>, <expr><name>UIDFMT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"upr"</literal></expr>, <expr><literal type="string">"UPR"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"user-priority"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>upr</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"uprocp"</literal></expr>, <expr><literal type="string">"UPROCP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"process-address"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_paddr</name></expr></argument>)</argument_list></call></expr>,
<expr><name>KPTR</name></expr>, <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"user"</literal></expr>, <expr><literal type="string">"USER"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"user"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>username</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"usertime"</literal></expr>, <expr><literal type="string">"USERTIME"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"user-time"</literal></expr>, <expr><name>USER</name></expr>, <expr><name>usertime</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>,
<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"usrpri"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"upr"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vmaddr"</literal></expr>, <expr><literal type="string">"VMADDR"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"vmspace-address"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_vmspace</name></expr></argument>)</argument_list></call></expr>,
<expr><name>KPTR</name></expr>, <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vsize"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"vsz"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vsz"</literal></expr>, <expr><literal type="string">"VSZ"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"virtual-size"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>vsize</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"wchan"</literal></expr>, <expr><literal type="string">"WCHAN"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"wait-channel"</literal></expr>, <expr><name>LJUST</name></expr>, <expr><name>wchan</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>,
<expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"xstat"</literal></expr>, <expr><literal type="string">"XSTAT"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"exit-status"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>kvar</name></expr>, <expr><call><name>KOFF</name><argument_list>(<argument><expr><name>ki_xstat</name></expr></argument>)</argument_list></call></expr>,
<expr><name>USHORT</name></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CHAR</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>showkey</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <name>var</name></expr>;</init> <condition><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>termwidth</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>termwidth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P:/%hs}{l:key/%hs}"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>parsefmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tempstr1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMTSEP</name></cpp:macro> <cpp:value>" \t,\n"</cpp:value></cpp:define>
<expr_stmt><expr><name>tempstr1</name> <operator>=</operator> <name>tempstr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tempstr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tempstr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>tempstr</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>tempstr</name></expr></argument>, <argument><expr><literal type="string">"="</literal><name>FMTSEP</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tempstr</name></expr></argument>, <argument><expr><name>FMTSEP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>tempstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tempstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>v</name> <operator>=</operator> <call><name>findvar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>user</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>vent</name> <operator>=</operator> <call><name>find_varentry</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vent</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>varent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vent</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>header</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vent</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vent</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vent</name><operator>-&gt;</operator><name>var</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varlist</name></expr></argument>, <argument><expr><name>vent</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tempstr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varlist</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"no valid keywords; valid keywords:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>showkey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VAR</name> <modifier>*</modifier></type>
<name>findvar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>realfmt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>hp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VAR</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>






<expr_stmt><expr><name>rflen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>realfmt</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>rflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>realfmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>realfmt</name></expr></argument>, <argument><expr><name>rflen</name></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>realfmt</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>realfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>VAR</name> <operator>*</operator><operator>)</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: keyword not found"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>v</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>VAR</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>VAR</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
