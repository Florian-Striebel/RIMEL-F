<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ps/ps.h">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLIMITED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<enum>enum <name>type</name> <block>{ <decl><name>CHAR</name></decl>, <decl><name>UCHAR</name></decl>, <decl><name>SHORT</name></decl>, <decl><name>USHORT</name></decl>, <decl><name>INT</name></decl>, <decl><name>UINT</name></decl>, <decl><name>LONG</name></decl>, <decl><name>ULONG</name></decl>, <decl><name>KPTR</name></decl>, <decl><name>PGTOK</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>kinfo_str</name> <block>{
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>kinfo_str</argument>)</argument_list></macro> <expr_stmt><expr><name>ks_next</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ks_str</name></decl>;</decl_stmt>
}</block></struct></type> <name>KINFO_STR</name>;</typedef>

<typedef>typedef <type><struct>struct <name>kinfo</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>ki_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ki_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ki_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ki_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ki_pcpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>segsz_t</name></type> <name>ki_memsize</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
}</block> <decl><name>ki_d</name></decl>;</union>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>kinfo_str</argument>)</argument_list></macro> <expr_stmt><expr><name>ki_ks</name></expr>;</expr_stmt>
}</block></struct></type> <name>KINFO</name>;</typedef>


<typedef>typedef <type><struct>struct <name>varent</name> <block>{
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>varent</argument>)</argument_list></macro> <expr_stmt><expr><name>next_ve</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>var</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
}</block></struct></type> <name>VARENT</name>;</typedef>

<typedef>typedef <type><struct>struct <name>var</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMM</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJUST</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF127</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<decl_stmt><decl><type><name>u_int</name></type> <name>flag</name></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>oproc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAR</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
</unit>
