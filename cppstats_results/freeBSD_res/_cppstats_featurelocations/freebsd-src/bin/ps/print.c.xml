<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ps/print.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)print.c 8.6 (Berkeley) 4/16/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mac.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/vmmeter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jail.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vis.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxo/xo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ps.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND_WIDTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGUMENTS_WIDTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps_pgtok</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) * getpagesize()) / 1024)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>printheader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>vent</name><operator>-&gt;</operator><name>header</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LJUST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>vent</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:/%hs}"</literal></expr></argument>, <argument><expr><name><name>vent</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:/%-*hs}"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>vent</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:/%*hs}"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>vent</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>vent</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>arguments</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vis_args</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vis_args</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_args</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strvis</name><argument_list>(<argument><expr><name>vis_args</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_args</name></name></expr></argument>, <argument><expr><name>VIS_TAB</name> <operator>|</operator> <name>VIS_NL</name> <operator>|</operator> <name>VIS_NOSLASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>vis_args</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ARGUMENTS_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vis_args</name><index>[<expr><name>ARGUMENTS_WIDTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>vis_args</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>command</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vis_args</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vis_env</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cflag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>k</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdname</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_moretdname</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vis_args</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_args</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strvis</name><argument_list>(<argument><expr><name>vis_args</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_args</name></name></expr></argument>, <argument><expr><name>VIS_TAB</name> <operator>|</operator> <name>VIS_NL</name> <operator>|</operator> <name>VIS_NOSLASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_env</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vis_env</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_env</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strvis</name><argument_list>(<argument><expr><name>vis_env</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_env</name></name></expr></argument>,
<argument><expr><name>VIS_TAB</name> <operator>|</operator> <name>VIS_NL</name> <operator>|</operator> <name>VIS_NOSLASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>vis_env</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>k</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>vis_env</name></expr> ?</condition><then> <expr><name>vis_env</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>vis_env</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>vis_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vis_env</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vis_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vis_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>vis_args</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>COMMAND_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>COMMAND_WIDTH</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ucomm</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>k</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdname</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_moretdname</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s/%s%s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdname</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_moretdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>tdnam</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdname</name></name></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_moretdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>logname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_login</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_login</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>state</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>flag</name></decl>, <decl><type ref="prev"/><name>tdflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tdflags</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdflags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_stat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSTOP</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SSLEEP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>tdflags</name> <operator>&amp;</operator> <name>TDF_SINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <ternary><condition><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_slptime</name></name> <operator>&gt;=</operator> <name>MAXSLP</name></expr> ?</condition><then> <expr><literal type="char">'I'</literal></expr> </then><else>: <expr><literal type="char">'S'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SRUN</name></expr>:</case>
<case>case <expr><name>SIDL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SWAIT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SLOCK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SZOMB</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>P_INMEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_nice</name></name> <operator>&lt;</operator> <name>NZERO</name> <operator>||</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pri</name><operator>.</operator><name>pri_class</name></name> <operator>==</operator> <name>PRI_REALTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_nice</name></name> <operator>&gt;</operator> <name>NZERO</name> <operator>||</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pri</name><operator>.</operator><name>pri_class</name></name> <operator>==</operator> <name>PRI_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>P_TRACED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>P_WEXIT</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_stat</name></name> <operator>!=</operator> <name>SZOMB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>P_PPWAIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>P_SYSTEM</name><operator>)</operator> <operator>||</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_lock</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_cr_flags</name></name> <operator>&amp;</operator> <name>CRED_FLAG_CAPMODE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_kiflag</name></name> <operator>&amp;</operator> <name>KI_SLEADER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>P_CONTROLT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pgid</name></name> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tpgid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>P_JAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'J'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scalepri</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) - PZERO)</cpp:value></cpp:define>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pri</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>scalepri</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pri</name><operator>.</operator><name>pri_level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>upr</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>scalepri</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pri</name><operator>.</operator><name>pri_user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scalepri</name></cpp:undef>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>username</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><call><name>user_from_uid</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_uid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>egroupname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><call><name>group_from_gid</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>rgroupname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><call><name>group_from_gid</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rgid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>runame</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><call><name>user_from_uid</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_ruid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>tdev</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NODEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%#jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>tname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ttname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NODEV</name> <operator>||</operator> <operator>(</operator><name>ttname</name> <operator>=</operator> <call><name>devname</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>S_IFCHR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>ttname</name></expr></argument>, <argument><expr><literal type="string">"tty"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>ttname</name></expr></argument>, <argument><expr><literal type="string">"cua"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ttname</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>ttname</name></expr></argument>, <argument><expr><literal type="string">"pts/"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ttname</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><name>ttname</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_kiflag</name></name> <operator>&amp;</operator> <name>KI_CTTY</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>longtname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ttname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NODEV</name> <operator>||</operator> <operator>(</operator><name>ttname</name> <operator>=</operator> <call><name>devname</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>S_IFCHR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ttname</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><name>ttname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>started</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>then</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>then</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>then</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">3600</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%H:%M "</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">86400</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%a%H "</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%e%b%y"</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>lstarted</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>then</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>then</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>then</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>lockname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_kiflag</name></name> <operator>&amp;</operator> <name>KI_LOCKBLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_lockname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_lockname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>wchan</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wchan</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wmesg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wmesg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wchan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>nwchan</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wchan</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%0lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wchan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>mwchan</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wchan</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wmesg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wmesg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_wchan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_kiflag</name></name> <operator>&amp;</operator> <name>KI_LOCKBLOCK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_lockname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_lockname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>vsize</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_size</name></name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>printtime</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>secs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>psecs</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>decimal_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>decimal_point</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>decimal_point</name> <operator>=</operator> <call><name>localeconv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>psecs</name> <operator>=</operator> <operator>(</operator><name>psecs</name> <operator>+</operator> <literal type="number">5000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>secs</name> <operator>+=</operator> <name>psecs</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>=</operator> <name>psecs</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%ld:%02ld%c%02ld"</literal></expr></argument>,
<argument><expr><name>secs</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>secs</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>decimal_point</name></expr></argument>, <argument><expr><name>psecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cputime</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>secs</name></decl>, <decl><type ref="prev"/><name>psecs</name></decl>;</decl_stmt>






<expr_stmt><expr><name>secs</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_runtime</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_runtime</name></name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sumrusage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secs</name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_childtime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_childtime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>printtime</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ve</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name>psecs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cpunum</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_stat</name></name> <operator>==</operator> <name>SRUN</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_oncpu</name></name> <operator>!=</operator> <name>NOCPU</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_oncpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_lastcpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>cpu</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>systime</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>secs</name></decl>, <decl><type ref="prev"/><name>psecs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rusage</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rusage</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sumrusage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secs</name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_childstime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_childstime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>printtime</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ve</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name>psecs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>usertime</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>secs</name></decl>, <decl><type ref="prev"/><name>psecs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rusage</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rusage</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sumrusage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secs</name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_childutime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psecs</name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_childutime</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>printtime</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>ve</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>, <argument><expr><name>psecs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>elapsed</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>, <decl><type ref="prev"/><name>hours</name></decl>, <decl><type ref="prev"/><name>mins</name></decl>, <decl><type ref="prev"/><name>secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> <operator>=</operator> <name>val</name> <operator>/</operator> <operator>(</operator><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>%=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hours</name> <operator>=</operator> <name>val</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>%=</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mins</name> <operator>=</operator> <name>val</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>days</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%3d-%02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hours</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d"</literal></expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>elapseds</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%jd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>getpcpu</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>failure</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nlistread</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>failure</name> <operator>=</operator> <call><name>donlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>failure</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0.0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fxtofl</name><parameter_list>(<parameter><type><name>fixpt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((double)(fixpt) / fscale)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_swtime</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_INMEM</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0.0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rawcpu</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">100.0</literal> <operator>*</operator> <call><name>fxtofl</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pctcpu</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">100.0</literal> <operator>*</operator> <call><name>fxtofl</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pctcpu</name></name></expr></argument>)</argument_list></call> <operator>/</operator>
<operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_swtime</name></name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>fxtofl</name><argument_list>(<argument><expr><name>ccpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pcpu</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%.1f"</literal></expr></argument>, <argument><expr><call><name>getpcpu</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>getpmem</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>failure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fracmem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nlistread</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>failure</name> <operator>=</operator> <call><name>donlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>failure</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0.0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_INMEM</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0.0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>fracmem</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rssize</name></name><operator>)</operator> <operator>/</operator> <name>mempages</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">100.0</literal> <operator>*</operator> <name>fracmem</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pmem</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%.1f"</literal></expr></argument>, <argument><expr><call><name>getpmem</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pagein</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr> ?</condition><then> <expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rusage</name><operator>.</operator><name>ru_majflt</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>maxrss</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier><name>k</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>priorityr</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>priority</name></name> <modifier>*</modifier></type><name>lpri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>class</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lpri</name> <operator>=</operator> <operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>class</name> <operator>=</operator> <name><name>lpri</name><operator>-&gt;</operator><name>pri_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>lpri</name><operator>-&gt;</operator><name>pri_level</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>class</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RTP_PRIO_REALTIME</name></expr>:</case>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"real:%u"</literal></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <name>PRI_MIN_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RTP_PRIO_NORMAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>PRI_MIN_TIMESHARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"normal:%u"</literal></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <name>PRI_MIN_TIMESHARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"kernel:%u"</literal></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <name>PRI_MIN_KERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>RTP_PRIO_IDLE</name></expr>:</case>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"idle:%u"</literal></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <name>PRI_MIN_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RTP_PRIO_ITHD</name></expr>:</case>

<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"intr:%u"</literal></expr></argument>, <argument><expr><name>level</name> <operator>-</operator> <name>PRI_MIN_ITHD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%u:%u"</literal></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>printval</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ofmt</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"%"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ofmt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fcp</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>fcp</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHKINF127</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n) &gt; 127) &amp;&amp; (v-&gt;flag &amp; INF127) ? 127 : (n))</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHAR</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCHAR</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SHORT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>USHORT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>u_short</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UINT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><call><name>CHKINF127</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LONG</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ULONG</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>u_long</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KPTR</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>u_long</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PGTOK</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><call><name>ps_pgtok</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>u_long</name> <operator>*</operator><operator>)</operator><name>bp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>kvar</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ve</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>printval</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>rvar</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier></type><name>ve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ve</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ki_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>printval</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_rusage</name></name><operator>)</operator> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>emulname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_emul</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>label</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mac_t</name></type> <name>proclabel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mac_prepare_process_label</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proclabel</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"mac_prepare_process_label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mac_get_pid</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>, <argument><expr><name>proclabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mac_to_text</name><argument_list>(<argument><expr><name>proclabel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>string</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mac_free</name><argument_list>(<argument><expr><name>proclabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<return>return <expr><operator>(</operator><name>string</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>loginclass</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_SYSTEM</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_loginclass</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>jailname</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>VARENT</name> <modifier>*</modifier><name>ve</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_jid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>jail_getname</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_jid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>name</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
