<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ps/ps.c">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>copyright</name><index>[]</index></name> <init>=
<expr><literal type="string">"@(#) Copyright (c) 1990, 1993, 1994\n\
The Regents of the University of California. All rights reserved.\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)ps.c 8.4 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/jail.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jail.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kvm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxo/xo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ps.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_PTS</name></cpp:macro> <cpp:value>"/dev/pts/"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W_SEP</name></cpp:macro> <cpp:value>" \t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SEP</name></cpp:macro> <cpp:value>","</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LAZY_PS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_UREAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_LAZY_f</name></cpp:macro> <cpp:value>"f"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_UREAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_LAZY_f</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdigitch</name><parameter_list>(<parameter><type><name>Anychar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isdigit((u_char)(Anychar))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>cflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rawcpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sumrusage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>termwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>showthreads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>velisthead</name></name></type> <name>varlist</name> <init>= <expr><call><name>STAILQ_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>varlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>forceuread</name> <init>= <expr><name>DEF_UREAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>kvm_t</name> <modifier>*</modifier></type><name>kd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>needcomm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>needenv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>needuser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>optfatal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pid_max</name></decl>;</decl_stmt>

<enum><specifier>static</specifier> enum <name>sort</name> <block>{ <decl><name>DEFAULT</name></decl>, <decl><name>SORTMEM</name></decl>, <decl><name>SORTCPU</name></decl> }</block> <decl><name>sortby</name> <init>= <expr><name>DEFAULT</name></expr></init></decl>;</enum>

<struct_decl>struct <name>listinfo</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>int</name></type> <name>addelem_rtn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>_inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_elem</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>listinfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elemsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>addelem_rtn</name> <modifier>*</modifier></type><name>addelem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>jids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name> <modifier>*</modifier></type><name>pids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name> <modifier>*</modifier></type><name>ttys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>uids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name>l</name></decl>;</union>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>addelem_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>addelem_jid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>addelem_pid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>addelem_tty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>addelem_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>descendant_sort</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>format_output</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>expand_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fmt</name><parameter_list>(<parameter><function_decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>kvm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>addelem_rtn</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>kludge_oldps_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pscomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>saveuser</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scanvars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sizevars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pidmax_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dfmt</name><index>[]</index></name> <init>= <expr><literal type="string">"pid,tt,state,time,command"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>jfmt</name><index>[]</index></name> <init>= <expr><literal type="string">"user,pid,ppid,pgid,sid,jobc,state,tt,time,command"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>lfmt</name><index>[]</index></name> <init>= <expr><literal type="string">"uid,pid,ppid,cpu,pri,nice,vsz,rss,mwchan,state,"</literal>
<literal type="string">"tt,time,command"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>o1</name><index>[]</index></name> <init>= <expr><literal type="string">"pid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>o2</name><index>[]</index></name> <init>= <expr><literal type="string">"tt,state,time,command"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ufmt</name><index>[]</index></name> <init>= <expr><literal type="string">"user,pid,%cpu,%mem,vsz,rss,tt,state,start,time,command"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>vfmt</name><index>[]</index></name> <init>= <expr><literal type="string">"pid,state,time,sl,re,pagein,vsz,rss,lim,tsiz,"</literal>
<literal type="string">"%cpu,%mem,command"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Zfmt</name><index>[]</index></name> <init>= <expr><literal type="string">"label"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_ARGS</name></cpp:macro> <cpp:value>"AaCcde" OPT_LAZY_f "G:gHhjJ:LlM:mN:O:o:p:rSTt:U:uvwXxZ"</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>listinfo</name></name></type> <name>gidlist</name></decl>, <decl><type ref="prev"/><name>jidlist</name></decl>, <decl><type ref="prev"/><name>pgrplist</name></decl>, <decl><type ref="prev"/><name>pidlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>listinfo</name></name></type> <name>ruidlist</name></decl>, <decl><type ref="prev"/><name>sesslist</name></decl>, <decl><type ref="prev"/><name>ttylist</name></decl>, <decl><type ref="prev"/><name>uidlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>kinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_KINFO</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KINFO_STR</name> <modifier>*</modifier></type><name>ks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name> <init>= <expr><block>{ <expr><operator>.</operator><name>ws_row</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nlistf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>memf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>all</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>elem</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>, <decl><type ref="prev"/><name>_fmt</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>lineno</name></decl>, <decl><type ref="prev"/><name>linelen</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>descendancy</name></decl>, <decl><type ref="prev"/><name>nentries</name></decl>, <decl><type ref="prev"/><name>nkept</name></decl>, <decl><type ref="prev"/><name>nselectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prtheader</name></decl>, <decl><type ref="prev"/><name>wflag</name></decl>, <decl><type ref="prev"/><name>what</name></decl>, <decl><type ref="prev"/><name>xkeep</name></decl>, <decl><type ref="prev"/><name>xkeep_implied</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fwidthmin</name></decl>, <decl><type ref="prev"/><name>fwidthmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fmtbuf</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cols</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cols</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>ioctl</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>ioctl</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <name>UNLIMITED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>kludge_oldps_options</name><argument_list>(<argument><expr><name>PS_ARGS</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pidmax_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>all</name> <operator>=</operator> <name>descendancy</name> <operator>=</operator> <name>_fmt</name> <operator>=</operator> <name>nselectors</name> <operator>=</operator> <name>optfatal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prtheader</name> <operator>=</operator> <name>showthreads</name> <operator>=</operator> <name>wflag</name> <operator>=</operator> <name>xkeep_implied</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xkeep</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gidlist</name></expr></argument>, <argument><expr><name>addelem_gid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jidlist</name></expr></argument>, <argument><expr><name>addelem_jid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"jail id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgrplist</name></expr></argument>, <argument><expr><name>addelem_pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"process group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pidlist</name></expr></argument>, <argument><expr><name>addelem_pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"process id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ruidlist</name></expr></argument>, <argument><expr><name>addelem_uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ruser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sesslist</name></expr></argument>, <argument><expr><name>addelem_pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"session id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttylist</name></expr></argument>, <argument><expr><name>addelem_tty</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dev_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidlist</name></expr></argument>, <argument><expr><name>addelem_uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>memf</name> <operator>=</operator> <name>_PATH_DEVNULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlistf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>PS_ARGS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>





<expr_stmt><expr><name>all</name> <operator>=</operator> <name>xkeep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>rawcpu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>cflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>descendancy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>needenv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LAZY_PS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>getuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>getgid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>forceuread</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><call><name>add_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gidlist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xkeep_implied</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>





add_list(&amp;pgrplist, optarg);
xkeep_implied = 1;
nselectors++;
break;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>showthreads</name> <operator>=</operator> <name>KERN_PROC_INC_THREAD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>prtheader</name> <operator>=</operator> <ternary><condition><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name></expr> </then><else>: <expr><literal type="number">22</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><call><name>add_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jidlist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xkeep_implied</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>jfmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><call><name>showkey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>lfmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><name>memf</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>sortby</name> <operator>=</operator> <name>SORTMEM</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><name>nlistf</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>o2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>o2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call><name>add_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pidlist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>nselectors</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
case 'R':







add_list(&amp;ruidlist, optarg);
xkeep_implied = 1;
nselectors++;
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>sortby</name> <operator>=</operator> <name>SORTCPU</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>sumrusage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
case 's':






add_list(&amp;sesslist, optarg);
xkeep_implied = 1;
nselectors++;
break;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>optarg</name> <operator>=</operator> <call><name>ttyname</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"stdin: not a terminal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>add_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttylist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xkeep_implied</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call><name>add_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidlist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xkeep_implied</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>ufmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sortby</name> <operator>=</operator> <name>SORTCPU</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sortby</name> <operator>=</operator> <name>SORTMEM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>wflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <name>UNLIMITED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>termwidth</name> <operator>&lt;</operator> <literal type="number">131</literal> <operator>&amp;&amp;</operator> <name>termwidth</name> <operator>!=</operator> <name>UNLIMITED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <literal type="number">131</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wflag</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>











<expr_stmt><expr><name>xkeep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>xkeep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>Zfmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Zfmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>





<while>while <condition>(<expr><operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigitch</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pidlist</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"illegal argument: %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>optfatal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xkeep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xkeep</name> <operator>=</operator> <name>xkeep_implied</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>kvm_openfiles</name><argument_list>(<argument><expr><name>nlistf</name></expr></argument>, <argument><expr><name>memf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_fmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parsefmt</name><argument_list>(<argument><expr><name>dfmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all</name> <operator>&amp;&amp;</operator> <name>nselectors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uidlist</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>uidlist</name><operator>.</operator><name>maxcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>uidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>uids</name></name> <operator>=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>scanvars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name>what</name> <operator>=</operator> <ternary><condition><expr><name>showthreads</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>KERN_PROC_ALL</name></expr> </then><else>: <expr><name>KERN_PROC_PROC</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nselectors</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gidlist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_RGID</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>gidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>gids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pgrplist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_PGRP</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>pgrplist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pidlist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>descendancy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_PID</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>pidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ruidlist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_RUID</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>ruidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>uids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sesslist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_SESSION</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>sesslist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ttylist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_TTY</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>ttylist</name><operator>.</operator><name>l</name><operator>.</operator><name>ttys</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>uidlist</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <name>KERN_PROC_UID</name> <operator>|</operator> <name>showthreads</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>*</operator><name><name>uidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>uids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nselectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>nentries</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>kvm_getprocs</name><argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>kp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ESRCH</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>kp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nentries</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>kvm_geterr</name><argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nkept</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>descendancy</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>pidlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_ppid</name> <operator>==</operator> <name><name>pidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pidlist</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>pidlist</name><operator>.</operator><name>maxcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pidlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name><index>[<expr><name><name>pidlist</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>kp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_pid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nentries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>kinfo</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nentries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nentries</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>kp</name></expr></incr>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>pidlist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>pidlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name> <operator>==</operator> <name><name>pidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>xkeep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_tdev</name></name> <operator>==</operator> <name>NODEV</name> <operator>||</operator>
<operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_CONTROLT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nselectors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gidlist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>gidlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_rgid</name></name> <operator>==</operator> <name><name>gidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>gids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jidlist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>jidlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_jid</name></name> <operator>==</operator> <name><name>jidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>jids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pgrplist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>pgrplist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pgid</name></name> <operator>==</operator>
<name><name>pgrplist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ruidlist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>ruidlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_ruid</name></name> <operator>==</operator>
<name><name>ruidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>uids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sesslist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>sesslist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_sid</name></name> <operator>==</operator> <name><name>sesslist</name><operator>.</operator><name>l</name><operator>.</operator><name>pids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ttylist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>ttylist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_tdev</name></name> <operator>==</operator> <name><name>ttylist</name><operator>.</operator><name>l</name><operator>.</operator><name>ttys</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uidlist</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name><name>uidlist</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>elem</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_uid</name></name> <operator>==</operator> <name><name>uidlist</name><operator>.</operator><name>l</name><operator>.</operator><name>uids</name><index>[<expr><name>elem</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>keepit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>




<continue>continue;</continue>

<label><name>keepit</name>:</label>
<expr_stmt><expr><name>next_KINFO</name> <operator>=</operator> <operator>&amp;</operator><name><name>kinfo</name><index>[<expr><name>nkept</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_KINFO</name><operator>-&gt;</operator><name>ki_p</name></name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_KINFO</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_KINFO</name><operator>-&gt;</operator><name>ki_d</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next_KINFO</name><operator>-&gt;</operator><name>ki_pcpu</name></name> <operator>=</operator> <call><name>getpcpu</name><argument_list>(<argument><expr><name>next_KINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sortby</name> <operator>==</operator> <name>SORTMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next_KINFO</name><operator>-&gt;</operator><name>ki_memsize</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_tsize</name></name> <operator>+</operator>
<name><name>kp</name><operator>-&gt;</operator><name>ki_dsize</name></name> <operator>+</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_ssize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>needuser</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>saveuser</name><argument_list>(<argument><expr><name>next_KINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nkept</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sizevars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nkept</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printheader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>kinfo</name></expr></argument>, <argument><expr><name>nkept</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pscomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>descendancy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>descendant_sort</name><argument_list>(<argument><expr><name>kinfo</name></expr></argument>, <argument><expr><name>nkept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkept</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>format_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"process-information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printheader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xo_get_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XO_STYLE_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwidth</name> <operator>=</operator> <name>UNLIMITED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkept</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>linelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>ks</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_REMOVE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ki_ks</name></expr></argument>, <argument><expr><name>ks_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fwidthmax</name> <operator>=</operator> <name>_POSIX2_LINE_MAX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>vent</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>termwidth</name> <operator>!=</operator> <name>UNLIMITED</name> <operator>&amp;&amp;</operator> <name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>termwidth</name> <operator>-</operator> <name>linelen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>left</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fwidthmax</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fwidthmin</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>xo_get_style</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XO_STYLE_TEXT</name> <operator>||</operator>
<operator>(</operator><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>vent</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LJUST</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fmtbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmtbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"{:%s/%%%s%d..%dhs}"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>field</name></name></expr> ?</condition><then> <expr><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>field</name></name></expr> </then><else>: <expr><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LJUST</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>fwidthmin</name></expr></argument>, <argument><expr><name>fwidthmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><name>fmtbuf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linelen</name> <operator>+=</operator> <name>fwidthmin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ks</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>vent</name></expr></argument>, <argument><expr><name>next_ve</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{P: }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linelen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prtheader</name> <operator>&amp;&amp;</operator> <name>lineno</name><operator>++</operator> <operator>==</operator> <name>prtheader</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printheader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"process-information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gidlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jidlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pidlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgrplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ruidlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sesslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttylist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkept</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>kinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>kinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>addelem_gid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>grp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameorID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>bigtemp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>elem</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXLOGNAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>elem</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"Invalid (zero-length) %s name"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s name too long: %s"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><name>grp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nameorID</name> <operator>=</operator> <literal type="string">"named"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bigtemp</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>bigtemp</name> <operator>&lt;=</operator> <name>GID_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nameorID</name> <operator>=</operator> <literal type="string">"name or ID matches"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>grp</name> <operator>=</operator> <call><name>getgrgid</name><argument_list>(<argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><name>bigtemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>grp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>grp</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>grp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"No %s %s '%s'"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>nameorID</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_list</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>gids</name><index>[<expr><operator>(</operator><name><name>inf</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>addelem_jid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tempid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>elem</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"Invalid (zero-length) jail id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tempid</name> <operator>=</operator> <call><name>jail_getid</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tempid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"Invalid %s: %s"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_list</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>jids</name><index>[<expr><operator>(</operator><name><name>inf</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>tempid</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>addelem_pid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tempid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>elem</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"Invalid (zero-length) process id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tempid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>tempid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>elem</name> <operator>==</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"Invalid %s: %s"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>tempid</name> <operator>&gt;</operator> <name>pid_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s too large: %s"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_list</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>pids</name><index>[<expr><operator>(</operator><name><name>inf</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>tempid</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>addelem_tty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ttypath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pathbuf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pathbuf2</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pathbuf3</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ttypath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pathbuf2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pathbuf3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>elem</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<expr_stmt><expr><name>ttypath</name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><literal type="string">"co"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ttypath</name> <operator>=</operator> <name>_PATH_CONSOLE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>_PATH_DEV</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttypath</name> <operator>=</operator> <name>pathbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>_PATH_TTY</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>_PATH_TTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>_PATH_PTS</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>_PATH_PTS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>_PATH_CONSOLE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>pathbuf2</name></expr></argument>, <argument><expr><name>_PATH_TTY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>pathbuf2</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>pathbuf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ttypath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>pathbuf3</name></expr></argument>, <argument><expr><name>_PATH_PTS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>pathbuf3</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>pathbuf3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ttypath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ttypath</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>ttypath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pathbuf3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s, and %s"</literal></expr></argument>, <argument><expr><name>pathbuf3</name></expr></argument>, <argument><expr><name>pathbuf2</name></expr></argument>,
<argument><expr><name>ttypath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ttypath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pathbuf3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s, %s, and %s: Not a terminal"</literal></expr></argument>,
<argument><expr><name>pathbuf3</name></expr></argument>, <argument><expr><name>pathbuf2</name></expr></argument>, <argument><expr><name>ttypath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: Not a terminal"</literal></expr></argument>, <argument><expr><name>ttypath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_list</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ttys</name><index>[<expr><operator>(</operator><name><name>inf</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>addelem_uid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>bigtemp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>elem</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXLOGNAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>elem</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"Invalid (zero-length) %s name"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s name too long: %s"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bigtemp</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>bigtemp</name> <operator>&gt;</operator> <name>UID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"No %s named '%s'"</literal></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><operator>(</operator><name>uid_t</name><operator>)</operator><name>bigtemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"No %s name or ID matches '%s'"</literal></expr></argument>,
<argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_list</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>uids</name><index>[<expr><operator>(</operator><name><name>inf</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>savep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toolong</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>elemcopy</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>inf</name><operator>-&gt;</operator><name>addelem</name></name><argument_list>(<argument><expr><name>inf</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>W_SEP</name></expr></argument>, <argument><expr><operator>*</operator><name>argp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>savep</name> <operator>=</operator> <name>argp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>toolong</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>elemcopy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>T_SEP</name></expr></argument>, <argument><expr><operator>*</operator><name>argp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>elemcopy</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>elemcopy</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&lt;=</operator> <name>endp</name> <operator>&amp;&amp;</operator>
<macro><name>strchr</name><argument_list>(<argument>W_SEP T_SEP</argument>, <argument>*argp</argument>)</argument_list></macro> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>argp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>toolong</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>toolong</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name><name>inf</name><operator>-&gt;</operator><name>addelem</name></name><argument_list>(<argument><expr><name>inf</name></expr></argument>, <argument><expr><name>elemcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<while>while <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <macro><name>strchr</name><argument_list>(<argument>W_SEP T_SEP</argument>,
<argument>*argp</argument>)</argument_list></macro> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"Value too long: %.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>argp</name> <operator>-</operator> <name>savep</name><operator>)</operator></expr></argument>,
<argument><expr><name>savep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optfatal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<while>while <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>W_SEP</name></expr></argument>, <argument><expr><operator>*</operator><name>argp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>argp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>T_SEP</name></expr></argument>, <argument><expr><operator>*</operator><name>argp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argp</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>inf</name><operator>-&gt;</operator><name>addelem</name></name><argument_list>(<argument><expr><name>inf</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>descendant_sort</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>ki</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst</name></decl>, <decl><type ref="prev"/><name>lvl</name></decl>, <decl><type ref="prev"/><name>maxlvl</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ndst</name></decl>, <decl><type ref="prev"/><name>nsrc</name></decl>, <decl><type ref="prev"/><name>siblings</name></decl>, <decl><type ref="prev"/><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KINFO</name></type> <name>kn</name></decl>;</decl_stmt>





<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxlvl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>items</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>nsrc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>src</name> <operator>+</operator> <name>nsrc</name> <operator>&lt;</operator> <name>items</name></expr>;</condition> <incr><expr><name>nsrc</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ki</name><index>[<expr><name>src</name> <operator>+</operator> <name>nsrc</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>dst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dst</name> <operator>&lt;</operator> <name>items</name></expr>;</condition> <incr><expr><name>dst</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><index>[<expr><name>dst</name></expr>]</index></name><operator>.</operator><name><name>ki_p</name><operator>-&gt;</operator><name>ki_pid</name></name> <operator>==</operator> <name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_p</name><operator>-&gt;</operator><name>ki_pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><index>[<expr><name>dst</name></expr>]</index></name><operator>.</operator><name><name>ki_p</name><operator>-&gt;</operator><name>ki_pid</name></name> <operator>==</operator> <name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_p</name><operator>-&gt;</operator><name>ki_ppid</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>items</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>nsrc</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ndst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>dst</name> <operator>+</operator> <name>ndst</name> <operator>&lt;</operator> <name>items</name></expr>;</condition> <incr><expr><name>ndst</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><index>[<expr><name>dst</name> <operator>+</operator> <name>ndst</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name> <operator>&lt;=</operator> <name><name>ki</name><index>[<expr><name>dst</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>src</name> <operator>+</operator> <name>nsrc</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name> <operator>+=</operator> <name><name>ki</name><index>[<expr><name>dst</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxlvl</name> <operator>&lt;</operator> <name><name>ki</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxlvl</name> <operator>=</operator> <name><name>ki</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>nsrc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kn</name> <operator>=</operator> <name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ki</name> <operator>+</operator> <name>src</name></expr></argument>, <argument><expr><name>ki</name> <operator>+</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>-</operator> <name>src</name> <operator>+</operator> <name>ndst</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>ki</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>dst</name> <operator>+</operator> <name>ndst</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>kn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsrc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ndst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst</name> <operator>+</operator> <name>ndst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kn</name> <operator>=</operator> <name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ki</name> <operator>+</operator> <name>dst</name> <operator>+</operator> <name>ndst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ki</name> <operator>+</operator> <name>dst</name> <operator>+</operator> <name>ndst</name></expr></argument>,
<argument><expr><operator>(</operator><name>src</name> <operator>-</operator> <name>dst</name> <operator>-</operator> <name>ndst</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>ki</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>dst</name> <operator>+</operator> <name>ndst</name></expr>]</index></name> <operator>=</operator> <name>kn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ndst</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsrc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ndst</name> <operator>+=</operator> <name>nsrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>nsrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsrc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>





<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>maxlvl</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><operator>(</operator><name>maxlvl</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>items</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lvl</name> <operator>=</operator> <name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>lvl</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>lvl</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><name><name>path</name><index>[<expr><name>n</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'|'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>lvl</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>siblings</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>dst</name> <operator>=</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>dst</name> <operator>&lt;</operator> <name>items</name></expr>;</condition> <incr><expr><name>dst</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><index>[<expr><name>dst</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name> <operator>&gt;</operator> <name>lvl</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><index>[<expr><name>dst</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name>lvl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>siblings</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>siblings</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>n</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>n</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>siblings</name></expr> ?</condition><then> <expr><literal type="char">'|'</literal></expr> </then><else>: <expr><literal type="char">'`'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ki</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><name><name>ki_d</name><operator>.</operator><name>prefix</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>expand_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newmax</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newmax</name> <operator>=</operator> <operator>(</operator><name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newlist</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>newmax</name> <operator>*</operator> <name><name>inf</name><operator>-&gt;</operator><name>elemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"realloc to %d %ss failed"</literal></expr></argument>, <argument><expr><name>newmax</name></expr></argument>, <argument><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>=</operator> <name>newmax</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>newlist</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>inf</name><operator>-&gt;</operator><name>elemsize</name></name> <operator>=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>addelem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><name>addelem_rtn</name></type> <name>artn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elemsize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>inf</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>elemsize</name></name> <operator>=</operator> <name>elemsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>addelem</name></name> <operator>=</operator> <name>artn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>lname</name></name> <operator>=</operator> <name>lname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inf</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VARENT</name> <modifier>*</modifier></type>
<name>find_varentry</name><parameter_list>(<parameter><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>vent</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>vent</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>scanvars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>USER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>needuser</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>COMM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>needcomm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>format_output</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>ki</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KINFO_STR</name> <modifier>*</modifier></type><name>ks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ki</name><operator>-&gt;</operator><name>ki_ks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>oproc</name></name><operator>)</operator><operator>(</operator><name>ki</name><operator>,</operator> <name>vent</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ks</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ks</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ks</name><operator>-&gt;</operator><name>ks_str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ki</name><operator>-&gt;</operator><name>ki_ks</name></name></expr></argument>, <argument><expr><name>ks</name></expr></argument>, <argument><expr><name>ks_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sizevars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>varent</name></name> <modifier>*</modifier></type><name>vent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAR</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>vent</argument>, <argument>&amp;varlist</argument>, <argument>next_ve</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>vent</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>vent</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fmt</name><parameter_list>(<parameter><function_decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type>(<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>kvm_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>ki</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>comm</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>fmt_argv</name><argument_list>(<argument><expr><call>(<modifier>*</modifier><name>fn</name>)<argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name></name></expr></argument>, <argument><expr><name>termwidth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comm</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>showthreads</name> <operator>&amp;&amp;</operator> <name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_numthreads</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>thread</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UREADOK</name><parameter_list>(<parameter><type><name>ki</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(forceuread || (ki-&gt;ki_p-&gt;ki_flag &amp; P_INMEM))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>saveuser</name><parameter_list>(<parameter><decl><type><name>KINFO</name> <modifier>*</modifier></type><name>ki</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tdname</name><index>[<expr><name>COMMLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argsp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_INMEM</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>needcomm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_stat</name></name> <operator>==</operator> <name>SZOMB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_args</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"&lt;defunct&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>UREADOK</name><argument_list>(<argument><expr><name>ki</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_args</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>tdname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdname</name></name></expr></argument>, <argument><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_moretdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_args</name></name> <operator>=</operator> <call><name>fmt</name><argument_list>(<argument><expr><name>kvm_getargv</name></expr></argument>, <argument><expr><name>ki</name></expr></argument>,
<argument><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>, <argument><expr><name>tdname</name></expr></argument>, <argument><expr><name>COMMLEN</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argsp</name></expr></argument>, <argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_args</name></name> <operator>=</operator> <name>argsp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><operator>-&gt;</operator><name>ki_args</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>needenv</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UREADOK</name><argument_list>(<argument><expr><name>ki</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_env</name></name> <operator>=</operator> <call><name>fmt</name><argument_list>(<argument><expr><name>kvm_getenvv</name></expr></argument>, <argument><expr><name>ki</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_env</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ki</name><operator>-&gt;</operator><name>ki_env</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ki</name><operator>-&gt;</operator><name>ki_env</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_RETURN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((a)-&gt;field != (b)-&gt;field) return (((a)-&gt;field &lt; (b)-&gt;field) ? -1 : 1); } while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>pscomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>KINFO</name> <modifier>*</modifier></type><name>ka</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ka</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kb</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sortby</name> <operator>==</operator> <name>SORTCPU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DIFF_RETURN</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>ka</name></expr></argument>, <argument><expr><name>ki_pcpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sortby</name> <operator>==</operator> <name>SORTMEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DIFF_RETURN</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>ka</name></expr></argument>, <argument><expr><name>ki_memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ka</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name> <operator>!=</operator> <name><name>kb</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ka</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name> <operator>==</operator> <name>NODEV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name> <operator>==</operator> <name>NODEV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DIFF_RETURN</name><argument_list>(<argument><expr><name>ka</name></expr></argument>, <argument><expr><name>kb</name></expr></argument>, <argument><expr><name><name>ki_p</name><operator>-&gt;</operator><name>ki_tdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>DIFF_RETURN</name><argument_list>(<argument><expr><name>ka</name></expr></argument>, <argument><expr><name>kb</name></expr></argument>, <argument><expr><name><name>ki_p</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DIFF_RETURN</name><argument_list>(<argument><expr><name>ka</name></expr></argument>, <argument><expr><name>kb</name></expr></argument>, <argument><expr><name><name>ki_p</name><operator>-&gt;</operator><name>ki_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DIFF_RETURN</name></cpp:undef>












<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>kludge_oldps_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optlist</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>origval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nextarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newopts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ns</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pidp</name></decl>;</decl_stmt>





<expr_stmt><expr><name>argp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optlist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>origval</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>optp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>optlist</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>optp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>optp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>origval</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>origval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>













<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>origval</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pidp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>origval</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>==</operator> <name>argp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nextarg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>nextarg</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name>isdigitch</name><argument_list>(<argument><expr><operator>*</operator><name>nextarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>isdigitch</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <name>origval</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <call><name>isdigitch</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>cp</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>pidp</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>origval</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>pidp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>origval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newopts</name> <operator>=</operator> <name>ns</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>origval</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ns</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pidp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<expr_stmt><expr><name>len</name> <operator>=</operator> <name>pidp</name> <operator>-</operator> <name>origval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>origval</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name><operator>++</operator> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>pidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>newopts</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pidmax_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>intsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>intsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pid_max</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.pid_max"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid_max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"unable to read kern.pid_max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pid_max</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>__dead2</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGLE_OPTS</name></cpp:macro> <cpp:value>"[-aCcde" OPT_LAZY_f "HhjlmrSTuvwXxZ]"</cpp:value></cpp:define>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>xo_error</name><argument_list>(<argument><expr><literal type="string">"%s\n%s\n%s\n%s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"usage: ps "</literal> <name>SINGLE_OPTS</name> <literal type="string">" [-O fmt | -o fmt] [-G gid[,gid...]]"</literal></expr></argument>,
<argument><expr><literal type="string">" [-J jid[,jid...]] [-M core] [-N system]"</literal></expr></argument>,
<argument><expr><literal type="string">" [-p pid[,pid...]] [-t tty[,tty...]] [-U user[,user...]]"</literal></expr></argument>,
<argument><expr><literal type="string">" ps [-L]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
