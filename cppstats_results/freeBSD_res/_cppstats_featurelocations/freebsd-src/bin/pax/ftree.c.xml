<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/ftree.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)ftree.c 8.2 (Berkeley) 4/18/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>















<decl_stmt><decl><type><specifier>static</specifier> <name>FTS</name> <modifier>*</modifier></type><name>ftsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ftsopts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>farray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FTREE</name> <modifier>*</modifier></type><name>fthead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FTREE</name> <modifier>*</modifier></type><name>fttail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FTREE</name> <modifier>*</modifier></type><name>ftcur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>ftent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ftree_skip</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ftree_arg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function><type><name>int</name></type>
<name>ftree_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>






<expr_stmt><expr><name>ftsopts</name> <operator>=</operator> <name>FTS_NOCHDIR</name></expr>;</expr_stmt>











<if_stmt><if>if <condition>(<expr><name>Lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ftsopts</name> <operator>|=</operator> <name>FTS_LOGICAL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ftsopts</name> <operator>|=</operator> <name>FTS_PHYSICAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Hflag</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_FTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"The -H flag is not supported on this version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ftsopts</name> <operator>|=</operator> <name>FTS_COMFOLLOW</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>Xflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ftsopts</name> <operator>|=</operator> <name>FTS_XDEV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fthead</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>farray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>PAXPATHLEN</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory for file name buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ftree_arg</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atdir_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>ftree_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chflg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTREE</name> <modifier>*</modifier></type><name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid file name argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ft</name> <operator>=</operator> <operator>(</operator><name>FTREE</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FTREE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory for filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>chflg</name></name> <operator>=</operator> <name>chflg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fthead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fttail</name> <operator>=</operator> <name>fthead</name> <operator>=</operator> <name>ft</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fttail</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name>ft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fttail</name> <operator>=</operator> <name>ft</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ftree_sel</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>ftcur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ftcur</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>nflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ftree_skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dflag</name> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_DIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ftent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fts_set</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>ftent</name></expr></argument>, <argument><expr><name>FTS_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ftree_notsel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ftent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fts_set</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>ftent</name></expr></argument>, <argument><expr><name>FTS_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ftree_chk</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTREE</name> <modifier>*</modifier></type><name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wban</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>tflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atdir_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>ft</name> <operator>=</operator> <name>fthead</name></expr>;</init> <condition><expr><name>ft</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ft</name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>fow</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ft</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>ft</name><operator>-&gt;</operator><name>chflg</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wban</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"WARNING! These file names were not selected:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>wban</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>ft</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>ftree_arg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>ftsp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fts_close</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ftsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fthead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name><name>farray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>PAXPATHLEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>farray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>ftcur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ftcur</name> <operator>=</operator> <name>fthead</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>ftcur</name> <operator>=</operator> <name><name>ftcur</name><operator>-&gt;</operator><name>fow</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ftcur</name><operator>-&gt;</operator><name>chflg</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fchdir</name><argument_list>(<argument><expr><name>cwdfd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't fchdir to starting directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name><name>ftcur</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't chdir to %s"</literal></expr></argument>,
<argument><expr><name><name>ftcur</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>farray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ftcur</name><operator>-&gt;</operator><name>fname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>










<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftsp</name> <operator>=</operator> <call><name>fts_open</name><argument_list>(<argument><expr><name>farray</name></expr></argument>, <argument><expr><name>ftsopts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>next_file</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>atime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>ftree_skip</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ftree_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ftree_arg</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftent</name> <operator>=</operator> <call><name>fts_read</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>ftree_arg</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<switch>switch<condition>(<expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_info</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FTS_D</name></expr>:</case>
<case>case <expr><name>FTS_DEFAULT</name></expr>:</case>
<case>case <expr><name>FTS_F</name></expr>:</case>
<case>case <expr><name>FTS_SL</name></expr>:</case>
<case>case <expr><name>FTS_SLNONE</name></expr>:</case>



<break>break;</break>
<case>case <expr><name>FTS_DP</name></expr>:</case>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_FTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tflag</name> <operator>||</operator> <operator>(</operator><call><name>get_atdir</name><argument_list>(<argument><expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_statb</name><operator>.</operator><name>st_dev</name></name></expr></argument>,
<argument><expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_statb</name><operator>.</operator><name>st_ino</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atime</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tflag</name> <operator>||</operator> <operator>(</operator><call><name>get_atdir</name><argument_list>(<argument><expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name></expr></argument>,
<argument><expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ino</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atime</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_ftime</name><argument_list>(<argument><expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>FTS_DC</name></expr>:</case>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"File system cycle found at %s"</literal></expr></argument>,<argument><expr><name><name>ftent</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>FTS_DNR</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_FTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>syswarn</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>errno</argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument>syswarn(<literal type="number">1</literal>, ftent-&gt;fts_errno,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"Unable to read directory %s"</literal>, ftent-&gt;fts_path);
continue;
case FTS_ERR:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_FTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
syswarn(<literal type="number">1</literal>, errno,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
syswarn(<literal type="number">1</literal>, ftent-&gt;fts_errno,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"File system traversal error"</literal>);
continue;
case FTS_NS:
case FTS_NSOK:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_FTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
syswarn(<literal type="number">1</literal>, errno,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
syswarn(<literal type="number">1</literal>, ftent-&gt;fts_errno,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"Unable to access %s"</literal>, ftent-&gt;fts_path);
continue;
}





arcn-&gt;skip = <literal type="number">0</literal>;
arcn-&gt;pad = <literal type="number">0</literal>;
arcn-&gt;ln_nlen = <literal type="number">0</literal>;
arcn-&gt;ln_name[<literal type="number">0</literal>] = <literal type="char">'\0'</literal>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_FTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
arcn-&gt;sb = ftent-&gt;fts_statb;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
arcn-&gt;sb = *(ftent-&gt;fts_statp);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











switch(S_IFMT &amp; arcn-&gt;sb.st_mode) {
case S_IFDIR:
arcn-&gt;type = PAX_DIR;
if (!tflag)
break;
add_atdir(ftent-&gt;fts_path, arcn-&gt;sb.st_dev,
arcn-&gt;sb.st_ino, arcn-&gt;sb.st_mtime,
arcn-&gt;sb.st_atime);
break;
case S_IFCHR:
arcn-&gt;type = PAX_CHR;
break;
case S_IFBLK:
arcn-&gt;type = PAX_BLK;
break;
case S_IFREG:






arcn-&gt;type = PAX_REG;
arcn-&gt;skip = arcn-&gt;sb.st_size;
break;
case S_IFLNK:
arcn-&gt;type = PAX_SLK;



if ((cnt = readlink(ftent-&gt;fts_path, arcn-&gt;ln_name,
PAXPATHLEN - <literal type="number">1</literal>)) &lt; <literal type="number">0</literal>) {
syswarn(<literal type="number">1</literal>, errno, <literal type="string">"Unable to read symlink %s"</literal>,
ftent-&gt;fts_path);
continue;
}




arcn-&gt;ln_name[cnt] = <literal type="char">'\0'</literal>;
arcn-&gt;ln_nlen = cnt;
break;
case S_IFSOCK:





arcn-&gt;type = PAX_SCK;
break;
case S_IFIFO:
arcn-&gt;type = PAX_FIF;
break;
}
break;
}




arcn-&gt;nlen = l_strncpy(arcn-&gt;name, ftent-&gt;fts_path, sizeof(arcn-&gt;name) - <literal type="number">1</literal>);
arcn-&gt;name[arcn-&gt;nlen] = <literal type="char">'\0'</literal>;
arcn-&gt;org_name = ftent-&gt;fts_path;
return(<literal type="number">0</literal>);
}</argument></argument_list></macro></block_content></block></switch></block_content></block></for></block_content></block></function>
</unit>
