<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/cpio.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)cpio.c 8.1 (Berkeley) 5/31/93";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_nm</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rd_ln_nm</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>com_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>swp_head</name></decl>;</decl_stmt>












<function><type><name>int</name></type>
<name>cpio_strd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><call><name>lnk_start</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>cpio_trail</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TRAILER</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>com_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>C_IFMT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>C_ISFIFO</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_FIF</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>C_ISDIR</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_DIR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>C_ISBLK</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_BLK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>C_ISCHR</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_CHR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>C_ISLNK</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_SLK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>C_ISOCK</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_SCK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>C_ISCTG</name></expr>:</case>
<case>case <expr><name>C_ISREG</name></expr>:</case>
<default>default:</default>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>|</operator> <name>C_ISREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_REG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>chk_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>cpio_endwr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ARCHD</name></type> <name>last</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRAILER</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PAX_REG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>.</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name><name>last</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>TRAILER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>wr</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_nm</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nsz</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio file name length %d is out of range"</literal></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rd_wrbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>nsz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nsz</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>nsz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio file name in header is corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>rd_ln_nm</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio link name length is invalid: %lu"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio link name length is invalid: %ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rd_wrbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio link name read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio link name is corrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>cpio_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_CPIO</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><name>AMAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AMAGIC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>cpio_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_CPIO</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>cpio_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_CPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_CPIO</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_dev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <operator>(</operator><name>nlink_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rdev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rdev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>OCT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <name>nsz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rd_nm</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name><operator>&amp;</operator><name>C_IFMT</name><operator>)</operator> <operator>!=</operator> <name>C_ISLNK</name><operator>)</operator><operator>||</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name>com_rd</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>rd_ln_nm</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<return>return<expr><operator>(</operator><call><name>com_rd</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>off_t</name></type>
<name>cpio_endrd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_CPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRAILER</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>cpio_stwr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><call><name>dev_start</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>cpio_wr</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_CPIO</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_CPIO</name></type> <name>hdblk</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>map_dev</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>CPIO_MASK</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>CPIO_MASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name>hdblk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_BLK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_CHR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PAX_CTG</name></expr>:</case>
<case>case <expr><name>PAX_REG</name></expr>:</case>
<case>case <expr><name>PAX_HRG</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>uqd_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_quad_t</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"File is too large for cpio format %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_SLK</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>



<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>MAGIC</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_dev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rdev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rdev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>nsz</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_CPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to write cpio header for %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_SLK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>wr_rdbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Unable to write cpio link name for %s"</literal></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cpio header field is too small to store file %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>














<function><type><name>int</name></type>
<name>vcpio_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><name>AVMAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVMAGIC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>crc_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><name>AVCMAGIC</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>AVCMAGIC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>crc_strd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>docrc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name>lnk_start</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>vcpio_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_VCPIO</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsz</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>docrc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>crc_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vcpio_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_VCPIO</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <operator>(</operator><name>nlink_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devmajor</name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_maj</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_maj</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devminor</name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_min</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_min</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <call><name>TODEV</name><argument_list>(<argument><expr><name>devmajor</name></expr></argument>, <argument><expr><name>devminor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devmajor</name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rmaj</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_maj</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devminor</name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rmin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_min</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <call><name>TODEV</name><argument_list>(<argument><expr><name>devmajor</name></expr></argument>, <argument><expr><name>devminor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_chksum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>HEX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <name>nsz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rd_nm</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rd_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>VCPIO_PAD</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nsz</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name><operator>&amp;</operator><name>C_IFMT</name><operator>)</operator> <operator>!=</operator> <name>C_ISLNK</name><operator>)</operator><operator>||</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>VCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name>com_rd</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rd_ln_nm</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>rd_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>VCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<return>return<expr><operator>(</operator><call><name>com_rd</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>off_t</name></type>
<name>vcpio_endrd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRAILER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<operator>(</operator><call><name>VCPIO_PAD</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRAILER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>crc_stwr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>docrc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name>dev_start</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>vcpio_wr</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_VCPIO</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_VCPIO</name></type> <name>hdblk</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>map_dev</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>VCPIO_MASK</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>VCPIO_MASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name>hdblk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_BLK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_CHR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>docrc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>VCMAGIC</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_chksum</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>VMAGIC</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_chksum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PAX_CTG</name></expr>:</case>
<case>case <expr><name>PAX_REG</name></expr>:</case>
<case>case <expr><name>PAX_HRG</name></expr>:</case>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>VCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>uqd_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_quad_t</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"File is too large for sv4cpio format %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_SLK</name></expr>:</case>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_filesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_ino</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_nlink</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>MAJOR</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_maj</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_maj</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>MINOR</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_min</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_min</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>MAJOR</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rmaj</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_maj</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>MINOR</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_rmin</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_min</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>HEX</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_asc</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>nsz</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>c_namesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>HEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>VCPIO_PAD</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_VCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nsz</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Could not write sv4cpio header for %s"</literal></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_SLK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>VCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Could not write sv4cpio link name for %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Sv4cpio header field is too small for file %s"</literal></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>













<function><type><name>int</name></type>
<name>bcpio_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>u_short</name><operator>)</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>u_short</name><operator>)</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAGIC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swp_head</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>swp_head</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>bcpio_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_BCPIO</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsz</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>bcpio_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_BCPIO</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>swp_head</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_dev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_ino</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_uid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_gid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <operator>(</operator><name>nlink_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_nlink</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_rdev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>RSHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_namesize</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_dev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_ino</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_uid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_gid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <operator>(</operator><name>nlink_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_nlink</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_rdev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_namesize</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <name>nsz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rd_nm</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rd_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>BCPIO_PAD</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nsz</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>C_IFMT</name><operator>)</operator> <operator>!=</operator> <name>C_ISLNK</name><operator>)</operator><operator>||</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block>{<block_content>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>BCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><call><name>com_rd</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rd_ln_nm</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>rd_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>BCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<return>return<expr><operator>(</operator><call><name>com_rd</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>off_t</name></type>
<name>bcpio_endrd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRAILER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<operator>(</operator><call><name>BCPIO_PAD</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TRAILER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>bcpio_wr</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_BCPIO</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_BCPIO</name></type> <name>hdblk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>t_offt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t_timet</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>map_dev</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>BCPIO_MASK</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>BCPIO_MASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_BLK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_CHR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name>hdblk</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PAX_CTG</name></expr>:</case>
<case>case <expr><name>PAX_REG</name></expr>:</case>
<case>case <expr><name>PAX_HRG</name></expr>:</case>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>BCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_0</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_1</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_offt</name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t_offt</name> <operator>=</operator> <operator>(</operator><name>t_offt</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>!=</operator> <name>t_offt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"File is too large for bcpio format %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_SLK</name></expr>:</case>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_0</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_1</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_int</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t_int</name> <operator>=</operator> <operator>(</operator><name>t_int</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>!=</operator> <name>t_int</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_filesize_2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_dev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_dev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>!=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_dev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_ino</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_ino</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>!=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_ino</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>!=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_uid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_uid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_uid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_gid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_gid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>!=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_gid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_nlink</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_nlink</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>!=</operator> <operator>(</operator><name>nlink_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_nlink</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_rdev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_rdev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>!=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_rdev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_0</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_1</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_timet</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_1</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t_timet</name> <operator>=</operator> <operator>(</operator><name>t_timet</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_mtime_2</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name>t_timet</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsz</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_namesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_2</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>h_namesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CHR_WR_3</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>SHRT_EXT</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>h_namesize</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>BCPIO_PAD</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_BCPIO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nsz</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Could not write bcpio header for %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_SLK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wr_rdbuf</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><call><name>BCPIO_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Could not write bcpio link name for %s"</literal></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Bcpio header field is too small for file %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function>
</unit>
