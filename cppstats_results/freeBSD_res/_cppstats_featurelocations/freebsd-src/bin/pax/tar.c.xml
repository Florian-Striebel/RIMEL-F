<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/tar.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)tar.c 8.2 (Berkeley) 4/18/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tar.h"</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>u_long</name></type> <name>tar_chksm</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>name_split</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ul_oct</name><parameter_list>(<parameter><decl><type><name>u_long</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>uqd_oct</name><parameter_list>(<parameter><decl><type><name>u_quad_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tar_nodir</name></decl>;</decl_stmt>








<function><type><name>int</name></type>
<name>tar_endwr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>NULLCNT</name><operator>*</operator><name>BLKMULT</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>off_t</name></type>
<name>tar_endrd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>NULLCNT</name><operator>*</operator><name>BLKMULT</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>tar_trail</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_resync</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLKMULT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>BLKMULT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_resync</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>++</operator><operator>*</operator><name>cnt</name> <operator>&gt;=</operator> <name>NULLCNT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>ul_oct</name><parameter_list>(<parameter><decl><type><name>u_long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>term</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>uqd_oct</name><parameter_list>(<parameter><decl><type><name>u_quad_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>term</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>(</operator><name>u_quad_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>u_long</name></type>
<name>tar_chksm</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>chksm</name> <init>= <expr><name>BLNKSUM</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>blk</name> <operator>+</operator> <name>CHK_OFFSET</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>&lt;</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chksm</name> <operator>+=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pt</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>







<expr_stmt><expr><name>pt</name> <operator>+=</operator> <name>CHK_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>blk</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>&lt;</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chksm</name> <operator>+=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pt</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
<return>return<expr><operator>(</operator><name>chksm</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>tar_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_TAR</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_USTAR</name> <modifier>*</modifier></type><name>uhd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>BLKMULT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_TAR</name> <operator>*</operator><operator>)</operator><name>blk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uhd</name> <operator>=</operator> <operator>(</operator><name>HD_USTAR</name> <operator>*</operator><operator>)</operator><name>blk</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>uhd</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>TMAGIC</name></expr></argument>, <argument><expr><name>TMAGLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>tar_chksm</name><argument_list>(<argument><expr><name>blk</name></expr></argument>,<argument><expr><name>BLKMULT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>tar_opt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OPLIST</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>opt_next</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TAR_OPTION</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>TAR_NODIR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unknown tar format -o option/value pair %s=%s"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"%s=%s is the only supported tar format option"</literal></expr></argument>,
<argument><expr><name>TAR_OPTION</name></expr></argument>, <argument><expr><name>TAR_NODIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>act</name> <operator>!=</operator> <name>APPND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>act</name> <operator>!=</operator> <name>ARCHIVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s=%s is only supported when writing."</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tar_nodir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>tar_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_TAR</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>tar_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLKMULT</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_TAR</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>pt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>linkflag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SYMTYPE</name></expr>:</case>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_SLK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFLNK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LNKTYPE</name></expr>:</case>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_HLK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIRTYPE</name></expr>:</case>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_DIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFDIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AREGTYPE</name></expr>:</case>
<case>case <expr><name>REGTYPE</name></expr>:</case>
<default>default:</default>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pt</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_DIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFDIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_REG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>TAR_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pt</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>tar_wr</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_TAR</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_TAR</name></type> <name>hdblk</name></decl>;</decl_stmt>




<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PAX_DIR</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>tar_nodir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_CHR</name></expr>:</case>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Tar cannot archive a character device %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>PAX_BLK</name></expr>:</case>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Tar cannot archive a block device %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>PAX_SCK</name></expr>:</case>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Tar cannot archive a socket %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>PAX_FIF</name></expr>:</case>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Tar cannot archive a fifo %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>PAX_SLK</name></expr>:</case>
<case>case <expr><name>PAX_HLK</name></expr>:</case>
<case>case <expr><name>PAX_HRG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Link name too long for tar %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_REG</name></expr>:</case>
<case>case <expr><name>PAX_CTG</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>




<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_DIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File name too long for tar %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name>hdblk</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_DIR</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>linkflag</name></name> <operator>=</operator> <name>AREGTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_SLK</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>linkflag</name></name> <operator>=</operator> <name>SYMTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HLK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>linkflag</name></name> <operator>=</operator> <name>LNKTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>linkflag</name></name> <operator>=</operator> <name>AREGTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>uqd_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_quad_t</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"File is too large for tar %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>TAR_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><call><name>tar_chksm</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_TAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wr_rdbuf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_TAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>BLKMULT</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HD_TAR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Tar header field is too small for %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>












<function><type><name>int</name></type>
<name>ustar_strd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>usrtb_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>grptb_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>ustar_stwr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>uidtb_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>gidtb_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>ustar_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_USTAR</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>BLKMULT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_USTAR</name> <operator>*</operator><operator>)</operator><name>blk</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>TMAGIC</name></expr></argument>, <argument><expr><name>TMAGLEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>tar_chksm</name><argument_list>(<argument><expr><name>blk</name></expr></argument>,<argument><expr><name>BLKMULT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>ustar_rd</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_USTAR</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devmajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>devminor</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ustar_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLKMULT</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>(</operator><name>HD_USTAR</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>





<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <name>cnt</name> <operator>+</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>asc_uqd</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>gname</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gid_name</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>uname</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>uid_name</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>




<switch>switch<condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FIFOTYPE</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_FIF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFIFO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIRTYPE</name></expr>:</case>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_DIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFDIR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name><index>[<expr><operator>--</operator><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BLKTYPE</name></expr>:</case>
<case>case <expr><name>CHRTYPE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>==</operator> <name>BLKTYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_BLK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFBLK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_CHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFCHR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>devmajor</name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>devminor</name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><call><name>asc_ul</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>OCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name> <operator>=</operator> <call><name>TODEV</name><argument_list>(<argument><expr><name>devmajor</name></expr></argument>, <argument><expr><name>devminor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SYMTYPE</name></expr>:</case>
<case>case <expr><name>LNKTYPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>==</operator> <name>SYMTYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_SLK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFLNK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_HLK</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CONTTYPE</name></expr>:</case>
<case>case <expr><name>AREGTYPE</name></expr>:</case>
<case>case <expr><name>REGTYPE</name></expr>:</case>
<default>default:</default>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_REG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>TAR_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>ustar_wr</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HD_USTAR</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HD_USTAR</name></type> <name>hdblk</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_SCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Ustar cannot archive a socket %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_SLK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HLK</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Link name too long for ustar %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <call><name>name_split</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File name too long for ustar %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hd</name> <operator>=</operator> <operator>&amp;</operator><name>hdblk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>pt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>





<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PAX_DIR</name></expr>:</case>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>DIRTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_CHR</name></expr>:</case>
<case>case <expr><name>PAX_BLK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CHR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>CHRTYPE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>BLKTYPE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>MAJOR</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>MINOR</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_FIF</name></expr>:</case>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>FIFOTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_SLK</name></expr>:</case>
<case>case <expr><name>PAX_HLK</name></expr>:</case>
<case>case <expr><name>PAX_HRG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_SLK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>SYMTYPE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>LNKTYPE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_REG</name></expr>:</case>
<case>case <expr><name>PAX_CTG</name></expr>:</case>
<default>default:</default>



<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>CONTTYPE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>typeflag</name></name> <operator>=</operator> <name>REGTYPE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>linkname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devmajor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>devminor</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>=</operator> <call><name>TAR_PAD</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>uqd_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_quad_t</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"File is too long for ustar %s"</literal></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>TMAGIC</name></expr></argument>, <argument><expr><name>TMAGLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>TVERSION</name></expr></argument>, <argument><expr><name>TVERSLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ul_oct</name><argument_list>(<argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>,<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>,<argument><expr><call><name>name_uid</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>,<argument><expr><call><name>name_gid</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>gname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>ul_oct</name><argument_list>(<argument><expr><call><name>tar_chksm</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_USTAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>chksum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wr_rdbuf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HD_USTAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wr_skip</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>BLKMULT</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HD_USTAR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Ustar header field is too small for %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>













<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>name_split</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>TNMSZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>name</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>TPFSZ</name> <operator>+</operator> <name>TNMSZ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><name>start</name> <operator>=</operator> <name>name</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>TNMSZ</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>start</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>start</name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>start</name></expr>;</expr_stmt></block_content></block></while>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>start</name> <operator>-</operator> <name>name</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <name>TPFSZ</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<return>return<expr><operator>(</operator><name>start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function>
</unit>
