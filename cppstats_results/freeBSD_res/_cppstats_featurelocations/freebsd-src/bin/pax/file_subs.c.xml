<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/file_subs.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)file_subs.c 8.1 (Berkeley) 5/31/93";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>mk_link</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEBITS</name></cpp:macro> <cpp:value>(S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETBITS</name></cpp:macro> <cpp:value>(S_ISUID | S_ISGID)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABITS</name></cpp:macro> <cpp:value>(FILEBITS | SETBITS)</cpp:value></cpp:define>








<function><type><name>int</name></type>
<name>file_creat</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>file_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oerrno</name></decl>;</decl_stmt>












<expr_stmt><expr><name>file_mode</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>FILEBITS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>,
<argument><expr><name>file_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>fd</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>unlnk_exist</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>,
<argument><expr><name>file_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oerrno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nodirs</name> <operator>||</operator> <call><name>chk_path</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oerrno</name></expr></argument>, <argument><expr><literal type="string">"Unable to create %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><name>fd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>file_close</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to close file descriptor on %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>pids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>set_ids</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmode</name> <operator>||</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SETBITS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pmode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_pmode</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>patime</name> <operator>||</operator> <name>pmtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_ftime</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>lnk_creat</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"Unable to link to %s from %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"A hard link to the directory %s is not allowed"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><call><name>mk_link</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>cross_lnk</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_DIR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><call><name>mk_link</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>chk_same</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>sb</name><operator>.</operator><name>st_dev</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>sb</name><operator>.</operator><name>st_ino</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to copy %s, file would overwrite itself"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>mk_link</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>to_sb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oerrno</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>kflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>to_sb</name><operator>-&gt;</operator><name>st_dev</name></name><operator>==</operator><name><name>sb</name><operator>.</operator><name>st_dev</name></name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>to_sb</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>==</operator> <name><name>sb</name><operator>.</operator><name>st_ino</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to link file %s to itself"</literal></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to remove %s"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to remove %s"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>link</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oerrno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodirs</name> <operator>&amp;&amp;</operator> <call><name>chk_path</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>to_sb</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>to_sb</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oerrno</name></expr></argument>, <argument><expr><literal type="string">"Could not link to %s from %s"</literal></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>




<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>node_creat</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oerrno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>file_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>







<expr_stmt><expr><name>file_mode</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>FILEBITS</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PAX_DIR</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mkdir</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>file_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>PAX_CHR</name></expr>:</case>
<expr_stmt><expr><name>file_mode</name> <operator>|=</operator> <name>S_IFCHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mknod</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>file_mode</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PAX_BLK</name></expr>:</case>
<expr_stmt><expr><name>file_mode</name> <operator>|=</operator> <name>S_IFBLK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mknod</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>file_mode</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PAX_FIF</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mkfifo</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>file_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PAX_SCK</name></expr>:</case>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"%s skipped. Sockets cannot be copied or extracted"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>PAX_SLK</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>symlink</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PAX_CTG</name></expr>:</case>
<case>case <expr><name>PAX_HLK</name></expr>:</case>
<case>case <expr><name>PAX_HRG</name></expr>:</case>
<case>case <expr><name>PAX_REG</name></expr>:</case>
<default>default:</default>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s has an unknown file type, skipping"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>






<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><name>oerrno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ign</name> <operator>=</operator> <call><name>unlnk_exist</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>pass</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nodirs</name> <operator>||</operator> <call><name>chk_path</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oerrno</name></expr></argument>, <argument><expr><literal type="string">"Could not create: %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>pids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>set_ids</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmode</name> <operator>||</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SETBITS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pmode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_pmode</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_DIR</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>NM_CPIO</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>R_OK</name> <operator>|</operator> <name>W_OK</name> <operator>|</operator> <name>X_OK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"Could not access %s (stat)"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_pmode</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>file_mode</name> <operator>|</operator> <name>S_IRWXU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><call><name>set_pmode</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>FILEBITS</name><operator>)</operator> <operator>|</operator> <name>S_IRWXU</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><call><name>add_dir</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pmode</name> <operator>||</operator> <name>patime</name> <operator>||</operator> <name>pmtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_dir</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>patime</name> <operator>||</operator> <name>pmtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_ftime</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>unlnk_exist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>PAX_DIR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"Unable to remove directory %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Could not unlink %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type>
<name>chk_path</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>st_uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>st_gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spt</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>spt</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>spt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>



<expr_stmt><expr><name>spt</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>spt</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>spt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>spt</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>spt</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_ids</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>st_uid</name></expr></argument>, <argument><expr><name>st_gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>access</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>R_OK</name> <operator>|</operator> <name>W_OK</name> <operator>|</operator> <name>X_OK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>lstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_pmode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>FILEBITS</name><operator>)</operator> <operator>|</operator> <name>S_IRWXU</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_dir</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>spt</name> <operator>-</operator> <name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>spt</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><name>retval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>void</name></type>
<name>set_ftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fnm</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name><name>tv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0L</literal></expr>, <expr><literal type="number">0L</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frc</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>patime</name> <operator>||</operator> <operator>!</operator><name>pmtime</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>fnm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>patime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_atime</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"Unable to obtain file stats %s"</literal></expr></argument>, <argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>lutimes</name><argument_list>(<argument><expr><name>fnm</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Access/modification time set failed on: %s"</literal></expr></argument>,
<argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>set_ids</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fnm</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lchown</name><argument_list>(<argument><expr><name>fnm</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>NM_PAX</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>!=</operator> <name>EPERM</name> <operator>||</operator> <name>vflag</name> <operator>||</operator>
<call><name>geteuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to set file uid/gid of %s"</literal></expr></argument>,
<argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>set_pmode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fnm</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <name>ABITS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lchmod</name><argument_list>(<argument><expr><name>fnm</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Could not set permissions on %s"</literal></expr></argument>, <argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>

















































<function><type><name>int</name></type>
<name>file_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rem</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>isempt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>




<while>while <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>rem</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>isempt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>wcnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><operator>*</operator><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <name>wcnt</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rem</name> <operator>-=</operator> <name>wcnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>isempt</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>st</name> <operator>+</operator> <name>wcnt</name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>(</operator><name>pt</name> <operator>&lt;</operator> <name>end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pt</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>pt</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>wcnt</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"File seek on %s"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>isempt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>wcnt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>wcnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed write to file %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>+=</operator> <name>wcnt</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>st</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>file_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isempt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>blnk</name><index>[]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isempt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed seek on file %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>blnk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed write to file %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>rdfile_close</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tflag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>set_ftime</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_atime</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>set_crc</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>cpcnt</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>FILEBLK</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_blksize</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>u_long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cpcnt</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>res</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>+=</operator> <operator>(</operator><name><name>tbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>cpcnt</name> <operator>!=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File changed size %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed stat on %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File %s was modified during read"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"File rewind failed on: %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
