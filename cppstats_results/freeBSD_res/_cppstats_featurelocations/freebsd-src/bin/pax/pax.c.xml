<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/pax.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char const copyright[] =
"@(#) Copyright (c) 1992, 1993\n\
The Regents of the University of California. All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)pax.c 8.2 (Berkeley) 4/18/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gen_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>int</name></type> <name>act</name> <init>= <expr><name>DEFOP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSUB</name> <modifier>*</modifier></type><name>frmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cwdfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Dflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Hflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Lflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Oflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Xflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Yflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Zflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vfpart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patime</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pmtime</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nodirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rmleadslash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exit_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>docrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>s_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>listf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempbase</name></decl>;</decl_stmt>

























































































































<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmpdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tdlen</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>listf</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>



<expr_stmt><expr><name>cwdfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cwdfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't open current working directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>exit_val</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpdir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>tmpdir</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmpdir</name> <operator>=</operator> <name>_PATH_TMP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tdlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tdlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tmpdir</name><index>[<expr><name>tdlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tdlen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>tempfile</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>tdlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_TFILE_BASE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tempfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for temp file name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>exit_val</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tdlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tempfile</name></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>, <argument><expr><name>tdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tempbase</name> <operator>=</operator> <name>tempfile</name> <operator>+</operator> <name>tdlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tempbase</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>gen_init</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>tty_init</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>exit_val</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<switch>switch <condition>(<expr><name>act</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EXTRACT</name></expr>:</case>
<expr_stmt><expr><call><name>extract</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARCHIVE</name></expr>:</case>
<expr_stmt><expr><call><name>archive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>APPND</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>gzip_program</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can not gzip while appending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>append</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COPY</name></expr>:</case>
<expr_stmt><expr><call><name>copy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<case>case <expr><name>LIST</name></expr>:</case>
<expr_stmt><expr><call><name>list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return<expr><operator>(</operator><name>exit_val</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type>
<name>sig_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which_sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><name>vflag</name> <operator>=</operator> <name>vfpart</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>which_sig</name> <operator>==</operator> <name>SIGXCPU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Cpu time limit reached, cleaning up."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Signal caught, cleaning up."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ar_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proc_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atdir_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>setup_sig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>n_hand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>o_hand</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_hand</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o_hand</name><operator>.</operator><name>sa_handler</name></name> <operator>==</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>n_hand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>gen_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>reslimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>n_hand</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>reslimit</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>reslimit</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_FSIZE</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>reslimit</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>reslimit</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_FSIZE</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_STACK</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>reslimit</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>reslimit</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_STACK</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_RSS</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>reslimit</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>reslimit</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_RSS</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>reslimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>,<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>,<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>,<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>,<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>,<argument><expr><name>SIGXCPU</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>,<argument><expr><name>SIGXFSZ</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to set up signal mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>n_hand</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n_hand</name><operator>.</operator><name>sa_mask</name></name> <operator>=</operator> <name>s_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n_hand</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n_hand</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sig_cleanup</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setup_sig</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>setup_sig</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>setup_sig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>setup_sig</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>setup_sig</name><argument_list>(<argument><expr><name>SIGXCPU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>n_hand</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to set up signal handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
