<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/tables.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)tables.c 8.1 (Berkeley) 5/31/93";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
















<decl_stmt><decl><type><specifier>static</specifier> <name>HRDLNK</name> <modifier>*</modifier><modifier>*</modifier></type><name>ltab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FTM</name> <modifier>*</modifier><modifier>*</modifier></type><name>ftab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NAMT</name> <modifier>*</modifier><modifier>*</modifier></type><name>ntab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>DEVT</name> <modifier>*</modifier><modifier>*</modifier></type><name>dtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ATDIR</name> <modifier>*</modifier><modifier>*</modifier></type><name>atab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dirfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>u_long</name></type> <name>dircnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ffd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>DEVT</name> <modifier>*</modifier></type><name>chk_dev</name><parameter_list>(<parameter><decl><type><name>dev_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
























<function><type><name>int</name></type>
<name>lnk_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ltab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ltab</name> <operator>=</operator> <operator>(</operator><name>HRDLNK</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>L_TAB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HRDLNK</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for hard link table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>chk_lnk</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRDLNK</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRDLNK</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ltab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_DIR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name><operator>)</operator> <operator>%</operator> <name>L_TAB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>ltab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ppt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ltab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>ino</name></name> <operator>==</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ppt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name><index>[<expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_nlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_HRG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PAX_HLK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>pt</name><operator>-&gt;</operator><name>nlink</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>HRDLNK</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HRDLNK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>nlink</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>ltab</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ltab</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hard link table out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>purg_lnk</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRDLNK</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRDLNK</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ltab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_nlink</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_DIR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HLK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name><operator>)</operator> <operator>%</operator> <name>L_TAB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>ltab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>ppt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ltab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>ino</name></name> <operator>==</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ppt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>ppt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>lnk_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRDLNK</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRDLNK</name> <modifier>*</modifier></type><name>ppt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ltab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>L_TAB_SZ</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ltab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>ltab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ltab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ppt</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>ppt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ppt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></function>
































<function><type><name>int</name></type>
<name>ftime_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ftab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftab</name> <operator>=</operator> <operator>(</operator><name>FTM</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>F_TAB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FTM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for file time table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tempbase</name></expr></argument>, <argument><expr><name>_TFILE_BASE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_TFILE_BASE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ffd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>tempfile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to create temporary file: %s"</literal></expr></argument>,
<argument><expr><name>tempfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><name>tempfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>chk_ftime</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTM</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ckname</name><index>[<expr><name>PAXPATHLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>ftab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>indx</name> <operator>=</operator> <call><name>st_hash</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>F_TAB_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>namelen</name></name> <operator>==</operator> <name>namelen</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>ffd</name></expr></argument>,<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>seek</name></name></expr></argument>,<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>pt</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed ftime table seek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>ffd</name></expr></argument>, <argument><expr><name>ckname</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>namelen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Failed ftime table read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>ckname</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>mtime</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>FTM</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FTM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>ffd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>ffd</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>namelen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>namelen</name></name> <operator>=</operator> <name>namelen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>ftab</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftab</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed write to file time table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed seek on file time table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File time table ran out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




















<function><type><name>int</name></type>
<name>name_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ntab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ntab</name> <operator>=</operator> <operator>(</operator><name>NAMT</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>N_TAB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NAMT</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for interactive rename table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>add_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onamelen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NAMT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ntab</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No interactive rename table, links may fail\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>indx</name> <operator>=</operator> <call><name>st_hash</name><argument_list>(<argument><expr><name>oname</name></expr></argument>, <argument><expr><name>onamelen</name></expr></argument>, <argument><expr><name>N_TAB_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>ntab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><operator>(</operator><name>pt</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>oname</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nname</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>nname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>nname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>nname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>nname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot update rename table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>NAMT</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NAMT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>oname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>oname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>nname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>nname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>ntab</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ntab</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Interactive rename table out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>sub_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>oname</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>onamelen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>onamesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NAMT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ntab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>indx</name> <operator>=</operator> <call><name>st_hash</name><argument_list>(<argument><expr><name>oname</name></expr></argument>, <argument><expr><operator>*</operator><name>onamelen</name></expr></argument>, <argument><expr><name>N_TAB_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>ntab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>oname</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>onamelen</name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name>oname</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>nname</name></name></expr></argument>, <argument><expr><name>onamesize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oname</name><index>[<expr><operator>*</operator><name>onamelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>




<return>return;</return>
</block_content>}</block></function>
















































<function><type><name>int</name></type>
<name>dev_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dtab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dtab</name> <operator>=</operator> <operator>(</operator><name>DEVT</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>D_TAB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DEVT</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for device mapping table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type>
<name>add_dev</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>chk_dev</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>DEVT</name> <modifier>*</modifier></type>
<name>chk_dev</name><parameter_list>(<parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DEVT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dtab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>dev</name><operator>)</operator> <operator>%</operator> <name>D_TAB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>dtab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>pt</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>!=</operator> <name>dev</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt></block_content></block></while>




<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>pt</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>DEVT</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DEVT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Device map table out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>dtab</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtab</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>pt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type>
<name>map_dev</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>dev_mask</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>ino_mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DEVT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DLIST</name> <modifier>*</modifier></type><name>dpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dev_t</name></type> <name>lastdev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trc_ino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trc_dev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino_t</name></type> <name>trunc_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino_t</name></type> <name>nino</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dtab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>&amp;</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><name>dev_mask</name><operator>)</operator> <operator>!=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>trc_dev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nino</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>&amp;</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><name>ino_mask</name><operator>)</operator> <operator>!=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>trc_ino</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trunc_bits</name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>&amp;</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><operator>(</operator><operator>~</operator><name>ino_mask</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <call><name>chk_dev</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>dpt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>list</name></name></expr>;</init> <condition><expr><name>dpt</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dpt</name> <operator>=</operator> <name><name>dpt</name><operator>-&gt;</operator><name>fow</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpt</name><operator>-&gt;</operator><name>trunc_bits</name></name> <operator>==</operator> <name>trunc_bits</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>dpt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <name><name>dpt</name><operator>-&gt;</operator><name>dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <name>nino</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trc_ino</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trc_dev</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <call><name>chk_dev</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trc_dev</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>trunc_bits</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dpt</name> <operator>=</operator> <operator>(</operator><name>DLIST</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DLIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>-&gt;</operator><name>trunc_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>dpt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<while>while <condition>(<expr><operator>++</operator><name>lastdev</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>chk_dev</name><argument_list>(<argument><expr><name>lastdev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>lastdev</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>dev_t</name><operator>)</operator><name>dev_mask</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>lastdev</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>chk_dev</name><argument_list>(<argument><expr><name>lastdev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lastdev</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>dpt</name> <operator>=</operator> <operator>(</operator><name>DLIST</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DLIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>dpt</name><operator>-&gt;</operator><name>trunc_bits</name></name> <operator>=</operator> <name>trunc_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>lastdev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>dpt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <name>lastdev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <name>nino</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to fix truncated inode/device field when storing %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Archive may create improper hard links when extracted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

























<function><type><name>int</name></type>
<name>atdir_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>atab</name> <operator>=</operator> <operator>(</operator><name>ATDIR</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>A_TAB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ATDIR</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Cannot allocate space for directory access time table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>atdir_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDIR</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>atab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>A_TAB_SZ</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>atab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<for>for <control>(<init>;</init> <condition><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_ftime</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>add_atdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>ino</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>atime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDIR</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>atab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>ino</name><operator>)</operator> <operator>%</operator> <name>A_TAB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>atab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>ino</name></name> <operator>==</operator> <name>ino</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name>dev</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>ATDIR</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ATDIR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <name>ino</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>atab</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atab</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Directory access time reset table ran out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>get_atdir</name><parameter_list>(<parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>ino</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>mtime</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>atime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDIR</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATDIR</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>atab</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>ino</name><operator>)</operator> <operator>%</operator> <name>A_TAB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>atab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ppt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>atab</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>ino</name></name> <operator>==</operator> <name>ino</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name>dev</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<expr_stmt><expr><name>ppt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>ppt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mtime</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>atime</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>atime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
































<function><type><name>int</name></type>
<name>dir_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dirfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tempbase</name></expr></argument>, <argument><expr><name>_TFILE_BASE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_TFILE_BASE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dirfd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>tempfile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><name>tempfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to create temporary file for directory times: %s"</literal></expr></argument>,
<argument><expr><name>tempfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><name>void</name></type>
<name>add_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nlen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>psb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frc_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIRDATA</name></type> <name>dblk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dblk</name><operator>.</operator><name>npos</name></name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Unable to store mode and times for directory: %s"</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>dblk</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dblk</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>psb</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dblk</name><operator>.</operator><name>mtime</name></name> <operator>=</operator> <name><name>psb</name><operator>-&gt;</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dblk</name><operator>.</operator><name>atime</name></name> <operator>=</operator> <name><name>psb</name><operator>-&gt;</operator><name>st_atime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dblk</name><operator>.</operator><name>frc_mode</name></name> <operator>=</operator> <name>frc_mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>write</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>dblk</name><operator>.</operator><name>nlen</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>write</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dblk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dblk</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>dircnt</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Unable to store mode and times for created directory: %s"</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>proc_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PAXPATHLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIRDATA</name></type> <name>dblk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>dircnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dblk</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dblk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dblk</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>npos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>dblk</name><operator>.</operator><name>nlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>npos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>pmode</name> <operator>||</operator> <name><name>dblk</name><operator>.</operator><name>frc_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_pmode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>patime</name> <operator>||</operator> <name>pmtime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_ftime</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>mtime</name></name></expr></argument>, <argument><expr><name><name>dblk</name><operator>.</operator><name>atime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>!=</operator> <name>dircnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Unable to set mode and times for created directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>



















<function><type><name>u_int</name></type>
<name>st_hash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tabsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>steps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>val</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAXKEYLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <name>MAXKEYLEN</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAXKEYLEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<expr_stmt><expr><name>steps</name> <operator>=</operator> <name>len</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>len</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>steps</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>pt</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>pt</name> <operator>+</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<return>return<expr><operator>(</operator><name>key</name> <operator>%</operator> <name>tabsz</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
