<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/buf_subs.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)buf_subs.c 8.2 (Berkeley) 4/18/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINFBSZ</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXFLT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>bufmem</name><index>[<expr><name>MAXBLK</name><operator>+</operator><name>BLKMULT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>bufend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>bufpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blksz</name> <init>= <expr><name>MAXBLK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrblksz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxflt</name> <init>= <expr><name>MAXFLT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdblksz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>wrlimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>wrcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>rdcnt</name></decl>;</decl_stmt>








<function><type><name>int</name></type>
<name>wr_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>bufmem</name><index>[<expr><name>BLKMULT</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrblksz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wrblksz</name> <operator>=</operator> <name><name>frmt</name><operator>-&gt;</operator><name>bsz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wrblksz</name> <operator>&gt;</operator> <name>MAXBLK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Write block size of %d too large, maximum is: %d"</literal></expr></argument>,
<argument><expr><name>wrblksz</name></expr></argument>, <argument><expr><name>MAXBLK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wrblksz</name> <operator>%</operator> <name>BLKMULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Write block size of %d is not a %d byte multiple"</literal></expr></argument>,
<argument><expr><name>wrblksz</name></expr></argument>, <argument><expr><name>BLKMULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wrblksz</name> <operator>&gt;</operator> <name>MAXBLK_POSIX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Write block size of %d larger than POSIX max %d, archive may not be portable"</literal></expr></argument>,
<argument><expr><name>wrblksz</name></expr></argument>, <argument><expr><name>MAXBLK_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>blksz</name> <operator>=</operator> <name>rdblksz</name> <operator>=</operator> <name>wrblksz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ar_open</name><argument_list>(<argument><expr><name>arcname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wrcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>wrblksz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>rd_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>bufmem</name><index>[<expr><name>BLKMULT</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>act</name> <operator>==</operator> <name>APPND</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>wrblksz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wrblksz</name> <operator>&gt;</operator> <name>MAXBLK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Write block size %d too large, maximum is: %d"</literal></expr></argument>,
<argument><expr><name>wrblksz</name></expr></argument>, <argument><expr><name>MAXBLK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wrblksz</name> <operator>%</operator> <name>BLKMULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Write block size %d is not a %d byte multiple"</literal></expr></argument>,
<argument><expr><name>wrblksz</name></expr></argument>, <argument><expr><name>BLKMULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ar_open</name><argument_list>(<argument><expr><name>arcname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>rdblksz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>bufend</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>cp_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>bufmem</name><index>[<expr><name>BLKMULT</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rdblksz</name> <operator>=</operator> <name>blksz</name> <operator>=</operator> <name>MAXBLK</name></expr>;</expr_stmt>
</block_content>}</block></function>

































<function><type><name>int</name></type>
<name>appnd_start</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>skcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exit_val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Cannot append to an archive that may have flaws."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrblksz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wrblksz</name> <operator>=</operator> <name>blksz</name> <operator>=</operator> <name>rdblksz</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>blksz</name> <operator>=</operator> <name>rdblksz</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ar_app_ok</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><name>skcnt</name> <operator>+=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <operator>(</operator><name>skcnt</name><operator>/</operator><name>blksz</name><operator>)</operator> <operator>*</operator> <name>blksz</name><operator>)</operator> <operator>&lt;</operator> <name>skcnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>blksz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ar_rev</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>cnt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>-=</operator> <name>skcnt</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>blksz</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bufpt</name> <operator>&lt;</operator> <name>bufend</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ar_read</name><argument_list>(<argument><expr><name>bufpt</name></expr></argument>, <argument><expr><name>rdblksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>ar_rev</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>bufpt</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>blksz</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>blksz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rdblksz</name> <operator>=</operator> <name>blksz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>-=</operator> <name>skcnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><call><name>ar_set_wr</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>act</name> <operator>=</operator> <name>ARCHIVE</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to rewrite archive trailer, cannot append."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>rd_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>errcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>maxflt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>APPND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to append when there are archive read errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ar_rdsync</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rdcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ar_read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxflt</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>++</operator><name>errcnt</name> <operator>&gt;</operator> <name>maxflt</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Archive read error limit (%d) reached"</literal></expr></argument>,<argument><expr><name>maxflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ar_rdsync</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type>
<name>pback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>bufpt</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufpt</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>rd_skip</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>skcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>off_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>skcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>bufend</name> <operator>-</operator> <name>bufpt</name><operator>)</operator></expr></argument>, <argument><expr><name>skcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skcnt</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>skcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>res</name> <operator>=</operator> <name>skcnt</name><operator>%</operator><name>rdblksz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>skcnt</name><operator>/</operator><name>rdblksz</name><operator>)</operator> <operator>*</operator> <name>rdblksz</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ar_fow</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skipped</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>cnt</name> <operator>-</operator> <name>skipped</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>+=</operator> <name>skipped</name></expr>;</expr_stmt>





<while>while <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>buf_fill</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>wr_fin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bufpt</name> <operator>&gt;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufpt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bufend</name> <operator>-</operator> <name>bufpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>bufend</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_flush</name><argument_list>(<argument><expr><name>blksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>wr_rdbuf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>





<while>while <condition>(<expr><name>outcnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>buf_flush</name><argument_list>(<argument><expr><name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>outcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufpt</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outcnt</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>rd_wrbuf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incnt</name> <init>= <expr><name>cpcnt</name></expr></init></decl>;</decl_stmt>




<while>while <condition>(<expr><name>incnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>buf_fill</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <name>cpcnt</name> <operator>-</operator> <name>incnt</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>incnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>bufpt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incnt</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>cpcnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>wr_skip</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>skcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>




<while>while <condition>(<expr><name>skcnt</name> <operator>&gt;</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>buf_flush</name><argument_list>(<argument><expr><name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>skcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufpt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skcnt</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type>
<name>wr_rdfile</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifd</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>size</name> <init>= <expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>




<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>buf_flush</name><argument_list>(<argument><expr><name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr><name>bufpt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Read fault on %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File changed size during read %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed stat on %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File %s was modified during copy to archive"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





















<function><type><name>int</name></type>
<name>rd_wrfile</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofd</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>size</name> <init>= <expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fnm</name> <init>= <expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isem</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name>MINFBSZ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>crc</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>st_blksize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sb</name><operator>.</operator><name>st_blksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"Unable to obtain block size for file %s"</literal></expr></argument>,<argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>






<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufend</name> <operator>-</operator> <name>bufpt</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>buf_fill</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>file_write</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>,<argument><expr><name>bufpt</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rem</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>isem</name></expr></argument>,<argument><expr><name>sz</name></expr></argument>,<argument><expr><name>fnm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>docrc</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>+=</operator> <operator>*</operator><name>bufpt</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bufpt</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block></while>







<if_stmt><if>if <condition>(<expr><name>isem</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>&gt;</operator> <literal type="number">0L</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_flush</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>fnm</name></expr></argument>, <argument><expr><name>isem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <literal type="number">0L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>left</name> <operator>==</operator> <literal type="number">0L</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>docrc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">0L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>crc</name></name> <operator>!=</operator> <name>crc</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Actual crc does not match expected crc %s"</literal></expr></argument>,<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>cp_file</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>cpcnt</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fnm</name> <init>= <expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_hole</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isem</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name>MINFBSZ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_blocks</name></name> <operator>*</operator> <name>BLKMULT</name><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>no_hole</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>st_blksize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_blksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>,<argument><expr><literal type="string">"Unable to obtain block size for file %s"</literal></expr></argument>,<argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>




<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no_hole</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>file_write</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isem</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>fnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cpcnt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed write during copy of %s to %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cpcnt</name> <operator>!=</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File %s changed size during copy to %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed stat of %s"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File %s was modified during copy to %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_hole</name> <operator>&amp;&amp;</operator> <name>isem</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>&gt;</operator> <literal type="number">0L</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_flush</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><name>fnm</name></expr></argument>, <argument><expr><name>isem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>buf_fill</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fini</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fini</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>ar_read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blksz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fini</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rdcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>exit_val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>buf_flush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bufcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>push</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wrlimit</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>wrcnt</name> <operator>&gt;</operator> <name>wrlimit</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"User specified archive volume byte limit reached."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wrcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wrcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>










<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>blksz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blksz</name> <operator>&gt;</operator> <name>bufcnt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>blksz</name> <operator>&lt;</operator> <name>bufcnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push</name> <operator>=</operator> <name>bufcnt</name> <operator>-</operator> <name>blksz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>



<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>ar_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blksz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>blksz</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>wrcnt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totcnt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>push</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufend</name></expr></argument>, <argument><expr><name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>push</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>push</name> <operator>&gt;=</operator> <name>blksz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>push</name> <operator>-=</operator> <name>blksz</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return<expr><operator>(</operator><name>totcnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>totcnt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrcnt</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>bufcnt</name> <operator>-</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufpt</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufpt</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frmt</name><operator>-&gt;</operator><name>blkalgn</name></name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>%</operator> <name><name>frmt</name><operator>-&gt;</operator><name>blkalgn</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>totcnt</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>wrcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ar_next</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>






<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>blksz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blksz</name> <operator>&gt;</operator> <name>bufcnt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>blksz</name> <operator>&lt;</operator> <name>bufcnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>push</name> <operator>=</operator> <name>bufcnt</name> <operator>-</operator> <name>blksz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>exit_val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
