<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/sel_subs.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)sel_subs.c 8.1 (Berkeley) 5/31/93";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sel_subs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>str_sec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usr_match</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>grp_match</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>trng_match</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>TIME_RNG</name> <modifier>*</modifier></type><name>trhead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TIME_RNG</name> <modifier>*</modifier></type><name>trtail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>USRT</name> <modifier>*</modifier><modifier>*</modifier></type><name>usrtb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GRPT</name> <modifier>*</modifier><modifier>*</modifier></type><name>grptb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>












<function><type><name>int</name></type>
<name>sel_chk</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>usrtb</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>usr_match</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>grptb</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>grp_match</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>trhead</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>trng_match</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type>
<name>usr_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USRT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>usrtb</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>usrtb</name> <operator>=</operator> <operator>(</operator><name>USRT</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>USR_TB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>USRT</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory for user selection table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pw</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to find uid for user: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><name><name>pw</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>endpwent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>uid</name><operator>)</operator> <operator>%</operator> <name>USR_TB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>usrtb</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>uid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>USRT</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>USRT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>usrtb</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>usrtb</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"User selection table out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>usr_match</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>USRT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>usrtb</name><index>[<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name><operator>)</operator> <operator>%</operator> <name>USR_TB_SZ</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_uid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>




<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>grp_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GRPT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>gr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>grptb</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>grptb</name> <operator>=</operator> <operator>(</operator><name>GRPT</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>GRP_TB_SZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GRPT</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory fo group selection table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gr</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Cannot determine gid for group name: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>gr</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>endgrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>gid</name><operator>)</operator> <operator>%</operator> <name>GRP_TB_SZ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <name><name>grptb</name><index>[<expr><name>indx</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>gid</name></name> <operator>==</operator> <name>gid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>GRPT</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GRPT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name>gid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name><name>grptb</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grptb</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Group selection table out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>grp_match</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GRPT</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>grptb</name><index>[<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name><operator>)</operator> <operator>%</operator> <name>GRP_TB_SZ</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>gid</name></name> <operator>==</operator> <name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_gid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>




<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






























<function><type><name>int</name></type>
<name>trng_add</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TIME_RNG</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>up_pt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flgpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Empty time range string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flgpt</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flgpt</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>stpt</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>stpt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>stpt</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>stpt</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>stpt</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>stpt</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>up_pt</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>stpt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>up_pt</name> <operator>=</operator> <name>stpt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>stpt</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>dot</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>dot</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Improperly specified time range: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pt</name> <operator>=</operator> <operator>(</operator><name>TIME_RNG</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIME_RNG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory for time range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flgpt</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>flgpt</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>=</operator> <name>CMPMTME</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>flgpt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>flgpt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>|=</operator> <name>CMPMTME</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>|=</operator> <name>CMPCTME</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Bad option %c with time range %s"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>flgpt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name>flgpt</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>str_sec</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Illegal lower time range %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>|=</operator> <name>HASLOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>up_pt</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>up_pt</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>str_sec</name><argument_list>(<argument><expr><name>up_pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Illegal upper time range %s"</literal></expr></argument>, <argument><expr><name>up_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>|=</operator> <name>HASHIGH</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASLOW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Upper %s and lower %s time overlap"</literal></expr></argument>,
<argument><expr><name>up_pt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>trhead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trtail</name> <operator>=</operator> <name>trhead</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>trtail</name><operator>-&gt;</operator><name>fow</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trtail</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Time range format is: [yy[mm[dd[hh]]]]mm[.ss][/[c][m]]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>trng_match</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TIME_RNG</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>





<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>trhead</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>CMPBOTH</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CMPBOTH</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASLOW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASHIGH</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CMPCTME</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASLOW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASHIGH</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CMPMTME</name></expr>:</case>
<default>default:</default>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASLOW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>low_time</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flgs</name></name> <operator>&amp;</operator> <name>HASHIGH</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>high_time</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>fow</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>str_sec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>tval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dot</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>dot</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <call><name>ATOI2</name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">61</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lt</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">10</literal></expr>:</case>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <call><name>ATOI2</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">69</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lt</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">8</literal></expr>:</case>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <call><name>ATOI2</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <call><name>ATOI2</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>ATOI2</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lt</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <call><name>ATOI2</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tval</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
