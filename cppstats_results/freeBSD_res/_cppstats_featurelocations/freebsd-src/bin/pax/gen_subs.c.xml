<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/gen_subs.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)gen_subs.c 8.1 (Berkeley) 5/31/93";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODELEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATELEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIXMONTHS</name></cpp:macro> <cpp:value>((365 / 2) * 86400)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURFRMTM</name></cpp:macro> <cpp:value>"%b %e %H:%M"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLDFRMTM</name></cpp:macro> <cpp:value>"%b %e %Y"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURFRMTD</name></cpp:macro> <cpp:value>"%e %b %H:%M"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLDFRMTD</name></cpp:macro> <cpp:value>"%e %b %Y"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>d_first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>






<function><type><name>void</name></type>
<name>ls_list</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>sbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>f_mode</name><index>[<expr><name>MODELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>f_date</name><index>[<expr><name>DATELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timefrmt</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d_first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d_first</name> <operator>=</operator> <operator>(</operator><operator>*</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>D_MD_ORDER</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>sbp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strmode</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>f_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sbp</name><operator>-&gt;</operator><name>st_mtime</name></name> <operator>+</operator> <name>SIXMONTHS</name><operator>)</operator> <operator>&lt;=</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timefrmt</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><name>OLDFRMTD</name></expr> </then><else>: <expr><name>OLDFRMTM</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timefrmt</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><name>CURFRMTD</name></expr> </then><else>: <expr><name>CURFRMTM</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strftime</name><argument_list>(<argument><expr><name>f_date</name></expr></argument>,<argument><expr><name>DATELEN</name></expr></argument>,<argument><expr><name>timefrmt</name></expr></argument>,<argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sbp</name><operator>-&gt;</operator><name>st_mtime</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f_date</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s%2ju %-12s %-12s "</literal></expr></argument>, <argument><expr><name>f_mode</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>sbp</name><operator>-&gt;</operator><name>st_nlink</name></name></expr></argument>,
<argument><expr><call><name>name_uid</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>name_gid</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CHR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_BLK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%4u,%4u "</literal></expr></argument>, <argument><expr><call><name>MAJOR</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>MINOR</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%4lu,%4lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>MAJOR</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>MINOR</name><argument_list>(<argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%9lu "</literal></expr></argument>, <argument><expr><name><name>sbp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%9ju "</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>sbp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>f_date</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HLK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" == %s\n"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_SLK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" =&gt; %s\n"</literal></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>ln_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ls_tty</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>f_date</name><index>[<expr><name>DATELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>f_mode</name><index>[<expr><name>MODELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timefrmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d_first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d_first</name> <operator>=</operator> <operator>(</operator><operator>*</operator><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>D_MD_ORDER</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>+</operator> <name>SIXMONTHS</name><operator>)</operator> <operator>&lt;=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timefrmt</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><name>OLDFRMTD</name></expr> </then><else>: <expr><name>OLDFRMTM</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timefrmt</name> <operator>=</operator> <ternary><condition><expr><name>d_first</name></expr> ?</condition><then> <expr><name>CURFRMTD</name></expr> </then><else>: <expr><name>CURFRMTM</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strftime</name><argument_list>(<argument><expr><name>f_date</name></expr></argument>, <argument><expr><name>DATELEN</name></expr></argument>, <argument><expr><name>timefrmt</name></expr></argument>,
<argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f_date</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strmode</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>f_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tty_prnt</name><argument_list>(<argument><expr><literal type="string">"%s%s %s\n"</literal></expr></argument>, <argument><expr><name>f_mode</name></expr></argument>, <argument><expr><name>f_date</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>l_strncpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>dest</name> <operator>&lt;</operator> <name>stop</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>dest</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>dest</name> <operator>&lt;</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
<return>return<expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name>u_long</name></type>
<name>asc_ul</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>(</operator><name>str</name> <operator>&lt;</operator> <name>stop</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt></block_content></block></while>





<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>HEX</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>str</name> <operator>&lt;</operator> <name>stop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>str</name> <operator>&lt;</operator> <name>stop</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><name>tval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>ul_asc</name><parameter_list>(<parameter><decl><type><name>u_long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>digit</name></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>HEX</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>digit</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><name>digit</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>digit</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>




<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NET2_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><name>u_quad_t</name></type>
<name>asc_uqd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_quad_t</name></type> <name>tval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stop</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>(</operator><name>str</name> <operator>&lt;</operator> <name>stop</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt></block_content></block></while>





<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>HEX</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>str</name> <operator>&lt;</operator> <name>stop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>str</name> <operator>&lt;</operator> <name>stop</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">'7'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>(</operator><name>tval</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>str</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><name>tval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>uqd_asc</name><parameter_list>(<parameter><decl><type><name>u_quad_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_quad_t</name></type> <name>digit</name></decl>;</decl_stmt>




<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>HEX</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>digit</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><name>digit</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>digit</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>u_quad_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>u_quad_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>




<while>while <condition>(<expr><name>pt</name> <operator>&gt;=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pt</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <operator>(</operator><name>u_quad_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
