<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pax/ar_subs.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)ar_subs.c 8.2 (Berkeley) 4/18/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>wr_archive</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_app</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_arc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>next_head</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>hdbuf</name><index>[<expr><name>BLKMULT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>flcnt</name></decl>;</decl_stmt>







<function><type><name>void</name></type>
<name>list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ARCHD</name></type> <name>archd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arcn</name> <operator>=</operator> <operator>&amp;</operator><name>archd</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_arc</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>options</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>st_rd</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>uidtb_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>gidtb_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><call><name>next_head</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>pat_match</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>sel_chk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>pat_sel</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mod_name</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ls_list</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>end_rd</name></name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ar_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pat_chk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>extract</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ARCHD</name></type> <name>archd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arcn</name> <operator>=</operator> <operator>&amp;</operator><name>archd</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_arc</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>options</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>st_rd</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>dir_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>name_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<while>while <condition>(<expr><call><name>next_head</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>pat_match</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>sel_chk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uflag</name> <operator>||</operator> <name>Dflag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>uflag</name> <operator>&amp;&amp;</operator> <name>Dflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Dflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>pat_sel</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mod_name</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Yflag</name> <operator>||</operator> <name>Zflag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Yflag</name> <operator>&amp;&amp;</operator> <name>Zflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Yflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ls_list</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fputs</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>pat</name><operator>-&gt;</operator><name>chdname</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>pat</name><operator>-&gt;</operator><name>chdname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot chdir to %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>pat</name><operator>-&gt;</operator><name>chdname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_CTG</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HLK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lnk_creat</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>node_creat</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>file_creat</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>res</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>rd_data</name></name>)<argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name>cnt</name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>pat</name><operator>-&gt;</operator><name>chdname</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fchdir</name><argument_list>(<argument><expr><name>cwdfd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't fchdir to starting directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>end_rd</name></name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ar_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proc_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pat_chk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>wr_archive</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_app</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hlk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wr_one</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>wrf</name>)<parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>hlk</name> <operator>=</operator> <name><name>frmt</name><operator>-&gt;</operator><name>hlk</name></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>lnk_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ftree_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>st_wr</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wrf</name> <operator>=</operator> <name><name>frmt</name><operator>-&gt;</operator><name>wr</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>name_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>wr_one</name> <operator>=</operator> <name>is_app</name></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><call><name>next_file</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>sel_chk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ftree_notsel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uflag</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>chk_ftime</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>ftree_sel</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hlk</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>chk_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_REG</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_CTG</name><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s to read"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mod_name</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>docrc</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>set_crc</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ls_list</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fputs</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>flcnt</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call>(<modifier>*</modifier><name>wrf</name>)<argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wr_one</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>res</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>wr_data</name></name>)<argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>wr_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>







<if_stmt><if>if <condition>(<expr><name>wr_one</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>end_wr</name></name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wr_fin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ar_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>proc_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ftree_chk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>























<function><type><name>void</name></type>
<name>append</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ARCHD</name></type> <name>archd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSUB</name> <modifier>*</modifier></type><name>orgfrmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>udev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>tlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arcn</name> <operator>=</operator> <operator>&amp;</operator><name>archd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>orgfrmt</name> <operator>=</operator> <name>frmt</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>get_arc</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>orgfrmt</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>orgfrmt</name> <operator>!=</operator> <name>frmt</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot mix current archive format %s with %s"</literal></expr></argument>,
<argument><expr><name><name>frmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>orgfrmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>options</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>st_rd</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>uflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ftime_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>















<if_stmt><if>if <condition>(<expr><operator>(</operator><name>udev</name> <operator>=</operator> <name><name>frmt</name><operator>-&gt;</operator><name>udev</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>dev_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>listf</name></expr></argument>,
<argument><expr><literal type="string">"%s: Reading archive to position at the end..."</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><call><name>next_head</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>sel_chk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uflag</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>chk_ftime</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>udev</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>add_dev</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>rd_skip</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>skip</name></name> <operator>+</operator> <name><name>arcn</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>






<expr_stmt><expr><name>tlen</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>end_rd</name></name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lnk_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>appnd_start</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"done.\n"</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>wr_archive</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>archive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ARCHD</name></type> <name>archd</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ftime_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>wr_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>options</name></name>)<argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wr_archive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>copy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fddest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fdsrc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ARCHD</name></type> <name>archd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dirbuf</name><index>[<expr><name>PAXPATHLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>arcn</name> <operator>=</operator> <operator>&amp;</operator><name>archd</name></expr>;</expr_stmt>




<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>l_strncpy</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>dirptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dirbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_pt</name> <operator>=</operator> <name>dirbuf</name> <operator>+</operator> <name>dlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>dest_pt</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest_pt</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>dlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_pt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>drem</name> <operator>=</operator> <name>PAXPATHLEN</name> <operator>-</operator> <name>dlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>dirptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot access destination directory %s"</literal></expr></argument>,
<argument><expr><name>dirptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Destination is not a directory %s"</literal></expr></argument>, <argument><expr><name>dirptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>lnk_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>ftree_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>dir_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>iflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>name_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>cp_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><call><name>next_file</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fdsrc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>sel_chk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ftree_notsel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name>uflag</name> <operator>||</operator> <name>Dflag</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>nlen</name></name> <operator>-</operator> <name>res</name><operator>)</operator> <operator>&gt;</operator> <name>drem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Destination pathname too long %s"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strncpy</name><argument_list>(<argument><expr><name>dest_pt</name></expr></argument>, <argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>res</name></expr></argument>, <argument><expr><name>drem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirbuf</name><index>[<expr><name>PAXPATHLEN</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_pt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>uflag</name> <operator>&amp;&amp;</operator> <name>Dflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name><operator>&lt;=</operator><name><name>sb</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name><operator>&lt;=</operator><name><name>sb</name><operator>.</operator><name>st_ctime</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Dflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>ftree_sel</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>chk_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mod_name</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>set_dest</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Yflag</name> <operator>||</operator> <name>Zflag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Yflag</name> <operator>&amp;&amp;</operator> <name>Zflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Yflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_ctime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_ctime</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arcn</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fputs</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>flcnt</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cross_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>chk_same</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_REG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PAX_CTG</name><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HLK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>arcn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PAX_HRG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lnk_creat</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>node_creat</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdsrc</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syswarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s to read"</literal></expr></argument>,
<argument><expr><name><name>arcn</name><operator>-&gt;</operator><name>org_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fddest</name> <operator>=</operator> <call><name>file_creat</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purg_lnk</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>cp_file</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>fdsrc</name></expr></argument>, <argument><expr><name>fddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>fddest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdfile_close</name><argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <name>vfpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>listf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfpart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ar_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proc_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ftree_chk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_head</name><parameter_list>(<parameter><decl><type><name>ARCHD</name> <modifier>*</modifier></type><name>arcn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shftsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_resync</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>res</name> <operator>=</operator> <name>hsz</name> <operator>=</operator> <name><name>frmt</name><operator>-&gt;</operator><name>hsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shftsz</name> <operator>=</operator> <name>hsz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rd_wrbuf</name><argument_list>(<argument><expr><name>hdend</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>rd_sync</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Premature end of file on archive read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_resync</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>APPND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Archive I/O error, cannot continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Archive I/O error. Trying to recover."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>in_resync</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>res</name> <operator>=</operator> <name>hsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name></expr>;</expr_stmt>
</block_content>}</block></for>













<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>rd</name></name>)<argument_list>(<argument><expr><name>arcn</name></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frmt</name><operator>-&gt;</operator><name>inhead</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>trail_tar</name></name>)<argument_list>(<argument><expr><name>hdbuf</name></expr></argument>,<argument><expr><name>in_resync</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>



<expr_stmt><expr><call><name>ar_drain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>res</name> <operator>=</operator> <name>hsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_resync</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>APPND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Unable to append, archive header flaw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Invalid header, starting valid header search."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>in_resync</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><name>hdbuf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>shftsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name> <operator>+</operator> <name>shftsz</name></expr>;</expr_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name><name>frmt</name><operator>-&gt;</operator><name>inhead</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call>(<modifier>*</modifier><name><name>frmt</name><operator>-&gt;</operator><name>trail_cpio</name></name>)<argument_list>(<argument><expr><name>arcn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>ar_drain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>flcnt</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_arc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minhd</name> <init>= <expr><name>BLKMULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ford</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fsub</name><index>[<expr><name><name>ford</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>hsz</name> <operator>&lt;</operator> <name>minhd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minhd</name> <operator>=</operator> <name><name>fsub</name><index>[<expr><name><name>ford</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>hsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>rd_start</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>BLKMULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>



<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rd_wrbuf</name><argument_list>(<argument><expr><name>hdend</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hdsz</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hdsz</name> <operator>&gt;=</operator> <name>minhd</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>rd_sync</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>







<expr_stmt><expr><name>res</name> <operator>=</operator> <name>BLKMULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notice</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>APPND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Cannot identify format. Searching..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>notice</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>









<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ford</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>fsub</name><index>[<expr><name><name>ford</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>id</name><operator>)</operator><operator>(</operator><name>hdbuf</name><operator>,</operator> <name>hdsz</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frmt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fsub</name><index>[<expr><name><name>ford</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>







<expr_stmt><expr><call><name>pback</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><name>hdsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notice</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>APPND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot identify format. Searching..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>notice</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>--</operator><name>hdsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><name>hdbuf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>hdsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>BLKMULT</name> <operator>-</operator> <name>hdsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name> <operator>+</operator> <name>hdsz</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>BLKMULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdend</name> <operator>=</operator> <name>hdbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>



<expr_stmt><expr><call><name>paxwarn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Sorry, unable to determine archive format."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
