<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/stty/key.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)key.c 8.3 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><name>__BEGIN_DECLS</name>
<specifier>static</specifier> <name>int</name></type> <name>c_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_cbreak</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_columns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_dec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_ek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_everything</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_extproc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_ispeed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_nl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_ospeed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_rows</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_sane</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_speed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>f_tty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>__END_DECLS</name>

<specifier>static</specifier> struct <name>key</name> <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr>;
<expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr>struct <name>info</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NEEDARG</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_OFFOK</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<expr><name>int</name> <name>flags</name></expr>;
}</block> <name><name>keys</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>f_all</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cbreak"</literal></expr>, <expr><name>f_cbreak</name></expr>, <expr><name>F_OFFOK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cols"</literal></expr>, <expr><name>f_columns</name></expr>, <expr><name>F_NEEDARG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"columns"</literal></expr>, <expr><name>f_columns</name></expr>, <expr><name>F_NEEDARG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cooked"</literal></expr>, <expr><name>f_sane</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dec"</literal></expr>, <expr><name>f_dec</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ek"</literal></expr>, <expr><name>f_ek</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"everything"</literal></expr>, <expr><name>f_everything</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extproc"</literal></expr>, <expr><name>f_extproc</name></expr>, <expr><name>F_OFFOK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ispeed"</literal></expr>, <expr><name>f_ispeed</name></expr>, <expr><name>F_NEEDARG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"new"</literal></expr>, <expr><name>f_tty</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nl"</literal></expr>, <expr><name>f_nl</name></expr>, <expr><name>F_OFFOK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"old"</literal></expr>, <expr><name>f_tty</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ospeed"</literal></expr>, <expr><name>f_ospeed</name></expr>, <expr><name>F_NEEDARG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"raw"</literal></expr>, <expr><name>f_raw</name></expr>, <expr><name>F_OFFOK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rows"</literal></expr>, <expr><name>f_rows</name></expr>, <expr><name>F_NEEDARG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sane"</literal></expr>, <expr><name>f_sane</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><name>f_size</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"speed"</literal></expr>, <expr><name>f_speed</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tty"</literal></expr>, <expr><name>f_tty</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>key</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>key</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ksearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>key</name></name> <modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>argvp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>name</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>kp</name> <operator>=</operator> <operator>(</operator>struct <name>key</name> <operator>*</operator><operator>)</operator><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>c_key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_OFFOK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ip</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"illegal option -- -%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_NEEDARG</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <operator>*</operator><operator>++</operator><operator>*</operator><name>argvp</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"option requires an argument -- %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>kp</name><operator>-&gt;</operator><name>f</name></name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>ldisc</name></name></expr></argument>, <argument><expr><name>BSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_cbreak</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f_sane</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>|=</operator> <name>BRKINT</name><operator>|</operator><name>IXON</name><operator>|</operator><name>IMAXBEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name>OPOST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ISIG</name><operator>|</operator><name>IEXTEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ICANON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_columns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>wset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_dec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><literal type="number">0177</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name> <operator>=</operator> <call><name>CTRL</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name> <operator>=</operator> <call><name>CTRL</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHOPRT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ECHOE</name><operator>|</operator><name>ECHOKE</name><operator>|</operator><name>ECHOCTL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IXANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_ek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name> <operator>=</operator> <name>CERASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name> <operator>=</operator> <name>CKILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_everything</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>ldisc</name></name></expr></argument>, <argument><expr><name>BSD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_extproc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ioctl</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TIOCEXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ioctl</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TIOCEXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_ispeed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>cfsetispeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><operator>(</operator><name>speed_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_nl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>|=</operator> <name>ICRNL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name>ONLCR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ICRNL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ONLCR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_ospeed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>cfsetospeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><operator>(</operator><name>speed_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>f_sane</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>cfmakeraw</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CSIZE</name><operator>|</operator><name>PARENB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <name>CS8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_rows</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>wset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_sane</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>def</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cfmakesane</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cflag</name></name> <operator>=</operator> <name><name>def</name><operator>.</operator><name>c_cflag</name></name> <operator>|</operator> <operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>CLOCAL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>=</operator> <name><name>def</name><operator>.</operator><name>c_iflag</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LKEEP</name></cpp:macro> <cpp:value>(ECHOKE|ECHOE|ECHOK|ECHOPRT|ECHOCTL|ALTWERASE|TOSTOP|NOFLSH)</cpp:value></cpp:define>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>=</operator> <name><name>def</name><operator>.</operator><name>c_lflag</name></name> <operator>|</operator> <operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;</operator> <name>LKEEP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_oflag</name></name> <operator>=</operator> <name><name>def</name><operator>.</operator><name>c_oflag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ws_row</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ws_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_speed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><call><name>cfgetospeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ip</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_tty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>TTYDISC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>TIOCSETD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"TIOCSETD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
