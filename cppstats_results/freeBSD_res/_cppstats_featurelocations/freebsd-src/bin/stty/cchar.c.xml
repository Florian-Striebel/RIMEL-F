<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/stty/cchar.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)cchar.c 8.5 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>c_cchar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name><name>struct</name> <name>cchar</name></name></type> <name><name>cchars1</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"discard"</literal></expr>, <expr><name>VDISCARD</name></expr>, <expr><name>CDISCARD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dsusp"</literal></expr>, <expr><name>VDSUSP</name></expr>, <expr><name>CDSUSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eof"</literal></expr>, <expr><name>VEOF</name></expr>, <expr><name>CEOF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eol"</literal></expr>, <expr><name>VEOL</name></expr>, <expr><name>CEOL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eol2"</literal></expr>, <expr><name>VEOL2</name></expr>, <expr><name>CEOL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"erase"</literal></expr>, <expr><name>VERASE</name></expr>, <expr><name>CERASE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"erase2"</literal></expr>, <expr><name>VERASE2</name></expr>, <expr><name>CERASE2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"intr"</literal></expr>, <expr><name>VINTR</name></expr>, <expr><name>CINTR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"kill"</literal></expr>, <expr><name>VKILL</name></expr>, <expr><name>CKILL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lnext"</literal></expr>, <expr><name>VLNEXT</name></expr>, <expr><name>CLNEXT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"min"</literal></expr>, <expr><name>VMIN</name></expr>, <expr><name>CMIN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quit"</literal></expr>, <expr><name>VQUIT</name></expr>, <expr><name>CQUIT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reprint"</literal></expr>, <expr><name>VREPRINT</name></expr>, <expr><name>CREPRINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"start"</literal></expr>, <expr><name>VSTART</name></expr>, <expr><name>CSTART</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>VSTATUS</name></expr>, <expr><name>CSTATUS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><name>VSTOP</name></expr>, <expr><name>CSTOP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"susp"</literal></expr>, <expr><name>VSUSP</name></expr>, <expr><name>CSUSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"time"</literal></expr>, <expr><name>VTIME</name></expr>, <expr><name>CTIME</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"werase"</literal></expr>, <expr><name>VWERASE</name></expr>, <expr><name>CWERASE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cchar</name></name></type> <name><name>cchars2</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"brk"</literal></expr>, <expr><name>VEOL</name></expr>, <expr><name>CEOL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flush"</literal></expr>, <expr><name>VDISCARD</name></expr>, <expr><name>CDISCARD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rprnt"</literal></expr>, <expr><name>VREPRINT</name></expr>, <expr><name>CREPRINT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_cchar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>cchar</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>cchar</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cchar</name></name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>argvp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cp</name> <operator>=</operator> <operator>(</operator>struct <name>cchar</name> <operator>*</operator><operator>)</operator><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>cchars1</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cchars1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cchar</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cchar</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>c_cchar</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>cp</name> <operator>=</operator> <operator>(</operator>struct <name>cchar</name> <operator>*</operator><operator>)</operator><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>cchars2</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cchars2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cchar</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cchar</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>c_cchar</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>*</operator><operator>++</operator><operator>*</operator><name>argvp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"option requires an argument -- %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*arg == s[0] &amp;&amp; !strcmp(arg, s))</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><call><name>CHK</name><argument_list>(<argument><expr><literal type="string">"undef"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHK</name><argument_list>(<argument><expr><literal type="string">"&lt;undef&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name><name>cp</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name> <operator>=</operator> <name>_POSIX_VDISABLE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>sub</name></name> <operator>==</operator> <name>VMIN</name> <operator>||</operator> <name><name>cp</name><operator>-&gt;</operator><name>sub</name></name> <operator>==</operator> <name>VTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>UCHAR_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"maximum option value is %d -- %s"</literal></expr></argument>,
<argument><expr><name>UCHAR_MAX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"option requires a numeric argument -- %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name><name>cp</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name><name>cp</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0177</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>_POSIX_VDISABLE</name></expr> </then><else>: <expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">037</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cc</name><index>[<expr><name><name>cp</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
