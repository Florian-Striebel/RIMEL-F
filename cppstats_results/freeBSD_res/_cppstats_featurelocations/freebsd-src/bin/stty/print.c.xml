<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/stty/print.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)print.c 8.6 (Berkeley) 4/16/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>binit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ccval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cchar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>winsize</name></name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ldisc</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>FMT</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cchar</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>ispeed</name></decl>, <decl><type ref="prev"/><name>ospeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ldisc</name> <operator>!=</operator> <name>TTYDISC</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>ldisc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SLIPDISC</name></expr>:</case>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"slip disc; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PPPDISC</name></expr>:</case>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ppp disc; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#%d disc; "</literal></expr></argument>, <argument><expr><name>ldisc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ispeed</name> <operator>=</operator> <call><name>cfgetispeed</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ospeed</name> <operator>=</operator> <call><name>cfgetospeed</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ispeed</name> <operator>!=</operator> <name>ospeed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator>
<call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ispeed %d baud; ospeed %d baud;"</literal></expr></argument>, <argument><expr><name>ispeed</name></expr></argument>, <argument><expr><name>ospeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"speed %d baud;"</literal></expr></argument>, <argument><expr><name>ispeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&gt;=</operator> <name>BSD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d rows; %d columns;"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>ws_row</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>ws_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>on</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tmp &amp; (f)) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (fmt &gt;= BSD || on(f) != (d)) bput((n) + on(f));</cpp:value></cpp:define>




<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>c_lflag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><literal type="string">"lflags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-icanon"</literal></expr></argument>, <argument><expr><name>ICANON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-isig"</literal></expr></argument>, <argument><expr><name>ISIG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-iexten"</literal></expr></argument>, <argument><expr><name>IEXTEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echo"</literal></expr></argument>, <argument><expr><name>ECHO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echoe"</literal></expr></argument>, <argument><expr><name>ECHOE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echok"</literal></expr></argument>, <argument><expr><name>ECHOK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echoke"</literal></expr></argument>, <argument><expr><name>ECHOKE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echonl"</literal></expr></argument>, <argument><expr><name>ECHONL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echoctl"</literal></expr></argument>, <argument><expr><name>ECHOCTL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-echoprt"</literal></expr></argument>, <argument><expr><name>ECHOPRT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-altwerase"</literal></expr></argument>, <argument><expr><name>ALTWERASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-noflsh"</literal></expr></argument>, <argument><expr><name>NOFLSH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-tostop"</literal></expr></argument>, <argument><expr><name>TOSTOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-flusho"</literal></expr></argument>, <argument><expr><name>FLUSHO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-pendin"</literal></expr></argument>, <argument><expr><name>PENDIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-nokerninfo"</literal></expr></argument>, <argument><expr><name>NOKERNINFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-extproc"</literal></expr></argument>, <argument><expr><name>EXTPROC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>c_iflag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><literal type="string">"iflags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-istrip"</literal></expr></argument>, <argument><expr><name>ISTRIP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-icrnl"</literal></expr></argument>, <argument><expr><name>ICRNL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-inlcr"</literal></expr></argument>, <argument><expr><name>INLCR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-igncr"</literal></expr></argument>, <argument><expr><name>IGNCR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-ixon"</literal></expr></argument>, <argument><expr><name>IXON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-ixoff"</literal></expr></argument>, <argument><expr><name>IXOFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-ixany"</literal></expr></argument>, <argument><expr><name>IXANY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-imaxbel"</literal></expr></argument>, <argument><expr><name>IMAXBEL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-ignbrk"</literal></expr></argument>, <argument><expr><name>IGNBRK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-brkint"</literal></expr></argument>, <argument><expr><name>BRKINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-inpck"</literal></expr></argument>, <argument><expr><name>INPCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-ignpar"</literal></expr></argument>, <argument><expr><name>IGNPAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-parmrk"</literal></expr></argument>, <argument><expr><name>PARMRK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>c_oflag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><literal type="string">"oflags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-opost"</literal></expr></argument>, <argument><expr><name>OPOST</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-onlcr"</literal></expr></argument>, <argument><expr><name>ONLCR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-ocrnl"</literal></expr></argument>, <argument><expr><name>OCRNL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>tmp</name><operator>&amp;</operator><name>TABDLY</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TAB0</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"tab0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TAB3</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"tab3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-onocr"</literal></expr></argument>, <argument><expr><name>ONOCR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-onlret"</literal></expr></argument>, <argument><expr><name>ONLRET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>c_cflag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><literal type="string">"cflags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-cread"</literal></expr></argument>, <argument><expr><name>CREAD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>tmp</name><operator>&amp;</operator><name>CSIZE</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CS5</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"cs5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CS6</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"cs6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CS7</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"cs7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CS8</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"cs8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"-parenb"</literal> <operator>+</operator> <call><name>on</name><argument_list>(<argument><expr><name>PARENB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-parodd"</literal></expr></argument>, <argument><expr><name>PARODD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-hupcl"</literal></expr></argument>, <argument><expr><name>HUPCL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-clocal"</literal></expr></argument>, <argument><expr><name>CLOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-cstopb"</literal></expr></argument>, <argument><expr><name>CSTOPB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><name>CCTS_OFLOW</name> <operator>|</operator> <name>CRTS_IFLOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CCTS_OFLOW</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"ctsflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CRTS_IFLOW</name></expr>:</case>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"rtsflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-crtscts"</literal></expr></argument>, <argument><expr><name>CCTS_OFLOW</name> <operator>|</operator> <name>CRTS_IFLOW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-dsrflow"</literal></expr></argument>, <argument><expr><name>CDSR_OFLOW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-dtrflow"</literal></expr></argument>, <argument><expr><name>CDTR_IFLOW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"-mdmbuf"</literal></expr></argument>, <argument><expr><name>MDMBUF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>on</name><argument_list>(<argument><expr><name>CNO_RTSDTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"-rtsdtr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&gt;=</operator> <name>BSD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><literal type="string">"rtsdtr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>c_cc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>POSIX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><literal type="string">"cchars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cchars1</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s;"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ccval</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bput</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>binit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cchars1</name></expr><operator>,</operator> <expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>!=</operator> <name>BSD</name> <operator>&amp;&amp;</operator> <name><name>cc</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>def</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WD</name></cpp:macro> <cpp:value>"%-8s"</cpp:value></cpp:define>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name> <operator>+</operator> <name>cnt</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>cnt</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>WD</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>cnt</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>cnt</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>WD</name></expr></argument>, <argument><expr><call><name>ccval</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>sub</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>cnt</name> <operator>==</operator> <name>LINELENGTH</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>binit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lb</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>label</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>col</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>LINELENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ccval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cchar</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sub</name></name> <operator>==</operator> <name>VMIN</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>sub</name></name> <operator>==</operator> <name>VTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>_POSIX_VDISABLE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"&lt;undef&gt;"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0200</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0177</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0177</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">040</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
