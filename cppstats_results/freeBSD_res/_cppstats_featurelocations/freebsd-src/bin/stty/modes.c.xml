<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/stty/modes.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)modes.c 8.3 (Berkeley) 4/2/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stty.h"</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>msearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>modes</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>unset</name></decl>;</decl_stmt>
}</block>;</struct>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>modes</name></name></type> <name><name>cmodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cs5"</literal></expr>, <expr><name>CS5</name></expr>, <expr><name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cs6"</literal></expr>, <expr><name>CS6</name></expr>, <expr><name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cs7"</literal></expr>, <expr><name>CS7</name></expr>, <expr><name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cs8"</literal></expr>, <expr><name>CS8</name></expr>, <expr><name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cstopb"</literal></expr>, <expr><name>CSTOPB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-cstopb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CSTOPB</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cread"</literal></expr>, <expr><name>CREAD</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-cread"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CREAD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parenb"</literal></expr>, <expr><name>PARENB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-parenb"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>PARENB</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parodd"</literal></expr>, <expr><name>PARODD</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-parodd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>PARODD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parity"</literal></expr>, <expr><name>PARENB</name> <operator>|</operator> <name>CS7</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-parity"</literal></expr>, <expr><name>CS8</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>PARENB</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"evenp"</literal></expr>, <expr><name>PARENB</name> <operator>|</operator> <name>CS7</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-evenp"</literal></expr>, <expr><name>CS8</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>PARENB</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oddp"</literal></expr>, <expr><name>PARENB</name> <operator>|</operator> <name>CS7</name> <operator>|</operator> <name>PARODD</name></expr>, <expr><name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-oddp"</literal></expr>, <expr><name>CS8</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>PARENB</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pass8"</literal></expr>, <expr><name>CS8</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>PARENB</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-pass8"</literal></expr>, <expr><name>PARENB</name> <operator>|</operator> <name>CS7</name></expr>, <expr><name>PARODD</name> <operator>|</operator> <name>CSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hupcl"</literal></expr>, <expr><name>HUPCL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-hupcl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HUPCL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hup"</literal></expr>, <expr><name>HUPCL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-hup"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HUPCL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clocal"</literal></expr>, <expr><name>CLOCAL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-clocal"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CLOCAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crtscts"</literal></expr>, <expr><name>CRTSCTS</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-crtscts"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CRTSCTS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ctsflow"</literal></expr>, <expr><name>CCTS_OFLOW</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ctsflow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CCTS_OFLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dsrflow"</literal></expr>, <expr><name>CDSR_OFLOW</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-dsrflow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CDSR_OFLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dtrflow"</literal></expr>, <expr><name>CDTR_IFLOW</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-dtrflow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CDTR_IFLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtsflow"</literal></expr>, <expr><name>CRTS_IFLOW</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-rtsflow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CRTS_IFLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mdmbuf"</literal></expr>, <expr><name>MDMBUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-mdmbuf"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MDMBUF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtsdtr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CNO_RTSDTR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-rtsdtr"</literal></expr>, <expr><name>CNO_RTSDTR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>modes</name></name></type> <name><name>imodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ignbrk"</literal></expr>, <expr><name>IGNBRK</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ignbrk"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IGNBRK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"brkint"</literal></expr>, <expr><name>BRKINT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-brkint"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BRKINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ignpar"</literal></expr>, <expr><name>IGNPAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ignpar"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IGNPAR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parmrk"</literal></expr>, <expr><name>PARMRK</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-parmrk"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>PARMRK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inpck"</literal></expr>, <expr><name>INPCK</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-inpck"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INPCK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"istrip"</literal></expr>, <expr><name>ISTRIP</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-istrip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ISTRIP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inlcr"</literal></expr>, <expr><name>INLCR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-inlcr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INLCR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"igncr"</literal></expr>, <expr><name>IGNCR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-igncr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IGNCR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icrnl"</literal></expr>, <expr><name>ICRNL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-icrnl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ICRNL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ixon"</literal></expr>, <expr><name>IXON</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ixon"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXON</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flow"</literal></expr>, <expr><name>IXON</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-flow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXON</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ixoff"</literal></expr>, <expr><name>IXOFF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ixoff"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXOFF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tandem"</literal></expr>, <expr><name>IXOFF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-tandem"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXOFF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ixany"</literal></expr>, <expr><name>IXANY</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ixany"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXANY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decctlq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IXANY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-decctlq"</literal></expr>, <expr><name>IXANY</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"imaxbel"</literal></expr>, <expr><name>IMAXBEL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-imaxbel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IMAXBEL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>modes</name></name></type> <name><name>lmodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"echo"</literal></expr>, <expr><name>ECHO</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"echoe"</literal></expr>, <expr><name>ECHOE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echoe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crterase"</literal></expr>, <expr><name>ECHOE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-crterase"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crtbs"</literal></expr>, <expr><name>ECHOE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-crtbs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"echok"</literal></expr>, <expr><name>ECHOK</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echok"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"echoke"</literal></expr>, <expr><name>ECHOKE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echoke"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOKE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crtkill"</literal></expr>, <expr><name>ECHOKE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-crtkill"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOKE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"altwerase"</literal></expr>, <expr><name>ALTWERASE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-altwerase"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ALTWERASE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iexten"</literal></expr>, <expr><name>IEXTEN</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-iexten"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>IEXTEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"echonl"</literal></expr>, <expr><name>ECHONL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echonl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHONL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"echoctl"</literal></expr>, <expr><name>ECHOCTL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echoctl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOCTL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ctlecho"</literal></expr>, <expr><name>ECHOCTL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ctlecho"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOCTL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"echoprt"</literal></expr>, <expr><name>ECHOPRT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-echoprt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOPRT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prterase"</literal></expr>, <expr><name>ECHOPRT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-prterase"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ECHOPRT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"isig"</literal></expr>, <expr><name>ISIG</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-isig"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ISIG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icanon"</literal></expr>, <expr><name>ICANON</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-icanon"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ICANON</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"noflsh"</literal></expr>, <expr><name>NOFLSH</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-noflsh"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NOFLSH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tostop"</literal></expr>, <expr><name>TOSTOP</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-tostop"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TOSTOP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flusho"</literal></expr>, <expr><name>FLUSHO</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-flusho"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLUSHO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pendin"</literal></expr>, <expr><name>PENDIN</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-pendin"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>PENDIN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crt"</literal></expr>, <expr><name>ECHOE</name><operator>|</operator><name>ECHOKE</name><operator>|</operator><name>ECHOCTL</name></expr>, <expr><name>ECHOK</name><operator>|</operator><name>ECHOPRT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-crt"</literal></expr>, <expr><name>ECHOK</name></expr>, <expr><name>ECHOE</name><operator>|</operator><name>ECHOKE</name><operator>|</operator><name>ECHOCTL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"newcrt"</literal></expr>, <expr><name>ECHOE</name><operator>|</operator><name>ECHOKE</name><operator>|</operator><name>ECHOCTL</name></expr>, <expr><name>ECHOK</name><operator>|</operator><name>ECHOPRT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-newcrt"</literal></expr>, <expr><name>ECHOK</name></expr>, <expr><name>ECHOE</name><operator>|</operator><name>ECHOKE</name><operator>|</operator><name>ECHOCTL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nokerninfo"</literal></expr>, <expr><name>NOKERNINFO</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-nokerninfo"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>NOKERNINFO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"kerninfo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NOKERNINFO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-kerninfo"</literal></expr>, <expr><name>NOKERNINFO</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>modes</name></name></type> <name><name>omodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"opost"</literal></expr>, <expr><name>OPOST</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-opost"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPOST</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"litout"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OPOST</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-litout"</literal></expr>, <expr><name>OPOST</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"onlcr"</literal></expr>, <expr><name>ONLCR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-onlcr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ONLCR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ocrnl"</literal></expr>, <expr><name>OCRNL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-ocrnl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>OCRNL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tabs"</literal></expr>, <expr><name>TAB0</name></expr>, <expr><name>TABDLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-tabs"</literal></expr>, <expr><name>TAB3</name></expr>, <expr><name>TABDLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oxtabs"</literal></expr>, <expr><name>TAB3</name></expr>, <expr><name>TABDLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-oxtabs"</literal></expr>, <expr><name>TAB0</name></expr>, <expr><name>TABDLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tab0"</literal></expr>, <expr><name>TAB0</name></expr>, <expr><name>TABDLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tab3"</literal></expr>, <expr><name>TAB3</name></expr>, <expr><name>TABDLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"onocr"</literal></expr>, <expr><name>ONOCR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-onocr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ONOCR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"onlret"</literal></expr>, <expr><name>ONLRET</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"-onlret"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ONLRET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*name == s[0] &amp;&amp; !strcmp(name, s))</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>msearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>info</name></name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>modes</name></name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>argvp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>cmodes</name></expr>;</init> <condition><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHK</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>mp</name><operator>-&gt;</operator><name>unset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <name><name>mp</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>imodes</name></expr>;</init> <condition><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHK</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>mp</name><operator>-&gt;</operator><name>unset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_iflag</name></name> <operator>|=</operator> <name><name>mp</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>lmodes</name></expr>;</init> <condition><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHK</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>mp</name><operator>-&gt;</operator><name>unset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name><name>mp</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>omodes</name></expr>;</init> <condition><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mp</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHK</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>mp</name><operator>-&gt;</operator><name>unset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name><name>mp</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
