<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/chio/chio.c">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static const char copyright[] =
"@(#) Copyright (c) 1996 Jason R. Thorpe. All rights reserved.";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/chio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pathnames.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>u_int16_t</name></type> <name>parse_element_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>u_int16_t</name></type> <name>parse_element_unit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>element_type_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>et</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_special</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_special</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bits_to_string</name><parameter_list>(<parameter><decl><type><name>ces_status_flags</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_element</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>changer_element_status</name></name> <modifier>*</modifier></type><name>get_element_status</name>
<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_move</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_exchange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_getpicker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_setpicker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_ielem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_return</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_voltag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_designator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CHET_VT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHET_VT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>element_type</name></name></type> <name><name>elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"drive"</literal></expr>, <expr><name>CHET_DT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"picker"</literal></expr>, <expr><name>CHET_MT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"portal"</literal></expr>, <expr><name>CHET_IE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"slot"</literal></expr>, <expr><name>CHET_ST</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"voltag"</literal></expr>, <expr><name>CHET_VT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>changer_command</name></name></type> <name><name>commands</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"exchange"</literal></expr>, <expr><name>do_exchange</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getpicker"</literal></expr>, <expr><name>do_getpicker</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ielem"</literal></expr>, <expr><name>do_ielem</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"move"</literal></expr>, <expr><name>do_move</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"params"</literal></expr>, <expr><name>do_params</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"position"</literal></expr>, <expr><name>do_position</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"setpicker"</literal></expr>, <expr><name>do_setpicker</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>do_status</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"return"</literal></expr>, <expr><name>do_return</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"voltag"</literal></expr>, <expr><name>do_voltag</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>special_word</name></name></type> <name><name>specials</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"inv"</literal></expr>, <expr><name>SW_INVERT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inv1"</literal></expr>, <expr><name>SW_INVERT1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"inv2"</literal></expr>, <expr><name>SW_INVERT2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>changer_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>changer_name</name></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"f:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>changer_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>changer_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>changer_name</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>CHANGER_ENV_VAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>changer_name</name> <operator>=</operator> <name>_PATH_CH</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>changer_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>changer_name</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: open"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>atexit</name><argument_list>(<argument><expr><name>cleanup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can't register cleanup function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unknown command: %s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_handler</name><operator>)</operator><operator>(</operator><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cc_name</name><operator>,</operator> <name>argc</name><operator>,</operator> <name>argv</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_move</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_move</name></name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>









<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too few arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_fromtype</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>CHET_VT</name> <operator>==</operator> <name><name>cmd</name><operator>.</operator><name>cm_fromtype</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_element</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>cm_fromtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>cm_fromunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_fromunit</name></name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_totype</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>CHET_VT</name> <operator>==</operator> <name><name>cmd</name><operator>.</operator><name>cm_totype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"%s: voltag only makes sense as an element source"</literal></expr></argument>,
<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_tounit</name></name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>parse_special</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SW_INVERT</name></expr>:</case>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_flags</name></name> <operator>|=</operator> <name>CM_INVERT</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: inappropriate modifier `%s'"</literal></expr></argument>,
<argument><expr><name>cname</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOMOVE"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s "</literal>
<literal type="string">"&lt;from ET&gt; &lt;from EU&gt; &lt;to ET&gt; &lt;to EU&gt; [inv]\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_exchange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_exchange</name></name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>









<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too few arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_srctype</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>CHET_VT</name> <operator>==</operator> <name><name>cmd</name><operator>.</operator><name>ce_srctype</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_element</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>ce_srctype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>ce_srcunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_srcunit</name></name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_fdsttype</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>CHET_VT</name> <operator>==</operator> <name><name>cmd</name><operator>.</operator><name>ce_fdsttype</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_element</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>ce_fdsttype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>ce_fdstunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_fdstunit</name></name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>is_special</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_sdsttype</name></name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>ce_srctype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_sdstunit</name></name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>ce_srcunit</name></name></expr>;</expr_stmt>
<goto>goto <name>do_special</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_sdsttype</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CHET_VT</name> <operator>==</operator> <name><name>cmd</name><operator>.</operator><name>ce_sdsttype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"%s %s: voltag only makes sense as an element source"</literal></expr></argument>,
<argument><expr><name>cname</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_sdstunit</name></name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<label><name>do_special</name>:</label>

<while>while <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>parse_special</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SW_INVERT1</name></expr>:</case>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_INVERT1</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SW_INVERT2</name></expr>:</case>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_INVERT2</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: inappropriate modifier `%s'"</literal></expr></argument>,
<argument><expr><name>cname</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOEXCHANGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOEXCHANGE"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: %s %s &lt;src ET&gt; &lt;src EU&gt; &lt;dst1 ET&gt; &lt;dst1 EU&gt;\n"</literal>
<literal type="string">" [&lt;dst2 ET&gt; &lt;dst2 EU&gt;] [inv1] [inv2]\n"</literal></expr></argument>,
<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_position</name></name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>









<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too few arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cp_type</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cp_unit</name></name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>parse_special</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SW_INVERT</name></expr>:</case>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cp_flags</name></name> <operator>|=</operator> <name>CP_INVERT</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: inappropriate modifier `%s'"</literal></expr></argument>,
<argument><expr><name>cname</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOPOSITION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOPOSITION"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s &lt;to ET&gt; &lt;to EU&gt; [inv]\n"</literal></expr></argument>,
<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_params</name></name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>picker</name></decl>;</decl_stmt>



<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: no arguments expected"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGPARAMS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGPARAMS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %d slot%s, %d drive%s, %d picker%s"</literal></expr></argument>,
<argument><expr><name>changer_name</name></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>cp_nslots</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>cp_nslots</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>cp_ndrives</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>cp_ndrives</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>data</name><operator>.</operator><name>cp_npickers</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>cp_npickers</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>cp_nportals</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">", %d portal%s"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>cp_nportals</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>.</operator><name>cp_nportals</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGPICKER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>picker</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGPICKER"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s: current picker: %d\n"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>, <argument><expr><name>picker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_getpicker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>picker</name></decl>;</decl_stmt>



<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: no arguments expected"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGPICKER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>picker</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGPICKER"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: current picker: %d\n"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>, <argument><expr><name>picker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_setpicker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>picker</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too few arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>picker</name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOSPICKER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>picker</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOSPICKER"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s &lt;picker&gt;\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_params</name></name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status_request</name></name></type> <name>cesr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int16_t</name></type> <name>base</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>chet</name></decl>, <decl><type ref="prev"/><name>schet</name></decl>, <decl><type ref="prev"/><name>echet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pvoltag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>avoltag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sense</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scsi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>source</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>optind</name> <operator>=</operator> <name>optreset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"vVsSbaI"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>pvoltag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name>avoltag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>source</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>scsi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name>intaddr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>pvoltag</name> <operator>=</operator> <name>avoltag</name> <operator>=</operator> <name>source</name> <operator>=</operator> <name>sense</name> <operator>=</operator> <name>scsi</name> <operator>=</operator> <name>intaddr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: bad option"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGPARAMS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGPARAMS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schet</name> <operator>=</operator> <name>echet</name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>schet</name> <operator>=</operator> <name>CHET_MT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>echet</name> <operator>=</operator> <name>CHET_DT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>u_int16_t</name><operator>)</operator><call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>u_int16_t</name><operator>)</operator><call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>base</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>chet</name> <operator>=</operator> <name>schet</name></expr>;</init> <condition><expr><name>chet</name> <operator>&lt;=</operator> <name>echet</name></expr>;</condition> <incr><expr><operator>++</operator><name>chet</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>chet</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHET_MT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_npickers</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>cp</name><operator>.</operator><name>cp_npickers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"not that many pickers in device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"picker"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CHET_ST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_nslots</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>cp</name><operator>.</operator><name>cp_nslots</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"not that many slots in device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"slot"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CHET_IE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_nportals</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>cp</name><operator>.</operator><name>cp_nportals</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"not that many portals in device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"portal"</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CHET_DT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_ndrives</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>cp</name><operator>.</operator><name>cp_ndrives</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"not that many drives in device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <literal type="string">"drive"</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: no %s elements\n"</literal></expr></argument>,
<argument><expr><name>changer_name</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cesr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cesr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_type</name></name> <operator>=</operator> <name>chet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name> <operator>=</operator>
<operator>(</operator>struct <name>changer_element_status</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>changer_element_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can't allocate status storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>avoltag</name> <operator>||</operator> <name>pvoltag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_flags</name></name> <operator>|=</operator> <name>CESR_VOLTAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGSTATUS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cesr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGSTATUS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status</name></name> <modifier>*</modifier></type><name>ces</name> <init>=
<expr><operator>&amp;</operator><operator>(</operator><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %d: %s"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_addr</name></name></expr></argument>,
<argument><expr><call><name>bits_to_string</name><argument_list>(<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_flags</name></name></expr></argument>,
<argument><expr><name>CESTATUS_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sense</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" sense: &lt;0x%02x/0x%02x&gt;"</literal></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_sensecode</name></name></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_sensequal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pvoltag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" voltag: &lt;%s:%d&gt;"</literal></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_pvoltag</name><operator>.</operator><name>cv_volid</name></name></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_pvoltag</name><operator>.</operator><name>cv_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>avoltag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" avoltag: &lt;%s:%d&gt;"</literal></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_avoltag</name><operator>.</operator><name>cv_volid</name></name></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_avoltag</name><operator>.</operator><name>cv_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>source</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ces</name><operator>-&gt;</operator><name>ces_flags</name></name> <operator>&amp;</operator> <name>CES_SOURCE_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" source: &lt;%s %d&gt;"</literal></expr></argument>,
<argument><expr><call><name>element_type_name</name><argument_list>(
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_source_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_source_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" source: &lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>intaddr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" intaddr: &lt;%d&gt;"</literal></expr></argument>, <argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_int_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scsi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" scsi: &lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ces</name><operator>-&gt;</operator><name>ces_flags</name></name> <operator>&amp;</operator> <name>CES_SCSIID_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_scsi_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ces</name><operator>-&gt;</operator><name>ces_flags</name></name> <operator>&amp;</operator> <name>CES_LUN_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_scsi_lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ces</name><operator>-&gt;</operator><name>ces_designator_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_designator</name><argument_list>(<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_designator</name></name></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_code_set</name></name></expr></argument>,
<argument><expr><name><name>ces</name><operator>-&gt;</operator><name>ces_designator_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s [-vVsSbaA] [&lt;element type&gt; [&lt;start-addr&gt; [&lt;end-addr&gt;] ] ]\n"</literal></expr></argument>,
<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_ielem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOIELEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOIELEM"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s [&lt;timeout&gt;]\n"</literal></expr></argument>,
<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_voltag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clear</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alternate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_set_voltag_request</name></name></type> <name>csvr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>csvr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>csvr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optind</name> <operator>=</operator> <name>optreset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"fca"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>clear</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>alternate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: bad option"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: missing element specification"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_type</name></name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_addr</name></name> <operator>=</operator> <operator>(</operator><name>u_int16_t</name><operator>)</operator><call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clear</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: missing argument"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_flags</name></name> <operator>=</operator> <name>CSVR_MODE_REPLACE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_flags</name></name> <operator>=</operator> <name>CSVR_MODE_SET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>csvr</name><operator>.</operator><name>csvr_voltag</name><operator>.</operator><name>cv_volid</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: volume label too long"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>csvr</name><operator>.</operator><name>csvr_voltag</name><operator>.</operator><name>cv_volid</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>csvr</name><operator>.</operator><name>csvr_voltag</name><operator>.</operator><name>cv_volid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_voltag</name><operator>.</operator><name>cv_serial</name></name> <operator>=</operator> <operator>(</operator><name>u_int16_t</name><operator>)</operator><call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: unexpected argument"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_flags</name></name> <operator>=</operator> <name>CSVR_MODE_CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alternate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>csvr</name><operator>.</operator><name>csvr_flags</name></name> <operator>|=</operator> <name>CSVR_ALTERNATE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOSETVOLTAG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csvr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOSETVOLTAG"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: %s %s [-fca] &lt;element&gt; [&lt;voltag&gt; [&lt;vsn&gt;] ]\n"</literal></expr></argument>,
<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int16_t</name></type>
<name>parse_element_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>et_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>et_name</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>u_int16_t</name><operator>)</operator><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>et_type</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid element type `%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>element_type_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>et</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>et_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>et_type</name> <operator>==</operator> <name>et</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>et_name</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int16_t</name></type>
<name>parse_element_unit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid unit number `%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>u_int16_t</name><operator>)</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_special</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>is_special</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>val</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid modifier `%s'"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_special</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sw_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sw_name</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>specials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sw_value</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>bits_to_string</name><parameter_list>(<parameter><decl><type><name>ces_status_flags</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>sep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sep</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</init> <condition><expr><operator>(</operator><name>f</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>cp</name></expr>;</init> <condition><expr><operator>*</operator><name>np</name> <operator>&gt;=</operator> <literal type="char">' '</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>np</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>f</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bp</name> <operator>-</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"%c%.*s"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>np</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_return</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status</name></name> <modifier>*</modifier></type><name>ces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_move</name></name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>element</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too few arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: too many arguments"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>parse_element_type</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>CHET_VT</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_element</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>element</name> <operator>=</operator> <call><name>parse_element_unit</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>argc</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ces</name> <operator>=</operator> <call><name>get_element_status</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>element</name></expr></argument>,
<argument><expr><name>CHET_VT</name> <operator>==</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ces</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: null element status pointer"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ces</name><operator>-&gt;</operator><name>ces_flags</name></name> <operator>&amp;</operator> <name>CES_SOURCE_VALID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: no source information"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_fromtype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_fromunit</name></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_totype</name></name> <operator>=</operator> <name><name>ces</name><operator>-&gt;</operator><name>ces_source_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>cm_tounit</name></name> <operator>=</operator> <name><name>ces</name><operator>-&gt;</operator><name>ces_source_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOMOVE"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>usage</name>:</label>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s %s "</literal>
<literal type="string">"&lt;from ET&gt; &lt;from EU&gt;\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name><name>struct</name> <name>changer_element_status</name></name> <modifier>*</modifier></type>
<name>get_element_status</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_voltags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status_request</name></name></type> <name>cesr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status</name></name> <modifier>*</modifier></type><name>ces</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ces</name> <operator>=</operator> <operator>(</operator>struct <name>changer_element_status</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>changer_element_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ces</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can't allocate status storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cesr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cesr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_type</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_base</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>element</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_voltags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_flags</name></name> <operator>|=</operator> <name>CESR_VOLTAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name> <operator>=</operator> <name>ces</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGSTATUS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cesr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGSTATUS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ces</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_element</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>voltag</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>et</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>eu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_params</name></name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status_request</name></name></type> <name>cesr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>changer_element_status</name></name> <modifier>*</modifier></type><name>ch_ces</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>elem</name></decl>, <decl><type ref="prev"/><name>total_elem</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGPARAMS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGPARAMS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>total_elem</name> <operator>=</operator> <operator>(</operator><name><name>cp</name><operator>.</operator><name>cp_nslots</name></name> <operator>+</operator> <name><name>cp</name><operator>.</operator><name>cp_ndrives</name></name>
<operator>+</operator> <name><name>cp</name><operator>.</operator><name>cp_npickers</name></name> <operator>+</operator> <name><name>cp</name><operator>.</operator><name>cp_nportals</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ch_ces</name> <operator>=</operator> <operator>(</operator>struct <name>changer_element_status</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name>total_elem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>changer_element_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ch_ces</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can't allocate status storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ces</name> <operator>=</operator> <name>ch_ces</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>.</operator><name>cp_nslots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cesr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cesr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_type</name></name> <operator>=</operator> <name>CHET_ST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_count</name></name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_nslots</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_flags</name></name> <operator>|=</operator> <name>CESR_VOLTAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name> <operator>=</operator> <name>ces</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGSTATUS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cesr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ch_ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGSTATUS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ces</name> <operator>+=</operator> <name><name>cp</name><operator>.</operator><name>cp_nslots</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>.</operator><name>cp_ndrives</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cesr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cesr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_type</name></name> <operator>=</operator> <name>CHET_DT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_count</name></name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_ndrives</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_flags</name></name> <operator>|=</operator> <name>CESR_VOLTAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name> <operator>=</operator> <name>ces</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGSTATUS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cesr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ch_ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGSTATUS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ces</name> <operator>+=</operator> <name><name>cp</name><operator>.</operator><name>cp_ndrives</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>.</operator><name>cp_nportals</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cesr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cesr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_type</name></name> <operator>=</operator> <name>CHET_IE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_count</name></name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_nportals</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_flags</name></name> <operator>|=</operator> <name>CESR_VOLTAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name> <operator>=</operator> <name>ces</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGSTATUS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cesr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ch_ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGSTATUS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ces</name> <operator>+=</operator> <name><name>cp</name><operator>.</operator><name>cp_nportals</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>.</operator><name>cp_npickers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cesr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cesr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_type</name></name> <operator>=</operator> <name>CHET_MT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_count</name></name> <operator>=</operator> <name><name>cp</name><operator>.</operator><name>cp_npickers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_flags</name></name> <operator>|=</operator> <name>CESR_VOLTAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cesr</name><operator>.</operator><name>cesr_element_status</name></name> <operator>=</operator> <name>ces</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>, <argument><expr><name>CHIOGSTATUS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cesr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ch_ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: CHIOGSTATUS"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>elem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name> <operator>&lt;</operator> <name>total_elem</name></expr>;</condition> <incr><expr><operator>++</operator><name>elem</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ces</name> <operator>=</operator> <operator>&amp;</operator><name><name>ch_ces</name><index>[<expr><name>elem</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ces</name><operator>-&gt;</operator><name>ces_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CES_STATUS_ACCESS</name><operator>|</operator><name>CES_STATUS_FULL</name><operator>)</operator><operator>)</operator>
<operator>!=</operator> <operator>(</operator><name>CES_STATUS_ACCESS</name><operator>|</operator><name>CES_STATUS_FULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>voltag</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ces</name><operator>-&gt;</operator><name>ces_pvoltag</name><operator>.</operator><name>cv_volid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>et</name> <operator>=</operator> <name><name>ces</name><operator>-&gt;</operator><name>ces_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>eu</name> <operator>=</operator> <name><name>ces</name><operator>-&gt;</operator><name>ces_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>found</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: unable to locate voltag: %s"</literal></expr></argument>, <argument><expr><name>changer_name</name></expr></argument>,
<argument><expr><name>voltag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ch_ces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>changer_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s [-f changer] command [-&lt;flags&gt;] "</literal>
<literal type="string">"arg1 arg2 [arg3 [...]]\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8CODESET</name></cpp:macro> <cpp:value>"UTF-8"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_designator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>designator</name></decl></parameter>, <parameter><decl><type><name>u_int8_t</name></type> <name>code_set</name></decl></parameter>,
<parameter><decl><type><name>u_int8_t</name></type> <name>designator_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" serial number: &lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>code_set</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CES_CODE_SET_ASCII</name></expr>:</case> <block>{<block_content>



<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>designator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CES_CODE_SET_UTF_8</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cs_native</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cs_native</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cs_native</name></expr></argument>, <argument><expr><name>UTF8CODESET</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cs_native</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cs_native</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>designator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>designator_length</name> <operator>&amp;&amp;</operator>
<name><name>designator</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>designator</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>designator</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%%%02x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>designator</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CES_CODE_SET_BINARY</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>designator_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02X%s"</literal></expr></argument>, <argument><expr><name><name>designator</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>designator_length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
