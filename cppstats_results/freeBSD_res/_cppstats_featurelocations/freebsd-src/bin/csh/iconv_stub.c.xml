<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/csh/iconv_stub.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iconv.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>iconv_open</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>iconv</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>iconv_close</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONVLIB</name></cpp:macro> <cpp:value>"libiconv.so"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_ENGINE</name></cpp:macro> <cpp:value>"libiconv"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_OPEN</name></cpp:macro> <cpp:value>"libiconv_open"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_CLOSE</name></cpp:macro> <cpp:value>"libiconv_close"</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>iconv_t</name></type> <name>iconv_open_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>dl_iconv_t</name> <modifier>*</modifier></type><name>dl_iconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dl_iconv_close_t</name> <modifier>*</modifier></type><name>dl_iconv_close</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>iconvlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>iconv_open_t</name> <modifier>*</modifier></type><name>iconv_open</name></decl>;</decl_stmt>

<function><type><name>iconv_t</name></type>
<name>dl_iconv_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tocode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fromcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iconvlib</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iconvlib</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>ICONVLIB</name></expr></argument>, <argument><expr><name>RTLD_LAZY</name> <operator>|</operator> <name>RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iconvlib</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>iconv_open</name> <operator>=</operator> <operator>(</operator><name>iconv_open_t</name> <operator>*</operator><operator>)</operator><call><name>dlfunc</name><argument_list>(<argument><expr><name>iconvlib</name></expr></argument>, <argument><expr><name>ICONV_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iconv_open</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dlfunc_err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dl_iconv</name> <operator>=</operator> <operator>(</operator><name>dl_iconv_t</name> <operator>*</operator><operator>)</operator><call><name>dlfunc</name><argument_list>(<argument><expr><name>iconvlib</name></expr></argument>, <argument><expr><name>ICONV_ENGINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dl_iconv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dlfunc_err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dl_iconv_close</name> <operator>=</operator> <operator>(</operator><name>dl_iconv_close_t</name> <operator>*</operator><operator>)</operator><call><name>dlfunc</name><argument_list>(<argument><expr><name>iconvlib</name></expr></argument>,
<argument><expr><name>ICONV_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dl_iconv_close</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dlfunc_err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>iconv_open</name><argument_list>(<argument><expr><name>tocode</name></expr></argument>, <argument><expr><name>fromcode</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>dlfunc_err</name>:</label>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>iconvlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iconvlib</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
