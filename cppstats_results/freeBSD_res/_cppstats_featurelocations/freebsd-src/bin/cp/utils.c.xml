<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/cp/utils.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)utils.c 8.3 (Berkeley) 4/1/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VM_AND_BUFFER_CACHE_SYNCHRONIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sysexits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cp_pct</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y == 0) ? 0 : (int)(100.0 * (x) / (y)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHYSPAGES_THRESHOLD</name></cpp:macro> <cpp:value>(32*1024)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE_MAX</name></cpp:macro> <cpp:value>(2*1024*1024)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE_SMALL</name></cpp:macro> <cpp:value>(MAXPHYS)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>copy_fallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rcount</name></decl>, <decl><type ref="prev"/><name>wresid</name></decl>, <decl><type ref="prev"/><name>wcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rcount</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>from_fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rcount</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>bufp</name> <operator>=</operator> <name>buf</name></expr><operator>,</operator> <expr><name>wresid</name> <operator>=</operator> <name>rcount</name></expr>;</init> <condition>;</condition> <incr><expr><name>bufp</name> <operator>+=</operator> <name>wcount</name></expr><operator>,</operator> <expr><name>wresid</name> <operator>-=</operator> <name>wcount</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>wcount</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>to_fd</name></expr></argument>, <argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>wresid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wcount</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>wresid</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>wcount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>wcount</name></expr> </then><else>: <expr><name>rcount</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>copy_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>entp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rcount</name></decl>, <decl><type ref="prev"/><name>wcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wresid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>wtotal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>checkch</name></decl>, <decl><type ref="prev"/><name>from_fd</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>, <decl><type ref="prev"/><name>to_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VM_AND_BUFFER_CACHE_SYNCHRONIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>use_copy_file_range</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>from_fd</name> <operator>=</operator> <name>to_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>from_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fs</name> <operator>=</operator> <name><name>entp</name><operator>-&gt;</operator><name>fts_statp</name></name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dne</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YESNO</name></cpp:macro> <cpp:value>"(y/n [n]) "</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name>nflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s not overwritten\n"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>iflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"overwrite %s? %s"</literal></expr></argument>,
<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>YESNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checkch</name> <operator>=</operator> <name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>checkch</name> <operator>!=</operator> <literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <name>checkch</name> <operator>!=</operator> <literal type="char">'Y'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"not overwritten\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fflag</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>,
<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>S_ISUID</name> <operator>|</operator> <name>S_ISGID</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>,
<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>S_ISUID</name> <operator>|</operator> <name>S_ISGID</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name> <operator>&amp;&amp;</operator> <name>to_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VM_AND_BUFFER_CACHE_SYNCHRONIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>,
<argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>from_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wtotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bufp</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>wresid</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</init> <condition>;</condition>
<incr><expr><name>bufp</name> <operator>+=</operator> <name>wcount</name></expr><operator>,</operator> <expr><name>wresid</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>wcount</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>wcount</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>to_fd</name></expr></argument>, <argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>wresid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wtotal</name> <operator>+=</operator> <name>wcount</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s -&gt; %s %3d%%\n"</literal></expr></argument>,
<argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>,
<argument><expr><call><name>cp_pct</name><argument_list>(<argument><expr><name>wtotal</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wcount</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>wresid</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>wcount</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>wresid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PHYS_PAGES</name></expr></argument>)</argument_list></call> <operator>&gt;</operator>
<name>PHYSPAGES_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>BUFSIZE_MAX</name></expr></argument>, <argument><expr><name>MAXPHYS</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name>BUFSIZE_SMALL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wtotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_copy_file_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcount</name> <operator>=</operator> <call><name>copy_file_range</name><argument_list>(<argument><expr><name>from_fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>to_fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SSIZE_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcount</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_copy_file_range</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_copy_file_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcount</name> <operator>=</operator> <call><name>copy_fallback</name><argument_list>(<argument><expr><name>from_fd</name></expr></argument>, <argument><expr><name>to_fd</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wtotal</name> <operator>+=</operator> <name>rcount</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>info</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"%s -&gt; %s %3d%%\n"</literal></expr></argument>,
<argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>,
<argument><expr><call><name>cp_pct</name><argument_list>(<argument><expr><name>wtotal</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>rcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>rcount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>link</name><argument_list>(<argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>symlink</name><argument_list>(<argument><expr><name><name>entp</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pflag</name> <operator>&amp;&amp;</operator> <call><name>setfile</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>to_fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pflag</name> <operator>&amp;&amp;</operator> <call><name>preserve_fd_acls</name><argument_list>(<argument><expr><name>from_fd</name></expr></argument>, <argument><expr><name>to_fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>to_fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>from_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>from_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>copy_link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>llink</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <name>nflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s not overwritten\n"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>readlink</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name>llink</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llink</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"readlink: %s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>llink</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <call><name>unlink</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"unlink: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>symlink</name><argument_list>(<argument><expr><name>llink</name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"symlink: %s"</literal></expr></argument>, <argument><expr><name>llink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>pflag</name></expr> ?</condition><then> <expr><call><name>setfile</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>copy_fifo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>from_stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <name>nflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s not overwritten\n"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <call><name>unlink</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"unlink: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mkfifo</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>from_stat</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"mkfifo: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>pflag</name></expr> ?</condition><then> <expr><call><name>setfile</name><argument_list>(<argument><expr><name>from_stat</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>copy_special</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>from_stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <name>nflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s not overwritten\n"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <call><name>unlink</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"unlink: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mknod</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>from_stat</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name><name>from_stat</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"mknod: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>pflag</name></expr> ?</condition><then> <expr><call><name>setfile</name><argument_list>(<argument><expr><name>from_stat</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>setfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name><name>tspec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>, <decl><type ref="prev"/><name>gotstat</name></decl>, <decl><type ref="prev"/><name>islink</name></decl>, <decl><type ref="prev"/><name>fdval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fdval</name> <operator>=</operator> <name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>islink</name> <operator>=</operator> <operator>!</operator><name>fdval</name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;=</operator> <name>S_ISUID</name> <operator>|</operator> <name>S_ISGID</name> <operator>|</operator> <name>S_ISVTX</name> <operator>|</operator>
<name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tspec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_atim</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tspec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_mtim</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>fdval</name></expr> ?</condition><then> <expr><call><name>futimens</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>tspec</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>utimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>tspec</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>islink</name></expr> ?</condition><then> <expr><name>AT_SYMLINK_NOFOLLOW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"utimensat: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>fdval</name></expr> ?</condition><then> <expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>islink</name></expr> ?</condition><then> <expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>stat</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gotstat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>gotstat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;=</operator> <name>S_ISUID</name> <operator>|</operator> <name>S_ISGID</name> <operator>|</operator> <name>S_ISVTX</name> <operator>|</operator>
<name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotstat</name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>!=</operator> <name><name>ts</name><operator>.</operator><name>st_uid</name></name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_gid</name></name> <operator>!=</operator> <name><name>ts</name><operator>.</operator><name>st_gid</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>fdval</name></expr> ?</condition><then> <expr><call><name>fchown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>islink</name></expr> ?</condition><then> <expr><call><name>lchown</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>chown</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPERM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"chown: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>S_ISUID</name> <operator>|</operator> <name>S_ISGID</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotstat</name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>!=</operator> <name><name>ts</name><operator>.</operator><name>st_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>fdval</name></expr> ?</condition><then> <expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>islink</name></expr> ?</condition><then> <expr><call><name>lchmod</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>chmod</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"chmod: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotstat</name> <operator>||</operator> <name><name>fs</name><operator>-&gt;</operator><name>st_flags</name></name> <operator>!=</operator> <name><name>ts</name><operator>.</operator><name>st_flags</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>fdval</name></expr> ?</condition><then>
<expr><call><name>fchflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_flags</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>islink</name></expr> ?</condition><then> <expr><call><name>lchflags</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_flags</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>chflags</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_flags</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"chflags: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>preserve_fd_acls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>source_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_type_t</name></type> <name>acl_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acl_supported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>trivial</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fpathconf</name><argument_list>(<argument><expr><name>source_fd</name></expr></argument>, <argument><expr><name>_PC_ACL_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_NFS4</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"fpathconf(..., _PC_ACL_NFS4) failed for %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_supported</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fpathconf</name><argument_list>(<argument><expr><name>source_fd</name></expr></argument>, <argument><expr><name>_PC_ACL_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"fpathconf(..., _PC_ACL_EXTENDED) failed for %s"</literal></expr></argument>,
<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_supported</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>acl_get_fd_np</name><argument_list>(<argument><expr><name>source_fd</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to get acl entries while setting %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>acl_is_trivial_np</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trivial</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"acl_is_trivial() failed for %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trivial</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>acl_set_fd_np</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to set acl entries for %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>preserve_dir_acls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source_dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>acl_t</name></type> (<modifier>*</modifier><name>aclgetf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>acl_type_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>aclsetf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>acl_type_t</name></type></decl></parameter>, <parameter><decl><type><name>acl_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>acl</name></name> <modifier>*</modifier></type><name>aclp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_t</name></type> <name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_type_t</name></type> <name>acl_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acl_supported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>trivial</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pathconf</name><argument_list>(<argument><expr><name>source_dir</name></expr></argument>, <argument><expr><name>_PC_ACL_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_NFS4</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"fpathconf(..., _PC_ACL_NFS4) failed for %s"</literal></expr></argument>, <argument><expr><name>source_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_supported</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pathconf</name><argument_list>(<argument><expr><name>source_dir</name></expr></argument>, <argument><expr><name>_PC_ACL_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>acl_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>acl_type</name> <operator>=</operator> <name>ACL_TYPE_ACCESS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"fpathconf(..., _PC_ACL_EXTENDED) failed for %s"</literal></expr></argument>,
<argument><expr><name>source_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_supported</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aclgetf</name> <operator>=</operator> <name>acl_get_link_np</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aclsetf</name> <operator>=</operator> <name>acl_set_link_np</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>aclgetf</name> <operator>=</operator> <name>acl_get_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aclsetf</name> <operator>=</operator> <name>acl_set_file</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>acl_type</name> <operator>==</operator> <name>ACL_TYPE_ACCESS</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>aclgetf</name><argument_list>(<argument><expr><name>source_dir</name></expr></argument>, <argument><expr><name>ACL_TYPE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to get default acl entries on %s"</literal></expr></argument>,
<argument><expr><name>source_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>aclp</name> <operator>=</operator> <operator>&amp;</operator><name><name>acl</name><operator>-&gt;</operator><name>ats_acl</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aclp</name><operator>-&gt;</operator><name>acl_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>aclsetf</name><argument_list>(<argument><expr><name>dest_dir</name></expr></argument>,
<argument><expr><name>ACL_TYPE_DEFAULT</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to set default acl entries on %s"</literal></expr></argument>,
<argument><expr><name>dest_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>aclgetf</name><argument_list>(<argument><expr><name>source_dir</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to get acl entries on %s"</literal></expr></argument>, <argument><expr><name>source_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>acl_is_trivial_np</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trivial</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"acl_is_trivial() failed on %s"</literal></expr></argument>, <argument><expr><name>source_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trivial</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aclsetf</name><argument_list>(<argument><expr><name>dest_dir</name></expr></argument>, <argument><expr><name>acl_type</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"failed to set acl entries on %s"</literal></expr></argument>, <argument><expr><name>dest_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"usage: cp [-R [-H | -L | -P]] [-f | -i | -n] [-alpsvx] "</literal>
<literal type="string">"source_file target_file"</literal></expr></argument>,
<argument><expr><literal type="string">" cp [-R [-H | -L | -P]] [-f | -i | -n] [-alpsvx] "</literal>
<literal type="string">"source_file ... "</literal>
<literal type="string">"target_directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EX_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
