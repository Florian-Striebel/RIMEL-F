<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/cp/cp.c">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char const copyright[] =
"@(#) Copyright (c) 1988, 1993, 1994\n\
The Regents of the University of California. All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)cp.c 8.2 (Berkeley) 4/1/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIP_TRAILING_SLASH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while ((p).p_end &gt; (p).p_path + 1 &amp;&amp; (p).p_end[-1] == '/') *--(p).p_end = 0; }</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>emptystring</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PATH_T</name></type> <name>to</name> <init>= <expr><block>{ <expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr>, <expr><name>emptystring</name></expr>, <expr><literal type="string">""</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fflag</name></decl>, <decl><type ref="prev"/><name>iflag</name></decl>, <decl><type ref="prev"/><name>lflag</name></decl>, <decl><type ref="prev"/><name>nflag</name></decl>, <decl><type ref="prev"/><name>pflag</name></decl>, <decl><type ref="prev"/><name>sflag</name></decl>, <decl><type ref="prev"/><name>vflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>Rflag</name></decl>, <decl><type ref="prev"/><name>rflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>info</name></decl>;</decl_stmt>

<enum>enum <name>op</name> <block>{ <decl><name>FILE_TO_FILE</name></decl>, <decl><name>FILE_TO_DIR</name></decl>, <decl><name>DIR_TO_DNE</name></decl> }</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name><name>char</name> <modifier>*</modifier><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>op</name></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>siginfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__unused</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>to_stat</name></decl>, <decl><type ref="prev"/><name>tmp_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>op</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Hflag</name></decl>, <decl><type ref="prev"/><name>Lflag</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>fts_options</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>have_trailing_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fts_options</name> <operator>=</operator> <name>FTS_NOCHDIR</name> <operator>|</operator> <name>FTS_PHYSICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <name>Lflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"HLPRafilnprsvx"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Lflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>Lflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <name>Lflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>Rflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>pflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Rflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <name>Lflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iflag</name> <operator>=</operator> <name>nflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>iflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fflag</name> <operator>=</operator> <name>nflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>lflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>nflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fflag</name> <operator>=</operator> <name>iflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>pflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>rflag</name> <operator>=</operator> <name>Lflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>sflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>vflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_XDEV</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Rflag</name> <operator>&amp;&amp;</operator> <name>rflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"the -R and -r options may not be specified together"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lflag</name> <operator>&amp;&amp;</operator> <name>sflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"the -l and -s options may not be specified together"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Rflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Rflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Hflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_COMFOLLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Lflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>&amp;=</operator> <operator>~</operator><name>FTS_PHYSICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_LOGICAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>&amp;=</operator> <operator>~</operator><name>FTS_PHYSICAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_LOGICAL</name> <operator>|</operator> <name>FTS_COMFOLLOW</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>, <argument><expr><name>siginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: name too long"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>to</name><operator>.</operator><name>p_end</name></name> <operator>=</operator> <name><name>to</name><operator>.</operator><name>p_path</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>.</operator><name>p_path</name></name> <operator>==</operator> <name><name>to</name><operator>.</operator><name>p_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>to</name><operator>.</operator><name>p_end</name></name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>to</name><operator>.</operator><name>p_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>have_trailing_slash</name> <operator>=</operator> <operator>(</operator><name><name>to</name><operator>.</operator><name>p_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>have_trailing_slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRIP_TRAILING_SLASH</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>to</name><operator>.</operator><name>target_end</name></name> <operator>=</operator> <name><name>to</name><operator>.</operator><name>p_end</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>















<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>to_stat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s is not a directory"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Rflag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>Lflag</name> <operator>||</operator> <name>Hflag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stat</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lstat</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>tmp_stat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>Rflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DIR_TO_DNE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_TO_FILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_TO_FILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>have_trailing_slash</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>FILE_TO_FILE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"directory %s does not exist"</literal></expr></argument>,
<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s is not a directory"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>



<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_TO_DIR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><call><name>copy</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fts_options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>op</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fts_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>to_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTS</name> <modifier>*</modifier></type><name>ftsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dne</name></decl>, <decl><type ref="prev"/><name>badcp</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_mid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>





<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>~</operator><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><operator>~</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftsp</name> <operator>=</operator> <call><name>fts_open</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>fts_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fts_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>(</operator><name>curr</name> <operator>=</operator> <call><name>fts_read</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>badcp</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>fts_info</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FTS_NS</name></expr>:</case>
<case>case <expr><name>FTS_DNR</name></expr>:</case>
<case>case <expr><name>FTS_ERR</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>,
<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>FTS_DC</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: directory causes a cycle"</literal></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<default>default:</default>
<empty_stmt>;</empty_stmt>
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>FILE_TO_FILE</name></expr>)</condition> <block>{<block_content>



















<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <name>FTS_ROOTLEVEL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>DIR_TO_DNE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name><index>[<expr><name>base</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>fts_pathlen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name><index>[<expr><name>base</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>fts_pathlen</name></name> <operator>-</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>target_mid</name> <operator>=</operator> <name><name>to</name><operator>.</operator><name>target_end</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>target_mid</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target_mid</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>target_mid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>target_mid</name> <operator>-</operator> <name><name>to</name><operator>.</operator><name>p_path</name></name> <operator>+</operator> <name>nlen</name> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s%s: name too long (not copied)"</literal></expr></argument>,
<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strncat</name><argument_list>(<argument><expr><name>target_mid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>.</operator><name>p_end</name></name> <operator>=</operator> <name>target_mid</name> <operator>+</operator> <name>nlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>to</name><operator>.</operator><name>p_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRIP_TRAILING_SLASH</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>fts_info</name></name> <operator>==</operator> <name>FTS_DP</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curr</name><operator>-&gt;</operator><name>fts_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name>pflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>setfile</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>preserve_dir_acls</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name></name></expr></argument>,
<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_accpath</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>S_ISUID</name> <operator>|</operator> <name>S_ISGID</name> <operator>|</operator> <name>S_ISTXT</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>|</operator> <name>S_IRWXU</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name>mode</name> <operator>&amp;</operator> <name>mask</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"chmod: %s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_stat</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dne</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>to_stat</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>&amp;&amp;</operator>
<name><name>to_stat</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_ino</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s and %s are identical (not copied)."</literal></expr></argument>,
<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fts_set</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>FTS_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>to_stat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"cannot overwrite directory %s with "</literal>
<literal type="string">"non-directory %s"</literal></expr></argument>,
<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dne</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_IFLNK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fts_options</name> <operator>&amp;</operator> <name>FTS_LOGICAL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>fts_options</name> <operator>&amp;</operator> <name>FTS_COMFOLLOW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>curr</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_file</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_link</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><operator>!</operator><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>S_IFDIR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Rflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s is a directory (not copied)."</literal></expr></argument>,
<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fts_set</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>FTS_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>dne</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>,
<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|</operator> <name>S_IRWXU</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>to_stat</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_number</name></name> <operator>=</operator> <name>pflag</name> <operator>||</operator> <name>dne</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>S_IFBLK</name></expr>:</case>
<case>case <expr><name>S_IFCHR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>Rflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_special</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name></name></expr></argument>, <argument><expr><operator>!</operator><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_file</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>S_IFSOCK</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s is a socket (not copied)."</literal></expr></argument>,
<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>S_IFIFO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>Rflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_fifo</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_statp</name></name></expr></argument>, <argument><expr><operator>!</operator><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>copy_file</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>copy_file</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>dne</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badcp</name> <operator>=</operator> <name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>badcp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s -&gt; %s\n"</literal></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fts_read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fts_close</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>siginfo</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sig</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>info</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
