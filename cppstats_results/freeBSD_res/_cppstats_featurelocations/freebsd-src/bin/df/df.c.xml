<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/df/df.c">



































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static const char copyright[] =
"@(#) Copyright (c) 1980, 1990, 1993, 1994\n\
The Regents of the University of California. All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)df.c 8.9 (Berkeley) 5/8/95";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sysexits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxo/xo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITS_SI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITS_2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<struct>struct <name>maxwidths</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mntfrom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fstype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ifree</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getmntpt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>int64width</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>makenetvfslist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prthuman</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prthumanval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>intmax_t</name></type> <name>fsbtoblk</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>u_long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prtstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>maxwidths</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>regetmntinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_maxwidths</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>maxwidths</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type>
<name>imax</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>aflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cflag</name></decl>, <decl><type ref="prev"/><name>hflag</name></decl>, <decl><type ref="prev"/><name>iflag</name></decl>, <decl><type ref="prev"/><name>kflag</name></decl>, <decl><type ref="prev"/><name>lflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nflag</name></decl>, <decl><type ref="prev"/><name>Tflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thousands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"si"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'H'</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name></type> <name>statfsbuf</name></decl>, <decl><type ref="prev"/><name>totalbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>maxwidths</name></name></type> <name>maxwidths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>mntbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mntpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vfslist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mntsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxwidths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>maxwidths</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>totalbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>totalbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>totalbuf</name><operator>.</operator><name>f_bsize</name></name> <operator>=</operator> <name>DEV_BSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>totalbuf</name><operator>.</operator><name>f_mntfromname</name></name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name>MNAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vfslist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>xo_parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"+abcgHhiklmnPt:T,"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>aflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>






<if_stmt><if>if <condition>(<expr><name>kflag</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"BLOCKSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"512"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>cflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"BLOCKSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"1g"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>hflag</name> <operator>=</operator> <name>UNITS_SI</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>hflag</name> <operator>=</operator> <name>UNITS_2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>iflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>kflag</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"BLOCKSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"1024"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vfslist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-l and -t are mutually exclusive."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vfslist</name> <operator>=</operator> <call><name>makevfslist</name><argument_list>(<argument><expr><call><name>makenetvfslist</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"BLOCKSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"1m"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>nflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>lflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-l and -t are mutually exclusive."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vfslist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"only one -t option may be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vfslist</name> <operator>=</operator> <call><name>makevfslist</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name>Tflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<expr_stmt><expr><name>thousands</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>argv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mntsize</name> <operator>=</operator> <call><name>getmntinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mntbuf</name></expr></argument>, <argument><expr><name>MNT_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mntsize</name> <operator>=</operator> <call><name>regetmntinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mntbuf</name></expr></argument>, <argument><expr><name>mntsize</name></expr></argument>, <argument><expr><name>vfslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mntbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mntbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mntbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"malloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mntsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xo_open_container</name><argument_list>(<argument><expr><literal type="string">"storage-system-information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_open_list</name><argument_list>(<argument><expr><literal type="string">"filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>argv</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mntpt</name> <operator>=</operator> <call><name>getmntpt</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>stbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mntpt</name> <operator>=</operator> <call><name>getmntpt</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mntpt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s: not mounted"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mntpt</name> <operator>=</operator> <operator>*</operator><name>argv</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>statfs</name><argument_list>(<argument><expr><name>mntpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statfsbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>mntpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>checkvfsname</name><argument_list>(<argument><expr><name><name>statfsbuf</name><operator>.</operator><name>f_fstypename</name></name></expr></argument>, <argument><expr><name>vfslist</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>statfsbuf</name><operator>.</operator><name>f_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MNT_IGNORE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mntbuf</name><index>[<expr><name>mntsize</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>statfsbuf</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxwidths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>maxwidths</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mntsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aflag</name> <operator>||</operator> <operator>(</operator><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_flags</name> <operator>&amp;</operator> <name>MNT_IGNORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_maxwidths</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxwidths</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>totalbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mntsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>aflag</name> <operator>||</operator> <operator>(</operator><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_flags</name> <operator>&amp;</operator> <name>MNT_IGNORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prtstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwidths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>xo_close_list</name><argument_list>(<argument><expr><literal type="string">"filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prtstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>totalbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwidths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xo_close_container</name><argument_list>(<argument><expr><literal type="string">"storage-system-information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getmntpt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mntsize</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>mntbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mntsize</name> <operator>=</operator> <call><name>getmntinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mntbuf</name></expr></argument>, <argument><expr><name>MNT_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mntsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_mntfromname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_mntonname</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>regetmntinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>mntbufp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mntsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vfslist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>mntbuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vfslist</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>nflag</name></expr> ?</condition><then> <expr><name>mntsize</name></expr> </then><else>: <expr><call><name>getmntinfo</name><argument_list>(<argument><expr><name>mntbufp</name></expr></argument>, <argument><expr><name>MNT_WAIT</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mntbuf</name> <operator>=</operator> <operator>*</operator><name>mntbufp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mntsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>checkvfsname</name><argument_list>(<argument><expr><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_fstypename</name></expr></argument>, <argument><expr><name>vfslist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>






<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>statfs</name><argument_list>(<argument><expr><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_mntonname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mntbuf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nflag</name> <operator>||</operator> <name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"%s stats possibly stale"</literal></expr></argument>,
<argument><expr><name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_mntonname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mntbuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>mntbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>j</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prthuman</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>sfsp</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>used</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>prthumanval</name><argument_list>(<argument><expr><literal type="string">" {:blocks/%6s}"</literal></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>*</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prthumanval</name><argument_list>(<argument><expr><literal type="string">" {:used/%6s}"</literal></expr></argument>, <argument><expr><name>used</name> <operator>*</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prthumanval</name><argument_list>(<argument><expr><literal type="string">" {:available/%6s}"</literal></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bavail</name></name> <operator>*</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prthumanval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HN_B</name> <operator>|</operator> <name>HN_NOSPACE</name> <operator>|</operator> <name>HN_DECIMAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hflag</name> <operator>==</operator> <name>UNITS_SI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HN_DIVISOR_1000</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>humanize_number</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>HN_AUTOSCALE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>prthumanvalinode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HN_NOSPACE</name> <operator>|</operator> <name>HN_DECIMAL</name> <operator>|</operator> <name>HN_DIVISOR_1000</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>humanize_number</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>HN_AUTOSCALE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_attr</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>intmax_t</name></type>
<name>fsbtoblk</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>fsbs</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>num</name> <operator>*</operator> <operator>(</operator><name>intmax_t</name><operator>)</operator> <name>fsbs</name> <operator>/</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>bs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>prtstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>sfsp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>maxwidths</name></name> <modifier>*</modifier></type><name>mwp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>blocksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>headerlen</name></decl>, <decl><type ref="prev"/><name>timesthrough</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>availblks</name></decl>, <decl><type ref="prev"/><name>inodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>timesthrough</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>mntfrom</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>mntfrom</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Filesystem"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>fstype</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>fstype</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>thousands</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <operator>(</operator><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <operator>(</operator><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name> <operator>+=</operator> <operator>(</operator><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name> <operator>+=</operator> <operator>(</operator><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name> <operator>+=</operator> <operator>(</operator><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>header</name> <operator>=</operator> <literal type="string">" Size"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name><name>mwp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator>
<operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>getbsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headerlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Used"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Avail"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{T:/%-*s}"</literal></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>mntfrom</name></name></expr></argument>, <argument><expr><literal type="string">"Filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Tflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {T:/%-*s}"</literal></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>fstype</name></name></expr></argument>, <argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {T:/%*s} {T:/%*s} {T:/%*s} {T:Capacity}"</literal></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name></expr></argument>, <argument><expr><literal type="string">"Used"</literal></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>, <argument><expr><literal type="string">"Avail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><ternary><condition><expr><name>hflag</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" iused"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><ternary><condition><expr><name>hflag</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"ifree"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {T:/%*s} {T:/%*s} {T:\%iused}"</literal></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"iused"</literal></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name></expr></argument>, <argument><expr><literal type="string">"ifree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {T:Mounted on}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xo_open_instance</name><argument_list>(<argument><expr><literal type="string">"filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name> <argument_list>(<argument><expr><literal type="string">"File system %s does not have a block size, assuming 512."</literal></expr></argument>,
<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_mntonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"{tk:name/%-*s}"</literal></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>mntfrom</name></name></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_mntfromname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Tflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {:type/%-*s}"</literal></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>fstype</name></name></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_fstypename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>-</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_bfree</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>availblks</name> <operator>=</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_bavail</name></name> <operator>+</operator> <name>used</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prthuman</name><argument_list>(<argument><expr><name>sfsp</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thousands</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">" {t:total-blocks/%*j'd} {t:used-blocks/%*j'd} "</literal>
<literal type="string">"{t:available-blocks/%*j'd}"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">" {t:total-blocks/%*jd} {t:used-blocks/%*jd} "</literal>
<literal type="string">"{t:available-blocks/%*jd}"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><name>format</name></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><call><name>fsbtoblk</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_blocks</name></name></expr></argument>,
<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name></expr></argument>, <argument><expr><call><name>fsbtoblk</name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>, <argument><expr><call><name>fsbtoblk</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bavail</name></name></expr></argument>,
<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {:used-percent/%5.0f}{U:%%}"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>availblks</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">100.0</literal></expr> </then><else>: <expr><operator>(</operator><name>double</name><operator>)</operator><name>used</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>availblks</name> <operator>*</operator> <literal type="number">100.0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inodes</name> <operator>=</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_files</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <name>inodes</name> <operator>-</operator> <name><name>sfsp</name><operator>-&gt;</operator><name>f_ffree</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prthumanvalinode</name><argument_list>(<argument><expr><literal type="string">" {:inodes-used/%5s}"</literal></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prthumanvalinode</name><argument_list>(<argument><expr><literal type="string">" {:inodes-free/%5s}"</literal></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thousands</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">" {:inodes-used/%*j'd} {:inodes-free/%*j'd}"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">" {:inodes-used/%*jd} {:inodes-free/%*jd}"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>used</name></expr></argument>,
<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>sfsp</name><operator>-&gt;</operator><name>f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {:inodes-used-percent/%4.0f}{U:%%} "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>inodes</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">100.0</literal></expr> </then><else>:
<expr><operator>(</operator><name>double</name><operator>)</operator><name>used</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>inodes</name> <operator>*</operator> <literal type="number">100.0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_mntfromname</name></name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><name>MNAMELEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">" {:mounted-on}"</literal></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_mntonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xo_emit</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xo_close_instance</name><argument_list>(<argument><expr><literal type="string">"filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>totalfsp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>statfsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>statfsp</name><operator>-&gt;</operator><name>f_bsize</name></name> <operator>/</operator> <name><name>totalfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>totalfsp</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>+=</operator> <name><name>statfsp</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>*</operator> <name>bsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>totalfsp</name><operator>-&gt;</operator><name>f_bfree</name></name> <operator>+=</operator> <name><name>statfsp</name><operator>-&gt;</operator><name>f_bfree</name></name> <operator>*</operator> <name>bsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>totalfsp</name><operator>-&gt;</operator><name>f_bavail</name></name> <operator>+=</operator> <name><name>statfsp</name><operator>-&gt;</operator><name>f_bavail</name></name> <operator>*</operator> <name>bsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>totalfsp</name><operator>-&gt;</operator><name>f_files</name></name> <operator>+=</operator> <name><name>statfsp</name><operator>-&gt;</operator><name>f_files</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>totalfsp</name><operator>-&gt;</operator><name>f_ffree</name></name> <operator>+=</operator> <name><name>statfsp</name><operator>-&gt;</operator><name>f_ffree</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_maxwidths</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>maxwidths</name></name> <modifier>*</modifier></type><name>mwp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>sfsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>blocksize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getbsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>mntfrom</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>mntfrom</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_mntfromname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>fstype</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>fstype</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_fstypename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><call><name>int64width</name><argument_list>(
<argument><expr><call><name>fsbtoblk</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>sfsp</name><operator>-&gt;</operator><name>f_blocks</name></name></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>used</name></name></expr></argument>,
<argument><expr><call><name>int64width</name><argument_list>(<argument><expr><call><name>fsbtoblk</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>sfsp</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>-</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>sfsp</name><operator>-&gt;</operator><name>f_bfree</name></name></expr></argument>, <argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>, <argument><expr><call><name>int64width</name><argument_list>(<argument><expr><call><name>fsbtoblk</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bavail</name></name></expr></argument>,
<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>iused</name></name></expr></argument>, <argument><expr><call><name>int64width</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>sfsp</name><operator>-&gt;</operator><name>f_files</name></name> <operator>-</operator>
<name><name>sfsp</name><operator>-&gt;</operator><name>f_ffree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name> <operator>=</operator> <call><name>imax</name><argument_list>(<argument><expr><name><name>mwp</name><operator>-&gt;</operator><name>ifree</name></name></expr></argument>, <argument><expr><call><name>int64width</name><argument_list>(<argument><expr><name><name>sfsp</name><operator>-&gt;</operator><name>f_ffree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>int64width</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>xo_error</name><argument_list>(
<argument><expr><literal type="string">"usage: df [-b | -g | -H | -h | -k | -m | -P] [-acilnT] [-t type] [-,]\n"</literal>
<literal type="string">" [file | filesystem ...]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EX_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>makenetvfslist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>listptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xvfsconf</name></name> <modifier>*</modifier></type><name>xvfsp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keep_xvfsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>maxvfsconf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"vfs.conflist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"sysctl(vfs.conflist)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xvfsp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xvfsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>keep_xvfsp</name> <operator>=</operator> <name>xvfsp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"vfs.conflist"</literal></expr></argument>, <argument><expr><name>xvfsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warn</name><argument_list>(<argument><expr><literal type="string">"sysctl(vfs.conflist)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keep_xvfsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>maxvfsconf</name> <operator>=</operator> <name>buflen</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>xvfsconf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>listptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxvfsconf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keep_xvfsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxvfsconf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xvfsp</name><operator>-&gt;</operator><name>vfc_flags</name></name> <operator>&amp;</operator> <name>VFCF_NETWORK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>listptr</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>xvfsp</name><operator>-&gt;</operator><name>vfc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>listptr</name><index>[<expr><name>cnt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keep_xvfsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xvfsp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>cnt</name> <operator>+</operator> <name>cnt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xo_warnx</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keep_xvfsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>strptr</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>strptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>strptr</name></expr></argument>, <argument><expr><name><name>listptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>listptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>strptr</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>listptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>strptr</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keep_xvfsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
