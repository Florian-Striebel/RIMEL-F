<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/chmod/chmod.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char const copyright[] =
"@(#) Copyright (c) 1989, 1993, 1994\n\
The Regents of the University of California. All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
static char sccsid[] = "@(#)chmod.c 8.8 (Berkeley) 4/1/94";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>siginfo</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>may_have_nfs4acl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hflag</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>siginfo_handler</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sig</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>siginfo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FTS</name> <modifier>*</modifier></type><name>ftsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FTSENT</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Hflag</name></decl>, <decl><type ref="prev"/><name>Lflag</name></decl>, <decl><type ref="prev"/><name>Rflag</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>fflag</name></decl>, <decl><type ref="prev"/><name>fts_options</name></decl>, <decl><type ref="prev"/><name>hflag</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>newmode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <name>Lflag</name> <operator>=</operator> <name>Rflag</name> <operator>=</operator> <name>fflag</name> <operator>=</operator> <name>hflag</name> <operator>=</operator> <name>vflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"HLPRXfghorstuvwx"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Lflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>Lflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>Hflag</name> <operator>=</operator> <name>Lflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>Rflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>







<expr_stmt><expr><name>hflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>






<case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator>
<name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ch</name> <operator>&amp;&amp;</operator>
<name><name>argv</name><index>[<expr><name>optind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>done</name>;</goto>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>vflag</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></while>
<label><name>done</name>:</label> <expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINFO</name></expr></argument>, <argument><expr><name>siginfo_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Rflag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"the -R and -h options may not be "</literal>
<literal type="string">"specified together."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Lflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>=</operator> <name>FTS_LOGICAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>=</operator> <name>FTS_PHYSICAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Hflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>|=</operator> <name>FTS_COMFOLLOW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>=</operator> <name>FTS_PHYSICAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fts_options</name> <operator>=</operator> <name>FTS_LOGICAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>*</operator><name>argv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>set</name> <operator>=</operator> <call><name>setmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"invalid file mode: %s"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ftsp</name> <operator>=</operator> <call><name>fts_open</name><argument_list>(<argument><expr><operator>++</operator><name>argv</name></expr></argument>, <argument><expr><name>fts_options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fts_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>fts_read</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>atflag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fts_options</name> <operator>&amp;</operator> <name>FTS_LOGICAL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>fts_options</name> <operator>&amp;</operator> <name>FTS_COMFOLLOW</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>fts_level</name></name> <operator>==</operator> <name>FTS_ROOTLEVEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>atflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>atflag</name> <operator>=</operator> <name>AT_SYMLINK_NOFOLLOW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fts_info</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FTS_D</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Rflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fts_set</name><argument_list>(<argument><expr><name>ftsp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FTS_DNR</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FTS_DP</name></expr>:</case>
<continue>continue;</continue>
<case>case <expr><name>FTS_ERR</name></expr>:</case>
<case>case <expr><name>FTS_NS</name></expr>:</case>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>newmode</name> <operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>may_have_nfs4acl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hflag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>newmode</name> <operator>&amp;</operator> <name>ALLPERMS</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>ALLPERMS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fchmodat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_accpath</name></name></expr></argument>, <argument><expr><name>newmode</name></expr></argument>, <argument><expr><name>atflag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name>fflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vflag</name> <operator>||</operator> <name>siginfo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vflag</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>siginfo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>m1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>m2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strmode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strmode</name><argument_list>(<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator>
<name>S_IFMT</name><operator>)</operator> <operator>|</operator> <name>newmode</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">": 0%o [%s] -&gt; 0%o [%s]"</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>m1</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>|</operator>
<name>newmode</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>siginfo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fts_read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: chmod [-fhv] [-R [-H | -L | -P]] mode file ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>may_have_nfs4acl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FTSENT</name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dev_t</name></type> <name>previous_dev</name> <init>= <expr><name>NODEV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>supports_acls</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>previous_dev</name> <operator>!=</operator> <name><name>ent</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>previous_dev</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>fts_statp</name><operator>-&gt;</operator><name>st_dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>supports_acls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lpathconf</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>fts_accpath</name></name></expr></argument>, <argument><expr><name>_PC_ACL_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pathconf</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>fts_accpath</name></name></expr></argument>, <argument><expr><name>_PC_ACL_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>supports_acls</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>fts_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>supports_acls</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
