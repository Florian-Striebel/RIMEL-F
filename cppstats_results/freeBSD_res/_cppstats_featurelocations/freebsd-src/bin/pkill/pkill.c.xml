<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/pkill/pkill.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kvm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jail.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_MATCH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_NOMATCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_BADUSAGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_ERROR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_PID</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PID</name></cpp:macro> <cpp:value>99999</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSKIP</name><parameter_list>(<parameter><type><name>kp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kp)-&gt;ki_pid == mypid || (!kthreads &amp;&amp; ((kp)-&gt;ki_flag &amp; P_KPROC) != 0))</cpp:value></cpp:define>


<enum>enum <name>listtype</name> <block>{
<decl><name>LT_GENERIC</name></decl>,
<decl><name>LT_USER</name></decl>,
<decl><name>LT_GROUP</name></decl>,
<decl><name>LT_TTY</name></decl>,
<decl><name>LT_PGRP</name></decl>,
<decl><name>LT_JAIL</name></decl>,
<decl><name>LT_SID</name></decl>,
<decl><name>LT_CLASS</name></decl>
}</block>;</enum>

<struct>struct <name>list</name> <block>{
<macro><name>SLIST_ENTRY</name><argument_list>(<argument>list</argument>)</argument_list></macro> <expr_stmt><expr><name>li_chain</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>li_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>li_name</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>SLIST_HEAD</name><argument_list>(<argument><expr><name>listhead</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>selected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name> <init>= <expr><literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nproc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pgrep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>signum</name> <init>= <expr><name>SIGTERM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>newest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>oldest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>interactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>longfmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>matchargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fullmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>kthreads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cflags</name> <init>= <expr><name>REG_EXTENDED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>kvm_t</name> <modifier>*</modifier></type><name>kd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>mypid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>euidlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>euidlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>ruidlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>ruidlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>rgidlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>rgidlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>pgrplist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>pgrplist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>ppidlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>ppidlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>tdevlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>tdevlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>sidlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>sidlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>jidlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>jidlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listhead</name></name></type> <name>classlist</name> <init>= <expr><call><name>SLIST_HEAD_INITIALIZER</name><argument_list>(<argument><expr><name>classlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(__noreturn__</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>killact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>grepact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>makelist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listhead</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>listtype</name></name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>takepid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>_POSIX2_LINE_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pargv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pidfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>execf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>coref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ancestors</name></decl>, <decl><type ref="prev"/><name>debug_opt</name></decl>, <decl><type ref="prev"/><name>did_action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>bestidx</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>, <decl><type ref="prev"/><name>criteria</name></decl>, <decl><type ref="prev"/><name>pidfromfile</name></decl>, <decl><type ref="prev"/><name>pidfilelock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>jsz</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>action</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>best_tval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pgrep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>grepact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgrep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>killact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signum</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"SIG"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSIG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>sys_signame</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>NSIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signum</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ancestors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_opt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pidfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pidfilelock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>execf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>coref</name> <operator>=</operator> <name>_PATH_DEVNULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"DF:G:ILM:N:P:SU:ac:d:fg:ij:lnoqs:t:u:vx"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>debug_opt</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>pidfile</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rgidlist</name></expr></argument>, <argument><expr><name>LT_GROUP</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>pgrep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>interactive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>pidfilelock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><name>coref</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><name>execf</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ppidlist</name></expr></argument>, <argument><expr><name>LT_GENERIC</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgrep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>kthreads</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ruidlist</name></expr></argument>, <argument><expr><name>LT_USER</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name>ancestors</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>classlist</name></expr></argument>, <argument><expr><name>LT_CLASS</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgrep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>delim</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>matchargs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgrplist</name></expr></argument>, <argument><expr><name>LT_PGRP</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>cflags</name> <operator>|=</operator> <name>REG_ICASE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jidlist</name></expr></argument>, <argument><expr><name>LT_JAIL</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>longfmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>newest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name>oldest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgrep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>quiet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sidlist</name></expr></argument>, <argument><expr><name>LT_SID</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdevlist</name></expr></argument>, <argument><expr><name>LT_TTY</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>makelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>euidlist</name></expr></argument>, <argument><expr><name>LT_USER</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>inverse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>fullmatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch></block_content></block></while>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>criteria</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>criteria</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newest</name> <operator>&amp;&amp;</operator> <name>oldest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Options -n and -o are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pidfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pidfromfile</name> <operator>=</operator> <call><name>takepid</name><argument_list>(<argument><expr><name>pidfile</name></expr></argument>, <argument><expr><name>pidfilelock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pidfilelock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Option -L doesn't make sense without -F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pidfromfile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mypid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>kd</name> <operator>=</operator> <call><name>kvm_openfiles</name><argument_list>(<argument><expr><name>execf</name></expr></argument>, <argument><expr><name>coref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>kd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open kernel files (%s)"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>pidfromfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>plist</name> <operator>=</operator> <call><name>kvm_getprocs</name><argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_PID</name></expr></argument>, <argument><expr><name>pidfromfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>plist</name> <operator>=</operator> <call><name>kvm_getprocs</name><argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>KERN_PROC_PROC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>plist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot get process list (%s)"</literal></expr></argument>,
<argument><expr><call><name>kvm_geterr</name><argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>selected</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nproc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for %d processes"</literal></expr></argument>,
<argument><expr><name>nproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>selected</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>argv</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>,
<argument><expr><literal type="string">"Cannot compile regular expression `%s' (%s)"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name>plist</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PSKIP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>debug_opt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* Skipped %5d %3d %s\n"</literal></expr></argument>,
<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_uid</name></name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchargs</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>pargv</name> <operator>=</operator> <call><name>kvm_getargv</name><argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>jsz</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <operator>*</operator><name>pargv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jsz</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>jsz</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>jsz</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pargv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"%s "</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pargv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>mstr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mstr</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_comm</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fullmatch</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>rm_so</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>regmatch</name><operator>.</operator><name>rm_eo</name></name> <operator>==</operator>
<operator>(</operator><name>off_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>REG_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Regular expression evaluation error (%s)"</literal></expr></argument>,
<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug_opt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rv_res</name> <init>= <expr><literal type="string">"NoMatch"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv_res</name> <operator>=</operator> <literal type="string">"Matched"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* %s %5d %3d %s\n"</literal></expr></argument>, <argument><expr><name>rv_res</name></expr></argument>,
<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_uid</name></name></expr></argument>, <argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name>plist</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PSKIP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pidfromfile</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name> <operator>!=</operator> <name>pidfromfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;ruidlist</argument>, <argument>li_chain</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_ruid</name></name> <operator>==</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ruidlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;rgidlist</argument>, <argument>li_chain</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_rgid</name></name> <operator>==</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rgidlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;euidlist</argument>, <argument>li_chain</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_uid</name></name> <operator>==</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>euidlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;ppidlist</argument>, <argument>li_chain</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_ppid</name></name> <operator>==</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ppidlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;pgrplist</argument>, <argument>li_chain</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pgid</name></name> <operator>==</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgrplist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;tdevlist</argument>, <argument>li_chain</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_CONTROLT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_tdev</name></name> <operator>==</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdevlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;sidlist</argument>, <argument>li_chain</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_sid</name></name> <operator>==</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sidlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;jidlist</argument>, <argument>li_chain</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_jid</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_jid</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jidlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>SLIST_FOREACH</name><argument_list>(<argument>li</argument>, <argument>&amp;classlist</argument>, <argument>li_chain</argument>)</argument_list></macro> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_flag</name></name> <operator>&amp;</operator> <name>P_SYSTEM</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_loginclass</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><call><name>SLIST_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>classlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ancestors</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <name>mypid</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pid</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name>plist</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PSKIP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_ppid</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nproc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name>mypid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getppid</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newest</name> <operator>||</operator> <name>oldest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>best_tval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>best_tval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bestidx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name>plist</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bestidx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>timercmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_tval</name></expr></argument>, <argument><expr><operator>&gt;</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldest</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newest</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>best_tval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>best_tval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ki_start</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bestidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>selected</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bestidx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>bestidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>did_action</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <name>plist</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PSKIP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>longfmt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pgrep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_action</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"kill -%d %d\n"</literal></expr></argument>, <argument><expr><name>signum</name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inverse</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>inverse</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>|=</operator> <call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&amp;&amp;</operator> <name>pgrep</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_action</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pgrep</name> <operator>&amp;&amp;</operator> <name>longfmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"No matching processes belonging to you were found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><name>STATUS_MATCH</name></expr> </then><else>: <expr><name>STATUS_NOMATCH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ustr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pgrep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ustr</name> <operator>=</operator> <literal type="string">"[-LSfilnoqvx] [-d delim]"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ustr</name> <operator>=</operator> <literal type="string">"[-signal] [-ILfilnovx]"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: %s %s [-F pidfile] [-G gid] [-M core] [-N system]\n"</literal>
<literal type="string">" [-P ppid] [-U uid] [-c class] [-g pgrp] [-j jail]\n"</literal>
<literal type="string">" [-s sid] [-t tty] [-u euid] pattern ...\n"</literal></expr></argument>,
<argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quiet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pgrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>longfmt</name> <operator>||</operator> <operator>!</operator><name>pgrep</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>matchargs</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>argv</name> <operator>=</operator> <call><name>kvm_getargv</name><argument_list>(<argument><expr><name>kd</name></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>argv</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>longfmt</name> <operator>||</operator> <operator>!</operator><name>pgrep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>killact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"kill "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_process</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>!=</operator> <literal type="char">'Y'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>, <argument><expr><name>signum</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ESRCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"signalling pid %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>kp</name><operator>-&gt;</operator><name>ki_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>grepact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>kinfo_proc</name></name> <modifier>*</modifier></type><name>kp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>show_process</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>makelist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listhead</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>listtype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>gr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty</name></decl>;</decl_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>li</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>li</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate %zu bytes"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>li</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SLIST_INSERT_HEAD</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>li</name></expr></argument>, <argument><expr><name>li_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>LT_CLASS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>LT_CLASS</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LT_PGRP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <call><name>getpgrp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LT_SID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <call><name>getsid</name><argument_list>(<argument><expr><name>mypid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LT_JAIL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>,
<argument><expr><literal type="string">"Negative jail ID `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LT_TTY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>,
<argument><expr><literal type="string">"Negative /dev/pts tty `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_PATH_DEV</name> <literal type="string">"pts/%s"</literal></expr></argument>,
<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>foundtty</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>, <argument><expr><literal type="string">"No such tty: `"</literal>
<name>_PATH_DEV</name> <literal type="string">"pts/%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot access `"</literal>
<name>_PATH_DEV</name> <literal type="string">"pts/%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LT_USER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pw</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>, <argument><expr><literal type="string">"Unknown user `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <name><name>pw</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LT_GROUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>gr</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>, <argument><expr><literal type="string">"Unknown group `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <name><name>gr</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LT_TTY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"co"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="string">"console"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_PATH_DEV</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>foundtty</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_PATH_DEV</name> <literal type="string">"tty%s"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>foundtty</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>, <argument><expr><literal type="string">"No such tty: `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot access `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>foundtty</name>:</label> <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFCHR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>, <argument><expr><literal type="string">"Not a tty: `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_rdev</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LT_JAIL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>jid</name> <operator>=</operator> <call><name>jail_getid</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <name>jid</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_BADUSAGE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid jail ID or name `%s'"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LT_CLASS</name></expr>:</case>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>takepid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pidfilelock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>, <decl><type ref="prev"/><name><name>line</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pidfile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open pidfile `%s'"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pidfilelock</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>flock</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LOCK_EX</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"File '%s' can be locked"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error while locking file '%s'"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Pidfile `%s' is empty"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot read from pid file `%s'"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>endp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pid in file `%s'"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>rval</name> <argument_list type="generic">&lt; <argument><expr><name>MIN_PID</name> <operator>||</operator> <name>rval</name></expr></argument> &gt;</argument_list></name> <name>MAX_PID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>STATUS_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pid in file `%s'"</literal></expr></argument>, <argument><expr><name>pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
