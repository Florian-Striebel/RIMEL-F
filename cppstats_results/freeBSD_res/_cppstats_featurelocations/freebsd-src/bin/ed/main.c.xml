<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ed/main.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static const char copyright[] =
"@(#) Copyright (c) 1993 Andrew Moore, Talke Studio. \n\
All rights reserved.\n";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ed.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>sigjmp_buf</name></type> <name>env</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>jmp_buf</name></type> <name>env</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>char</name></type> <name><name>stdinbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>shcmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shcmdsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shcmdi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ibuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ibufsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ibufp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>garrulous</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isbinary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isglobal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mutex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>red</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scripted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sigflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sigactive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>old_filename</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>current_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>addr_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dps</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usage</name> <init>= <expr><literal type="string">"usage: %s [-] [-sx] [-p string] [file]\n"</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier> <specifier>volatile</specifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>red</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
<label><name>top</name>:</label>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"p:sx"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>scripted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"crypt unavailable\n?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>, <argument><expr><ternary><condition><expr><name>red</name></expr> ?</condition><then> <expr><literal type="string">"red"</literal></expr> </then><else>: <expr><literal type="string">"ed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content></block></while>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>argv</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scripted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>top</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>handle_winch</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>handle_winch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_hup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>sigsetjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>setjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n?\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"interrupt"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>init_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sigactive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <call><name>is_legal_filename</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_file</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>argv</name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>old_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>old_filename</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"?\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>argv</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid filename"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>garrulous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prompt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>get_tty_line</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ERR</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>modified</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>scripted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"?\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"warning: file modified"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>garrulous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"script, line %d: %s\n"</literal></expr></argument>,
<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>EMOD</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ibuf</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected end-of-file"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ERR</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>isglobal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>extract_addr_range</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>status</name> <operator>=</operator> <call><name>exec_command</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name> <operator>||</operator>
<operator>(</operator><name>status</name> <operator>=</operator> <call><name>display_lines</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EOF</name></expr>:</case>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>EMOD</name></expr>:</case>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"?\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"warning: file modified"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>garrulous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"script, line %d: %s\n"</literal></expr></argument>,
<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FATAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>garrulous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"script, line %d: %s\n"</literal></expr></argument>,
<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>garrulous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"?\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>garrulous</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"script, line %d: %s\n"</literal></expr></argument>,
<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><name>long</name></type> <name>first_addr</name></decl>, <decl><type ref="prev"/><name>second_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>addr_cnt</name></decl>;</decl_stmt>



<function><type><name>int</name></type>
<name>extract_addr_range</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addr_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first_addr</name> <operator>=</operator> <name>second_addr</name> <operator>=</operator> <name>current_addr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>next_addr</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr_cnt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>first_addr</name> <operator>=</operator> <name>second_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>second_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ibufp</name><operator>++</operator> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr_cnt</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>addr_cnt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>second_addr</name> <operator>!=</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_addr</name> <operator>=</operator> <name>second_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>addr</name> <operator>==</operator> <name>ERR</name><operator>)</operator></expr> ?</condition><then> <expr><name>ERR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_BLANKS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>while (isspace((unsigned char)*ibufp) &amp;&amp; *ibufp != '\n') ibufp++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_BE_FIRST</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (!first) { errmsg = "invalid address"; return ERR; } } while (0)</cpp:value></cpp:define>







<function><type><name>long</name></type>
<name>next_addr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>addr</name> <init>= <expr><name>current_addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SKIP_BLANKS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hd</name> <operator>=</operator> <name>ibufp</name></expr>;</init><condition>;</condition> <incr><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ibufp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_BLANKS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ibufp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRTOL</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>ibufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>n</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><call><name>MUST_BE_FIRST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRTOL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ibufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><call><name>MUST_BE_FIRST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>current_addr</name></expr> </then><else>: <expr><name>addr_last</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><call><name>MUST_BE_FIRST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>get_matching_node_addr</name><argument_list>(
<argument><expr><call><name>get_compiled_pattern</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>ibufp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><call><name>MUST_BE_FIRST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>get_marked_node_addr</name><argument_list>(<argument><expr><operator>*</operator><name>ibufp</name><operator>++</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<case>case <expr><literal type="char">';'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_cnt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>second_addr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>current_addr</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>next_addr</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name>addr_last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>ibufp</name> <operator>==</operator> <name>hd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>addr_last</name> <operator>&lt;</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>addr</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></switch></block_content></block></for>

</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_THIRD_ADDR</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ long ol1, ol2; ol1 = first_addr, ol2 = second_addr; if (extract_addr_range() &lt; 0) return ERR; else if (addr_cnt == 0) { errmsg = "destination expected"; return ERR; } else if (second_addr &lt; 0 || addr_last &lt; second_addr) { errmsg = "invalid address"; return ERR; } addr = second_addr; first_addr = ol1, second_addr = ol2; }</cpp:value></cpp:define>
















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_THIRD_ADDR</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ long ol1, ol2; ol1 = first_addr, ol2 = second_addr; if (extract_addr_range() &lt; 0) return ERR; if (second_addr &lt; 0 || addr_last &lt; second_addr) { errmsg = "invalid address"; return ERR; } addr = second_addr; first_addr = ol1, second_addr = ol2; }</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_COMMAND_SUFFIX</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ int done = 0; do { switch(*ibufp) { case 'p': gflag |= GPR, ibufp++; break; case 'l': gflag |= GLS, ibufp++; break; case 'n': gflag |= GNP, ibufp++; break; default: done++; } } while (!done); if (*ibufp++ != '\n') { errmsg = "invalid command suffix"; return ERR; } }</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGG</name></cpp:macro> <cpp:value>001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGP</name></cpp:macro> <cpp:value>002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGR</name></cpp:macro> <cpp:value>004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGF</name></cpp:macro> <cpp:value>010</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>patlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>rows</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>;</decl_stmt>



<function><type><name>int</name></type>
<name>exec_command</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>pattern_t</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sgflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>sgnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pattern_t</name> <modifier>*</modifier></type><name>tpat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gflag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SKIP_BLANKS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>append_lines</name><argument_list>(<argument><expr><name>second_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>delete_lines</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>append_lines</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>delete_lines</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>INC_MOD</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modified</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>scripted</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EMOD</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ibufp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected command suffix"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>fnp</name> <operator>=</operator> <call><name>get_filename</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>delete_lines</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close_sbuf</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>open_sbuf</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FATAL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fnp</name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>, <argument><expr><name>fnp</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnp</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no current filename"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>read_file</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>fnp</name></expr> ?</condition><then> <expr><name>fnp</name></expr> </then><else>: <expr><name>old_filename</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u_current_addr</name> <operator>=</operator> <name>u_addr_last</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ibufp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected command suffix"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>fnp</name> <operator>=</operator> <call><name>get_filename</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fnp</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid redirection"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>, <argument><expr><name>fnp</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strip_escapes</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>isglobal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"cannot nest global commands"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>build_active_list</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'G'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'G'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'V'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>isglobal</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>exec_global</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>gflag</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>garrulous</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>garrulous</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>second_addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>append_lines</name><argument_list>(<argument><expr><name>second_addr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>first_addr</name> <operator>!=</operator> <name>second_addr</name> <operator>&amp;&amp;</operator>
<call><name>join_lines</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>second_addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mark_line_node</name><argument_list>(<argument><expr><call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>second_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>display_lines</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>, <argument><expr><name>gflag</name> <operator>|</operator> <name>GLS</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_THIRD_ADDR</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_addr</name> <operator>&lt;=</operator> <name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>second_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid destination"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>move_lines</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>display_lines</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>, <argument><expr><name>gflag</name> <operator>|</operator> <name>GNP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>display_lines</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>, <argument><expr><name>gflag</name> <operator>|</operator> <name>GPR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <ternary><condition><expr><name>prompt</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><ternary><condition><expr><name>optarg</name></expr> ?</condition><then> <expr><name>optarg</name></expr> </then><else>: <expr><name>dps</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>modified</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>scripted</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'q'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>EMOD</name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ibufp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected command suffix"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>addr_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>second_addr</name> <operator>=</operator> <name>addr_last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fnp</name> <operator>=</operator> <call><name>get_filename</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>fnp</name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>, <argument><expr><name>fnp</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnp</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no current filename"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>read_file</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>fnp</name></expr> ?</condition><then> <expr><name>fnp</name></expr> </then><else>: <expr><name>old_filename</name></expr></else></ternary></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name>addr_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<do>do <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>ibufp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name>sflags</name> <operator>|=</operator><name>SGF</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name>sflags</name> <operator>|=</operator> <name>SGG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>sflags</name> <operator>|=</operator> <name>SGP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>sflags</name> <operator>|=</operator> <name>SGR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRTOL</name><argument_list>(<argument><expr><name>sgnum</name></expr></argument>, <argument><expr><name>ibufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sflags</name> <operator>|=</operator> <name>SGF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sgflag</name> <operator>&amp;=</operator> <operator>~</operator><name>GSG</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>sflags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid command suffix"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><name>sflags</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>sflags</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no previous substitution"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sflags</name> <operator>&amp;</operator> <name>SGG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sgnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ibufp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid pattern delimiter"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tpat</name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>sflags</name> <operator>||</operator> <operator>(</operator><name>sflags</name> <operator>&amp;</operator> <name>SGR</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>tpat</name> <operator>=</operator> <call><name>get_compiled_pattern</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tpat</name> <operator>!=</operator> <name>pat</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>tpat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>patlock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sflags</name> <operator>&amp;&amp;</operator> <call><name>extract_subst_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sgflag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sgnum</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sgflag</name> <operator>|=</operator> <name>GLB</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sgflag</name> <operator>&amp;=</operator> <operator>~</operator><name>GLB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sflags</name> <operator>&amp;</operator> <name>SGG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sgflag</name> <operator>^=</operator> <name>GSG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sflags</name> <operator>&amp;</operator> <name>SGP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sgflag</name> <operator>^=</operator> <name>GPR</name></expr><operator>,</operator> <expr><name>sgflag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>GLS</name> <operator>|</operator> <name>GNP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>ibufp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>sgflag</name> <operator>|=</operator> <name>GPR</name></expr><operator>,</operator> <expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>sgflag</name> <operator>|=</operator> <name>GLS</name></expr><operator>,</operator> <expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>sgflag</name> <operator>|=</operator> <name>GNP</name></expr><operator>,</operator> <expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>search_and_replace</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>sgflag</name></expr></argument>, <argument><expr><name>sgnum</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_THIRD_ADDR</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>copy_lines</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pop_undo_stack</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>)</operator> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ibufp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected command suffix"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>fnp</name> <operator>=</operator> <call><name>get_filename</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>addr_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_addr</name> <operator>=</operator> <name>second_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>fnp</name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>, <argument><expr><name>fnp</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fnp</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no current filename"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>write_file</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>fnp</name></expr> ?</condition><then> <expr><name>fnp</name></expr> </then><else>: <expr><name>old_filename</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">"w"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>first_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>addr</name> <operator>==</operator> <name>addr_last</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fnp</name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>modified</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>scripted</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <name>EMOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"crypt unavailable"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>first_addr</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>current_addr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>first_addr</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>current_addr</name> <operator>+</operator> <operator>!</operator><name>isglobal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;</operator> <operator>*</operator><name>ibufp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ibufp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRTOL</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>ibufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>display_lines</name><argument_list>(<argument><expr><name>second_addr</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>addr_last</name></expr></argument>,
<argument><expr><name>second_addr</name> <operator>+</operator> <name>rows</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gflag</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>addr_cnt</name></expr> ?</condition><then> <expr><name>second_addr</name></expr> </then><else>: <expr><name>addr_last</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unexpected address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sflags</name> <operator>=</operator> <call><name>get_shell_command</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_COMMAND_SUFFIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sflags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>shcmd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>shcmd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scripted</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<decl_stmt><expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>first_addr</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>current_addr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>check_addr_range</name><argument_list>(<argument><expr><name>first_addr</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>current_addr</name> <operator>+</operator> <operator>!</operator><name>isglobal</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <call><name>display_lines</name><argument_list>(<argument><expr><name>second_addr</name></expr></argument>, <argument><expr><name>second_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
break</condition><empty_stmt>;</empty_stmt></if></if_stmt>
<default>default:</default>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"unknown command"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>gflag</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>check_addr_range</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_addr</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>second_addr</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>first_addr</name> <operator>&gt;</operator> <name>second_addr</name> <operator>||</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>first_addr</name> <operator>||</operator>
<name>second_addr</name> <operator>&gt;</operator> <name>addr_last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>long</name></type>
<name>get_matching_node_addr</name><parameter_list>(<parameter><decl><type><name>pattern_t</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><name>current_addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pat</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><call><name>INC_MOD</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>DEC_MOD</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>get_sbuf_line</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isbinary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NUL_TO_NEWLINE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regexec</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>n</name> <operator>!=</operator> <name>current_addr</name></expr>)</condition>;</do>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no match"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_filename</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>filesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_BLANKS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid filename"</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ibufp</name> <operator>=</operator> <call><name>get_extended_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>get_shell_command</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>shcmd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>shcmd</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>PATH_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"filename too long"</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no current filename"</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>filesz</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>file</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>is_legal_filename</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>file</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>get_shell_command</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>red</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"shell access restricted"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name>ibufp</name> <operator>=</operator> <call><name>get_extended_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>ibufp</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ibufp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ibufp</name><operator>++</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ibufp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>shcmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>shcmd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if type="elseif">else if <condition>(<expr><name>shcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no previous command"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>shcmdi</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>shcmd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>shcmd</name> <operator>+</operator> <name>shcmdi</name></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>old_filename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no current filename"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name> <operator>=</operator> <call><name>strip_escapes</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></while>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>shcmd</name></expr></argument>, <argument><expr><name>shcmdsz</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>shcmd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shcmd</name><index>[<expr><name>shcmdi</name> <operator>=</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>append_lines</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><name>ibuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>undo_t</name> <modifier>*</modifier></type><name>up</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>current_addr</name> <operator>=</operator> <name>n</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>get_tty_line</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ibuf</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>l</name></expr> ?</condition><then> <expr><name>EOF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <name>ibuf</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>lp</name> <operator>=</operator> <name>ibufp</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>ibufp</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>ibufp</name> <operator>-</operator> <name>lp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>lp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>eot</name> <operator>=</operator> <name>lp</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lp</name> <operator>=</operator> <call><name>put_sbuf_line</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>up</name> <operator>=</operator> <call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UADD</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>,
<argument><expr><name>current_addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>lp</name> <operator>!=</operator> <name>eot</name></expr>)</condition>;</do>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></function>



<function><type><name>int</name></type>
<name>join_lines</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><call><name>INC_MOD</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>bp</name> <operator>!=</operator> <name>ep</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>q_forw</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>get_sbuf_line</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name><name>bp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>bp</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>delete_lines</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>from</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_sbuf_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UADD</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>move_lines</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>b1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name>INC_MOD</name><argument_list>(<argument><expr><name>second_addr</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>p</name> <init>= <expr><name>first_addr</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><operator>(</operator><name>addr</name> <operator>==</operator> <name>first_addr</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>second_addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>second_addr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UMOV</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UMOV</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>INC_MOD</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&lt;</operator> <name>first_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>b2</name><operator>-&gt;</operator><name>q_forw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>q_forw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>a1</name><operator>-&gt;</operator><name>q_back</name></name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>addr</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>addr</name> <operator>&lt;</operator> <name>first_addr</name><operator>)</operator></expr> ?</condition><then>
<expr><name>second_addr</name> <operator>-</operator> <name>first_addr</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unset_active_nodes</name><argument_list>(<argument><expr><name><name>b2</name><operator>-&gt;</operator><name>q_forw</name></name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>copy_lines</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name> <init>= <expr><call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>first_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>undo_t</name> <modifier>*</modifier></type><name>up</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><name>second_addr</name> <operator>-</operator> <name>first_addr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_addr</name> <operator>&lt;=</operator> <name>addr</name> <operator>&amp;&amp;</operator> <name>addr</name> <operator>&lt;</operator> <name>second_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name>first_addr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>second_addr</name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>=</operator><name>m</name></expr><operator>,</operator> <expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>np</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>current_addr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>np</name> <operator>=</operator> <name><name>np</name><operator>-&gt;</operator><name>q_forw</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lp</name> <operator>=</operator> <call><name>dup_line_node</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_line_node</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>up</name> <operator>=</operator> <call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UADD</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>,
<argument><expr><name>current_addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>delete_lines</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UDEL</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><call><name>INC_MOD</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>from</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unset_active_nodes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>q_forw</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_last</name> <operator>-=</operator> <name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>from</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>display_lines</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gflag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>from</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid address"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><call><name>INC_MOD</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>bp</name> <operator>!=</operator> <name>ep</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>q_forw</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>get_sbuf_line</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_tty_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>current_addr</name> <operator>=</operator> <name>from</name><operator>++</operator></expr></argument>, <argument><expr><name>gflag</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMARK</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>line_t</name> <modifier>*</modifier></type><name><name>mark</name><index>[<expr><name>MAXMARK</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>markno</name></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>mark_line_node</name><parameter_list>(<parameter><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>islower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid mark character"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mark</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>markno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mark</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>long</name></type>
<name>get_marked_node_addr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>islower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"invalid mark character"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>get_line_node_addr</name><argument_list>(<argument><expr><name><name>mark</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>unmark_line_node</name><parameter_list>(<parameter><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>markno</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAXMARK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>markno</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><name>line_t</name> <modifier>*</modifier></type>
<name>dup_line_node</name><parameter_list>(<parameter><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>np</name> <operator>=</operator> <operator>(</operator><name>line_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"out of memory"</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>seek</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<return>return <expr><name>np</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>has_trailing_escape</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <name>t</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>!</operator><call><name>has_trailing_escape</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>char</name> <modifier>*</modifier></type>
<name>strip_escapes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>filesz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>filesz</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>filesz</name> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>file</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><operator>++</operator><name>s</name></expr> </then><else>: <expr><operator>*</operator><name>s</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>signal_hup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sigflags</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>signo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_hup</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>signal_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sigflags</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>signo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_int</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>handle_hup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ed_hup</name><index>[]</index></name> <init>= <expr><literal type="string">"ed.hup"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sigactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sigflags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>signo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr_last</name> <operator>&amp;&amp;</operator> <call><name>write_file</name><argument_list>(<argument><expr><name>ed_hup</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>PATH_MAX</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>hup</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>hup</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hup</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hup</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr><operator>,</operator> <expr><name><name>hup</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>hup</name></expr></argument>, <argument><expr><literal type="string">"ed.hup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>hup</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>handle_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sigactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sigflags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>signo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>siglongjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>handle_winch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sigflags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>signo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>is_legal_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"shell access restricted"</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
