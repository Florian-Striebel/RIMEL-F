<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ed/sub.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ed.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rhbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rhbufsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rhbufi</name></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>extract_subst_tail</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>np</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>delimiter</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <operator>*</operator><name>np</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>delimiter</name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rhbufi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>GPR</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>extract_subst_template</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>GPR</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>==</operator> <name>delimiter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="char">'1'</literal> <operator>&lt;=</operator> <operator>*</operator><name>ibufp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ibufp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRTOL</name><argument_list>(<argument><expr><operator>*</operator><name>np</name></expr></argument>, <argument><expr><name>ibufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>GSG</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>extract_subst_template</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>delimiter</name> <init>= <expr><operator>*</operator><name>ibufp</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ibufp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>delimiter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ibufp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rhbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no previous substitution"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rhbuf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ibufp</name> <operator>!=</operator> <name>delimiter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rhbuf</name></expr></argument>, <argument><expr><name>rhbufsz</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>rhbuf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ibufp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>ibufp</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>rhbuf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ibufp</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>isglobal</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>get_tty_line</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ibuf</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rhbuf</name></expr></argument>, <argument><expr><name>rhbufsz</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rhbuf</name><index>[<expr><name>rhbufi</name> <operator>=</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>rhbuf</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rbufsz</name></decl>;</decl_stmt>



<function><type><name>int</name></type>
<name>search_and_replace</name><parameter_list>(<parameter><decl><type><name>pattern_t</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gflag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>undo_t</name> <modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>xa</name> <init>= <expr><name>current_addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsubs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>first_addr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lc</name> <operator>&lt;=</operator> <name>second_addr</name> <operator>-</operator> <name>first_addr</name></expr>;</condition> <incr><expr><name>lc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><operator>++</operator><name>current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>substitute_matching_text</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>gflag</name></expr></argument>, <argument><expr><name>kth</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>up</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>delete_lines</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <name>rbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eot</name> <operator>=</operator> <name>rbuf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>txt</name> <operator>=</operator> <call><name>put_sbuf_line</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>up</name> <operator>=</operator> <call><name>push_undo_stack</name><argument_list>(<argument><expr><name>UADD</name></expr></argument>,
<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>txt</name> <operator>!=</operator> <name>eot</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsubs</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xa</name> <operator>=</operator> <name>current_addr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsubs</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>gflag</name> <operator>&amp;</operator> <name>GLB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"no match"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>gflag</name> <operator>&amp;</operator> <operator>(</operator><name>GPR</name> <operator>|</operator> <name>GLS</name> <operator>|</operator> <name>GNP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>display_lines</name><argument_list>(<argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>current_addr</name></expr></argument>, <argument><expr><name>gflag</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>substitute_matching_text</name><parameter_list>(<parameter><decl><type><name>pattern_t</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gflag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matchno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>rm</name><index>[<expr><name>SE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>txt</name> <operator>=</operator> <call><name>get_sbuf_line</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isbinary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NUL_TO_NEWLINE</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>lp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>eot</name> <operator>=</operator> <name>txt</name> <operator>+</operator> <name><name>lp</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regexec</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>SE_MAX</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kth</name> <operator>||</operator> <name>kth</name> <operator>==</operator> <operator>++</operator><name>matchno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>changed</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isbinary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NEWLINE_TO_NUL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rbuf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>off</name> <operator>=</operator> <call><name>apply_subst_template</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>re_nsub</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isbinary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NEWLINE_TO_NUL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rbuf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>txt</name> <operator>+=</operator> <name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>txt</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>changed</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>gflag</name> <operator>&amp;</operator> <name>GSG</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>regexec</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>SE_MAX</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>REG_NOTBOL</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>eot</name> <operator>-</operator> <name>txt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>gflag</name> <operator>&amp;</operator> <name>GSG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"infinite substitution loop"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>isbinary</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NEWLINE_TO_NUL</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rbuf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rbuf</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>changed</name></expr> ?</condition><then> <expr><name>off</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>apply_subst_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>boln</name></decl></parameter>, <parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>re_nsub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>rhbuf</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>sub</name> <operator>-</operator> <name>rhbuf</name> <operator>&lt;</operator> <name>rhbufi</name></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sub</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rbuf</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>boln</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>sub</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <literal type="char">'1'</literal> <operator>&lt;=</operator> <operator>*</operator><operator>++</operator><name>sub</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sub</name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>n</name> <operator>=</operator> <operator>*</operator><name>sub</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;=</operator> <name>re_nsub</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>rm</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rm</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_eo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rbuf</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>boln</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbuf</name><index>[<expr><name>off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>sub</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>REALLOC</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbufsz</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbuf</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>
</unit>
