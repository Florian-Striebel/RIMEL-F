<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/bin/ed/undo.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ed.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>undo_t</name> <modifier>*</modifier></type><name>ustack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>usize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>u_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function><type><name>undo_t</name> <modifier>*</modifier></type>
<name>push_undo_stack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>undo_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NO_REALLOC_NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ustack</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ustack</name> <operator>=</operator> <operator>(</operator><name>undo_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>usize</name> <operator>=</operator> <name>USIZE</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>undo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"out of memory"</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ustack</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u_p</name> <operator>&lt;</operator> <name>usize</name> <operator>||</operator>
<operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator><name>undo_t</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>ustack</name></expr></argument>, <argument><expr><operator>(</operator><name>usize</name> <operator>+=</operator> <name>USIZE</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>undo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ustack</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ustack</name><index>[<expr><name>u_p</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ustack</name><index>[<expr><name>u_p</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ustack</name><index>[<expr><name>u_p</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <call><name>get_addressed_line_node</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ustack</name> <operator>+</operator> <name>u_p</name><operator>++</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"out of memory"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_undo_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ustack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ustack</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>usize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USWAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ undo_t utmp; utmp = x, x = y, y = utmp; }</cpp:value></cpp:define>





<decl_stmt><decl><type><name>long</name></type> <name>u_current_addr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>u_addr_last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>pop_undo_stack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>o_current_addr</name> <init>= <expr><name>current_addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>o_addr_last</name> <init>= <expr><name>addr_last</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u_current_addr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>u_addr_last</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">"nothing to undo"</literal></expr>;</expr_stmt>
<return>return <expr><name>ERR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>u_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_addressed_line_node</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>u_p</name></expr>;</init> <condition><expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UADD</name></expr>:</case>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>-&gt;</operator><name>q_back</name></name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>t</name><operator>-&gt;</operator><name>q_forw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UDEL</name></expr>:</case>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>-&gt;</operator><name>q_back</name></name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>t</name><operator>-&gt;</operator><name>q_forw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UMOV</name></expr>:</case>
<case>case <expr><name>VMOV</name></expr>:</case>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>-&gt;</operator><name>q_forw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>t</name><operator>-&gt;</operator><name>q_back</name></name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUE</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>u_p</name></expr>;</init> <condition><expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <operator>(</operator><name>u_p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator> <literal type="number">2</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>USWAP</name><argument_list>(<argument><expr><name><name>ustack</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ustack</name><index>[<expr><name>u_p</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>isglobal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_active_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current_addr</name> <operator>=</operator> <name>u_current_addr</name></expr><operator>,</operator> <expr><name>u_current_addr</name> <operator>=</operator> <name>o_current_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_last</name> <operator>=</operator> <name>u_addr_last</name></expr><operator>,</operator> <expr><name>u_addr_last</name> <operator>=</operator> <name>o_addr_last</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPL0</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>clear_undo_stack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>line_t</name> <modifier>*</modifier></type><name>lp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tl</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>u_p</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ustack</name><index>[<expr><name>u_p</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>UDEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>ustack</name><index>[<expr><name>u_p</name></expr>]</index></name><operator>.</operator><name><name>t</name><operator>-&gt;</operator><name>q_forw</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>ustack</name><index>[<expr><name>u_p</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</init> <condition><expr><name>lp</name> <operator>!=</operator> <name>ep</name></expr>;</condition> <incr><expr><name>lp</name> <operator>=</operator> <name>tl</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>unmark_line_node</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <name><name>lp</name><operator>-&gt;</operator><name>q_forw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><name>u_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u_current_addr</name> <operator>=</operator> <name>current_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u_addr_last</name> <operator>=</operator> <name>addr_last</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
