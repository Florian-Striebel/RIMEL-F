<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/usr.sbin/zfsd/callout.h">













































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CALLOUT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CALLOUT_H_</name></cpp:macro></cpp:define>




<typedef>typedef <function_decl><type><name>void</name></type> <name>CalloutFunc_t</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>












<decl_stmt><decl><type><name>class</name></type> <name>Callout</name>
<block>{<block_content>
<label><name>public</name>:</label>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Init</name><parameter_list>()</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AlarmSignalHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ExpireCallouts</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><call><name>Callout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>IsActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>IsPending</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><name>bool</name></type> <name>Stop</name><parameter_list>()</parameter_list>;</function_decl>
















<function_decl><type><name>bool</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>timeval</name> <modifier>&amp;</modifier></type><name>interval</name></decl></parameter>, <parameter><decl><type><name>CalloutFunc_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>










<expr_stmt><expr><name>timeval</name> <macro><name>TimeRemaining</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>




<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Callout</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>s_activeCallouts</name></expr>;</expr_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>s_alarmFired</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>timeval</name></type> <name>m_interval</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_arg</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>CalloutFunc_t</name> <modifier>*</modifier></type><name>m_func</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>m_pending</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>bool</name>
<name>Callout</name><operator>::</operator><macro><name>IsPending</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_pending</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><specifier>inline</specifier>
<name>Callout</name><operator>::</operator><call><name>Callout</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>m_arg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>m_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>m_pending</name><argument_list>(<argument>false</argument>)</argument_list></macro>
<expr><block>{
<expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_interval</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
