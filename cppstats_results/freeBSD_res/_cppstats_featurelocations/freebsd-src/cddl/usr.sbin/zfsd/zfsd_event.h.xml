<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/usr.sbin/zfsd/zfsd_event.h">
















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ZFSD_EVENT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ZFSD_EVENT_H_</name></cpp:macro></cpp:define>


<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>string</name></expr>;</expr_stmt>


<struct_decl>struct <name>zpool_handle</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>zpool_handle</name></name></type> <name>zpool_handle_t</name>;</typedef>

<struct_decl>struct <name>nvlist</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>nvlist</name></name></type> <name>nvlist_t</name>;</typedef>


<decl_stmt><decl><type><name>class</name></type> <name>ZfsEvent</name> <range>: <expr><name>public</name> <name>DevdCtl</name><operator>::</operator><name>ZfsEvent</name>
<block>{
<expr><name>public</name><operator>:</operator>

<specifier>static</specifier> <name>BuildMethod</name> <name>Builder</name></expr>;

<expr><name>virtual</name> <name>DevdCtl</name><operator>::</operator><name>Event</name> <operator>*</operator><macro><name>DeepCopy</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>virtual</name> <name>bool</name> <macro><name>Process</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>

<call><name>ZfsEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ZfsEvent</name> <operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;


<expr><call><name>ZfsEvent</name><argument_list>(<argument><expr><name>Type</name></expr></argument>, <argument><expr><name>DevdCtl</name><operator>::</operator><name>NVPairMap</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;





<expr><name>virtual</name> <name>void</name> <macro><name>CleanupSpares</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>ProcessPoolEvent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><specifier>static</specifier> <name>VdevCallback_t</name> <name>TryDetach</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>GeomEvent</name> <range>: <expr><name>public</name> <name>DevdCtl</name><operator>::</operator><name>GeomEvent</name>
<block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>BuildMethod</name> <name>Builder</name></expr>;

<expr><name>virtual</name> <name>DevdCtl</name><operator>::</operator><name>Event</name> <operator>*</operator><macro><name>DeepCopy</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>Process</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>

<call><name>GeomEvent</name><argument_list>(<argument><expr><specifier>const</specifier> <name>GeomEvent</name> <operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;


<expr><call><name>GeomEvent</name><argument_list>(<argument><expr><name>Type</name></expr></argument>, <argument><expr><name>DevdCtl</name><operator>::</operator><name>NVPairMap</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;















<expr><specifier>static</specifier> <name>bool</name> <call><name>OnlineByLabel</name><argument_list>(<argument><expr><specifier>const</specifier> <name>string</name> <operator>&amp;</operator><name>devPath</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>string</name><operator>&amp;</operator> <name>physPath</name></expr></argument>,
<argument><expr><name>nvlist_t</name> <operator>*</operator><name>devConfig</name></expr></argument>)</argument_list></call></expr>;













<expr><specifier>static</specifier> <name>nvlist_t</name> <operator>*</operator><macro><name>ReadLabel</name><argument_list>(<argument>int devFd</argument>, <argument>bool &amp;inUse</argument>, <argument>bool &amp;degraded</argument>)</argument_list></macro></expr>;

}</block></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
