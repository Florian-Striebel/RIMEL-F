<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/usr.sbin/zfsd/zfsd.h">
























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ZFSD_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ZFSD_H_</name></cpp:macro></cpp:define>


<struct_decl>struct <name>pidfh</name>;</struct_decl>

<struct_decl>struct <name>zpool_handle</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>zpool_handle</name></name></type> <name>zpool_handle_t</name>;</typedef>

<struct_decl>struct <name>zfs_handle</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>libzfs_handle</name></name></type> <name>libzfs_handle_t</name>;</typedef>

<struct_decl>struct <name>nvlist</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>nvlist</name></name></type> <name>nvlist_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>LeafIterFunc</name><parameter_list>(<parameter><decl><type><name>zpool_handle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>nvlist_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>g_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>libzfs_handle_t</name> <modifier>*</modifier></type><name>g_zfsHandle</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ZfsDaemon</name> <range>: <expr><name>public</name> <name>DevdCtl</name><operator>::</operator><name>Consumer</name>
<block>{
<expr><name>public</name><operator>:</operator>

<specifier>static</specifier> <name>ZfsDaemon</name> <operator>&amp;</operator><call><name>Get</name><argument_list>()</argument_list></call></expr>;






<expr><specifier>static</specifier> <name>void</name> <call><name>WakeEventLoop</name><argument_list>()</argument_list></call></expr>;






<expr><specifier>static</specifier> <name>void</name> <call><name>RequestSystemRescan</name><argument_list>()</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>void</name> <call><name>Run</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<call><name>ZfsDaemon</name><argument_list>()</argument_list></call></expr>;
<expr><operator>~</operator><call><name>ZfsDaemon</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>VdevCallback_t</name> <name>VdevAddCaseFile</name></expr>;


<expr><name>void</name> <call><name>PurgeCaseFiles</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>BuildCaseFiles</name><argument_list>()</argument_list></call></expr>;





<expr><name>void</name> <call><name>RescanSystem</name><argument_list>()</argument_list></call></expr>;






<expr><name>void</name> <call><name>DetectMissedEvents</name><argument_list>()</argument_list></call></expr>;




<expr><name>void</name> <call><name>EventLoop</name><argument_list>()</argument_list></call></expr>;







<expr><specifier>static</specifier> <name>void</name> <macro><name>InfoSignalHandler</name><argument_list>(<argument>int sigNum</argument>)</argument_list></macro></expr>;







<expr><specifier>static</specifier> <name>void</name> <macro><name>RescanSignalHandler</name><argument_list>(<argument>int sigNum</argument>)</argument_list></macro></expr>;







<expr><specifier>static</specifier> <name>void</name> <macro><name>QuitSignalHandler</name><argument_list>(<argument>int sigNum</argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name>void</name> <call><name>OpenPIDFile</name><argument_list>()</argument_list></call></expr>;




<expr><specifier>static</specifier> <name>void</name> <call><name>UpdatePIDFile</name><argument_list>()</argument_list></call></expr>;




<expr><specifier>static</specifier> <name>void</name> <call><name>ClosePIDFile</name><argument_list>()</argument_list></call></expr>;




<expr><specifier>static</specifier> <name>void</name> <call><name>InitializeSyslog</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>static</specifier> <name>ZfsDaemon</name> <operator>*</operator><name>s_theZfsDaemon</name></expr>;





<expr><specifier>static</specifier> <name>bool</name> <name>s_logCaseFiles</name></expr>;





<expr><specifier>static</specifier> <name>bool</name> <name>s_terminateEventLoop</name></expr>;




<expr><specifier>static</specifier> <name>char</name> <name><name>s_pidFilePath</name><index>[]</index></name></expr>;




<expr><specifier>static</specifier> <name>pidfh</name> <operator>*</operator><name>s_pidFH</name></expr>;





<expr><specifier>static</specifier> <name>int</name> <name><name>s_signalPipeFD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;






<expr><specifier>static</specifier> <name>bool</name> <name>s_systemRescanRequested</name></expr>;






<expr><specifier>static</specifier> <name>bool</name> <name>s_consumingEvents</name></expr>;

<expr><specifier>static</specifier> <name>DevdCtl</name><operator>::</operator><name>EventFactory</name><operator>::</operator><name>Record</name> <name><name>s_registryEntries</name><index>[]</index></name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
