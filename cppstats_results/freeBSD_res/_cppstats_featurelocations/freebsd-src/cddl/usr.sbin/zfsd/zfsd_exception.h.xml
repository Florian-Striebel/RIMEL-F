<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/usr.sbin/zfsd/zfsd_exception.h">












































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ZFSD_EXCEPTION_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ZFSD_EXCEPTION_H_</name></cpp:macro></cpp:define>


<struct_decl>struct <name>zpool_handle</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>zpool_handle</name></name></type> <name>zpool_handle_t</name>;</typedef>

<struct_decl>struct <name>nvlist</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>nvlist</name></name></type> <name>nvlist_t</name>;</typedef>






<decl_stmt><decl><type><name>class</name></type> <name>ZfsdException</name> <range>: <expr><name>public</name> <name>DevdCtl</name><operator>::</operator><name>Exception</name>
<block>{
<expr><name>public</name><operator>:</operator>






<call><name>ZfsdException</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;













<expr><call><name>ZfsdException</name><argument_list>(<argument><expr><name>zpool_handle_t</name> <operator>*</operator><name>pool</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;













<expr><call><name>ZfsdException</name><argument_list>(<argument><expr><name>nvlist_t</name> <operator>*</operator><name>poolConfig</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;




<expr><name>virtual</name> <name>void</name> <macro><name>Log</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>private</name><operator>:</operator>
<name>nvlist_t</name> <operator>*</operator><name>m_poolConfig</name></expr>;
<expr><name>nvlist_t</name> <operator>*</operator><name>m_vdevConfig</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
