<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/usr.sbin/zfsd/vdev.h">













































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_VDEV_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_VDEV_H_</name></cpp:macro></cpp:define>


<struct_decl>struct <name>zpool_handle</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>zpool_handle</name></name></type> <name>zpool_handle_t</name>;</typedef>

<struct_decl>struct <name>nvlist</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>nvlist</name></name></type> <name>nvlist_t</name>;</typedef>







<decl_stmt><decl><type><name>class</name></type> <name>Vdev</name>
<block>{<block_content>
<label><name>public</name>:</label>














<expr_stmt><expr><call><name>Vdev</name><argument_list>(<argument><expr><name>zpool_handle_t</name> <operator>*</operator><name>pool</name></expr></argument>, <argument><expr><name>nvlist_t</name> <operator>*</operator><name>vdevConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><call><name>Vdev</name><argument_list>(<argument><expr><name>nvlist_t</name> <operator>*</operator><name>poolConfig</name></expr></argument>, <argument><expr><name>nvlist_t</name> <operator>*</operator><name>vdevConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>Vdev</name><argument_list>(<argument><expr><name>nvlist_t</name> <operator>*</operator><name>vdevConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>Vdev</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Vdev</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>DoesNotExist</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Vdev</name></expr></argument>&gt;</argument_list></name> <call><name>Children</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>DevdCtl</name><operator>::</operator><name>Guid</name> <macro><name>GUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsSpare</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>DevdCtl</name><operator>::</operator><name>Guid</name> <macro><name>PoolGUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>vdev_state</name> <macro><name>State</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>Path</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>PhysicalPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GUIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>nvlist_t</name> <operator>*</operator><macro><name>PoolConfig</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>nvlist_t</name> <operator>*</operator><macro><name>Config</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>Vdev</name></type> <name>Parent</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>Vdev</name></type> <name>RootVdev</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>Name</name><argument_list>(<argument>zpool_handle_t *</argument>, <argument>bool verbose</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>IsSpare</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>bool</name> <macro><name>IsAvailableSpare</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsActiveSpare</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>IsResilvering</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>VdevLookupGuid</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>VdevLookupPoolGuid</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>m_poolGUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DevdCtl</name><operator>::</operator><name>Guid</name> <name>m_vdevGUID</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>nvlist_t</name> <modifier>*</modifier></type><name>m_poolConfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nvlist_t</name> <modifier>*</modifier></type><name>m_config</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>Vdev</name></type> <name>NonexistentVdev</name></decl>;</decl_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>Vdev</name><operator>::</operator><operator>~</operator><macro><name>Vdev</name><argument_list>()</argument_list></macro>
<block>{
}</block>

<specifier>inline</specifier> <name>DevdCtl</name><operator>::</operator><name>Guid</name>
<name>Vdev</name><operator>::</operator><macro><name>PoolGUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_poolGUID</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DevdCtl</name><operator>::</operator><name>Guid</name>
<name>Vdev</name><operator>::</operator><macro><name>GUID</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_vdevGUID</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>nvlist_t</name> <operator>*</operator>
<name>Vdev</name><operator>::</operator><macro><name>PoolConfig</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_poolConfig</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>nvlist_t</name> <operator>*</operator>
<name>Vdev</name><operator>::</operator><macro><name>Config</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_config</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name>
<name>Vdev</name><operator>::</operator><macro><name>DoesNotExist</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>(</operator><name>m_config</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
