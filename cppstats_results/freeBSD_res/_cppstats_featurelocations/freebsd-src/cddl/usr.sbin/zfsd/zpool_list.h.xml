<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/usr.sbin/zfsd/zpool_list.h">












































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ZPOOL_LIST_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ZPOOL_LIST_H_</name></cpp:macro></cpp:define>


<expr_stmt><expr><name>using</name> <name>std</name><operator>::</operator><name>string</name></expr>;</expr_stmt>


<struct_decl>struct <name>zpool_handle</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>zpool_handle</name></name></type> <name>zpool_handle_t</name>;</typedef>

<struct_decl>struct <name>nvlist</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>nvlist</name></name></type> <name>nvlist_t</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>Vdev</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ZpoolList</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>bool</name></type> <name>PoolFilter_t</name><parameter_list>(<parameter><decl><type><name>zpool_handle_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>nvlist_t</name> <modifier>*</modifier></type><name>poolConfig</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filterArg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<decl_stmt><decl><type><name>class</name></type> <name>ZpoolList</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>zpool_handle_t</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<block>{
<expr><name>public</name><operator>:</operator>





<specifier>static</specifier> <name>PoolFilter_t</name> <name>ZpoolAll</name></expr>;






<expr><specifier>static</specifier> <name>PoolFilter_t</name> <name>ZpoolByGUID</name></expr>;






<expr><specifier>static</specifier> <name>PoolFilter_t</name> <name>ZpoolByName</name></expr>;











<expr><call><name>ZpoolList</name><argument_list>(<argument><expr><name>PoolFilter_t</name> <operator>*</operator><name>filter</name> <operator>=</operator> <name>ZpoolAll</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>filterArg</name> <operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><call><name>ZpoolList</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>








<specifier>static</specifier> <name>int</name> <call><name>LoadIterator</name><argument_list>(<argument><expr><name>zpool_handle_t</name> <operator>*</operator><name>pool</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;




<expr><name>PoolFilter_t</name> <operator>*</operator><name>m_filter</name></expr>;





<expr><name>void</name> <operator>*</operator><name>m_filterArg</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
