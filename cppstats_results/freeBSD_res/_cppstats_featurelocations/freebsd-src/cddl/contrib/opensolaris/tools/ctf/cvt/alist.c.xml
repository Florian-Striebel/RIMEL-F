<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/alist.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIST_HASH_SIZE</name></cpp:macro> <cpp:value>997</cpp:value></cpp:define>

<struct>struct <name>alist</name> <block>{
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>al_elements</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>al_namefree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>al_valfree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>alist_el</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ale_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ale_value</name></decl>;</decl_stmt>
}</block></struct></type> <name>alist_el_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alist_hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>num</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>el</name><operator>-&gt;</operator><name>ale_name</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>num</name> <operator>%</operator> <name>nbuckets</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alist_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el1</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el2</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>el1</name><operator>-&gt;</operator><name>ale_name</name></name> <operator>!=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>el2</name><operator>-&gt;</operator><name>ale_name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>alist_t</name> <modifier>*</modifier></type>
<name>alist_xnew</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>namefree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>valfree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hashfn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpfn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alist</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>alist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name> <operator>=</operator> <call><name>hash_new</name><argument_list>(<argument><expr><name>nbuckets</name></expr></argument>, <argument><expr><name>hashfn</name></expr></argument>, <argument><expr><name>cmpfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alist</name><operator>-&gt;</operator><name>al_namefree</name></name> <operator>=</operator> <name>namefree</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alist</name><operator>-&gt;</operator><name>al_valfree</name></name> <operator>=</operator> <name>valfree</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>alist</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>alist_t</name> <modifier>*</modifier></type>
<name>alist_new</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>namefree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>valfree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>alist_xnew</name><argument_list>(<argument><expr><name>ALIST_HASH_SIZE</name></expr></argument>, <argument><expr><name>namefree</name></expr></argument>, <argument><expr><name>valfree</name></expr></argument>,
<argument><expr><name>alist_hash</name></expr></argument>, <argument><expr><name>alist_cmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>alist_free_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>alist</name><operator>-&gt;</operator><name>al_namefree</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>alist</name><operator>-&gt;</operator><name>al_namefree</name></name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>ale_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>alist</name><operator>-&gt;</operator><name>al_valfree</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>alist</name><operator>-&gt;</operator><name>al_valfree</name></name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>ale_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>alist_free</name><parameter_list>(<parameter><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hash_free</name><argument_list>(<argument><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name></expr></argument>, <argument><expr><name>alist_free_cb</name></expr></argument>, <argument><expr><name>alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>alist_add</name><parameter_list>(<parameter><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>

<expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>alist_el_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>ale_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>el</name><operator>-&gt;</operator><name>ale_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>alist_find</name><parameter_list>(<parameter><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_el_t</name></type> <name>template</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>retx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><operator>.</operator><name>ale_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hash_find</name><argument_list>(<argument><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>template</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retx</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>retx</name><operator>-&gt;</operator><name>ale_value</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>alist_iter_data</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>aid_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aid_priv</name></decl>;</decl_stmt>
}</block></struct></type> <name>alist_iter_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alist_iter_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alist_iter_data_t</name> <modifier>*</modifier></type><name>aid</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name><name>aid</name><operator>-&gt;</operator><name>aid_func</name></name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>ale_name</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>ale_value</name></name></expr></argument>, <argument><expr><name><name>aid</name><operator>-&gt;</operator><name>aid_priv</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>alist_iter</name><parameter_list>(<parameter><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>alist_iter_data_t</name></type> <name>aid</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aid</name><operator>.</operator><name>aid_func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aid</name><operator>.</operator><name>aid_priv</name></name> <operator>=</operator> <name>private</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>hash_iter</name><argument_list>(<argument><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name></expr></argument>, <argument><expr><name>alist_iter_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>alist_stats</name><parameter_list>(<parameter><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Alist statistics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_stats</name><argument_list>(<argument><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>alist_def_print_cb_key_int</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>alist_def_print_cb_value_int</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alist_def_print_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alist_def_print_cb_key_int</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Value: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alist_def_print_cb_value_int</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5lu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alist_dump_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>printer</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>private</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>alist_el_t</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printer</name><argument_list>(<argument><expr><name><name>el</name><operator>-&gt;</operator><name>ale_name</name></name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>ale_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>alist_dump</name><parameter_list>(<parameter><decl><type><name>alist_t</name> <modifier>*</modifier></type><name>alist</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>printer</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>printer</name> <operator>=</operator> <name>alist_def_print_cb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>hash_iter</name><argument_list>(<argument><expr><name><name>alist</name><operator>-&gt;</operator><name>al_elements</name></name></expr></argument>, <argument><expr><name>alist_dump_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>printer</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
