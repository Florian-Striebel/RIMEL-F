<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/hash.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>

<struct>struct <name>hash</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>h_nbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>h_buckets</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>h_hashfn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>h_cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>hash_data</name> <block>{
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hd_hash</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hd_fun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hd_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hd_private</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hd_ret</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_def_hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>data</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>data</name> <operator>%</operator> <name>nbuckets</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_def_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>d1</name> <operator>!=</operator> <name>d2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>hash_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>nbuckets</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>hash_t</name> <modifier>*</modifier></type>
<name>hash_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbuckets</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hashfn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>list_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nbuckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name> <operator>=</operator> <name>nbuckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>h_hashfn</name></name> <operator>=</operator> <ternary><condition><expr><name>hashfn</name></expr> ?</condition><then> <expr><name>hashfn</name></expr> </then><else>: <expr><name>hash_def_hash</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>h_cmp</name></name> <operator>=</operator> <ternary><condition><expr><name>cmp</name></expr> ?</condition><then> <expr><name>cmp</name></expr> </then><else>: <expr><name>hash_def_cmp</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>hash</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hash_add</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>hash</name><operator>-&gt;</operator><name>h_hashfn</name></name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_add_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>(</operator><name>hash_t</name> <operator>*</operator><operator>)</operator><name>private</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hash_merge</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_iter</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>hash_add_cb</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_remove_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name><name>hash</name><operator>-&gt;</operator><name>h_cmp</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hash_remove</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>hash</name><operator>-&gt;</operator><name>h_hashfn</name></name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>hash_remove_cb</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hash_match</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>hash</name><operator>-&gt;</operator><name>h_hashfn</name></name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>list_iter</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_find_list_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_data</name></name> <modifier>*</modifier></type><name>hd</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>hd</name><operator>-&gt;</operator><name>hd_hash</name><operator>-&gt;</operator><name>h_cmp</name></name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>hd_key</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cbrc</name> <operator>=</operator> <call><name><name>hd</name><operator>-&gt;</operator><name>hd_fun</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>hd</name><operator>-&gt;</operator><name>hd_private</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cbrc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name>cbrc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hash_find_iter</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><call><name><name>hash</name><operator>-&gt;</operator><name>h_hashfn</name></name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_data</name></name></type> <name>hd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_fun</name></name> <operator>=</operator> <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_private</name></name> <operator>=</operator> <name>private</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>list_iter</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>bucket</name></expr>]</index></name></expr></argument>, <argument><expr><name>hash_find_list_cb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_find_first_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_data</name></name> <modifier>*</modifier></type><name>hd</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>hd</name><operator>-&gt;</operator><name>hd_hash</name><operator>-&gt;</operator><name>h_cmp</name></name><argument_list>(<argument><expr><name><name>hd</name><operator>-&gt;</operator><name>hd_key</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hd</name><operator>-&gt;</operator><name>hd_ret</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hash_find</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_data</name></name></type> <name>hd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_fun</name></name> <operator>=</operator> <name>hash_find_first_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>hd_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hash_match</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash_find_first_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>hd</name><operator>.</operator><name>hd_ret</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hash_iter</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cumrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cbrc</name> <operator>=</operator> <call><name>list_iter</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fun</name></expr></argument>,
<argument><expr><name>private</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>cbrc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cumrc</name> <operator>+=</operator> <name>cbrc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>cumrc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hash_count</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>+=</operator> <call><name>list_count</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>num</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hash_free</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>datafree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>datafree</name></expr></argument>, <argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hash_stats</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name>list_count</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name>min</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><name>min</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d: %d\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>list_count</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>minidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Hash statistics:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Buckets: %d\n"</literal></expr></argument>, <argument><expr><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Items : %d\n"</literal></expr></argument>, <argument><expr><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Min/Max: %d in #%d, %d in #%d\n"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minidx</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Average: %5.2f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>tot</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>hash</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
