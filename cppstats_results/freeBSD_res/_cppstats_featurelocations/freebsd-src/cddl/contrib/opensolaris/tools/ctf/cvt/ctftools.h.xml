<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/ctftools.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CTFTOOLS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CTFTOOLS_H</name></cpp:macro></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ccompile.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LEVEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PARSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_PARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_STREAM</name></cpp:macro> <cpp:value>stderr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (b) : (a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (b) : (a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BYTE_ORDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing BYTE_ORDER defines"</cpp:literal></cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing _LITTLE_ENDIAN defines"</cpp:literal></cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing _BIG_ENDIAN defines"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_ELF_SCN_NAME</name></cpp:macro> <cpp:value>".SUNW_ctf"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_LABEL_LASTIDX</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_DEFAULT_LABEL</name></cpp:macro> <cpp:value>"*** No Label Provided ***"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDATA_LAYOUT_HASH_SIZE</name></cpp:macro> <cpp:value>8191</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDATA_ID_HASH_SIZE</name></cpp:macro> <cpp:value>997</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IIDESC_HASH_SIZE</name></cpp:macro> <cpp:value>8191</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCARG_DEF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>debug_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>debug_parse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>curhdr</name></decl>;</decl_stmt>





<typedef>typedef <type><struct>struct <name>stab</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_strx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>n_other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>n_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_value</name></decl>;</decl_stmt>
}</block></struct></type> <name>stab_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_GSYM</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_FUN</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_STSYM</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_LCSYM</name></cpp:macro> <cpp:value>0x28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_ROSYM</name></cpp:macro> <cpp:value>0x2c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_OPT</name></cpp:macro> <cpp:value>0x3c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_RSYM</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SO</name></cpp:macro> <cpp:value>0x64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_LSYM</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SOL</name></cpp:macro> <cpp:value>0x84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_PSYM</name></cpp:macro> <cpp:value>0xa0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_LBRAC</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_RBRAC</name></cpp:macro> <cpp:value>0xe0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_BINCL</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_EINCL</name></cpp:macro> <cpp:value>0xa2</cpp:value></cpp:define>









<typedef>typedef <type><enum>enum <name>stabtype</name> <block>{
<decl><name>STABTYPE_FIRST</name></decl>,
<decl><name>INTRINSIC</name></decl>,
<decl><name>POINTER</name></decl>,
<decl><name>ARRAY</name></decl>,
<decl><name>FUNCTION</name></decl>,
<decl><name>STRUCT</name></decl>,
<decl><name>UNION</name></decl>,
<decl><name>ENUM</name></decl>,
<decl><name>FORWARD</name></decl>,
<decl><name>TYPEDEF</name></decl>,
<decl><name>TYPEDEF_UNRES</name></decl>,
<decl><name>VOLATILE</name></decl>,
<decl><name>CONST</name></decl>,
<decl><name>RESTRICT</name></decl>,
<decl><name>STABTYPE_LAST</name></decl>
}</block></enum></type> <name>stabtype_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>tdesc</name></name></type> <name>tdesc_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ardef</name> <block>{
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>ad_contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>ad_idxtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>ad_nelems</name></decl>;</decl_stmt>
}</block></struct></type> <name>ardef_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>mlist</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ml_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ml_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ml_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tdesc</name></name> <modifier>*</modifier></type><name>ml_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>mlist_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>elist</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>el_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>el_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>elist</name></name> <modifier>*</modifier></type><name>el_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>elist_t</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>INTR_INT</name></decl>,
<decl><name>INTR_REAL</name></decl>
}</block></enum></type> <name>intrtype_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>intr</name> <block>{
<decl_stmt><decl><type><name>intrtype_t</name></type> <name>intr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intr_signed</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>char</name></type> <name>_iformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_fformat</name></decl>;</decl_stmt>
}</block> <decl><name>_u</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>intr_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intr_nbits</name></decl>;</decl_stmt>
}</block></struct></type> <name>intr_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>intr_iformat</name></cpp:macro> <cpp:value>_u._iformat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>intr_fformat</name></cpp:macro> <cpp:value>_u._fformat</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>fnarg</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fna_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tdesc</name></name> <modifier>*</modifier></type><name>fna_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>fnarg_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_F_GLOBAL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_F_VARARGS</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>fndef</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tdesc</name></name> <modifier>*</modifier></type><name>fn_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>fn_nargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>fn_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>fn_vargs</name></decl>;</decl_stmt>
}</block></struct></type> <name>fndef_t</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>tid_t</name>;</typedef>









<struct>struct <name>tdesc</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>t_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tid_t</name></type> <name>t_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>t_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stabtype_t</name></type> <name>t_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_size</name></decl>;</decl_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>intr_t</name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>tdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ardef_t</name> <modifier>*</modifier></type><name>ardef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mlist_t</name> <modifier>*</modifier></type><name>members</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>elist_t</name> <modifier>*</modifier></type><name>emem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fndef_t</name> <modifier>*</modifier></type><name>fndef</name></decl>;</decl_stmt>
}</block> <decl><name>t_data</name></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>t_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_vgen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_emark</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_intr</name></cpp:macro> <cpp:value>t_data.intr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_tdesc</name></cpp:macro> <cpp:value>t_data.tdesc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_ardef</name></cpp:macro> <cpp:value>t_data.ardef</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_members</name></cpp:macro> <cpp:value>t_data.members</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_emem</name></cpp:macro> <cpp:value>t_data.emem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t_fndef</name></cpp:macro> <cpp:value>t_data.fndef</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDESC_F_ISROOT</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDESC_F_GLOBAL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDESC_F_RESOLVED</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>






<typedef>typedef <type><enum>enum <name>iitype</name> <block>{
<decl><name>II_NOT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>II_GFUN</name></decl>,
<decl><name>II_SFUN</name></decl>,
<decl><name>II_GVAR</name></decl>,
<decl><name>II_SVAR</name></decl>,
<decl><name>II_PSYM</name></decl>,
<decl><name>II_SOU</name></decl>,
<decl><name>II_TYPE</name></decl>
}</block></enum></type> <name>iitype_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>iidesc</name> <block>{
<decl_stmt><decl><type><name>iitype_t</name></type> <name>ii_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ii_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>ii_dtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ii_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>ii_nargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ii_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ii_vargs</name></decl>;</decl_stmt>
}</block></struct></type> <name>iidesc_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IIDESC_F_USED</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>labelent</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>le_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>le_idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>labelent_t</name>;</typedef>





<typedef>typedef <type><struct>struct <name>tdata</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>td_curemark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>td_curvgen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>td_nextid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>td_iihash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>td_layouthash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_t</name> <modifier>*</modifier></type><name>td_idhash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>td_fwdlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>td_parlabel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>td_parname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>td_labels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>td_mergelock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>td_ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>tdata_t</name>;</typedef>







<typedef>typedef <type><struct>struct <name>iiburst</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>iib_nfuncs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iib_curfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>iib_funcs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iib_nobjts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iib_curobjt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iidesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>iib_objts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>iib_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iib_maxtypeid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>iib_td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tdtrav_data</name></name> <modifier>*</modifier></type><name>iib_tdtd</name></decl>;</decl_stmt>
}</block></struct></type> <name>iiburst_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ctf_buf</name></name></type> <name>ctf_buf_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>symit_data</name></name></type> <name>symit_data_t</name>;</typedef>


<function_decl><type><name>void</name></type> <name>cvt_fixstabs</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cvt_fixups</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>caddr_t</name></type> <name>ctf_gen</name><parameter_list>(<parameter><decl><type><name>iiburst_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>ctf_load</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>caddr_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iidesc_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>iidesc_hash</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>iter_iidescs_by_name</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iidesc_dup</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>iidesc_t</name> <modifier>*</modifier></type><name>iidesc_dup_rename</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>iidesc_add</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>iidesc_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>iidesc_count_type</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>iidesc_stats</name><parameter_list>(<parameter><decl><type><name>hash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>iidesc_dump</name><parameter_list>(<parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><enum>enum <name>source_types</name> <block>{
<decl><name>SOURCE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SOURCE_UNKNOWN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SOURCE_C</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>SOURCE_S</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>source_types_t</name>;</typedef>

<function_decl><type><name>source_types_t</name></type> <name>built_source_types</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>count_files</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>read_ctf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>read_ctf_save_cb</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>symit_new</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>symit_reset</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>symit_curfile</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>symit_next</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>symit_name</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>symit_free</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>merge_into_master</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_FUZZY_MATCH</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_USE_DYNSYM</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_COMPRESS</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_KEEP_STABS</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF_SWAP_BYTES</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>write_ctf</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>parse_init</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>parse_finish</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>parse_stab</name><parameter_list>(<parameter><decl><type><name>stab_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>iidesc_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>lookup</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>tdesc_t</name> <modifier>*</modifier></type><name>lookupname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>check_hash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resolve_typed_bitfields</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>stabs_read</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>dw_read</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dw_tag2str</name><parameter_list>(<parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>tdata_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdata_free</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdata_build_hashes</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdesc_name</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdesc_idhash</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdesc_idcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdesc_namehash</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdesc_namecmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdesc_layouthash</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdesc_layoutcmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdesc_free</name><parameter_list>(<parameter><decl><type><name>tdesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdata_label_add</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>labelent_t</name> <modifier>*</modifier></type><name>tdata_label_top</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tdata_label_find</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdata_label_free</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdata_merge</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tdata_label_newmax</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>streq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>findelfsecidx</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>elf_ptrsz</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>mktmpname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>terminate</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__NORETURN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>aborterr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <name>__NORETURN</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>set_terminate_cleanup</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>elfterminate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vadebug</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>watch_dump</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>watch_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
