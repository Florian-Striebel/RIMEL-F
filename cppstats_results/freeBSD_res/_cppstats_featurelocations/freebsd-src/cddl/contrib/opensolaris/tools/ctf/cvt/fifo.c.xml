<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/fifo.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>fifonode</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fifonode</name></name> <modifier>*</modifier></type><name>fn_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>fifonode_t</name>;</typedef>

<struct>struct <name>fifo</name> <block>{
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>f_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>f_tail</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>fifo_t</name> <modifier>*</modifier></type>
<name>fifo_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fifo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>f</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>fifo_add</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fifonode_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>f_tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>f_head</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>f_tail</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>f_tail</name><operator>-&gt;</operator><name>fn_next</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>f_tail</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type>
<name>fifo_remove</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fn</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>f_head</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>f_head</name></name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_next</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>f_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fifo_nullfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>void</name></type>
<name>fifo_free</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freefn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>f_head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>freefn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>freefn</name> <operator>=</operator> <name>fifo_nullfree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>freefn</name>)<argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fifo_len</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>fn</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>f_head</name></name></expr>;</init> <condition><expr><name>fn</name></expr>;</condition> <incr><expr><name>fn</name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fifo_empty</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>f_head</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fifo_iter</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>iter</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fifonode_t</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>fn</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>f_head</name></name></expr>;</init> <condition><expr><name>fn</name></expr>;</condition> <incr><expr><name>fn</name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>fn_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>iter</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>fn_data</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
