<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/tools/ctf/cvt/input.c">
























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctftools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"symbol.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> <name>read_cb_f</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<function><type><name>source_types_t</name></type>
<name>built_source_types</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>source_types_t</name></type> <name>types</name> <init>= <expr><name>SOURCE_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>si</name> <operator>=</operator> <call><name>symit_new</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SOURCE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>symit_next</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><name>STT_FILE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>symit_name</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>SOURCE_UNKNOWN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>SOURCE_C</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>SOURCE_S</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <name>SOURCE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>symit_free</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>types</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_file</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>read_cb_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>require_ctf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>ctfscn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>ctfdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctfscnidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctfscnidx</name> <operator>=</operator> <call><name>findelfsecidx</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".SUNW_ctf"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>require_ctf</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>built_source_types</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SOURCE_C</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"Input file %s was partially built from "</literal>
<literal type="string">"C sources, but no CTF data was present\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctfscn</name> <operator>=</operator> <call><name>elf_getscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>ctfscnidx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>ctfdata</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>ctfscn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Cannot read CTF section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>si</name> <operator>=</operator> <call><name>symit_new</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"%s has no symbol table - skipping"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>ctf_load</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>ctfdata</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>ctfdata</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tdata_build_hashes</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>symit_free</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>td</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>func</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_archive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>read_cb_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>require_ctf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>melf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Cmd</name></type> <name>cmd</name> <init>= <expr><name>ELF_C_READ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>arh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>melf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>elf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arh</name> <operator>=</operator> <call><name>elf_getarhdr</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Can't get archive header for "</literal>
<literal type="string">"member %d"</literal></expr></argument>, <argument><expr><name>secnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>memlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>memname</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>memlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>memname</name></expr></argument>, <argument><expr><name>memlen</name></expr></argument>, <argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ELF_K_AR</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>read_archive</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>melf</name></expr></argument>, <argument><expr><name>memname</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>require_ctf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ELF_K_ELF</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>read_file</name><argument_list>(<argument><expr><name>melf</name></expr></argument>, <argument><expr><name>memname</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>require_ctf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"%s: Unknown elf kind %d\n"</literal></expr></argument>,
<argument><expr><name>memname</name></expr></argument>, <argument><expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>elf_next</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>secnum</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>found</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_ctf_common</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>read_cb_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>require_ctf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Reading %s (label %s)\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>label</name></expr> ?</condition><then> <expr><name>label</name></expr> </then><else>: <expr><literal type="string">"NONE"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"%s: Cannot open for reading"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>elf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Cannot read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ELF_K_AR</name></expr>:</case>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>read_archive</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>require_ctf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ELF_K_ELF</name></expr>:</case>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>read_file</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>require_ctf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>terminate</name><argument_list>(<argument><expr><literal type="string">"%s: Unknown elf kind %d\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>found</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>read_ctf_save_cb</name><parameter_list>(<parameter><decl><type><name>tdata_t</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>name</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>retp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tdp</name> <init>= <expr><name>retp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>tdp</name> <operator>=</operator> <name>td</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>read_ctf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>read_cb_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>require_ctf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>read_ctf_common</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>private</name></expr></argument>, <argument><expr><name>require_ctf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>found</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>count_archive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>melf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Cmd</name></type> <name>cmd</name> <init>= <expr><name>ELF_C_READ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>arh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>melf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>elf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arh</name> <operator>=</operator> <call><name>elf_getarhdr</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Can't process input archive %s\n"</literal></expr></argument>,
<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nfiles</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>elf_next</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>melf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>nfiles</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>count_files</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nfiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Can't read input file %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>elf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Can't open input file %s: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ELF_K_AR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>count_archive</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nfiles</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ELF_K_ELF</name></expr>:</case>
<expr_stmt><expr><name>nfiles</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Input file %s is corrupt\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>elf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Found %d files in %d input files\n"</literal></expr></argument>, <argument><expr><name>nfiles</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>nfiles</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>symit_data</name> <block>{
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>si_shdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>si_symd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>si_strd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>si_cursym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>si_curname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>si_curfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>si_nument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>si_next</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>symit_data_t</name> <modifier>*</modifier></type>
<name>symit_new</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symtabidx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>symtabidx</name> <operator>=</operator> <call><name>findelfsecidx</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">".symtab"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>symit_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_getscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>symtabidx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>si_shdr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>si_symd</name></name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Cannot read .symtab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_getscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_shdr</name><operator>.</operator><name>sh_link</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>si_strd</name></name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elfterminate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"Cannot read strings for .symtab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>si_nument</name></name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>si_shdr</name><operator>.</operator><name>sh_size</name></name> <operator>/</operator> <name><name>si</name><operator>-&gt;</operator><name>si_shdr</name><operator>.</operator><name>sh_entsize</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>si</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>symit_free</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>symit_reset</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>si_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>symit_curfile</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>si_curfile</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>GElf_Sym</name> <modifier>*</modifier></type>
<name>symit_next</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>check_sym</name> <init>= <expr><operator>(</operator><name>type</name> <operator>==</operator> <name>STT_OBJECT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>STT_FUNC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>si</name><operator>-&gt;</operator><name>si_next</name></name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>si_nument</name></name></expr>;</condition> <incr><expr><name><name>si</name><operator>-&gt;</operator><name>si_next</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_symd</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>si_cursym</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_symd</name></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>si_curname</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>si_strd</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>+</operator> <name><name>sym</name><operator>.</operator><name>st_name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STT_FILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bname</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_curname</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>si_curfile</name></name> <operator>=</operator> <ternary><condition><expr><name>bname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>si</name><operator>-&gt;</operator><name>si_curname</name></name></expr> </then><else>: <expr><name>bname</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_TYPE</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>type</name> <operator>||</operator>
<name><name>sym</name><operator>.</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_sym</name> <operator>&amp;&amp;</operator> <call><name>ignore_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_curname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>si_next</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>si_cursym</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>symit_name</name><parameter_list>(<parameter><decl><type><name>symit_data_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>si</name><operator>-&gt;</operator><name>si_curname</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
