<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_inttab.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_inttab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>

<function><type><name>dt_inttab_t</name> <modifier>*</modifier></type>
<name>dt_inttab_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>len</name> <init>= <expr><name>_dtrace_intbuckets</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_inttab_t</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ip</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_inttab_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>int_hash</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hashlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ip</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_inttab_destroy</name><parameter_list>(<parameter><decl><type><name>dt_inttab_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_inthash_t</name> <modifier>*</modifier></type><name>hp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>int_head</name></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>inh_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hdl</name></name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hdl</name></name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hdl</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_inttab_insert</name><parameter_list>(<parameter><decl><type><name>dt_inttab_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name> <init>= <expr><name>value</name> <operator>&amp;</operator> <operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>int_hashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_inthash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DT_INT_SHARED</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>int_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>inh_hash</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>inh_value</name></name> <operator>==</operator> <name>value</name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>inh_flags</name></name> <operator>==</operator> <name>flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>inh_index</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hdl</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_inthash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>inh_hash</name></name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>int_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>inh_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>inh_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>inh_index</name></name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>int_index</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>inh_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_nelems</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>-&gt;</operator><name>int_head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_head</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_tail</name><operator>-&gt;</operator><name>inh_next</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>int_tail</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>inh_index</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint_t</name></type>
<name>dt_inttab_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_inttab_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>ip</name><operator>-&gt;</operator><name>int_nelems</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_inttab_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_inttab_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_inthash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>int_head</name></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>inh_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>inh_value</name></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
