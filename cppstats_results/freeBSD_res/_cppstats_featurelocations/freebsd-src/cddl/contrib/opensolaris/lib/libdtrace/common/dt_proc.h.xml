<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_proc.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DT_PROC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DT_PROC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_list.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>dt_proc</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dpr_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_proc</name></name> <modifier>*</modifier></type><name>dpr_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dpr_hdl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>dpr_proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dpr_errmsg</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rd_agent_t</name> <modifier>*</modifier></type><name>dpr_rtld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>dpr_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>dpr_cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>dpr_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dpr_refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_cacheable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_quit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_usdt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_stale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dpr_rdonly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>dpr_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dpr_bps</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_proc_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_proc_notify</name> <block>{
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name>dprn_dpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dprn_errmsg</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_proc_notify</name></name> <modifier>*</modifier></type><name>dprn_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_proc_notify_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROC_STOP_IDLE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROC_STOP_CREATE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROC_STOP_GRAB</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROC_STOP_PREINIT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROC_STOP_POSTINIT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PROC_STOP_MAIN</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> <name>dt_bkpt_f</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>dt_bkpt</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dbp_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_bkpt_f</name> <modifier>*</modifier></type><name>dbp_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dbp_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>dbp_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>dbp_instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>dbp_hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dbp_active</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_bkpt_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_proc_hash</name> <block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>dph_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>dph_cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_notify_t</name> <modifier>*</modifier></type><name>dph_notify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dph_lrulist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dph_lrulim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dph_lrucnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dph_hashlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_t</name> <modifier>*</modifier></type><name><name>dph_hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_proc_hash_t</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>dt_proc_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>proc_child_func</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>dt_proc_grab</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>pid_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_proc_release</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_proc_continue</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_proc_lock</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_proc_unlock</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_proc_t</name> <modifier>*</modifier></type><name>dt_proc_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_proc_init</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_proc_fini</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
