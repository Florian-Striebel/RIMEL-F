<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libcmdutils/libcmdutils.h">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCMDUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCMDUTILS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>_FILE_OFFSET_BITS</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LARGEFILE64_SOURCE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"libcmdutils.h can only be used in a largefile compilation environment"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/avl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libnvpair.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NOT_SATTR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RO_SATTR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RW_SATTR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMAPSIZE</name></cpp:macro> <cpp:value>(1024*1024*8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALLFILESIZE</name></cpp:macro> <cpp:value>(32*1024)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_FILE_OFFSET_BITS</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>tree_node</name> <block>{
<decl_stmt><decl><type><name>dev_t</name></type> <name>node_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino_t</name></type> <name>node_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avl_node_t</name></type> <name>avl_link</name></decl>;</decl_stmt>
}</block></struct></type> <name>tree_node_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><struct>struct <name>tree_node</name> <block>{
<decl_stmt><decl><type><name>dev_t</name></type> <name>node_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino64_t</name></type> <name>node_ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avl_node_t</name></type> <name>avl_link</name></decl>;</decl_stmt>
}</block></struct></type> <name>tree_node_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sysattr_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sysattr_support</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_FILE_OFFSET_BITS</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>writefile</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>writefile</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat64</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat64</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>get_attrdirs</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>mv_xattrs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>nvlist_t</name> <modifier>*</modifier></type><name>sysattr_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tnode_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_FILE_OFFSET_BITS</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>add_tnode</name><parameter_list>(<parameter><decl><type><name>avl_tree_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dev_t</name></type></decl></parameter>, <parameter><decl><type><name>ino_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>add_tnode</name><parameter_list>(<parameter><decl><type><name>avl_tree_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dev_t</name></type></decl></parameter>, <parameter><decl><type><name>ino64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>destroy_tree</name><parameter_list>(<parameter><decl><type><name>avl_tree_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>findnextuid</name><parameter_list>(<parameter><decl><type><name>uid_t</name></type></decl></parameter>, <parameter><decl><type><name>uid_t</name></type></decl></parameter>, <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>findnextgid</name><parameter_list>(<parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><name><name>struct</name> <name>custr</name></name></type> <name>custr_t</name>;</typedef>





<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>custr_alloc</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>custr_free</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>custr_alloc_buf</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>custr_appendc</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>custr_append</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>custr_append_printf</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>custr_append_vprintf</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>custr_len</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>custr_reset</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>custr_cstr</name><parameter_list>(<parameter><decl><type><name>custr_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN_DIVISOR_1000</name></cpp:macro> <cpp:value>(1U &lt;&lt; 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN_NUMBUF_SZ</name></cpp:macro> <cpp:value>(6)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>nicenum</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>nicenum_scale</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
