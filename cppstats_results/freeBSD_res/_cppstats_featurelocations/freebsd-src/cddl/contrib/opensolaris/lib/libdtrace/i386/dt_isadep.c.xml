<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/i386/dt_isadep.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dis_tables.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc_compat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_POPL_EBP</name></cpp:macro> <cpp:value>0x5d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RET</name></cpp:macro> <cpp:value>0xc3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RET16</name></cpp:macro> <cpp:value>0xc2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LEAVE</name></cpp:macro> <cpp:value>0xc9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_JMP32</name></cpp:macro> <cpp:value>0xe9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_JMP8</name></cpp:macro> <cpp:value>0xeb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_REP</name></cpp:macro> <cpp:value>0xf3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MOVL_EBP_ESP</name></cpp:macro> <cpp:value>0xe58b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ISJ32</name><parameter_list>(<parameter><type><name>op16</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((op16) &amp; 0xfff0) == 0x0f80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ISJ8</name><parameter_list>(<parameter><type><name>op8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((op8) &amp; 0xf0) == 0x70)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MODRM_REG</name><parameter_list>(<parameter><type><name>modrm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((modrm) &gt;&gt; 3) &amp; 0x7)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dt_instr_size</name><parameter_list>(<parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>pid_t</name></type></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>int</name></type>
<name>dt_pid_create_entry_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_ENTRY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pid_has_jump_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_dmodel</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>proc_getmodel</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_instr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name></expr></argument>,
<argument><expr><name>dmodel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"error at %#lx (assuming jump table)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <call><name>DT_MODRM_REG</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>dmodel</name> <operator>==</operator> <name>PR_MODEL_LP64</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <call><name>DT_MODRM_REG</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"found a suspected jump table at %s:%lx\n"</literal></expr></argument>,
<argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_func</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dt_pid_create_return_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>stret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_dmodel</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>proc_getmodel</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: malloc() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Pread</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: Pread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_RETURN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>














<if_stmt><if>if <condition>(<expr><call><name>dt_pid_has_jump_table</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_instr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>dmodel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_LEAVE</name> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>DT_RET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"leave/ret at %lx\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_LEAVE</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>DT_REP</name> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>DT_RET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"leave/rep ret at %lx\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_MOVL_EBP_ESP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>DT_POPL_EBP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>DT_RET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"movl/popl/ret at %lx\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_MOVL_EBP_ESP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>DT_POPL_EBP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>DT_REP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>DT_RET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"movl/popl/rep ret at %lx\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_instr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>dmodel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_RET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_REP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>DT_RET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_RET16</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_REP</name> <operator>&amp;&amp;</operator>
<name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>DT_RET16</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_JMP32</name> <operator>&amp;&amp;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&lt;=</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DT_JMP8</name> <operator>&amp;&amp;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&lt;=</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>DT_ISJ32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&lt;=</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>DT_ISJ8</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>&lt;=</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>

<continue>continue;</continue>
<label><name>is_ret</name>:</label>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"return at offset %lx\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dt_pid_create_offset_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_OFFSETS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_func</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_dmodel</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>proc_getmodel</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: malloc() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Pread</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: Pread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>dt_pid_has_jump_table</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ALIGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_instr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>dmodel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ALIGN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dt_pid_create_glob_offset_probes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_dmodel</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>proc_getpid</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dmodel</name> <init>= <expr><call><name>proc_getmodel</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_OFFSETS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: malloc() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Pread</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: Pread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>dt_pid_has_jump_table</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_instr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>dmodel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>size</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dt_instr_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>,
<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>dmodel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>dtrace_dis</name> <block>{
<decl_stmt><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>
}</block></struct></type> <name>dtrace_dis_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_getbyte</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_dis_t</name> <modifier>*</modifier></type><name>dis</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>*</operator><name><name>dis</name><operator>-&gt;</operator><name>instr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FASTTRAP_INSTR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fasttrap_instr_query_t</name></type> <name>instr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>instr</name><operator>.</operator><name>ftiq_pid</name></name> <operator>=</operator> <name><name>dis</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>.</operator><name>ftiq_pc</name></name> <operator>=</operator> <name><name>dis</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dis</name><operator>-&gt;</operator><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_GETINSTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>instr</name><operator>.</operator><name>ftiq_instr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dis</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dis</name><operator>-&gt;</operator><name>instr</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_instr_size</name><parameter_list>(<parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>dmodel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_dis_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dis86_t</name></type> <name>x86dis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>cpu_mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>instr</name></name> <operator>=</operator> <name>instr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x86dis</name><operator>.</operator><name>d86_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x86dis</name><operator>.</operator><name>d86_get_byte</name></name> <operator>=</operator> <name>dt_getbyte</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x86dis</name><operator>.</operator><name>d86_check_func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cpu_mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dmodel</name> <operator>==</operator> <name>PR_MODEL_ILP32</name><operator>)</operator></expr> ?</condition><then> <expr><name>SIZE32</name></expr> </then><else>: <expr><name>SIZE64</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dtrace_disx86</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x86dis</name></expr></argument>, <argument><expr><name>cpu_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>x86dis</name><operator>.</operator><name>d86_len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>uchar_t</name><operator>)</operator><name><name>x86dis</name><operator>.</operator><name>d86_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FASTTRAP_INSTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>x86dis</name><operator>.</operator><name>d86_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
