<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_pragma.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_apply</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>php</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>pdp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>php</name> <operator>=</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pdp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name>php</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>pdp</name><operator>-&gt;</operator><name>di_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_IDENT_PRAGAT</name></expr>:</case>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>di_attr</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_IDENT_PRAGBN</name></expr>:</case>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>di_vers</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>dt_idhash_delete</name><argument_list>(<argument><expr><name>php</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_attributes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dnp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name> <operator>||</operator>
<name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_MALFORM</name></expr></argument>, <argument><expr><literal type="string">"malformed #pragma %s "</literal>
<literal type="string">"&lt;attributes&gt; &lt;ident&gt;\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dtrace_str2attr</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid attributes "</literal>
<literal type="string">"specified by #pragma %s\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"provider"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>part</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pvp</name> <operator>=</operator> <call><name>dt_provider_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"provider"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_provider</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"module"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_mod</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_func</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_args</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid component "</literal>
<literal type="string">"\"%s\" in attribute #pragma "</literal>
<literal type="string">"for provider %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_idstack_lookup</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_globals</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name> <operator>!=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_SCOPE</name></expr></argument>, <argument><expr><literal type="string">"#pragma %s cannot modify "</literal>
<literal type="string">"entity defined outside program scope\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name> <operator>=</operator>
<call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_idhash_insert</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DT_IDENT_PRAGAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt_idops_thaw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>prname</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_pragma_apply</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_binding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_version_t</name></type> <name>vers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dnp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_STRING</name> <operator>||</operator>
<name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_MALFORM</name></expr></argument>, <argument><expr><literal type="string">"malformed #pragma %s "</literal>
<literal type="string">"\"version\" &lt;ident&gt;\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_version_str2num</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vers</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid version string "</literal>
<literal type="string">"specified by #pragma %s\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name><operator>-&gt;</operator><name>dn_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_idstack_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_globals</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name> <operator>!=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_SCOPE</name></expr></argument>, <argument><expr><literal type="string">"#pragma %s cannot modify "</literal>
<literal type="string">"entity defined outside program scope\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name> <operator>=</operator> <name>vers</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name> <operator>=</operator>
<call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_idhash_insert</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DT_IDENT_PRAGBN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>_dtrace_defattr</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt_idops_thaw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>prname</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_pragma_apply</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_depends_finddep</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lib</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_dirpath_t</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dirp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_lib_path</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dirp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dirp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>dir_path</name></name></expr></argument>, <argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_DEPEND</name></expr></argument>,
<argument><expr><literal type="string">"failed to find dependency in libpath: %s"</literal></expr></argument>, <argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_depends</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>cnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>nnp</name> <init>= <expr><ternary><condition><expr><name>cnp</name></expr> ?</condition><then> <expr><name><name>cnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_lib_depend_t</name> <modifier>*</modifier></type><name>dld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lib</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>provs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cpy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nnp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name> <operator>||</operator> <name><name>nnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_MALFORM</name></expr></argument>, <argument><expr><literal type="string">"malformed #pragma %s "</literal>
<literal type="string">"&lt;class&gt; &lt;name&gt;\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><literal type="string">"provider"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>provs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"debug.dtrace.providers"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>provs</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"debug.dtrace.providers"</literal></expr></argument>, <argument><expr><name>provs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>dt_provider_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>B_FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cpy</name> <operator>=</operator> <name>provs</name></expr>;</init> <condition><expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpy</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>B_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>dt_provider_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>provs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>provs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><literal type="string">"module"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><call><name>dt_module_lookup_by_name</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>dt_module_getctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_kmodule_t</name> <modifier>*</modifier></type><name>dkmp</name> <init>= <expr><call><name>dt_kmodule_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>dkmp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>dt_module_getctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dkmp</name><operator>-&gt;</operator><name>dkm_module</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><literal type="string">"library"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_cflags</name></name> <operator>&amp;</operator> <name>DTRACE_C_CTL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_filetag</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_pragma_depends_finddep</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><name>lib</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dld</name> <operator>=</operator> <call><name>dt_lib_depend_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_lib_dep</name></name></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_filetag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dld</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>dt_lib_depend_add</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dld</name><operator>-&gt;</operator><name>dtld_dependencies</name></name></expr></argument>,
<argument><expr><name>lib</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_DEPEND</name></expr></argument>,
<argument><expr><literal type="string">"failed to add dependency %s:%s\n"</literal></expr></argument>, <argument><expr><name>lib</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_filetag</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_DEPEND</name></expr></argument>, <argument><expr><literal type="string">"main program may "</literal>
<literal type="string">"not explicitly depend on a library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dld</name> <operator>=</operator> <call><name>dt_lib_depend_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_lib_dep</name></name></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_filetag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dld</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_pragma_depends_finddep</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><name>lib</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dld</name> <operator>=</operator> <call><name>dt_lib_depend_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_lib_dep_sorted</name></name></expr></argument>,
<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dld</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dld</name><operator>-&gt;</operator><name>dtld_loaded</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_DEPEND</name></expr></argument>, <argument><expr><literal type="string">"program requires "</literal>
<literal type="string">"library \"%s\" which failed to load"</literal></expr></argument>,
<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>B_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid class %s "</literal>
<literal type="string">"specified by #pragma %s\n"</literal></expr></argument>, <argument><expr><name><name>cnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_DEPEND</name></expr></argument>, <argument><expr><literal type="string">"program requires %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>cnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>enp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>enp</name> <operator>=</operator> <name>dnp</name></expr>;</init> <condition><expr><name>enp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>enp</name> <operator>=</operator> <name><name>enp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_IDENT</name> <operator>||</operator>
<name><name>enp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>enp</name> <operator>=</operator> <name>dnp</name></expr>;</init> <condition><expr><name>enp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>enp</name> <operator>=</operator> <name><name>enp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_IDENT</name> <operator>||</operator>
<name><name>enp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGERR</name></expr></argument>, <argument><expr><literal type="string">"#%s: %s\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_ident</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dnp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_MALFORM</name></expr></argument>,
<argument><expr><literal type="string">"malformed #pragma %s &lt;option&gt;=&lt;val&gt;\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_MALFORM</name></expr></argument>,
<argument><expr><literal type="string">"superfluous arguments specified for #pragma %s\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>val</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_OPTSET</name></expr></argument>,
<argument><expr><literal type="string">"failed to set option '%s': %s\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_OPTSET</name></expr></argument>,
<argument><expr><literal type="string">"failed to set option '%s' to '%s': %s\n"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_pragma_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prname</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>fnp</name> <init>= <expr><ternary><condition><expr><name>dnp</name></expr> ?</condition><then> <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><ternary><condition><expr><name>fnp</name></expr> ?</condition><then> <expr><name><name>fnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_INT</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>fnp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_STRING</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>inp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>inp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_MALFORM</name></expr></argument>, <argument><expr><literal type="string">"malformed #%s "</literal>
<literal type="string">"&lt;line&gt; [ [\"file\"] state ]\n"</literal></expr></argument>, <argument><expr><name>prname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>fnp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_filetag</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_filetag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>fnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><literal type="string">"/dev/fd/"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_filetag</name></name> <operator>=</operator> <name><name>fnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fnp</name><operator>-&gt;</operator><name>dn_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_filetag</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inp</name><operator>-&gt;</operator><name>dn_value</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_idepth</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>inp</name><operator>-&gt;</operator><name>dn_value</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_idepth</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_idepth</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>yylineno</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_value</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PRAGMA_DIR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PRAGMA_SUB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PRAGMA_DCP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>dt_pragmadesc</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dpd_name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dpd_func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>dpd_kind</name></decl>;</decl_stmt>
}</block> <decl><name><name>dt_pragmas</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"attributes"</literal></expr>, <expr><name>dt_pragma_attributes</name></expr>, <expr><name>DT_PRAGMA_DCP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"binding"</literal></expr>, <expr><name>dt_pragma_binding</name></expr>, <expr><name>DT_PRAGMA_DCP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"depends_on"</literal></expr>, <expr><name>dt_pragma_depends</name></expr>, <expr><name>DT_PRAGMA_DCP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"error"</literal></expr>, <expr><name>dt_pragma_error</name></expr>, <expr><name>DT_PRAGMA_DIR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ident"</literal></expr>, <expr><name>dt_pragma_ident</name></expr>, <expr><name>DT_PRAGMA_DIR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"line"</literal></expr>, <expr><name>dt_pragma_line</name></expr>, <expr><name>DT_PRAGMA_DIR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"option"</literal></expr>, <expr><name>dt_pragma_option</name></expr>, <expr><name>DT_PRAGMA_DCP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>






<function><type><name>void</name></type>
<name>dt_pragma</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dt_pragmadesc</name></name> <modifier>*</modifier></type><name>dpd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><name>DT_PRAGMA_DIR</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name>pnp</name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_pragma_line</name><argument_list>(<argument><expr><literal type="string">"line"</literal></expr></argument>, <argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_IDENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGCTL_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid control directive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>DT_PRAGMA_DIR</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>DT_PRAGMA_SUB</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>DT_PRAGMA_SUB</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>DT_PRAGMA_DCP</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>dpd</name> <operator>=</operator> <name>dt_pragmas</name></expr>;</init> <condition><expr><name><name>dpd</name><operator>-&gt;</operator><name>dpd_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dpd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dpd</name><operator>-&gt;</operator><name>dpd_kind</name></name> <operator>&lt;=</operator> <name>kind</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dpd</name><operator>-&gt;</operator><name>dpd_name</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>yylineno</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><operator>-&gt;</operator><name>dpd_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dpd</name><operator>-&gt;</operator><name>dpd_func</name></name><argument_list>(<argument><expr><name><name>dpd</name><operator>-&gt;</operator><name>dpd_name</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yylineno</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_PRAGMA_DIR</name></expr>:</case>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGCTL_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid control directive: "</literal>
<literal type="string">"#%s\n"</literal></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>DT_PRAGMA_SUB</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DT_PRAGMA_DCP</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PRAGMA_INVAL</name></expr></argument>, <argument><expr><literal type="string">"invalid D pragma: %s\n"</literal></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>yylineno</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_node_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
