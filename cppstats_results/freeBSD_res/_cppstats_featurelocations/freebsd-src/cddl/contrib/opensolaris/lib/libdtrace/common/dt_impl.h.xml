<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_impl.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DT_IMPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DT_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/objfs.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/bitmap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioccom.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libctf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;synch.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_regset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_inttab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_strtab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_ident.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_decl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_as.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_dof.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pcb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pq.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>dt_module</name>;</struct_decl>
<struct_decl>struct <name>dt_pfdict</name>;</struct_decl>
<struct_decl>struct <name>dt_arg</name>;</struct_decl>
<struct_decl>struct <name>dt_provider</name>;</struct_decl>
<struct_decl>struct <name>dt_xlator</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>dt_intrinsic</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>din_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>din_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>din_kind</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_intrinsic_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_typedef</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dty_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dty_dst</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_typedef_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_intdesc</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>did_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>did_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>did_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>did_limit</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_intdesc_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_modops</name> <block>{
<function_decl><type><name>uint_t</name></type> (<modifier>*</modifier><name>do_syminit</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_module</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>do_symsort</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_module</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Sym</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>do_symname</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_module</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Sym</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>do_symaddr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dt_module</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>GElf_Addr</name></type></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>dt_modops_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_arg</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>da_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>da_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>da_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>da_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>da_xlator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_arg</name></name> <modifier>*</modifier></type><name>da_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_arg_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_sym</name> <block>{
<decl_stmt><decl><type><name>uint_t</name></type> <name>ds_symid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>ds_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_sym_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_module</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dm_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dm_name</name><index>[<expr><name>DTRACE_MODNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dm_file</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_module</name></name> <modifier>*</modifier></type><name>dm_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_modops_t</name> <modifier>*</modifier></type><name>dm_ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>dm_elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>objfs_info_t</name></type> <name>dm_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>dm_symtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>dm_strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>dm_ctdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>dm_ctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>dm_symbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_sym_t</name> <modifier>*</modifier></type><name>dm_symchains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dm_asmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_symfree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_nsymbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_nsymelems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_asrsv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_aslen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dm_modid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Addr</name></type> <name>dm_text_va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Xword</name></type> <name>dm_text_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Addr</name></type> <name>dm_data_va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Xword</name></type> <name>dm_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Addr</name></type> <name>dm_bss_va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Xword</name></type> <name>dm_bss_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dm_extern</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>dm_reloc_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>dm_sec_offsets</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>pid_t</name></type> <name>dm_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dm_nctflibs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dm_libctfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dm_libctfn</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_module_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DM_LOADED</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DM_KERNEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DM_PRIMARY</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<typedef>typedef <type><struct>struct <name>dt_kmodule</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dt_kmodule</name></name> <modifier>*</modifier></type><name>dkm_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dkm_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dkm_module</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_kmodule_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>dt_provmod</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_provmod</name></name> <modifier>*</modifier></type><name>dp_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_provmod_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_ahashent</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>dt_ahashent</name></name> <modifier>*</modifier></type><name>dtahe_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_ahashent</name></name> <modifier>*</modifier></type><name>dtahe_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_ahashent</name></name> <modifier>*</modifier></type><name>dtahe_prevall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_ahashent</name></name> <modifier>*</modifier></type><name>dtahe_nextall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dtahe_hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dtahe_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name></type> <name>dtahe_data</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dtahe_aggregate</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>dt_ahashent_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_ahash</name> <block>{
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dtah_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>dtah_all</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dtah_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_ahash_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_aggregate</name> <block>{
<decl_stmt><decl><type><name>dtrace_bufdesc_t</name></type> <name>dtat_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtat_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name></type> <name>dtat_ncpus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name> <modifier>*</modifier></type><name>dtat_cpus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name></type> <name>dtat_ncpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name></type> <name>dtat_maxcpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name></type> <name>dtat_hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_aggregate_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_print_aggdata</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtpa_dtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>dtpa_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dtpa_fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtpa_allunprint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtpa_agghist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtpa_agghisthdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtpa_aggpack</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_print_aggdata_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_dirpath</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dir_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_path</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_dirpath_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dt_lib_depend</name> <block>{
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dtld_deplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dtld_library</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dtld_libpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dtld_finish</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dtld_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dtld_loaded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dtld_dependencies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dtld_dependents</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_lib_depend_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>dt_version_t</name>;</typedef>

<struct>struct <name>dtrace_hdl</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>dt_vector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dt_varg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_conf_t</name></type> <name>dt_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dt_errmsg</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_errtag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>dt_pcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>dt_gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_programs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_xlators</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_xlator</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_xlatormap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_t</name></type> <name>dt_xlatorid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>dt_externs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dt_macros</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dt_aggs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dt_globals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dt_tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_modlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_mods</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dt_kmodule_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_kmods</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_modbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_nmods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provmod_t</name> <modifier>*</modifier></type><name>dt_provmod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dt_exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dt_rtld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dt_cdefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dt_ddefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_provlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_provider</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_provs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_provbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_nprovs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_proc_hash_t</name> <modifier>*</modifier></type><name>dt_procs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_proc_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_intdesc_t</name></type> <name><name>dt_ints</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_dyn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_symaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dt_type_usymaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dt_maxprobe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_eprobedesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_edesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_pdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dt_maxagg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_aggdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_maxformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_maxstrdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_strdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_aggregate_t</name></type> <name>dt_aggregate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_pq_t</name> <modifier>*</modifier></type><name>dt_bufq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_pfdict</name></name> <modifier>*</modifier></type><name>dt_pfdict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_version_t</name></type> <name>dt_vmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>dt_amin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dt_cpp_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt_cpp_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_cpp_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_cpp_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dt_ld_path</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dt_objcopy_path</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_lib_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_lazyload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_droptags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_stopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name></type> <name>dt_beganon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>processorid_t</name></type> <name>dt_endedon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_oflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_cflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_dflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_prcmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_linkmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_linktype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_xlatemode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_stdcmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dt_treedump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>dt_options</name><index>[<expr><name>DTRACEOPT_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_ctferr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_errno</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_errfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_errline</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>dt_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_ftfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_fterr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_cdefs_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_ddefs_fd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>dt_stdout_fd</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dt_freopen_fp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>dtrace_handle_err_f</name> <modifier>*</modifier></type><name>dt_errhdlr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dt_errarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>dt_errprog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_handle_drop_f</name> <modifier>*</modifier></type><name>dt_drophdlr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dt_droparg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_handle_proc_f</name> <modifier>*</modifier></type><name>dt_prochdlr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dt_procarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_handle_setopt_f</name> <modifier>*</modifier></type><name>dt_setopthdlr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dt_setoptarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_status_t</name></type> <name><name>dt_status</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_statusgen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hrtime_t</name></type> <name>dt_laststatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hrtime_t</name></type> <name>dt_lastswitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hrtime_t</name></type> <name>dt_lastagg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dt_sprintf_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_sprintf_buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_filetag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dt_buffered_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dt_buffered_offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dt_buffered_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_handle_buffered_f</name> <modifier>*</modifier></type><name>dt_bufhdlr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dt_bufarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_dof_t</name></type> <name>dt_dof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>dt_uts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_lib_dep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_list_t</name></type> <name>dt_lib_dep_sorted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_flowkind_t</name></type> <name>dt_flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dt_indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_epid_t</name></type> <name>dt_last_epid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dt_last_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>boolean_t</name></type> <name>dt_has_sugar</name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ECB_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ECB_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LINK_KERNEL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LINK_PRIMARY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LINK_DYNAMIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LINK_STATIC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LTYP_ELF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LTYP_DOF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_XL_STATIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_XL_DYNAMIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STDC_XA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STDC_XC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STDC_XS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STDC_XT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ENCODING_UNSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ENCODING_ASCII</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ENCODING_UTF8</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_TREEDUMP_PASS</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_treedump &amp; (1 &lt;&lt; ((p) - 1)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INT_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ints[0].did_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INT_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ints[0].did_type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FUNC_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FUNC_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_func)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FPTR_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FPTR_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_fptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STR_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STR_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DYN_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DYN_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_dyn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STACK_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STACK_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_stack)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMADDR_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMADDR_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_symaddr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_USYMADDR_CTFP</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_ddefs-&gt;dm_ctfp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_USYMADDR_TYPE</name><parameter_list>(<parameter><type><name>dtp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dtp)-&gt;dt_type_usymaddr)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_BASE</name></cpp:macro> <cpp:value>DIF_SUBR_MAX + 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DT_ACT_BASE + (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_PRINTF</name></cpp:macro> <cpp:value>DT_ACT(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_TRACE</name></cpp:macro> <cpp:value>DT_ACT(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_TRACEMEM</name></cpp:macro> <cpp:value>DT_ACT(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_STACK</name></cpp:macro> <cpp:value>DT_ACT(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_STOP</name></cpp:macro> <cpp:value>DT_ACT(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_BREAKPOINT</name></cpp:macro> <cpp:value>DT_ACT(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_PANIC</name></cpp:macro> <cpp:value>DT_ACT(6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_SPECULATE</name></cpp:macro> <cpp:value>DT_ACT(7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_COMMIT</name></cpp:macro> <cpp:value>DT_ACT(8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_DISCARD</name></cpp:macro> <cpp:value>DT_ACT(9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_CHILL</name></cpp:macro> <cpp:value>DT_ACT(10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_EXIT</name></cpp:macro> <cpp:value>DT_ACT(11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_USTACK</name></cpp:macro> <cpp:value>DT_ACT(12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_PRINTA</name></cpp:macro> <cpp:value>DT_ACT(13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_RAISE</name></cpp:macro> <cpp:value>DT_ACT(14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_CLEAR</name></cpp:macro> <cpp:value>DT_ACT(15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_NORMALIZE</name></cpp:macro> <cpp:value>DT_ACT(16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_DENORMALIZE</name></cpp:macro> <cpp:value>DT_ACT(17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_TRUNC</name></cpp:macro> <cpp:value>DT_ACT(18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_SYSTEM</name></cpp:macro> <cpp:value>DT_ACT(19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_JSTACK</name></cpp:macro> <cpp:value>DT_ACT(20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_FTRUNCATE</name></cpp:macro> <cpp:value>DT_ACT(21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_FREOPEN</name></cpp:macro> <cpp:value>DT_ACT(22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_SYM</name></cpp:macro> <cpp:value>DT_ACT(23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_MOD</name></cpp:macro> <cpp:value>DT_ACT(24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_USYM</name></cpp:macro> <cpp:value>DT_ACT(25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_UMOD</name></cpp:macro> <cpp:value>DT_ACT(26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_UADDR</name></cpp:macro> <cpp:value>DT_ACT(27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_SETOPT</name></cpp:macro> <cpp:value>DT_ACT(28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_PRINT</name></cpp:macro> <cpp:value>DT_ACT(29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ACT_PRINTM</name></cpp:macro> <cpp:value>DT_ACT(30)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FREOPEN_RESTORE</name></cpp:macro> <cpp:value>"."</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDT_BASE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>EDT_VERSION</name> <init>= <expr><name>EDT_BASE</name></expr></init></decl>,
<decl><name>EDT_VERSINVAL</name></decl>,
<decl><name>EDT_VERSUNDEF</name></decl>,
<decl><name>EDT_VERSREDUCED</name></decl>,
<decl><name>EDT_CTF</name></decl>,
<decl><name>EDT_COMPILER</name></decl>,
<decl><name>EDT_NOTUPREG</name></decl>,
<decl><name>EDT_NOMEM</name></decl>,
<decl><name>EDT_INT2BIG</name></decl>,
<decl><name>EDT_STR2BIG</name></decl>,
<decl><name>EDT_NOMOD</name></decl>,
<decl><name>EDT_NOPROV</name></decl>,
<decl><name>EDT_NOPROBE</name></decl>,
<decl><name>EDT_NOSYM</name></decl>,
<decl><name>EDT_NOSYMADDR</name></decl>,
<decl><name>EDT_NOTYPE</name></decl>,
<decl><name>EDT_NOVAR</name></decl>,
<decl><name>EDT_NOAGG</name></decl>,
<decl><name>EDT_BADSCOPE</name></decl>,
<decl><name>EDT_BADSPEC</name></decl>,
<decl><name>EDT_BADSPCV</name></decl>,
<decl><name>EDT_BADID</name></decl>,
<decl><name>EDT_NOTLOADED</name></decl>,
<decl><name>EDT_NOCTF</name></decl>,
<decl><name>EDT_DATAMODEL</name></decl>,
<decl><name>EDT_DIFVERS</name></decl>,
<decl><name>EDT_BADAGG</name></decl>,
<decl><name>EDT_FIO</name></decl>,
<decl><name>EDT_DIFINVAL</name></decl>,
<decl><name>EDT_DIFSIZE</name></decl>,
<decl><name>EDT_DIFFAULT</name></decl>,
<decl><name>EDT_BADPROBE</name></decl>,
<decl><name>EDT_BADPGLOB</name></decl>,
<decl><name>EDT_NOSCOPE</name></decl>,
<decl><name>EDT_NODECL</name></decl>,
<decl><name>EDT_DMISMATCH</name></decl>,
<decl><name>EDT_DOFFSET</name></decl>,
<decl><name>EDT_DALIGN</name></decl>,
<decl><name>EDT_BADOPTNAME</name></decl>,
<decl><name>EDT_BADOPTVAL</name></decl>,
<decl><name>EDT_BADOPTCTX</name></decl>,
<decl><name>EDT_CPPFORK</name></decl>,
<decl><name>EDT_CPPEXEC</name></decl>,
<decl><name>EDT_CPPENT</name></decl>,
<decl><name>EDT_CPPERR</name></decl>,
<decl><name>EDT_SYMOFLOW</name></decl>,
<decl><name>EDT_ACTIVE</name></decl>,
<decl><name>EDT_DESTRUCTIVE</name></decl>,
<decl><name>EDT_NOANON</name></decl>,
<decl><name>EDT_ISANON</name></decl>,
<decl><name>EDT_ENDTOOBIG</name></decl>,
<decl><name>EDT_NOCONV</name></decl>,
<decl><name>EDT_BADCONV</name></decl>,
<decl><name>EDT_BADERROR</name></decl>,
<decl><name>EDT_ERRABORT</name></decl>,
<decl><name>EDT_DROPABORT</name></decl>,
<decl><name>EDT_DIRABORT</name></decl>,
<decl><name>EDT_BADRVAL</name></decl>,
<decl><name>EDT_BADNORMAL</name></decl>,
<decl><name>EDT_BUFTOOSMALL</name></decl>,
<decl><name>EDT_BADTRUNC</name></decl>,
<decl><name>EDT_BUSY</name></decl>,
<decl><name>EDT_ACCESS</name></decl>,
<decl><name>EDT_NOENT</name></decl>,
<decl><name>EDT_BRICKED</name></decl>,
<decl><name>EDT_HARDWIRE</name></decl>,
<decl><name>EDT_ELFVERSION</name></decl>,
<decl><name>EDT_NOBUFFERED</name></decl>,
<decl><name>EDT_UNSTABLE</name></decl>,
<decl><name>EDT_BADSETOPT</name></decl>,
<decl><name>EDT_BADSTACKPC</name></decl>,
<decl><name>EDT_BADAGGVAR</name></decl>,
<decl><name>EDT_OVERSION</name></decl>,
<decl><name>EDT_ENABLING_ERR</name></decl>,
<decl><name>EDT_NOPROBES</name></decl>,
<decl><name>EDT_CANTLOAD</name></decl>
}</block>;</enum>






<function_decl><type><specifier>extern</specifier> <name>dtrace_attribute_t</name></type> <name>dt_attr_min</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dtrace_attribute_t</name></type> <name>dt_attr_max</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_attr_str</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_attr_cmp</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type></decl></parameter>)</parameter_list>;</function_decl>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_STRMAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_MAJMAX</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_MINMAX</name></cpp:macro> <cpp:value>0xFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_MICMAX</name></cpp:macro> <cpp:value>0xFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_NUMBER</name><parameter_list>(<parameter><type><name>M</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((M) &amp; 0xFF) &lt;&lt; 24) | (((m) &amp; 0xFFF) &lt;&lt; 12) | ((u) &amp; 0xFFF))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_MAJOR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xFF000000) &gt;&gt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_MINOR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00FFF000) &gt;&gt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSION_MICRO</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &amp; 0x00000FFF)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_version_num2str</name><parameter_list>(<parameter><decl><type><name>dt_version_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_version_str2num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_version_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_version_defined</name><parameter_list>(<parameter><decl><type><name>dt_version_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_cpp_add_arg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_cpp_pop_arg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_set_errno</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>int</name></type> <name>_dt_set_errno</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>dt_get_errloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dt_set_errno</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>,<parameter><type><name>_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_dt_set_errno(_a,_b,__FILE__,__LINE__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_set_errmsg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_ioctl</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_ioctl</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_long</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_status</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>processorid_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>long</name></type> <name>dt_sysconf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>dt_write</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_printf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>dt_zalloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>dt_alloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_free</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_difo_free</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_difo_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_gmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_basename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>ulong_t</name></type> <name>dt_popc</name><parameter_list>(<parameter><decl><type><name>ulong_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ulong_t</name></type> <name>dt_popcb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ulong_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_buffered_enable</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_buffered_flush</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_probedata_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_buffered_disable</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_buffered_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>dt_stddev</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_rw_read_held</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_rw_write_held</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_mutex_held</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_options_load</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RW_READ_HELD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dt_rw_read_held(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RW_WRITE_HELD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dt_rw_write_held(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RW_LOCK_HELD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DT_RW_READ_HELD(x) || DT_RW_WRITE_HELD(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_MUTEX_HELD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dt_mutex_held(x)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_dprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_setcontext</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_endcontext</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_pragma</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_reduce</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_version_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_cg</name><parameter_list>(<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dt_as</name><parameter_list>(<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_dis</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_aggregate_go</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_aggregate_init</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_aggregate_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_epid_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_epid_t</name></type></decl></parameter>,
<parameter><decl><type><name>dtrace_eprobedesc_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_epid_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_aggid_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_aggid_t</name></type></decl></parameter>, <parameter><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_aggid_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>dt_format_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_format_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dt_strdata_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_strdata_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_quantize</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_lquantize</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_llquantize</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_print_agg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_handle</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_probedata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_handle_liberr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedata_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_handle_cpudrop</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>processorid_t</name></type></decl></parameter>,
<parameter><decl><type><name>dtrace_dropkind_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_handle_status</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>dtrace_status_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_status_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_handle_setopt</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dtrace_setoptdata_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dt_lib_depend_add</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>dt_lib_depend_t</name> <modifier>*</modifier></type><name>dt_lib_depend_lookup</name><parameter_list>(<parameter><decl><type><name>dt_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>dt_pcb_t</name> <modifier>*</modifier></type><name>yypcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>yyintprefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>yyintsuffix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>yyintdecimal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>yytext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>yylineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>yydebug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>yypragma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_maxattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_defattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_symattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_typattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_prvattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dtrace_pattr_t</name></type> <name>_dtrace_prvdesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dt_version_t</name></type> <name><name>_dtrace_versions</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>_dtrace_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_dtrace_strbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_dtrace_intbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint_t</name></type> <name>_dtrace_stkindent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint_t</name></type> <name>_dtrace_pidbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint_t</name></type> <name>_dtrace_pidlrulim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_dtrace_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>_dtrace_bufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_dtrace_argmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_libdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_moddir</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>gmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
