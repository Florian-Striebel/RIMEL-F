<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_xlator.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_xlator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_grammar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_xlator_create_member</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>enp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mnp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enp</name> <operator>=</operator> <call><name>dt_node_xalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DT_NODE_XLATOR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_link</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_nodes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_nodes</name></name> <operator>=</operator> <name>enp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mnp</name> <operator>=</operator> <call><name>dt_node_xalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DT_NODE_MEMBER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_link</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_nodes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_nodes</name></name> <operator>=</operator> <name>mnp</name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_op</name></name> <operator>=</operator> <name>DT_TOK_XLATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_xlator</name></name> <operator>=</operator> <name>dxp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_xmember</name></name> <operator>=</operator> <name>mnp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>enp</name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_link</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_MEMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enp</name><operator>-&gt;</operator><name>dn_link</name><operator>-&gt;</operator><name>dn_list</name></name> <operator>=</operator> <name>mnp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name> <operator>=</operator> <name>mnp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membexpr</name></name> <operator>=</operator> <name>enp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>mnp</name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mnp</name><operator>-&gt;</operator><name>dn_membname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dt_xlator_t</name> <modifier>*</modifier></type>
<name>dt_xlator_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_typeinfo_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_typeinfo_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>members</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_xlator_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>ptr</name> <init>= <expr><operator>*</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dxp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_gen</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_arg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatormap</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatormap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatormap</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatormap</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>=</operator> <name>dxp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_type_pointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><operator>.</operator><name>dtt_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name></name> <operator>=</operator> <call><name>dt_ident_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"T"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>DT_IDENT_SCALAR</name></expr></argument>, <argument><expr><name>DT_IDFLG_REF</name> <operator>|</operator> <name>DT_IDFLG_ORPHAN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>_dtrace_defattr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt_idops_thaw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dtt_type</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_locals</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"xlparams"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_locals</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_idhash_xinsert</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_locals</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_name</name></name> <operator>=</operator> <literal type="string">"translator"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_kind</name></name> <operator>=</operator> <name>DT_IDENT_XLSOU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DT_IDFLG_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_id</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_attr</name></name> <operator>=</operator> <name>_dtrace_defattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_idops_thaw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_data</name></name> <operator>=</operator> <name>dxp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_type</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>dtt_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_gen</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_name</name></name> <operator>=</operator> <literal type="string">"translator"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_kind</name></name> <operator>=</operator> <name>DT_IDENT_XLPTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_flags</name></name> <operator>=</operator> <name>DT_IDFLG_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_id</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_attr</name></name> <operator>=</operator> <name>_dtrace_defattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dt_idops_thaw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_data</name></name> <operator>=</operator> <name>dxp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>ptr</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_type</name></name> <operator>=</operator> <name><name>ptr</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_gen</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name></expr></argument>, <argument><expr><literal type="string">"translator"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name><operator>-&gt;</operator><name>dh_defer</name></name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_attr</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_vers</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_vers</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_ctfp</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dtt_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_base</name></name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>dtt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_type</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>dtt_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dtt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>kind</name> <operator>==</operator> <name>CTF_K_STRUCT</name> <operator>||</operator> <name>kind</name> <operator>==</operator> <name>CTF_K_UNION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_member_iter</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>,
<argument><expr><name>dt_xlator_create_member</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name> <operator>=</operator> <name>members</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_nodes</name></name> <operator>=</operator> <name>nodes</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membxlator</name></name> <operator>=</operator> <name>dxp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membid</name></name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_nmembers</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_membdif</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_difo_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_nmembers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_membdif</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_nmembers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>dxp</name><operator>)</operator></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>dt_xlator_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_xlator_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dt_node_link_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_locals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_ident_destroy</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_nmembers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_difo_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_membdif</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_membdif</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dt_xlator_t</name> <modifier>*</modifier></type>
<name>dt_xlator_lookup</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>src_ctfp</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>src_type</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>dn_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>src_base</name> <init>= <expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>src_ctfp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>dst_ctfp</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dst_type</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>dn_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dst_base</name> <init>= <expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dst_kind</name> <init>= <expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ptr</name> <init>= <expr><name>dst_kind</name> <operator>==</operator> <name>CTF_K_POINTER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>src_dtt</name></decl>, <decl><type ref="prev"/><name>dst_dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name></type> <name>xn</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_base</name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <name>dst_base</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_base</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_kind</name> <operator>!=</operator> <name>CTF_K_UNION</name> <operator>&amp;&amp;</operator> <name>dst_kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>










<for>for <control>(<init><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dxp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_compat</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_type</name></name></expr></argument>,
<argument><expr><name>src_ctfp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ctf_type_compat</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>,
<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DT_XLATE_EXACT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dxp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_compat</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_base</name></name></expr></argument>,
<argument><expr><name>src_ctfp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ctf_type_compat</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>,
<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dxp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xn</name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_type</name></name></expr></argument>,
<argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_compat</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_base</name></name></expr></argument>,
<argument><expr><name>dst_ctfp</name></expr></argument>, <argument><expr><name>dst_base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>dt_node_is_argcompat</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name>dxp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name><operator>.</operator><name>di_type</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dxp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DT_XLATE_EXTERN</name><operator>)</operator> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatemode</name></name> <operator>==</operator> <name>DT_XL_STATIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dxp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>src_dtt</name><operator>.</operator><name>dtt_object</name></name> <operator>=</operator> <call><name>dt_module_lookup_by_ctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>src_ctfp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dm_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_dtt</name><operator>.</operator><name>dtt_ctfp</name></name> <operator>=</operator> <name>src_ctfp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_dtt</name><operator>.</operator><name>dtt_type</name></name> <operator>=</operator> <name>src_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_dtt</name> <operator>=</operator> <operator>(</operator><name>dtrace_typeinfo_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>dtt_object</name> <operator>=</operator> <call><name>dt_module_lookup_by_ctf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dst_ctfp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dm_name</name></expr>,
<expr><operator>.</operator><name>dtt_ctfp</name> <operator>=</operator> <name>dst_ctfp</name></expr>,
<expr><operator>.</operator><name>dtt_type</name> <operator>=</operator> <name>dst_type</name></expr>,
}</block></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>dt_xlator_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_dtt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_dtt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dt_xlator_t</name> <modifier>*</modifier></type>
<name>dt_xlator_lookup_id</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>id_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatormap</name><index>[<expr><name>id</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_xlator_ident</name><parameter_list>(<parameter><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>ctfp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_POINTER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_ptrid</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>dt_node_t</name> <modifier>*</modifier></type>
<name>dt_xlator_member</name><parameter_list>(<parameter><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dnp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_xlator_dynamic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_locals</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
