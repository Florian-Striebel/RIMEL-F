<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_error.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
}</block> <decl><name><name>_dt_errlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>EDT_VERSION</name></expr>, <expr><literal type="string">"Client requested version newer than library"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_VERSINVAL</name></expr>, <expr><literal type="string">"Version is not properly formatted or is too large"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_VERSUNDEF</name></expr>, <expr><literal type="string">"Requested version is not supported by compiler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_VERSREDUCED</name></expr>, <expr><literal type="string">"Requested version conflicts with earlier setting"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_CTF</name></expr>, <expr><literal type="string">"Unexpected libctf error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_COMPILER</name></expr>, <expr><literal type="string">"Error in D program compilation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOTUPREG</name></expr>, <expr><literal type="string">"Insufficient tuple registers to generate code"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOMEM</name></expr>, <expr><literal type="string">"Memory allocation failure"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_INT2BIG</name></expr>, <expr><literal type="string">"Integer constant table limit exceeded"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_STR2BIG</name></expr>, <expr><literal type="string">"String constant table limit exceeded"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOMOD</name></expr>, <expr><literal type="string">"Unknown module name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOPROV</name></expr>, <expr><literal type="string">"Unknown provider name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOPROBE</name></expr>, <expr><literal type="string">"No probe matches description"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOSYM</name></expr>, <expr><literal type="string">"Unknown symbol name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOSYMADDR</name></expr>, <expr><literal type="string">"No symbol corresponds to address"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOTYPE</name></expr>, <expr><literal type="string">"Unknown type name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOVAR</name></expr>, <expr><literal type="string">"Unknown variable name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOAGG</name></expr>, <expr><literal type="string">"Unknown aggregation name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADSCOPE</name></expr>, <expr><literal type="string">"Improper use of scoping operator in type name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADSPEC</name></expr>, <expr><literal type="string">"Overspecified probe description"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADSPCV</name></expr>, <expr><literal type="string">"Undefined macro variable in probe description"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADID</name></expr>, <expr><literal type="string">"Unknown probe identifier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOTLOADED</name></expr>, <expr><literal type="string">"Module is no longer loaded"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOCTF</name></expr>, <expr><literal type="string">"Module does not contain any CTF data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DATAMODEL</name></expr>, <expr><literal type="string">"Module and program data models do not match"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DIFVERS</name></expr>, <expr><literal type="string">"Library uses newer DIF version than kernel"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADAGG</name></expr>, <expr><literal type="string">"Unknown aggregating action"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_FIO</name></expr>, <expr><literal type="string">"Error occurred while reading from input stream"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DIFINVAL</name></expr>, <expr><literal type="string">"DIF program content is invalid"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DIFSIZE</name></expr>, <expr><literal type="string">"DIF program exceeds maximum program size"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DIFFAULT</name></expr>, <expr><literal type="string">"DIF program contains invalid pointer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADPROBE</name></expr>, <expr><literal type="string">"Invalid probe specification"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADPGLOB</name></expr>, <expr><literal type="string">"Probe description has too many globbing characters"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOSCOPE</name></expr>, <expr><literal type="string">"Declaration scope stack underflow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NODECL</name></expr>, <expr><literal type="string">"Declaration stack underflow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DMISMATCH</name></expr>, <expr><literal type="string">"Data record list does not match statement"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DOFFSET</name></expr>, <expr><literal type="string">"Data record offset exceeds buffer boundary"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DALIGN</name></expr>, <expr><literal type="string">"Data record has inappropriate alignment"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADOPTNAME</name></expr>, <expr><literal type="string">"Invalid option name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADOPTVAL</name></expr>, <expr><literal type="string">"Invalid value for specified option"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADOPTCTX</name></expr>, <expr><literal type="string">"Option cannot be used from within a D program"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_CPPFORK</name></expr>, <expr><literal type="string">"Failed to fork preprocessor"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_CPPEXEC</name></expr>, <expr><literal type="string">"Failed to exec preprocessor"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_CPPENT</name></expr>, <expr><literal type="string">"Preprocessor not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_CPPERR</name></expr>, <expr><literal type="string">"Preprocessor failed to process input program"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_SYMOFLOW</name></expr>, <expr><literal type="string">"Symbol table identifier space exhausted"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ACTIVE</name></expr>, <expr><literal type="string">"Operation illegal when tracing is active"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DESTRUCTIVE</name></expr>, <expr><literal type="string">"Destructive actions not allowed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOANON</name></expr>, <expr><literal type="string">"No anonymous tracing state"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ISANON</name></expr>, <expr><literal type="string">"Can't claim anonymous state and enable probes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ENDTOOBIG</name></expr>, <expr><literal type="string">"END enablings exceed size of principal buffer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOCONV</name></expr>, <expr><literal type="string">"Failed to load type for printf conversion"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADCONV</name></expr>, <expr><literal type="string">"Incomplete printf conversion"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADERROR</name></expr>, <expr><literal type="string">"Invalid library ERROR action"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ERRABORT</name></expr>, <expr><literal type="string">"Abort due to error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DROPABORT</name></expr>, <expr><literal type="string">"Abort due to drop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_DIRABORT</name></expr>, <expr><literal type="string">"Abort explicitly directed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADRVAL</name></expr>, <expr><literal type="string">"Invalid return value from callback"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADNORMAL</name></expr>, <expr><literal type="string">"Invalid normalization"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BUFTOOSMALL</name></expr>, <expr><literal type="string">"Enabling exceeds size of buffer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADTRUNC</name></expr>, <expr><literal type="string">"Invalid truncation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BUSY</name></expr>, <expr><literal type="string">"DTrace cannot be used when kernel debugger is active"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ACCESS</name></expr>, <expr><literal type="string">"DTrace requires additional privileges"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOENT</name></expr>, <expr><literal type="string">"DTrace device not available on system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BRICKED</name></expr>, <expr><literal type="string">"Abort due to systemic unresponsiveness"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_HARDWIRE</name></expr>, <expr><literal type="string">"Failed to load language definitions"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ELFVERSION</name></expr>, <expr><literal type="string">"libelf is out-of-date with respect to libdtrace"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOBUFFERED</name></expr>, <expr><literal type="string">"Attempt to buffer output without handler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_UNSTABLE</name></expr>, <expr><literal type="string">"Description matched an unstable set of probes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADSETOPT</name></expr>, <expr><literal type="string">"Invalid setopt() library action"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADSTACKPC</name></expr>, <expr><literal type="string">"Invalid stack program counter size"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_BADAGGVAR</name></expr>, <expr><literal type="string">"Invalid aggregation variable identifier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_OVERSION</name></expr>, <expr><literal type="string">"Client requested deprecated version of library"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_ENABLING_ERR</name></expr>, <expr><literal type="string">"Failed to enable probe"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_NOPROBES</name></expr>, <expr><literal type="string">"No probe sites found for declared provider"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EDT_CANTLOAD</name></expr>, <expr><literal type="string">"Failed to load module"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>_dt_nerr</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>_dt_errlist</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>_dt_errlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dtrace_errmsg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>EDT_COMPILER</name> <operator>&amp;&amp;</operator> <name>dtp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <name>EDT_CTF</name> <operator>&amp;&amp;</operator> <name>dtp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ctf_errmsg</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>error</name> <operator>&gt;=</operator> <name>EDT_BASE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>error</name> <operator>-</operator> <name>EDT_BASE</name><operator>)</operator> <operator>&lt;</operator> <name>_dt_nerr</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_dt_nerr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_dt_errlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name> <operator>==</operator> <name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>_dt_errlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>str</name></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><literal type="string">"Unknown error"</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_errno</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>dt_set_errno</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type>
<name>_dt_set_errno</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errfile</name></name> <operator>=</operator> <name>errfile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errline</name></name> <operator>=</operator> <name>errline</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dt_get_errloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_errfile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_errline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_errfile</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errfile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_errline</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errline</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>dt_set_errmsg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errtag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errtag</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_cflags</name></name> <operator>&amp;</operator> <name>DTRACE_C_ETAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"[%s] "</literal></expr></argument>, <argument><expr><name>errtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_filetag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\"%s\", line %d: "</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lineno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"line %d: "</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>region</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"in %s: "</literal></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errmsg</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errtag</name></name> <operator>=</operator> <name>errtag</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dtrace_faultstr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fault</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block> <decl><name><name>faults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DTRACEFLT_BADADDR</name></expr>, <expr><literal type="string">"invalid address"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_BADALIGN</name></expr>, <expr><literal type="string">"invalid alignment"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_ILLOP</name></expr>, <expr><literal type="string">"illegal operation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_DIVZERO</name></expr>, <expr><literal type="string">"divide-by-zero"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_NOSCRATCH</name></expr>, <expr><literal type="string">"out of scratch space"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_KPRIV</name></expr>, <expr><literal type="string">"invalid kernel access"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_UPRIV</name></expr>, <expr><literal type="string">"invalid user access"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_TUPOFLOW</name></expr>, <expr><literal type="string">"tuple stack overflow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_BADSTACK</name></expr>, <expr><literal type="string">"bad stack"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACEFLT_LIBRARY</name></expr>, <expr><literal type="string">"library-level fault"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>faults</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>faults</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>fault</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>faults</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="string">"unknown fault"</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
