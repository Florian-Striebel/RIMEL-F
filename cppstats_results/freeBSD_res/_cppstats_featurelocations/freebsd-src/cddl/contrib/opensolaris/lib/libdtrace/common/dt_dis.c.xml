<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_dis.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_ident.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u, %%r%u, %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_R2</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_branch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_LABEL</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s [%%r%u], %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u, [%%r%u]"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_r1rd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u, %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u, %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_R2</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_tst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_dis_varname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>scope</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_difv_t</name> <modifier>*</modifier></type><name>dvp</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_varlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dvp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> <name><name>dvp</name><operator>-&gt;</operator><name>dtdv_scope</name></name> <operator>==</operator> <name>scope</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_name</name></name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_strlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name></name> <operator>+</operator> <name><name>dvp</name><operator>-&gt;</operator><name>dtdv_name</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint_t</name></type>
<name>dt_dis_scope</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>DIFV_SCOPE_LOCAL</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>DIFV_SCOPE_THREAD</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <return>return <expr><operator>(</operator><name>DIFV_SCOPE_GLOBAL</name><operator>)</operator></expr>;</return>
<default>default:</default> <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1u</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_lda</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>var</name> <init>= <expr><call><name>DIF_INSTR_R1</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vname</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_VAR(%u), %%r%u, %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_R2</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vname</name> <operator>=</operator> <call><name>dt_dis_varname</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>dt_dis_scope</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t! DT_VAR(%u) = \"%s\""</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_ldv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>var</name> <init>= <expr><call><name>DIF_INSTR_VAR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vname</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_VAR(%u), %%r%u"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vname</name> <operator>=</operator> <call><name>dt_dis_varname</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>dt_dis_scope</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t! DT_VAR(%u) = \"%s\""</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_stv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>var</name> <init>= <expr><call><name>DIF_INSTR_VAR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vname</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u, DT_VAR(%u)"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RS</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vname</name> <operator>=</operator> <call><name>dt_dis_varname</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><call><name>dt_dis_scope</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t! DT_VAR(%u) = \"%s\""</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_setx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>intptr</name> <init>= <expr><call><name>DIF_INSTR_INTEGER</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_INTEGER[%u], %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>intptr</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intptr</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_intlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t! 0x%llx"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_inttab</name><index>[<expr><name>intptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_sets</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>strptr</name> <init>= <expr><call><name>DIF_INSTR_STRING</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_STRING[%u], %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>strptr</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strptr</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_strlen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t! \"%s\""</literal></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name></name> <operator>+</operator> <name>strptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_ret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s %%r%u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_call</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>subr</name> <init>= <expr><call><name>DIF_INSTR_SUBR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DIF_SUBR(%u), %%r%u\t\t! %s"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subr</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dtrace_subrstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_pushts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tnames</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"D type"</literal></expr>, <expr><literal type="string">"string"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>type</name> <init>= <expr><call><name>DIF_INSTR_TYPE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DIF_OP_PUSHTV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_TYPE(%u), %%r%u"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RS</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">"\t\t"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_TYPE(%u), %%r%u, %%r%u"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_R2</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIF_INSTR_RS</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>tnames</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>tnames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s! DT_TYPE(%u) = %s"</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>tnames</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_xlate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>dif_instr_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>xlr</name> <init>= <expr><call><name>DIF_INSTR_XLREF</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4s DT_XLREF[%u], %%r%u"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>xlr</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xlr</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t\t! DT_XLREF[%u] = %u.%s"</literal></expr></argument>, <argument><expr><name>xlr</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name><index>[<expr><name>xlr</name></expr>]</index></name><operator>-&gt;</operator><name><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_xlator</name><operator>-&gt;</operator><name>dx_id</name></name></expr></argument>,
<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name><index>[<expr><name>xlr</name></expr>]</index></name><operator>-&gt;</operator><name>dn_membname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_dis_typestr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_diftype_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>kind</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ckind</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>dtdt_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIF_TYPE_CTF</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"D type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIF_TYPE_STRING</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>dtdt_kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>dtdt_ckind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"union"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FORWARD</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"forward"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"typedef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"volatile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><literal type="string">"restrict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>ckind</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ckind</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>dtdt_ckind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>dtdt_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DIF_TF_BYREF</name> <operator>|</operator> <name>DIF_TF_BYUREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s (%s) by %sref (size %lu)"</literal></expr></argument>,
<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>ckind</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>dtdt_flags</name></name> <operator>&amp;</operator> <name>DIF_TF_BYUREF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"user "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>dtdt_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s (%s) (size %lu)"</literal></expr></argument>,
<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>ckind</name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>dtdt_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_dis_rtab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dof_relodesc_t</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n%-4s %-8s %-8s %s\n"</literal></expr></argument>,
<argument><expr><name>rtag</name></expr></argument>, <argument><expr><literal type="string">"OFFSET"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr><operator>,</operator> <expr><name>rp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4u %-8llu %-8llu %s\n"</literal></expr></argument>,
<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>dofr_type</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>rp</name><operator>-&gt;</operator><name>dofr_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name><name>rp</name><operator>-&gt;</operator><name>dofr_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>dofr_name</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_dis</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>opent</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>op_func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>dif_instr_t</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>optab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"(illegal opcode)"</literal></expr>, <expr><name>dt_dis_str</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"or"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xor"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"and"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sll"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"srl"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sub"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mul"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sdiv"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"udiv"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"srem"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"urem"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"not"</literal></expr>, <expr><name>dt_dis_r1rd</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><name>dt_dis_r1rd</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmp"</literal></expr>, <expr><name>dt_dis_cmp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tst"</literal></expr>, <expr><name>dt_dis_tst</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ba"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"be"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bne"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bg"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bgu"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bge"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bgeu"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bl"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"blu"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ble"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bleu"</literal></expr>, <expr><name>dt_dis_branch</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldsb"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldsh"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldsw"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldub"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lduh"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lduw"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldx"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ret"</literal></expr>, <expr><name>dt_dis_ret</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nop"</literal></expr>, <expr><name>dt_dis_str</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"setx"</literal></expr>, <expr><name>dt_dis_setx</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sets"</literal></expr>, <expr><name>dt_dis_sets</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scmp"</literal></expr>, <expr><name>dt_dis_cmp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldga"</literal></expr>, <expr><name>dt_dis_lda</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldgs"</literal></expr>, <expr><name>dt_dis_ldv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stgs"</literal></expr>, <expr><name>dt_dis_stv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldta"</literal></expr>, <expr><name>dt_dis_lda</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldts"</literal></expr>, <expr><name>dt_dis_ldv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stts"</literal></expr>, <expr><name>dt_dis_stv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sra"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"call"</literal></expr>, <expr><name>dt_dis_call</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pushtr"</literal></expr>, <expr><name>dt_dis_pushts</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pushtv"</literal></expr>, <expr><name>dt_dis_pushts</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"popts"</literal></expr>, <expr><name>dt_dis_str</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flushts"</literal></expr>, <expr><name>dt_dis_str</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldgaa"</literal></expr>, <expr><name>dt_dis_ldv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldtaa"</literal></expr>, <expr><name>dt_dis_ldv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stgaa"</literal></expr>, <expr><name>dt_dis_stv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sttaa"</literal></expr>, <expr><name>dt_dis_stv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldls"</literal></expr>, <expr><name>dt_dis_ldv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stls"</literal></expr>, <expr><name>dt_dis_stv</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"allocs"</literal></expr>, <expr><name>dt_dis_r1rd</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copys"</literal></expr>, <expr><name>dt_dis_log</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stb"</literal></expr>, <expr><name>dt_dis_store</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sth"</literal></expr>, <expr><name>dt_dis_store</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stw"</literal></expr>, <expr><name>dt_dis_store</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stx"</literal></expr>, <expr><name>dt_dis_store</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uldsb"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uldsh"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uldsw"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uldub"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ulduh"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ulduw"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uldx"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rldsb"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rldsh"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rldsw"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rldub"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rlduh"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rlduw"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rldx"</literal></expr>, <expr><name>dt_dis_load</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xlate"</literal></expr>, <expr><name>dt_dis_xlate</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xlarg"</literal></expr>, <expr><name>dt_dis_xlate</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opent</name></name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\nDIFO %p returns %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dp</name></expr></argument>,
<argument><expr><call><name>dt_dis_typestr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_rtype</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-3s %-8s %s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"OFF"</literal></expr></argument>, <argument><expr><literal type="string">"OPCODE"</literal></expr></argument>, <argument><expr><literal type="string">"INSTRUCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>opcode</name> <init>= <expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>optab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>optab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>&amp;</operator><name><name>optab</name><index>[<expr><name>opcode</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%02lu: %08x "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>op</name><operator>-&gt;</operator><name>op_func</name></name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>op_name</name></name></expr></argument>, <argument><expr><name>instr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_varlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n%-16s %-4s %-3s %-3s %-4s %s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"NAME"</literal></expr></argument>, <argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><literal type="string">"KND"</literal></expr></argument>, <argument><expr><literal type="string">"SCP"</literal></expr></argument>, <argument><expr><literal type="string">"FLAG"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_varlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_difv_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>kind</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>scope</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>flags</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIFV_KIND_ARRAY</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"arr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIFV_KIND_SCALAR</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><literal type="string">"scl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_scope</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIFV_SCOPE_GLOBAL</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><literal type="string">"glb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIFV_SCOPE_THREAD</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><literal type="string">"tls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIFV_SCOPE_LOCAL</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><literal type="string">"loc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_scope</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DIFV_F_REF</name> <operator>|</operator> <name>DIFV_F_MOD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/0x%x"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>DIFV_F_REF</name> <operator>|</operator> <name>DIFV_F_MOD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>&amp;</operator> <name>DIFV_F_REF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"/r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>&amp;</operator> <name>DIFV_F_MOD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"/w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-16s %-4u %-3s %-3s %-4s %s\n"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_name</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>dtdv_id</name></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>flags</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>dt_dis_typestr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dtdv_type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n%-4s %-3s %-12s %s\n"</literal></expr></argument>,
<argument><expr><literal type="string">"XLID"</literal></expr></argument>, <argument><expr><literal type="string">"ARG"</literal></expr></argument>, <argument><expr><literal type="string">"MEMBER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_xlator</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%-4u %-3d %-12s %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_arg</name></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membname</name></name></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_krelen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_dis_rtab</name><argument_list>(<argument><expr><literal type="string">"KREL"</literal></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_krelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_urelen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_dis_rtab</name><argument_list>(<argument><expr><literal type="string">"UREL"</literal></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_urelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
