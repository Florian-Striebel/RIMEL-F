<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_open.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/modctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/systeminfo.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/linker.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_PTHREAD_SEMANTICS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_PTHREAD_SEMANTICS</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_printf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ieeefp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ATTR_STABCMN</name></cpp:macro> <cpp:value>{ DTRACE_STABILITY_STABLE, DTRACE_STABILITY_STABLE, DTRACE_CLASS_COMMON }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ATTR_EVOLCMN</name></cpp:macro> <cpp:value>{ DTRACE_STABILITY_EVOLVING, DTRACE_STABILITY_EVOLVING, DTRACE_CLASS_COMMON }</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_0</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 0, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 1, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_2</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 2, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_2_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 2, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_2_2</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 2, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_3</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 3, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_4</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 4, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_4_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 4, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_5</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 5, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_6</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 6, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_6_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 6, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_6_2</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 6, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_6_3</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 6, 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_7</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 7, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_7_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 7, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_8</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 8, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_8_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 8, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_9</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 9, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_9_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 9, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_10</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 10, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_11</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 11, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_12</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 12, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_12_1</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 12, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_1_13</name></cpp:macro> <cpp:value>DT_VERSION_NUMBER(1, 13, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_LATEST</name></cpp:macro> <cpp:value>DT_VERS_1_13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERS_STRING</name></cpp:macro> <cpp:value>"Sun D 1.13"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_version_t</name></type> <name><name>_dtrace_versions</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>DT_VERS_1_0</name></expr>,
<expr><name>DT_VERS_1_1</name></expr>,
<expr><name>DT_VERS_1_2</name></expr>,
<expr><name>DT_VERS_1_2_1</name></expr>,
<expr><name>DT_VERS_1_2_2</name></expr>,
<expr><name>DT_VERS_1_3</name></expr>,
<expr><name>DT_VERS_1_4</name></expr>,
<expr><name>DT_VERS_1_4_1</name></expr>,
<expr><name>DT_VERS_1_5</name></expr>,
<expr><name>DT_VERS_1_6</name></expr>,
<expr><name>DT_VERS_1_6_1</name></expr>,
<expr><name>DT_VERS_1_6_2</name></expr>,
<expr><name>DT_VERS_1_6_3</name></expr>,
<expr><name>DT_VERS_1_7</name></expr>,
<expr><name>DT_VERS_1_7_1</name></expr>,
<expr><name>DT_VERS_1_8</name></expr>,
<expr><name>DT_VERS_1_8_1</name></expr>,
<expr><name>DT_VERS_1_9</name></expr>,
<expr><name>DT_VERS_1_9_1</name></expr>,
<expr><name>DT_VERS_1_10</name></expr>,
<expr><name>DT_VERS_1_11</name></expr>,
<expr><name>DT_VERS_1_12</name></expr>,
<expr><name>DT_VERS_1_12_1</name></expr>,
<expr><name>DT_VERS_1_13</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>curthread_str</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>intmtx_str</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>threadmtx_str</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>rwlock_str</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sxlock_str</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_ident_t</name></type> <name><name>_dtrace_globals</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"alloca"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_ALLOCA</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void *(size_t)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg0"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG0</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg1"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG1</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg2"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG2</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg3"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG3</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg4"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG4</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg5"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG5</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg6"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG6</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg7"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG7</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg8"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG8</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arg9"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARG9</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"args"</literal></expr>, <expr><name>DT_IDENT_ARRAY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_ARGS</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_args</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avg"</literal></expr>, <expr><name>DT_IDENT_AGGFUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DTRACEAGG_AVG</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(@)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"basename"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_BASENAME</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"string(const char *)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bcopy"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_BCOPY</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(void *, void *, size_t)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"breakpoint"</literal></expr>, <expr><name>DT_IDENT_ACTFUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ACT_BREAKPOINT</name></expr>,
<expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void()"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"caller"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_CALLER</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"uintptr_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chill"</literal></expr>, <expr><name>DT_IDENT_ACTFUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ACT_CHILL</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(int)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cleanpath"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_CLEANPATH</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>,
<expr><name>DT_VERS_1_0</name></expr>, <expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"string(const char *)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><name>DT_IDENT_ACTFUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ACT_CLEAR</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(...)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"commit"</literal></expr>, <expr><name>DT_IDENT_ACTFUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ACT_COMMIT</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(int)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copyin"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_COPYIN</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void *(uintptr_t, size_t)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copyinstr"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_COPYINSTR</name></expr>,
<expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"string(uintptr_t, [size_t])"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copyinto"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_COPYINTO</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>,
<expr><name>DT_VERS_1_0</name></expr>, <expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(uintptr_t, size_t, void *)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copyout"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_COPYOUT</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(void *, uintptr_t, size_t)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copyoutstr"</literal></expr>, <expr><name>DT_IDENT_FUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_SUBR_COPYOUTSTR</name></expr>,
<expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void(char *, uintptr_t, size_t)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"count"</literal></expr>, <expr><name>DT_IDENT_AGGFUNC</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DTRACEAGG_COUNT</name></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr>, <expr><literal type="string">"void()"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"curthread"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DIF_VAR_CURTHREAD</name></expr>,
<expr><block>{ <expr><name>DTRACE_STABILITY_STABLE</name></expr>, <expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_CLASS_COMMON</name></expr> }</block></expr>, <expr><name>DT_VERS_1_0</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><literal type="string">"genunix`kthread_t *"</literal></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr>, <expr><name>curthread_str</name></expr> }</block></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ddi_pathname"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_DDI_PATHNAME</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(void *, int64_t)"</literal></expr></expr_stmt> </block_content>}</block></decl_stmt><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"denormalize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_DENORMALIZE</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"dirname"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_DIRNAME</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"discard"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_DISCARD</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(int)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"epid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_EPID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"errno"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_ERRNO</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"int"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"execargs"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_EXECARGS</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"execname"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_EXECNAME</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"exit"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_EXIT</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(int)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"freopen"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_FREOPEN</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_1</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ftruncate"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_FTRUNCATE</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void()"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"func"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_SYM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_symaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"getmajor"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_GETMAJOR</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"genunix`major_t(genunix`dev_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"getminor"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_GETMINOR</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"genunix`minor_t(genunix`dev_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"htonl"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_HTONL</name></expr><operator>,</operator> <expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_3</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uint32_t(uint32_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"htonll"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_HTONLL</name></expr><operator>,</operator> <expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_3</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uint64_t(uint64_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"htons"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_HTONS</name></expr><operator>,</operator> <expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_3</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uint16_t(uint16_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"getf"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_GETF</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_10</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"file_t *(int)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"gid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_GID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"gid_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"id"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_ID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"index"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_INDEX</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(const char *, const char *, [int])"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"inet_ntoa"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_INET_NTOA</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>DT_VERS_1_5</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(ipaddr_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>DT_VERS_1_5</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(in_addr_t *)"</literal></expr></expr_stmt> },
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"inet_ntoa6"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_INET_NTOA6</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>DT_VERS_1_5</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(in6_addr_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>DT_VERS_1_5</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(struct in6_addr *)"</literal></expr></expr_stmt> },
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"inet_ntop"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_INET_NTOP</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_5</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(int, void *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ipl"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_IPL</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> <expr_stmt><expr><literal type="string">"jailname"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_JAILNAME</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_13</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"jid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_JID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_13</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"int"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"json"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_JSON</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_11</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"jstack"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_JSTACK</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"stack(...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"lltostr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_LLTOSTR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(int64_t, [int])"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"llquantize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_LLQUANTIZE</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_7</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator>
<expr><literal type="string">"void(@, int32_t, int32_t, int32_t, int32_t, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"lquantize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_LQUANTIZE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, int32_t, int32_t, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"max"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_MAX</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"memref"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MEMREF</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uintptr_t *(void *, size_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> <expr_stmt><expr><literal type="string">"memstr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MEMSTR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(void *, char, size_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"min"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_MIN</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mod"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_MOD</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_symaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> <expr_stmt><expr><literal type="string">"msgdsize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MSGDSIZE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"size_t(mblk_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"msgsize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MSGSIZE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"size_t(mblk_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_owned"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_OWNED</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(genunix`kmutex_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_owner"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_OWNER</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"genunix`kthread_t *(genunix`kmutex_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_type_adaptive"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_TYPE_ADAPTIVE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(genunix`kmutex_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_type_spin"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_TYPE_SPIN</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(genunix`kmutex_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_owned"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_OWNED</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>intmtx_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_owner"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_OWNER</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>threadmtx_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_type_adaptive"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_TYPE_ADAPTIVE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>intmtx_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"mutex_type_spin"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_MUTEX_TYPE_SPIN</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>intmtx_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ntohl"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_NTOHL</name></expr><operator>,</operator> <expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_3</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uint32_t(uint32_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ntohll"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_NTOHLL</name></expr><operator>,</operator> <expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_3</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uint64_t(uint64_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ntohs"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_NTOHS</name></expr><operator>,</operator> <expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_3</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"uint16_t(uint16_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"normalize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_NORMALIZE</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"panic"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_PANIC</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void()"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"pid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_PID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"pid_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ppid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_PPID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"pid_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"print"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_PRINT</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_9</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"printa"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_PRINTA</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"printf"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_PRINTF</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"printm"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_PRINTM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(size_t, uintptr_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"probefunc"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_PROBEFUNC</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"probemod"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_PROBEMOD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"probename"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_PROBENAME</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"probeprov"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_PROBEPROV</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"progenyof"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_PROGENYOF</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(pid_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"quantize"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_QUANTIZE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"raise"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_RAISE</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(int)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rand"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RAND</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int()"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rindex"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RINDEX</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(const char *, const char *, [int])"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rw_iswriter"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RW_ISWRITER</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(genunix`krwlock_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rw_read_held"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RW_READ_HELD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(genunix`krwlock_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rw_write_held"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RW_WRITE_HELD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int(genunix`krwlock_t *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rw_iswriter"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RW_ISWRITER</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>rwlock_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rw_read_held"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RW_READ_HELD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>rwlock_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"rw_write_held"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_RW_WRITE_HELD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>rwlock_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"self"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_PTR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"void"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"setopt"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_SETOPT</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(const char *, [const char *])"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"speculate"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_SPECULATE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(int)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"speculation"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_SPECULATION</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int()"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"stack"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_STACK</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"stack(...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"stackdepth"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_STACKDEPTH</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint32_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"stddev"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_STDDEV</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_6</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"stop"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_STOP</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void()"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strchr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRCHR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, char)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strlen"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRLEN</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"size_t(const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strjoin"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRJOIN</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strrchr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRRCHR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, char)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strstr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRSTR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strtok"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRTOK</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"strtoll"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_STRTOLL</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_11</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"int64_t(const char *, [int])"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"substr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_SUBSTR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_1</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *, int, [int])"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"sum"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_AGGFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DTRACEAGG_SUM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> <expr_stmt><expr><literal type="string">"sx_isexclusive"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_SX_ISEXCLUSIVE</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>sxlock_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"sx_shared_held"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_SX_SHARED_HELD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>sxlock_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"sx_exclusive_held"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_SX_EXCLUSIVE_HELD</name></expr><operator>,</operator>
<expr><name>DT_ATTR_EVOLCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><name>sxlock_str</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <expr_stmt><expr><literal type="string">"sym"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_SYM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_symaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"system"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_SYSTEM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"this"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_PTR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"void"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"tid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_TID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"id_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"timestamp"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_TIMESTAMP</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint64_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"tolower"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_TOLOWER</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_8</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"toupper"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_FUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_SUBR_TOUPPER</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_8</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"string(const char *)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"trace"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_TRACE</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"tracemem"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_TRACEMEM</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(@, size_t, ...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"trunc"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_TRUNC</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"void(...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"uaddr"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_UADDR</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_usymaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ucaller"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_UCALLER</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint64_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ufunc"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_USYM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_usymaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"uid"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_UID</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uid_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"umod"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_UMOD</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_usymaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"uregs"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ARRAY</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_UREGS</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_regs</name></expr><operator>,</operator> <expr><name>NULL</name></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ustack"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_USTACK</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"stack(...)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"ustackdepth"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_USTACKDEPTH</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_2</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint32_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"usym"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_ACTFUNC</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DT_ACT_USYM</name></expr><operator>,</operator> <expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator>
<expr><name>DT_VERS_1_2</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_func</name></expr><operator>,</operator> <expr><literal type="string">"_usymaddr(uintptr_t)"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"vtimestamp"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_VTIMESTAMP</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"uint64_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"walltimestamp"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_WALLTIMESTAMP</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator>
<expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"int64_t"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<block>{<block_content> <expr_stmt><expr><literal type="string">"zonename"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_ZONENAME</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_0</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"string"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> <expr_stmt><expr><literal type="string">"cpu"</literal></expr><operator>,</operator> <expr><name>DT_IDENT_SCALAR</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>DIF_VAR_CPU</name></expr><operator>,</operator>
<expr><name>DT_ATTR_STABCMN</name></expr><operator>,</operator> <expr><name>DT_VERS_1_6_3</name></expr><operator>,</operator> <expr><operator>&amp;</operator><name>dt_idops_type</name></expr><operator>,</operator> <expr><literal type="string">"int"</literal></expr></expr_stmt> </block_content>}</block><operator>,</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content> <expr_stmt><expr><name>NULL</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>NULL</name></expr></expr_stmt> </block_content>}</block>
};





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_intrinsic_t</name></type> <name><name>_dtrace_intrinsics_32</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"void"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"char"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name> <operator>|</operator> <name>CTF_INT_CHAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"short"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed char"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name> <operator>|</operator> <name>CTF_INT_CHAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed short"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed int"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed long long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned char"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_CHAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned short"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned int"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"_Bool"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_BOOL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_SINGLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"double"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_DOUBLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long double"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_LDOUBLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float imaginary"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_IMAGRY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"double imaginary"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_DIMAGRY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long double imaginary"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_LDIMAGRY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float complex"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_CPLX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"double complex"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_DCPLX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long double complex"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_LDCPLX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_intrinsic_t</name></type> <name><name>_dtrace_intrinsics_64</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"void"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"char"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name> <operator>|</operator> <name>CTF_INT_CHAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"short"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed char"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name> <operator>|</operator> <name>CTF_INT_CHAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed short"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed int"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"signed long long"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned char"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_CHAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned short"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned int"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"_Bool"</literal></expr>, <expr><block>{ <expr><name>CTF_INT_BOOL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><name>CTF_K_INTEGER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_SINGLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"double"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_DOUBLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long double"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_LDOUBLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float imaginary"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_IMAGRY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"double imaginary"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_DIMAGRY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long double imaginary"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_LDIMAGRY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float complex"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_CPLX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"double complex"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_DCPLX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long double complex"</literal></expr>, <expr><block>{ <expr><name>CTF_FP_LDCPLX</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><name>CTF_K_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_typedef_t</name></type> <name><name>_dtrace_typedefs_32</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"char"</literal></expr>, <expr><literal type="string">"int8_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"short"</literal></expr>, <expr><literal type="string">"int16_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"int32_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long long"</literal></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"intptr_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"ssize_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned char"</literal></expr>, <expr><literal type="string">"uint8_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned short"</literal></expr>, <expr><literal type="string">"uint16_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><literal type="string">"uint32_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><literal type="string">"uint64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned char"</literal></expr>, <expr><literal type="string">"uchar_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned short"</literal></expr>, <expr><literal type="string">"ushort_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><literal type="string">"uint_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><literal type="string">"ulong_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><literal type="string">"u_longlong_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"ptrdiff_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><literal type="string">"uintptr_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><literal type="string">"size_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"id_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"pid_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_typedef_t</name></type> <name><name>_dtrace_typedefs_64</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"char"</literal></expr>, <expr><literal type="string">"int8_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"short"</literal></expr>, <expr><literal type="string">"int16_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"int32_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"int64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"intptr_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"ssize_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned char"</literal></expr>, <expr><literal type="string">"uint8_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned short"</literal></expr>, <expr><literal type="string">"uint16_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><literal type="string">"uint32_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><literal type="string">"uint64_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned char"</literal></expr>, <expr><literal type="string">"uchar_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned short"</literal></expr>, <expr><literal type="string">"ushort_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned"</literal></expr>, <expr><literal type="string">"uint_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><literal type="string">"ulong_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><literal type="string">"u_longlong_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"ptrdiff_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><literal type="string">"uintptr_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><literal type="string">"size_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"id_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"pid_t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_intdesc_t</name></type> <name><name>_dtrace_ints_32</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0x7fffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned int"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0xffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0x7fffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0xffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0x7fffffffffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0xffffffffffffffffULL</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_intdesc_t</name></type> <name><name>_dtrace_ints_64</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"int"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0x7fffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned int"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0xffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0x7fffffffffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0xffffffffffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"long long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0x7fffffffffffffffULL</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unsigned long long"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>CTF_ERR</name></expr>, <expr><literal type="number">0xffffffffffffffffULL</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dt_ident_t</name></type> <name><name>_dtrace_macros</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"egid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"euid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pgid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ppid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"projid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"taskid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"target"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uid"</literal></expr>, <expr><name>DT_IDENT_SCALAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DT_ATTR_STABCMN</name></expr>, <expr><name>DT_VERS_1_0</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_dtrace_hardwire</name><index>[]</index></name> <init>= <expr><literal type="string">"\
inline long NULL = 0; \n\
#pragma D binding \"1.0\" NULL\n"</literal></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dtrace_conf_t</name></type> <name>_dtrace_conf</name> <init>= <expr><block>{
<expr><name>DIF_VERSION</name></expr>,
<expr><name>DIF_DIR_NREGS</name></expr>,
<expr><name>DIF_DTR_NREGS</name></expr>,
<expr><name>CTF_MODEL_NATIVE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_maxattr</name> <init>= <expr><block>{
<expr><name>DTRACE_STABILITY_MAX</name></expr>,
<expr><name>DTRACE_STABILITY_MAX</name></expr>,
<expr><name>DTRACE_CLASS_MAX</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_defattr</name> <init>= <expr><block>{
<expr><name>DTRACE_STABILITY_STABLE</name></expr>,
<expr><name>DTRACE_STABILITY_STABLE</name></expr>,
<expr><name>DTRACE_CLASS_COMMON</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_symattr</name> <init>= <expr><block>{
<expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_CLASS_UNKNOWN</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_typattr</name> <init>= <expr><block>{
<expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_CLASS_UNKNOWN</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_attribute_t</name></type> <name>_dtrace_prvattr</name> <init>= <expr><block>{
<expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_STABILITY_PRIVATE</name></expr>,
<expr><name>DTRACE_CLASS_UNKNOWN</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_pattr_t</name></type> <name>_dtrace_prvdesc</name> <init>= <expr><block>{
<expr><block>{ <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_CLASS_COMMON</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_CLASS_COMMON</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_CLASS_COMMON</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_CLASS_COMMON</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>, <expr><name>DTRACE_CLASS_COMMON</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_defcpp</name> <init>= <expr><literal type="string">"/usr/ccs/lib/cpp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_defld</name> <init>= <expr><literal type="string">"/usr/ccs/bin/ld"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_defcpp</name> <init>= <expr><literal type="string">"cpp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_defld</name> <init>= <expr><literal type="string">"ld"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_defobjcopy</name> <init>= <expr><literal type="string">"objcopy"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_libdir</name> <init>= <expr><literal type="string">"/usr/lib/dtrace"</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_provdir</name> <init>= <expr><literal type="string">"/dev/dtrace/provider"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_libdir32</name> <init>= <expr><literal type="string">"/usr/lib32/dtrace"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_dtrace_provdir</name> <init>= <expr><literal type="string">"/dev/dtrace"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>_dtrace_strbuckets</name> <init>= <expr><literal type="number">211</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_dtrace_intbuckets</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>_dtrace_strsize</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>_dtrace_stkindent</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>_dtrace_pidbuckets</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>_dtrace_pidlrulim</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_dtrace_bufsize</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_dtrace_argmax</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_dtrace_debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>_dtrace_version</name> <init>= <expr><name>DT_VERS_STRING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_dtrace_rdvers</name> <init>= <expr><name>RD_VERSION</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>dt_fdlist</name> <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>df_fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>df_ents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>df_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_fdlist_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>init</name><name>(</name><name>_dtrace_init</name><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>_dtrace_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(constructor</function_decl>))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>_dtrace_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>_dtrace_debug</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DTRACE_DEBUG"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>_dtrace_rdvers</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>_dtrace_rdvers</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rd_init</name><argument_list>(<argument><expr><name>_dtrace_rdvers</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RD_OK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fpsetprec</name><argument_list>(<argument><expr><name>FP_PE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dtrace_hdl_t</name> <modifier>*</modifier></type>
<name>set_open_errno</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dtp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dtrace_close</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_provmod_open</name><parameter_list>(<parameter><decl><type><name>dt_provmod_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>provmod</name></decl></parameter>, <parameter><decl><type><name>dt_fdlist_t</name> <modifier>*</modifier></type><name>dfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_provmod_t</name> <modifier>*</modifier></type><name>prov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dirp</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>_dtrace_provdir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dirent</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>dirent</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>readdir_r</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dfp</name><operator>-&gt;</operator><name>df_ents</name></name> <operator>==</operator> <name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name></expr> ?</condition><then> <expr><name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_fds</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fds</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_fds</name></name> <operator>=</operator> <name>fds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
<argument><expr><name>_dtrace_provdir</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>prov</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_provmod_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>prov</name><operator>-&gt;</operator><name>dp_name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>prov</name><operator>-&gt;</operator><name>dp_name</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prov</name><operator>-&gt;</operator><name>dp_next</name></name> <operator>=</operator> <operator>*</operator><name>provmod</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>provmod</name> <operator>=</operator> <name>prov</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"opened provider %s\n"</literal></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_fds</name><index>[<expr><name><name>dfp</name><operator>-&gt;</operator><name>df_ents</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>closedir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_providers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"debug.dtrace.providers"</literal></expr></argument>,<argument><expr><name>p_providers</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_providers</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_providers</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>p_providers</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_providers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_providers</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_providers</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_providers</name></expr>;</expr_stmt>





<while>while <condition>(<expr><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dfp</name><operator>-&gt;</operator><name>df_ents</name></name> <operator>==</operator> <name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name></expr> ?</condition><then> <expr><name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_fds</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fds</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_fds</name></name> <operator>=</operator> <name>fds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/dtrace/%s"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>prov</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_provmod_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>prov</name><operator>-&gt;</operator><name>dp_name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>prov</name><operator>-&gt;</operator><name>dp_name</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prov</name><operator>-&gt;</operator><name>dp_next</name></name> <operator>=</operator> <operator>*</operator><name>provmod</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>provmod</name> <operator>=</operator> <name>prov</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"opened provider %s\n"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfp</name><operator>-&gt;</operator><name>df_fds</name><index>[<expr><name><name>dfp</name><operator>-&gt;</operator><name>df_ents</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_providers</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_providers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_provmod_destroy</name><parameter_list>(<parameter><decl><type><name>dt_provmod_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>provmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_provmod_t</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>current</name> <operator>=</operator> <operator>*</operator><name>provmod</name></expr>;</init> <condition><expr><name>current</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>current</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>dp_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>dp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>provmod</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_get_sysinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rv</name> <init>= <expr><call><name>sysinfo</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rv</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>rv</name></expr></argument> &gt;</argument_list></name> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>dtrace_hdl_t</name> <modifier>*</modifier></type>
<name>dt_vopen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ftfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>fterr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provmod_t</name> <modifier>*</modifier></type><name>provmod</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_intrinsic_t</name> <modifier>*</modifier></type><name>dinp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_typedef_t</name> <modifier>*</modifier></type><name>dtyp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_funcinfo_t</name></type> <name>ctc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>ctr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dt_fdlist_t</name></type> <name>df</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>isadef</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>utsdef</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <name>DTRACE_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_VERSION</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name>DTRACE_VERSION</name></expr>)</condition> <block>{<block_content>











<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_OVERSION</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>DTRACE_O_MASK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_LP64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_ILP32</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vector</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_ELFVERSION</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vector</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_NODEV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>alloc</name>;</goto></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>dt_provmod_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>provmod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dtfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/dtrace/dtrace"</literal></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <ternary><condition><expr><name>dtfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <call><name>modfind</name><argument_list>(<argument><expr><literal type="string">"dtraceall"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kldload</name><argument_list>(<argument><expr><literal type="string">"dtraceall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dtfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/dtrace/dtrace"</literal></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ftfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/dtrace/provider/fasttrap"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ftfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/dtrace/fasttrap"</literal></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fterr</name> <operator>=</operator> <ternary><condition><expr><name>ftfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>df</name><operator>.</operator><name>df_ents</name></name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>df</name><operator>.</operator><name>df_fds</name><index>[<expr><name><name>df</name><operator>.</operator><name>df_ents</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>df</name><operator>.</operator><name>df_fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>dtfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_provmod_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>provmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENOENT</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>EDT_NOENT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EBUSY</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>EDT_BUSY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EACCES</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>EDT_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>alloc</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dtp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_hdl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_provmod_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>provmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_hdl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_oflags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_prcmode</name></name> <operator>=</operator> <name>DT_PROC_STOP_PREINIT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_prcmode</name></name> <operator>=</operator> <name>DT_PROC_STOP_POSTINIT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_linkmode</name></name> <operator>=</operator> <name>DT_LINK_KERNEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_linktype</name></name> <operator>=</operator> <name>DT_LTYP_ELF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatemode</name></name> <operator>=</operator> <name>DT_XL_STATIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdcmode</name></name> <operator>=</operator> <name>DT_STDC_XA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_encoding</name></name> <operator>=</operator> <name>DT_ENCODING_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fd</name></name> <operator>=</operator> <name>dtfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name> <operator>=</operator> <name>ftfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fterr</name></name> <operator>=</operator> <name>fterr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name> <operator>=</operator> <name>_dtrace_strbuckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_module_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_module_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_provbuckets</name></name> <operator>=</operator> <name>_dtrace_strbuckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_provbuckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_provider_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_init</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vmax</name></name> <operator>=</operator> <name>DT_VERS_LATEST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>_dtrace_defcpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_args</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ld_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>_dtrace_defld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_objcopy_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>_dtrace_defobjcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_provmod</name></name> <operator>=</operator> <name>provmod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name> <operator>=</operator> <name>vector</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_varg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dof_init</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_uts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_proc_env</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_ld_path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_objcopy_path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DTRACEOPT_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DTRACEOPT_UNSET</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>strbasename</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>isadef</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>isadef</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-D__SUNW_D_%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NBBY</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>utsdef</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>utsdef</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-D__%s_%s"</literal></expr></argument>,
<argument><expr><call><name>dt_get_sysinfo</name><argument_list>(<argument><expr><name>SI_SYSNAME</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dt_get_sysinfo</name><argument_list>(<argument><expr><name>SI_RELEASE</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__sun"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__unix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__SVR4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__SUNW_D=1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>isadef</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>utsdef</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_NODEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_dtrace_conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>_dtrace_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_CONF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_LP64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>=</operator> <name>CTF_MODEL_LP64</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_ILP32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>=</operator> <name>CTF_MODEL_ILP32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__sparc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_LP64</name> <operator>&amp;&amp;</operator>
<call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__sparcv9"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_LP64</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__amd64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-D__i386"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_LP64</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-m64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_cpp_add_arg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"-m32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_difversion</name></name> <operator>&lt;</operator> <name>DIF_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_DIFVERS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_ILP32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>_dtrace_ints_32</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>_dtrace_ints_32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>_dtrace_ints_64</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>_dtrace_ints_64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bootfile</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bootfile</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.bootfile"</literal></expr></argument>, <argument><expr><name>bootfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>bootfile</name></expr></argument>, <argument><expr><literal type="string">"kernel"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bootfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>bootfile</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>bootfile</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>curthread_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curthread_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s`struct thread *"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>intmtx_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intmtx_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int(%s`struct mtx *)"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>threadmtx_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>threadmtx_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"struct thread *(%s`struct mtx *)"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rwlock_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rwlock_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int(%s`struct rwlock *)"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sxlock_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sxlock_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"int(%s`struct sx *)"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"macro"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggs</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"aggregation"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>DTRACE_AGGVARIDNONE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><name>_dtrace_globals</name></expr></argument>,
<argument><expr><name>DIF_VAR_OTHER_UBASE</name></expr></argument>, <argument><expr><name>DIF_VAR_OTHER_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name> <operator>=</operator> <call><name>dt_idhash_create</name><argument_list>(<argument><expr><literal type="string">"thread local"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>DIF_VAR_OTHER_UBASE</name></expr></argument>, <argument><expr><name>DIF_VAR_OTHER_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_aggs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name>_dtrace_macros</name></expr>;</init> <condition><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_idhash_insert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name></expr> ?</condition><then> <expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>dt_idops_thaw</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name>dtrace_update</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_ILP32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dinp</name> <operator>=</operator> <name>_dtrace_intrinsics_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dtyp</name> <operator>=</operator> <name>_dtrace_typedefs_32</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dinp</name> <operator>=</operator> <name>_dtrace_intrinsics_64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dtyp</name> <operator>=</operator> <name>_dtrace_typedefs_64</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name></name> <operator>=</operator> <call><name>dt_module_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>=</operator> <call><name>ctf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"created CTF container for %s (%p)\n"</literal></expr></argument>,
<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_setspecific</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>=</operator> <name>DT_DM_LOADED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_modid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>





<for>for <control>(<init>;</init> <condition><expr><name><name>dinp</name><operator>-&gt;</operator><name>din_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dinp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dinp</name><operator>-&gt;</operator><name>din_kind</name></name> <operator>==</operator> <name>CTF_K_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_add_integer</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><name><name>dinp</name><operator>-&gt;</operator><name>din_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dinp</name><operator>-&gt;</operator><name>din_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_add_float</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><name><name>dinp</name><operator>-&gt;</operator><name>din_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dinp</name><operator>-&gt;</operator><name>din_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to add %s to C container: %s\n"</literal></expr></argument>,
<argument><expr><name><name>dinp</name><operator>-&gt;</operator><name>din_name</name></name></expr></argument>, <argument><expr><call><name>ctf_errmsg</name><argument_list>(
<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>ctf_update</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to update C container: %s\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_add_pointer</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_add_pointer</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_add_pointer</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_update</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to update C container: %s\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs</name></name> <operator>=</operator> <call><name>dt_module_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name> <operator>=</operator> <call><name>ctf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_ctferr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"created CTF container for %s (%p)\n"</literal></expr></argument>,
<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_setspecific</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_flags</name></name> <operator>=</operator> <name>DT_DM_LOADED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_modid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_import</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to import D parent container: %s\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init>;</init> <condition><expr><name><name>dtyp</name><operator>-&gt;</operator><name>dty_src</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dtyp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><name><name>dtyp</name><operator>-&gt;</operator><name>dty_dst</name></name></expr></argument>, <argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>,
<argument><expr><name><name>dtyp</name><operator>-&gt;</operator><name>dty_src</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to add typedef %s %s to D "</literal>
<literal type="string">"container: %s"</literal></expr></argument>, <argument><expr><name><name>dtyp</name><operator>-&gt;</operator><name>dty_src</name></name></expr></argument>, <argument><expr><name><name>dtyp</name><operator>-&gt;</operator><name>dty_dst</name></name></expr></argument>,
<argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<expr_stmt><expr><name><name>ctc</name><operator>.</operator><name>ctc_return</name></name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctc</name><operator>.</operator><name>ctc_argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctc</name><operator>.</operator><name>ctc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_func</name></name> <operator>=</operator> <call><name>ctf_add_function</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>,
<argument><expr><name>CTF_ADD_ROOT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_fptr</name></name> <operator>=</operator> <call><name>ctf_add_pointer</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>,
<argument><expr><name>CTF_ADD_ROOT</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>ctr_contents</name></name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>ctr_index</name></name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>ctr_nelems</name></name> <operator>=</operator> <name>_dtrace_strsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_str</name></name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name>ctf_add_array</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_dyn</name></name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><literal type="string">"&lt;DYN&gt;"</literal></expr></argument>, <argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_stack</name></name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><literal type="string">"stack"</literal></expr></argument>, <argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_symaddr</name></name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><literal type="string">"_symaddr"</literal></expr></argument>, <argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_usymaddr</name></name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><name>CTF_ADD_ROOT</name></expr></argument>,
<argument><expr><literal type="string">"_usymaddr"</literal></expr></argument>, <argument><expr><call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_type_func</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_type_fptr</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_type_str</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_type_dyn</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_type_stack</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_type_symaddr</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_type_usymaddr</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to add intrinsic to D container: %s\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_update</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed update D container: %s\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_errmsg</name><argument_list>(<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name><name>dmp</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_CTF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_lookup_by_type</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACE_OBJ_EVERY</name></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>did_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to lookup integer type %s: %s\n"</literal></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>did_name</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>did_ctfp</name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ints</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>did_type</name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_pfdict_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DTRACE_O_NODEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cflags</name></name> <operator>|=</operator> <name>DTRACE_C_ZDEFS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pgp</name> <operator>=</operator> <call><name>dtrace_program_strcompile</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>_dtrace_hardwire</name></expr></argument>,
<argument><expr><name>DTRACE_PROBESPEC_NONE</name></expr></argument>, <argument><expr><name>DTRACE_C_EMPTY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to load hard-wired definitions: %s\n"</literal></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EDT_HARDWIRE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_program_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pgp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_oflags</name></name> <operator>&amp;</operator> <name>DTRACE_O_ILP32</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"libdir"</literal></expr></argument>, <argument><expr><name>_dtrace_libdir32</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"libdir"</literal></expr></argument>, <argument><expr><name>_dtrace_libdir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>dtrace_setopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"libdir"</literal></expr></argument>, <argument><expr><name>_dtrace_libdir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>set_open_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>dtp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type>
<name>dtrace_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_vopen</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type>
<name>dtrace_vopen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_vopen</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dtrace_close</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ndp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_dirpath_t</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dt_kmodule_t</name> <modifier>*</modifier></type><name>dkm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_procs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_proc_fini</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pgp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_programs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_program_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pgp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>(</operator><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_xlator_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatormap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_externs</name></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name>ndp</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ndp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_ident_destroy</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_modbuckets</name></name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>(</operator><name>dkm</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name><index>[<expr><name>h</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name><name>dkm</name><operator>-&gt;</operator><name>dkm_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dkm</name><operator>-&gt;</operator><name>dkm_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dkm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>(</operator><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_module_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>(</operator><name>pvp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_provider_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_stdout_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dt_epid_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_aggid_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_format_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_strdata_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buffered_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_aggregate_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_pfdict_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_provmod_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dof_fini</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><operator>(</operator><name>dirp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_lib_path</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_lib_path</name></name></expr></argument>, <argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>dir_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ld_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_objcopy_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_mods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_kmods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_provs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_provider_modules</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>mods</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nmods</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_provmod_t</name> <modifier>*</modifier></type><name>prov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>prov</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_provmod</name></name></expr>;</init> <condition><expr><name>prov</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prov</name> <operator>=</operator> <name><name>prov</name><operator>-&gt;</operator><name>dp_next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nmods</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mods</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>prov</name><operator>-&gt;</operator><name>dp_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_ctlfd</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_fd</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
