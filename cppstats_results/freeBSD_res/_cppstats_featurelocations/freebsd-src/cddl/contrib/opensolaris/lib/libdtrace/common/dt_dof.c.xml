<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_dof.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_strtab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_xlator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_dof.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>dt_dof_init</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_dof</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>, <argument><expr><literal type="string">"section headers"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>, <argument><expr><literal type="string">"string table"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><literal type="string">"loadable data"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>, <argument><expr><literal type="string">"unloadable data"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>, <argument><expr><literal type="string">"probe data"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>, <argument><expr><literal type="string">"probe args"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>, <argument><expr><literal type="string">"probe offs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>, <argument><expr><literal type="string">"probe is-enabled offs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>, <argument><expr><literal type="string">"probe rels"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>, <argument><expr><literal type="string">"xlate members"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_dof_fini</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_dof</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_dof_reset</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_dof</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nx</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name> <operator>==</operator> <name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_pgp</name></name> <operator>=</operator> <name>pgp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>dof_secidx_t</name></type>
<name>dof_add_lsect</name><parameter_list>(<parameter><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>entsize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_sec_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>DOF_SECF_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_entsize</name></name> <operator>=</operator> <name>entsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_offset</name></name> <operator>=</operator> <call><name>dt_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>dof_secidx_t</name></type>
<name>dof_add_usect</name><parameter_list>(<parameter><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>entsize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_sec_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_align</name></name> <operator>=</operator> <name>align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_flags</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>DOF_SECF_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_entsize</name></name> <operator>=</operator> <name>entsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_offset</name></name> <operator>=</operator> <call><name>dt_buf_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dofs_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>dof_stridx_t</name></type>
<name>dof_add_string</name><parameter_list>(<parameter><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_buf_t</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_stridx_t</name></type> <name>i</name> <init>= <expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dof_attr_t</name></type>
<name>dof_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_attribute_t</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>DOF_ATTR</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dtat_name</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dtat_data</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dof_secidx_t</name></type>
<name>dof_add_difo</name><parameter_list>(<parameter><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name><name>dsecs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nsecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dof_difohdr_t</name> <modifier>*</modifier></type><name>dofd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_relohdr_t</name></type> <name>dofr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>relsec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>strsec</name> <init>= <expr><name>DOF_SECIDX_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>intsec</name> <init>= <expr><name>DOF_SECIDX_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>hdrsec</name> <init>= <expr><name>DOF_SECIDX_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsecs</name><index>[<expr><name>nsecs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name></name></expr></argument>,
<argument><expr><name>DOF_SECT_DIF</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dif_instr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dif_instr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dif_instr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_inttab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsecs</name><index>[<expr><name>nsecs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>intsec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_inttab</name></name></expr></argument>,
<argument><expr><name>DOF_SECT_INTTAB</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_intlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsecs</name><index>[<expr><name>nsecs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>strsec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name></name></expr></argument>,
<argument><expr><name>DOF_SECT_STRTAB</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsecs</name><index>[<expr><name>nsecs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name></name></expr></argument>,
<argument><expr><name>DOF_SECT_VARTAB</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_difv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_difv_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_varlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dof_xlref_t</name> <modifier>*</modifier></type><name>xlt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pnp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xlt</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_xlref_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pnp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name></expr>;</expr_stmt>








<for>for <control>(<init><expr><name>xlp</name> <operator>=</operator> <name>xlt</name></expr>;</init> <condition><expr><name>xlp</name> <operator>&lt;</operator> <name>xlt</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr>;</condition> <incr><expr><name>xlp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name> <init>= <expr><operator>*</operator><name>pnp</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_xlator</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xlp</name><operator>-&gt;</operator><name>dofxr_xlator</name></name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xlp</name><operator>-&gt;</operator><name>dofxr_member</name></name> <operator>=</operator> <call><name>dt_popcb</name><argument_list>(
<argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_pgp</name><operator>-&gt;</operator><name>dp_xrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xlp</name><operator>-&gt;</operator><name>dofxr_argn</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_arg</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dsecs</name><index>[<expr><name>nsecs</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>xlt</name></expr></argument>, <argument><expr><name>DOF_SECT_XLTAB</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_xlref_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_xlref_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nsecs</name> <operator>&lt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dsecs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dsecs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dofd</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_diftype_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dsecs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_rtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dofd</name><operator>-&gt;</operator><name>dofd_rtype</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_diftype_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>dsecs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dofd</name><operator>-&gt;</operator><name>dofd_links</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdrsec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>dofd</name></expr></argument>, <argument><expr><name>DOF_SECT_DIFOHDR</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_diftype_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>relsec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name></expr></argument>, <argument><expr><name>DOF_SECT_RELTAB</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_krelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_strtab</name></name> <operator>=</operator> <name>strsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_relsec</name></name> <operator>=</operator> <name>relsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_tgtsec</name></name> <operator>=</operator> <name>intsec</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofr</name></expr></argument>, <argument><expr><name>DOF_SECT_KRELHDR</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relohdr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>relsec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name></expr></argument>, <argument><expr><name>DOF_SECT_RELTAB</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_urelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_strtab</name></name> <operator>=</operator> <name>strsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_relsec</name></name> <operator>=</operator> <name>relsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_tgtsec</name></name> <operator>=</operator> <name>intsec</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofr</name></expr></argument>, <argument><expr><name>DOF_SECT_URELHDR</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relohdr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>hdrsec</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dof_add_translator</name><parameter_list>(<parameter><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_xlmember_t</name></type> <name>dofxm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_xlator_t</name></type> <name>dofxl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name> <modifier>*</modifier></type><name>xst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>DOF_SECT_XLIMPORT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>DOF_SECT_XLEXPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xst</name> <operator>=</operator> <ternary><condition><expr><name>type</name> <operator>==</operator> <name>DOF_SECT_XLIMPORT</name></expr> ?</condition><then> <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlimport</name></name></expr> </then><else>: <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xst</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>!=</operator> <name>DOF_SECIDX_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_members</name></name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>DOF_SECT_XLIMPORT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BT_TEST</name><argument_list>(<argument><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_pgp</name><operator>-&gt;</operator><name>dp_xrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dofxm</name><operator>.</operator><name>dofxm_difo</name></name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dofxm</name><operator>.</operator><name>dofxm_difo</name></name> <operator>=</operator> <call><name>dof_add_difo</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>,
<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_membdif</name><index>[<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membid</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dofxm</name><operator>.</operator><name>dofxm_name</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_diftype</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dnp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dofxm</name><operator>.</operator><name>dofxm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dofxm</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dofxm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dofxl</name><operator>.</operator><name>dofxl_members</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOF_SECT_XLMEMBERS</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dofxm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlms</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofxl</name><operator>.</operator><name>dofxl_strtab</name></name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofxl</name><operator>.</operator><name>dofxl_argv</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><call><name>ctf_type_name</name><argument_list>(
<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_src_type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofxl</name><operator>.</operator><name>dofxl_argc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofxl</name><operator>.</operator><name>dofxl_type</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><call><name>ctf_type_name</name><argument_list>(
<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_ctfp</name></name></expr></argument>, <argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_dst_type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofxl</name><operator>.</operator><name>dofxl_attr</name></name> <operator>=</operator> <call><name>dof_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dxp</name><operator>-&gt;</operator><name>dx_souid</name><operator>.</operator><name>di_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xst</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofxl</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dofxl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>dof_add_probe</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dof_probe_t</name></type> <name>dofpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_relodesc_t</name></type> <name>dofr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_instance_t</name> <modifier>*</modifier></type><name>pip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_name</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_nargv</name></name> <operator>=</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_nargs</name></name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_xargv</name></name> <operator>=</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_xargs</name></name></expr>;</init> <condition><expr><name>dnp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dnp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><call><name>ctf_type_name</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>,
<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_argidx</name></name> <operator>=</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_xargc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_nargc</name></name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_nargc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_xargc</name></name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_xargc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_pad1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_pad2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pip</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_inst</name></name></expr>;</init> <condition><expr><name>pip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pip</name> <operator>=</operator> <name><name>pip</name><operator>-&gt;</operator><name>pi_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"adding probe for %s:%s\n"</literal></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_fname</name></name></expr></argument>,
<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_func</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_noffs</name></name> <operator>+</operator> <name><name>pip</name><operator>-&gt;</operator><name>pi_nenoffs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_offidx</name></name> <operator>=</operator>
<call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_noffs</name></name> <operator>=</operator> <name><name>pip</name><operator>-&gt;</operator><name>pi_noffs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_offs</name></name></expr></argument>,
<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_noffs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_enoffidx</name></name> <operator>=</operator>
<call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpr</name><operator>.</operator><name>dofpr_nenoffs</name></name> <operator>=</operator> <name><name>pip</name><operator>-&gt;</operator><name>pi_nenoffs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_enoffs</name></name></expr></argument>,
<argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_nenoffs</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_name</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pip</name><operator>-&gt;</operator><name>pi_rname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_type</name></name> <operator>=</operator> <name>DOF_RELO_DOFREL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_offset</name></name> <operator>=</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofr</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dofr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofpr</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dofpr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dof_add_provider</name><parameter_list>(<parameter><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_provider_t</name></type> <name>dofpv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_relohdr_t</name></type> <name>dofr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name> <modifier>*</modifier></type><name>dofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>xr</name></decl>, <decl><type ref="prev"/><name>nxr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_flags</name></name> <operator>&amp;</operator> <name>DT_PROVIDER_IMPL</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nxr</name> <operator>=</operator> <call><name>dt_popcb</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name></expr></argument>, <argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dofs</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nxr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pvp</name><operator>-&gt;</operator><name>pv_xrmax</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BT_TEST</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_xrefs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatemode</name></name> <operator>==</operator> <name>DT_XL_DYNAMIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dof_add_translator</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>,
<argument><expr><call><name>dt_xlator_lookup_id</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DOF_SECT_XLEXPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofs</name><index>[<expr><name>xr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_xlexport</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_probes</name></name></expr></argument>, <argument><expr><name>dof_add_probe</name></expr></argument>, <argument><expr><name>ddo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOPROBES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_probes</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOF_SECT_PROBES</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_probe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_probes</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_prargs</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOF_SECT_PRARGS</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_args</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_proffs</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOF_SECT_PROFFS</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_offs</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_prenoffs</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>DOF_SECT_PRENOFFS</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_prenoffs</name></name> <operator>=</operator> <name>DOF_SECT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_enoffs</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_strtab</name></name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_name</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_provattr</name></name> <operator>=</operator> <call><name>dof_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_modattr</name></name> <operator>=</operator> <call><name>dof_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_funcattr</name></name> <operator>=</operator> <call><name>dof_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_nameattr</name></name> <operator>=</operator> <call><name>dof_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofpv</name><operator>.</operator><name>dofpv_argsattr</name></name> <operator>=</operator> <call><name>dof_attr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvp</name><operator>-&gt;</operator><name>pv_desc</name><operator>.</operator><name>dtvd_attr</name><operator>.</operator><name>dtpa_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofpv</name></expr></argument>, <argument><expr><name>DOF_SECT_PROVIDER</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_provider_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_strtab</name></name> <operator>=</operator> <name><name>dofpv</name><operator>.</operator><name>dofpv_strtab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_tgtsec</name></name> <operator>=</operator> <name><name>dofpv</name><operator>.</operator><name>dofpv_probes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofr</name><operator>.</operator><name>dofr_relsec</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOF_SECT_RELTAB</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_rels</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofr</name></expr></argument>, <argument><expr><name>DOF_SECT_URELHDR</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_relohdr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nxr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatemode</name></name> <operator>==</operator> <name>DT_XL_DYNAMIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>dofs</name></expr></argument>, <argument><expr><name>DOF_SECT_PREXPORT</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nxr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dof_hdr</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dofversion</name></decl></parameter>, <parameter><decl><type><name>dof_hdr_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_difversion</name></name> <operator>&gt;</operator> <name>UINT8_MAX</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_difintregs</name></name> <operator>&gt;</operator> <name>UINT8_MAX</name> <operator>||</operator>
<name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_diftupregs</name></name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EOVERFLOW</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_hdr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_MAG0</name></expr>]</index></name> <operator>=</operator> <name>DOF_MAG_MAG0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_MAG1</name></expr>]</index></name> <operator>=</operator> <name>DOF_MAG_MAG1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_MAG2</name></expr>]</index></name> <operator>=</operator> <name>DOF_MAG_MAG2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_MAG3</name></expr>]</index></name> <operator>=</operator> <name>DOF_MAG_MAG3</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_ctfmodel</name></name> <operator>==</operator> <name>CTF_MODEL_LP64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_MODEL</name></expr>]</index></name> <operator>=</operator> <name>DOF_MODEL_LP64</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_MODEL</name></expr>]</index></name> <operator>=</operator> <name>DOF_MODEL_ILP32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_ENCODING</name></expr>]</index></name> <operator>=</operator> <name>DOF_ENCODE_NATIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_VERSION</name></expr>]</index></name> <operator>=</operator> <name>dofversion</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_DIFVERS</name></expr>]</index></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_difversion</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_DIFIREG</name></expr>]</index></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_difintregs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_ident</name><index>[<expr><name>DOF_ID_DIFTREG</name></expr>]</index></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_conf</name><operator>.</operator><name>dtc_diftupregs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_hdrsize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_hdr_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_secsize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_sec_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>dofh_secoff</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_hdr_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>dtrace_dof_create</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pgp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_dof_t</name> <modifier>*</modifier></type><name>ddo</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_dof</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>edp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_actdesc_t</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_stmt_t</name> <modifier>*</modifier></type><name>stp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_t</name></type> <name>maxacts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>maxfmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_actdesc_t</name> <modifier>*</modifier></type><name>dofa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_sec_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ssize</name></decl>, <decl><type ref="prev"/><name>lsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_hdr_t</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dt_buf_t</name></type> <name>dof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>DTRACE_D_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_dflags</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dof_hdr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pgp</name><operator>-&gt;</operator><name>dp_dofversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_dof_reset</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pgp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgp</name><operator>-&gt;</operator><name>dp_stmts</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>stp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>stp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>edp</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>dtrace_stmtdesc_t</name> <modifier>*</modifier></type><name>sdp</name> <init>= <expr><name><name>stp</name><operator>-&gt;</operator><name>ds_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_actdesc_t</name> <modifier>*</modifier></type><name>ap</name> <init>= <expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_action</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_fmtdata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dtrace_printf_format</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_fmtdata</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfmt</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>maxfmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>edp</name> <operator>=</operator> <name><name>sdp</name><operator>-&gt;</operator><name>dtsd_ecbdesc</name></name><operator>)</operator> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ap</name> <operator>=</operator> <name><name>edp</name><operator>-&gt;</operator><name>dted_action</name></name></expr>;</init> <condition><expr><name>ap</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>dtad_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>maxacts</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>maxacts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dofa</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_actdesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxacts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>maxfmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOF_SECT_STRTAB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pgp</name><operator>-&gt;</operator><name>dp_xrefslen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dxp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name> <operator>&lt;</operator> <name><name>pgp</name><operator>-&gt;</operator><name>dp_xrefslen</name></name> <operator>&amp;&amp;</operator>
<name><name>pgp</name><operator>-&gt;</operator><name>dp_xrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dof_add_translator</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>, <argument><expr><name>DOF_SECT_XLIMPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgp</name><operator>-&gt;</operator><name>dp_stmts</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>stp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>stp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>stp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>edp</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>probesec</name> <init>= <expr><name>DOF_SECIDX_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>prdsec</name> <init>= <expr><name>DOF_SECIDX_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_secidx_t</name></type> <name>actsec</name> <init>= <expr><name>DOF_SECIDX_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_stmt_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>stp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_stmtdesc_t</name> <modifier>*</modifier></type><name>sdp</name> <init>= <expr><name><name>stp</name><operator>-&gt;</operator><name>ds_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_stridx_t</name></type> <name>strndx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_probedesc_t</name></type> <name>dofp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_ecbdesc_t</name></type> <name>dofe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>edp</name> <operator>=</operator> <name><name>stp</name><operator>-&gt;</operator><name>ds_desc</name><operator>-&gt;</operator><name>dtsd_ecbdesc</name></name><operator>)</operator> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pdp</name> <operator>=</operator> <operator>&amp;</operator><name><name>edp</name><operator>-&gt;</operator><name>dted_probe</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>dofp</name><operator>.</operator><name>dofp_strtab</name></name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofp</name><operator>.</operator><name>dofp_provider</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofp</name><operator>.</operator><name>dofp_mod</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofp</name><operator>.</operator><name>dofp_func</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofp</name><operator>.</operator><name>dofp_name</name></name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofp</name><operator>.</operator><name>dofp_id</name></name> <operator>=</operator> <name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>probesec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofp</name></expr></argument>, <argument><expr><name>DOF_SECT_PROBEDESC</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_secidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_probedesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_probedesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>edp</name><operator>-&gt;</operator><name>dted_pred</name><operator>.</operator><name>dtpdd_difo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prdsec</name> <operator>=</operator> <call><name>dof_add_difo</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>edp</name><operator>-&gt;</operator><name>dted_pred</name><operator>.</operator><name>dtpdd_difo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ap</name> <operator>=</operator> <name><name>edp</name><operator>-&gt;</operator><name>dted_action</name></name></expr>;</init>
<condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>dtad_next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>dtad_difo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_difo</name> <operator>=</operator>
<call><name>dof_add_difo</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dtad_difo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_difo</name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>








<if_stmt><if>if <condition>(<expr><name>sdp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ap</name> <operator>==</operator> <name><name>sdp</name><operator>-&gt;</operator><name>dtsd_action</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_fmtdata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dtrace_printf_format</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_fmtdata</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>maxfmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strndx</name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_strdata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strndx</name> <operator>=</operator> <call><name>dof_add_string</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>,
<argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>dtsd_strdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>strndx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sdp</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>ds_desc</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sdp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strndx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_arg</name> <operator>=</operator> <name>strndx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_strtab</name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_arg</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>dtad_arg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_strtab</name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_kind</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>dtad_kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_ntuple</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>dtad_ntuple</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dofa_uarg</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>dtad_uarg</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>actsec</name> <operator>=</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>dofa</name></expr></argument>, <argument><expr><name>DOF_SECT_ACTDESC</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_actdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_actdesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>dofe</name><operator>.</operator><name>dofe_probes</name></name> <operator>=</operator> <name>probesec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofe</name><operator>.</operator><name>dofe_pred</name></name> <operator>=</operator> <name>prdsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofe</name><operator>.</operator><name>dofe_actions</name></name> <operator>=</operator> <name>actsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofe</name><operator>.</operator><name>dofe_pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofe</name><operator>.</operator><name>dofe_uarg</name></name> <operator>=</operator> <name><name>edp</name><operator>-&gt;</operator><name>dted_uarg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_lsect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dofe</name></expr></argument>, <argument><expr><name>DOF_SECT_ECBDESC</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_ecbdesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DTRACE_D_PROBES</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pvp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provlist</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>pvp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pvp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dof_add_provider</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DTRACE_D_STRIP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_usect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><name>_dtrace_version</name></expr></argument>, <argument><expr><name>DOF_SECT_COMMENTS</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>_dtrace_version</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dof_add_usect</name><argument_list>(<argument><expr><name>ddo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_uts</name></name></expr></argument>, <argument><expr><name>DOF_SECT_UTSNAME</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>utsname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>h</name><operator>.</operator><name>dofh_secnum</name></name> <operator>=</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>dofh_loadsz</name></name> <operator>=</operator> <name>ssize</name> <operator>+</operator>
<call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lsize</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>dofh_loadsz</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>dofh_filesz</name></name> <operator>=</operator> <name>lsize</name> <operator>+</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lsize</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>dofh_loadsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>dofh_filesz</name></name> <operator>=</operator> <name>lsize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>dt_buf_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>dt_buf_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sp</name><index>[<expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>]</index></name><operator>.</operator><name>dofs_type</name> <operator>==</operator> <name>DOF_SECT_STRTAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_sec_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>]</index></name><operator>.</operator><name>dofs_offset</name> <operator>=</operator> <name>ssize</name> <operator>+</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><index>[<expr><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>]</index></name><operator>.</operator><name>dofs_size</name> <operator>=</operator> <call><name>dt_buf_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_nsecs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>ddo</name><operator>-&gt;</operator><name>ddo_strsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>dofs_flags</name></name> <operator>&amp;</operator> <name>DOF_SECF_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>dofs_offset</name></name> <operator>+=</operator> <name>ssize</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>dofs_offset</name></name> <operator>+=</operator> <name>lsize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>






<expr_stmt><expr><call><name>dt_buf_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>, <argument><expr><literal type="string">"dof"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>dofh_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_buf_write</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_secs</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_ldata</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_strs</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_buf_concat</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ddo</name><operator>-&gt;</operator><name>ddo_udata</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>dt_buf_claim</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dof</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dtrace_dof_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>dtrace_getopt_dof</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dof_hdr_t</name> <modifier>*</modifier></type><name>dof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_sec_t</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_optdesc_t</name> <modifier>*</modifier></type><name>dofo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nopts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_hdr_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<call><name>roundup</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_sec_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DTRACEOPT_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nopts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_optdesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nopts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dof</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>dof_hdr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DOF_VERSION</name></expr></argument>, <argument><expr><name>dof</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dof</name><operator>-&gt;</operator><name>dofh_secnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dof</name><operator>-&gt;</operator><name>dofh_loadsz</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dof</name><operator>-&gt;</operator><name>dofh_filesz</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>




<expr_stmt><expr><name>sec</name> <operator>=</operator> <operator>(</operator><name>dof_sec_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dof</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_hdr_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>dofs_type</name></name> <operator>=</operator> <name>DOF_SECT_OPTDESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>dofs_align</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>dofs_flags</name></name> <operator>=</operator> <name>DOF_SECF_LOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>dofs_entsize</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_optdesc_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>dofo</name> <operator>=</operator> <operator>(</operator><name>dof_optdesc_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>sec</name> <operator>+</operator>
<call><name>roundup</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dof_sec_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>dofs_offset</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dofo</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dof</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>dofs_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_optdesc_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nopts</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DTRACEOPT_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dofo</name><operator>-&gt;</operator><name>dofo_option</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofo</name><operator>-&gt;</operator><name>dofo_strtab</name></name> <operator>=</operator> <name>DOF_SECIDX_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dofo</name><operator>-&gt;</operator><name>dofo_value</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dofo</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>dof</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>dtrace_geterr_dof</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dtrace_dof_create</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errprog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
