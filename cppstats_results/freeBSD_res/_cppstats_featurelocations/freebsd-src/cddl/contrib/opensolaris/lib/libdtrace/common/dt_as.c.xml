<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_as.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_as.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>dt_irlist_create</name><parameter_list>(<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>dlp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_irlist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_label</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_irlist_destroy</name><parameter_list>(<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_irnode_t</name> <modifier>*</modifier></type><name>dip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nip</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dip</name> <operator>=</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_list</name></name></expr>;</init> <condition><expr><name>dip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dip</name> <operator>=</operator> <name>nip</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nip</name> <operator>=</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_irlist_append</name><parameter_list>(<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>, <parameter><decl><type><name>dt_irnode_t</name> <modifier>*</modifier></type><name>dip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_last</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_last</name><operator>-&gt;</operator><name>di_next</name></name> <operator>=</operator> <name>dip</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_list</name></name> <operator>=</operator> <name>dip</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_last</name></name> <operator>=</operator> <name>dip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dip</name><operator>-&gt;</operator><name>di_label</name></name> <operator>==</operator> <name>DT_LBL_NONE</name> <operator>||</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name> <operator>!=</operator> <name>DIF_INSTR_NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dlp</name><operator>-&gt;</operator><name>dl_len</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint_t</name></type>
<name>dt_irlist_label</name><parameter_list>(<parameter><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>dlp</name><operator>-&gt;</operator><name>dl_label</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_countvar</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DT_IDFLG_DIFR</name> <operator>|</operator> <name>DT_IDFLG_DIFW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>np</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_copyvar</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_difv_t</name> <modifier>*</modifier></type><name>dvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>stroff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name></type> <name>dn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DT_IDFLG_DIFR</name> <operator>|</operator> <name>DT_IDFLG_DIFW</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dvp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name><operator>-&gt;</operator><name>dtdo_vartab</name><index>[<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asvidx</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stroff</name> <operator>=</operator> <call><name>dt_strtab_insert</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stroff</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stroff</name> <operator>&gt;</operator> <name>DIF_STROFF_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_STR2BIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_name</name></name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><name>stroff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_id</name></name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_kind</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name><operator>)</operator></expr> ?</condition><then>
<expr><name>DIFV_KIND_ARRAY</name></expr> </then><else>: <expr><name>DIFV_KIND_SCALAR</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_scope</name></name> <operator>=</operator> <name>DIFV_SCOPE_LOCAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_TLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_scope</name></name> <operator>=</operator> <name>DIFV_SCOPE_THREAD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_scope</name></name> <operator>=</operator> <name>DIFV_SCOPE_GLOBAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_DIFR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>|=</operator> <name>DIFV_F_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_DIFW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_flags</name></name> <operator>|=</operator> <name>DIFV_F_MOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_diftype</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dvp</name><operator>-&gt;</operator><name>dtdv_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DT_IDFLG_DIFR</name> <operator>|</operator> <name>DT_IDFLG_DIFW</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>dt_copystr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name><operator>-&gt;</operator><name>dtdo_strtab</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_as_xlate</name><parameter_list>(<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>, <parameter><decl><type><name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>xi</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name> <init>= <expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_xlator</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xi</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_MEMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membexpr</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>==</operator> <name>DT_NODE_XLATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membid</name></name> <operator>&lt;</operator> <name><name>dxp</name><operator>-&gt;</operator><name>dx_nmembers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxreflen</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatorid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name></name> <operator>=</operator>
<call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ulong_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxreflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>=</operator>
<call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>BT_SIZEOFMAP</name><argument_list>(<argument><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_nmembers</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DIF_INSTR_XLATE</name><argument_list>(
<argument><expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xi</name></expr></argument>, <argument><expr><call><name>DIF_INSTR_RD</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BT_SET</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name><index>[<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_id</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_membid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name><index>[<expr><name>xi</name></expr>]</index></name> <operator>=</operator> <name>dnp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_as_undef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mark</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_USER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"``"</literal></expr> </then><else>: <expr><literal type="string">"`"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_syminfo_t</name> <modifier>*</modifier></type><name>dts</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_USER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="string">"user"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_PRIM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="string">"primary kernel"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="string">"loadable kernel"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>yylineno</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_lineno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ASRELO</name></expr></argument>, <argument><expr><literal type="string">"relocation remains against %s symbol %s%s%s (offset "</literal>
<literal type="string">"0x%x)\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name><name>dts</name><operator>-&gt;</operator><name>dts_object</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name><name>dts</name><operator>-&gt;</operator><name>dts_name</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dtrace_difo_t</name> <modifier>*</modifier></type>
<name>dt_as</name><parameter_list>(<parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_irlist_t</name> <modifier>*</modifier></type><name>dlp</name> <init>= <expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>labels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_irnode_t</name> <modifier>*</modifier></type><name>dip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_t</name></type> <name>kmask</name></decl>, <decl><type ref="prev"/><name>kbits</name></decl>, <decl><type ref="prev"/><name>umask</name></decl>, <decl><type ref="prev"/><name>ubits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>krel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>urel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xlrefs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>















<switch>switch <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_linkmode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_LINK_KERNEL</name></expr>:</case>
<expr_stmt><expr><name>kmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kbits</name> <operator>=</operator> <operator>-</operator><literal type="number">1u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>umask</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ubits</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_LINK_PRIMARY</name></expr>:</case>
<expr_stmt><expr><name>kmask</name> <operator>=</operator> <name>DT_IDFLG_USER</name> <operator>|</operator> <name>DT_IDFLG_PRIM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>umask</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ubits</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_LINK_DYNAMIC</name></expr>:</case>
<expr_stmt><expr><name>kmask</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>umask</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ubits</name> <operator>=</operator> <name>DT_IDFLG_USER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DT_LINK_STATIC</name></expr>:</case>
<expr_stmt><expr><name>kmask</name> <operator>=</operator> <name>umask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kbits</name> <operator>=</operator> <name>ubits</name> <operator>=</operator> <operator>-</operator><literal type="number">1u</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error -- invalid link mode %u\n"</literal></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_linkmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_difo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dif_instr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>labels</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_label</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>dip</name> <operator>=</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_list</name></name></expr>;</init> <condition><expr><name>dip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dip</name> <operator>=</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dip</name><operator>-&gt;</operator><name>di_label</name></name> <operator>!=</operator> <name>DT_LBL_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>labels</name><index>[<expr><name><name>dip</name><operator>-&gt;</operator><name>di_label</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dip</name><operator>-&gt;</operator><name>di_label</name></name> <operator>==</operator> <name>DT_LBL_NONE</name> <operator>||</operator>
<name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name> <operator>!=</operator> <name>DIF_INSTR_NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dip</name><operator>-&gt;</operator><name>di_extern</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIF_OP_SETX</name></expr>:</case>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_extern</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator> <operator>==</operator> <name>kbits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>krel</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>umask</name><operator>)</operator> <operator>==</operator> <name>ubits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>urel</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DIF_OP_XLATE</name></expr>:</case>
<case>case <expr><name>DIF_OP_XLARG</name></expr>:</case>
<expr_stmt><expr><name>xlrefs</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"unexpected assembler relocation "</literal>
<literal type="string">"for opcode 0x%x\n"</literal></expr></argument>, <argument><expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_len</name></name> <operator>=</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_len</name></name></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dif_instr_t</name></type> <name>instr</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>op</name> <init>= <expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>DIF_OP_CALL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>DIF_INSTR_SUBR</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DIF_SUBR_COPYOUT</name> <operator>||</operator>
<call><name>DIF_INSTR_SUBR</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DIF_SUBR_COPYOUTSTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_destructive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>DIF_OP_BA</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>DIF_OP_BLEU</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DIF_INSTR_LABEL</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DIF_INSTR_BRANCH</name><argument_list>(<argument><expr><name>op</name></expr></argument>,
<argument><expr><name><name>labels</name><index>[<expr><call><name>DIF_INSTR_LABEL</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asvidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name></expr></argument>, <argument><expr><name>dt_countvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>, <argument><expr><name>dt_countvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_locals</name></name></expr></argument>, <argument><expr><name>dt_countvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_difv_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_varlen</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name></expr></argument>, <argument><expr><name>dt_copyvar</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>, <argument><expr><name>dt_copyvar</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_locals</name></name></expr></argument>, <argument><expr><name>dt_copyvar</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>krel</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name>krel</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_krelen</name></name> <operator>=</operator> <name>krel</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>urel</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name>urel</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dof_relodesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_urelen</name></name> <operator>=</operator> <name>urel</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xlrefs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>xlrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name> <operator>=</operator> <name>xlrefs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>krel</name> <operator>+</operator> <name>urel</name> <operator>+</operator> <name>xlrefs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>knodef</name> <init>= <expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_cflags</name></name> <operator>&amp;</operator> <name>DTRACE_C_KNODEF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>unodef</name> <init>= <expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_cflags</name></name> <operator>&amp;</operator> <name>DTRACE_C_UNODEF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dof_relodesc_t</name> <modifier>*</modifier></type><name>krp</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dof_relodesc_t</name> <modifier>*</modifier></type><name>urp</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xlp</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dip</name> <operator>=</operator> <name><name>dlp</name><operator>-&gt;</operator><name>dl_list</name></name></expr>;</init> <condition><expr><name>dip</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dip</name> <operator>=</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dof_relodesc_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>soff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nodef</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dip</name><operator>-&gt;</operator><name>di_label</name></name> <operator>!=</operator> <name>DT_LBL_NONE</name> <operator>&amp;&amp;</operator>
<name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name> <operator>==</operator> <name>DIF_INSTR_NOP</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DIF_OP_XLATE</name> <operator>||</operator>
<call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DIF_OP_XLARG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_as_xlate</name><argument_list>(<argument><expr><name>pcb</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator>
<operator>(</operator><name>xlp</name><operator>++</operator> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_extern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <name><name>dip</name><operator>-&gt;</operator><name>di_extern</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator> <operator>==</operator> <name>kbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nodef</name> <operator>=</operator> <name>knodef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>krp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>umask</name><operator>)</operator> <operator>==</operator> <name>ubits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nodef</name> <operator>=</operator> <name>unodef</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>urp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_as_undef</name><argument_list>(<argument><expr><name>idp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DIF_INSTR_OP</name><argument_list>(<argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DIF_OP_SETX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>dt_strtab_insert</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>soff</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>soff</name> <operator>&gt;</operator> <name>DIF_STROFF_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_STR2BIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>dofr_name</name></name> <operator>=</operator> <operator>(</operator><name>dof_stridx_t</name><operator>)</operator><name>soff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>dofr_type</name></name> <operator>=</operator> <name>DOF_RELO_SETX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>dofr_offset</name></name> <operator>=</operator> <call><name>DIF_INSTR_INTEGER</name><argument_list>(<argument><expr><name><name>dip</name><operator>-&gt;</operator><name>di_instr</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>dofr_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>krp</name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_krelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>urp</name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_urelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xlp</name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>dtdo_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dt_strtab_size</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_strtab_write</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>dt_strtab_write_f</name> <operator>*</operator><operator>)</operator><name>dt_copystr</name></expr></argument>, <argument><expr><name>pcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strlen</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>dt_inttab_size</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_inttab</name></name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_inttab_write</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_inttab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_intlen</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>dt_node_diftype</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dret</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>dtdo_rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dret</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_cflags</name></name> <operator>&amp;</operator> <name>DTRACE_C_DIFV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_dis</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>dp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
