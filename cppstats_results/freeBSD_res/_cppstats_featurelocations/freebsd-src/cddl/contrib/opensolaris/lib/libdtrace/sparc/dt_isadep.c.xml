<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/sparc/dt_isadep.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pid.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; 30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 22) &amp; 0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 25) &amp; 0x0f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 29) &amp; 0x01)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_BRANCH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP2_BPcc</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP2_Bicc</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP2_BPr</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP2_FBPfcc</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP2_FBfcc</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>


<function><type><name>int</name></type>
<name>dt_pid_create_entry_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_ENTRY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_pid_create_return_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>stret</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srdepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: malloc() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Pread</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>, <argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: Pread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>text</name><index>[<expr><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_RETURN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<while>while <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>FASTTRAP_INSTR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fasttrap_instr_query_t</name></type> <name>instr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>instr</name><operator>.</operator><name>ftiq_pid</name></name> <operator>=</operator> <call><name>Pstatus</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pr_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>instr</name><operator>.</operator><name>ftiq_pc</name></name> <operator>=</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_GETINSTR</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>instr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ESRCH</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Pread</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>instr</name><operator>.</operator><name>ftiq_pc</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: "</literal>
<literal type="string">"Pread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"mr sparkle: getinstr query "</literal>
<literal type="string">"failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DT_PROC_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>instr</name><operator>.</operator><name>ftiq_instr</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc1f80000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x81e00000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>srdepth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc1f80000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x81e80000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>srdepth</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srdepth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x81c7e008</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x81cfe008</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40000000</literal> <operator>||</operator>
<operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc1f80000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x81c00000</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc1f80000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x81e80000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>disp</name> <init>= <expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dest</name> <init>= <expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>disp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"dest = %llx\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name><name>stret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>dest</name> <operator>==</operator> <name><name>stret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
<name>dest</name> <operator>==</operator> <name><name>stret</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name>dest</name> <operator>==</operator> <name><name>stret</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dst</name> <init>= <expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dst</name> <operator>&gt;=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff80000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x81c00000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_BRANCH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>baa</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>OP2</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OP2_BPcc</name></expr>:</case>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&lt;&lt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&gt;&gt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>baa</name> <operator>=</operator> <call><name>COND</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>A</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP2_Bicc</name></expr>:</case>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3fffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&lt;&lt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>baa</name> <operator>=</operator> <call><name>COND</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>A</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP2_BPr</name></expr>:</case>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc000</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>baa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP2_FBPfcc</name></expr>:</case>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&lt;&lt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&gt;&gt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>baa</name> <operator>=</operator> <call><name>COND</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>A</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP2_FBfcc</name></expr>:</case>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3fffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&lt;&lt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>baa</name> <operator>=</operator> <call><name>COND</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>A</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dst</name> <operator>&gt;=</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>baa</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>is_ret_baa</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>is_ret</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<continue>continue;</continue>
<label><name>is_ret</name>:</label>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<label><name>is_ret_baa</name>:</label>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"return at offset %x\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>(</operator><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dt_pid_create_offset_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_PROC_ALIGN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_OFFSETS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dt_pid_create_glob_offset_probes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>fasttrap_probe_spec_t</name> <modifier>*</modifier></type><name>ftp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GElf_Sym</name> <modifier>*</modifier></type><name>symp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_type</name></name> <operator>=</operator> <name>DTFTP_OFFSETS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_pc</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmatch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_offs</name><index>[<expr><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ftfd</name></name></expr></argument>, <argument><expr><name>FASTTRAPIOC_MAKEPROBE</name></expr></argument>, <argument><expr><name>ftp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"fasttrap probe creation ioctl failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ftp</name><operator>-&gt;</operator><name>ftps_noffs</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
