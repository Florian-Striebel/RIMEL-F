<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_pcb.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DT_PCB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DT_PCB_H</name></cpp:macro></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dtrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_regset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_inttab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_strtab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_decl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_as.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>dt_pcb</name> <block>{
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>pcb_hdl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_pcb</name></name> <modifier>*</modifier></type><name>pcb_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pcb_fileptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pcb_filetag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcb_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcb_strptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pcb_strlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_sargc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pcb_sargv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name> <modifier>*</modifier></type><name>pcb_sflagv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_scope_t</name></type> <name>pcb_dstack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pcb_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pcb_hold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pcb_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idstack_t</name></type> <name>pcb_globals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>pcb_locals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>pcb_idents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>pcb_pragmas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_inttab_t</name> <modifier>*</modifier></type><name>pcb_inttab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_strtab_t</name> <modifier>*</modifier></type><name>pcb_strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_regset_t</name> <modifier>*</modifier></type><name>pcb_regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_irlist_t</name></type> <name>pcb_ir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pcb_asvidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pcb_asxrefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pcb_asxreflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pcb_pdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dt_probe</name></name> <modifier>*</modifier></type><name>pcb_probe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probeinfo_t</name></type> <name>pcb_pinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>pcb_amin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>pcb_dret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_difo_t</name> <modifier>*</modifier></type><name>pcb_difo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_prog_t</name> <modifier>*</modifier></type><name>pcb_prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_stmtdesc_t</name> <modifier>*</modifier></type><name>pcb_stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_ecbdesc_t</name> <modifier>*</modifier></type><name>pcb_ecbdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>pcb_jmpbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcb_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_probespec_t</name></type> <name>pcb_pspec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pcb_cflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>pcb_idepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yystate_t</name></type> <name>pcb_yystate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_cstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_braces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_brackets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcb_parens</name></decl>;</decl_stmt>
}</block></struct></type> <name>dt_pcb_t</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_pcb_push</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dt_pcb_pop</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
