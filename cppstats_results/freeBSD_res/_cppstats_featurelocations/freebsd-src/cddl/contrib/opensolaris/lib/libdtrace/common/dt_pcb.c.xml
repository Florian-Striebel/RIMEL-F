<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_pcb.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_program.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_pcb.h&gt;</cpp:file></cpp:include>






<function><type><name>void</name></type>
<name>dt_pcb_push</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>yypcb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name> <operator>==</operator> <name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_yystate</name></name> <operator>==</operator> <name>YYS_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>pcb</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pcb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_scope_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idstack_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_globals</name></name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_prev</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_pcb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pcb</name></name> <operator>=</operator> <name>pcb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yyinit</name><argument_list>(<argument><expr><name>pcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_pcb_pop_ident</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name> <operator>==</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_delete</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>dt_pcb_pop</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_pcb_t</name> <modifier>*</modifier></type><name>pcb</name> <init>= <expr><name>yypcb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pcb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pcb</name> <operator>==</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_pcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dstack</name><operator>.</operator><name>ds_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_scope_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>dt_scope_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_dstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_irlist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_node_link_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_node_link_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pcb</name><operator>-&gt;</operator><name>pcb_hold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_provider_t</name> <modifier>*</modifier></type><name>pvp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nvp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_prog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_program_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_stmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dtrace_stmt_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ecbdesc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_ecbdesc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_ecbdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlators</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dxp</name></expr>;</condition> <incr><expr><name>dxp</name> <operator>=</operator> <name>nxp</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nxp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_gen</name></name> <operator>==</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_xlator_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>pvp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_provlist</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pvp</name></expr>;</condition> <incr><expr><name>pvp</name> <operator>=</operator> <name>nvp</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nvp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pvp</name><operator>-&gt;</operator><name>pv_gen</name></name> <operator>==</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_gen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_provider_destroy</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggs</name></name></expr></argument>, <argument><expr><name>dt_pcb_pop_ident</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_update</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>, <argument><expr><name>dt_pcb_pop_ident</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_update</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_idhash_iter</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name></expr></argument>, <argument><expr><name>dt_pcb_pop_ident</name></expr></argument>, <argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_idhash_update</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_tls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_discard</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cdefs</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_discard</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_ddefs</name><operator>-&gt;</operator><name>dm_ctfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_pragmas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_locals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_idents</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_idents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_inttab_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_inttab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_strtab_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_strtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_regset_destroy</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxreflen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_asxrefs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_difo_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_difo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_filetag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pcb</name><operator>-&gt;</operator><name>pcb_sflagv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pcb</name></name> <operator>=</operator> <name><name>pcb</name><operator>-&gt;</operator><name>pcb_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>pcb</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_pcb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yyinit</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_pcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
