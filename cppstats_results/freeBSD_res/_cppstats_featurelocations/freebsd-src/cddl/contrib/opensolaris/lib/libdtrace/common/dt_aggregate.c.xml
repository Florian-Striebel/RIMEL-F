<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_aggregate.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc_compat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTRACE_AHASHSIZE</name></cpp:macro> <cpp:value>32779</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>dt_qsort_lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dt_revsort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dt_keysort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dt_keypos</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LESSTHAN</name></cpp:macro> <cpp:value>(dt_revsort == 0 ? -1 : 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_GREATERTHAN</name></cpp:macro> <cpp:value>(dt_revsort == 0 ? 1 : -1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_count</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>existing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>existing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>new</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_countcmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lvar</name> <init>= <expr><operator>*</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>rvar</name> <init>= <expr><operator>*</operator><name>rhs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lvar</name> <operator>&lt;</operator> <name>rvar</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lvar</name> <operator>&gt;</operator> <name>rvar</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_min</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new</name> <operator>&lt;</operator> <operator>*</operator><name>existing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>existing</name> <operator>=</operator> <operator>*</operator><name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_max</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new</name> <operator>&gt;</operator> <operator>*</operator><name>existing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>existing</name> <operator>=</operator> <operator>*</operator><name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_averagecmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lavg</name> <init>= <expr><ternary><condition><expr><name><name>lhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>lhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>lhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ravg</name> <init>= <expr><ternary><condition><expr><name><name>rhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>rhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>rhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lavg</name> <operator>&lt;</operator> <name>ravg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lavg</name> <operator>&gt;</operator> <name>ravg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_stddevcmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lsd</name> <init>= <expr><call><name>dt_stddev</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>lhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rsd</name> <init>= <expr><call><name>dt_stddev</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lsd</name> <operator>&lt;</operator> <name>rsd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lsd</name> <operator>&gt;</operator> <name>rsd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_lquantize</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>arg</name> <init>= <expr><operator>*</operator><name>existing</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>levels</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_LEVELS</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>levels</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>existing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>existing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>new</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name></type>
<name>dt_aggregate_lquantizedsum</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lquanta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>arg</name> <init>= <expr><operator>*</operator><name>lquanta</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>base</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_BASE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>step</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_STEP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>levels</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_LEVELS</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>total</name> <init>= <expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>lquanta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><operator>(</operator><name>base</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>levels</name></expr>;</condition> <incr><expr><name>base</name> <operator>+=</operator> <name>step</name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>lquanta</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>base</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>total</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>lquanta</name><index>[<expr><name>levels</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name>long</name> <name>double</name><operator>)</operator><operator>(</operator><name>base</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>dt_aggregate_lquantizedzero</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lquanta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>arg</name> <init>= <expr><operator>*</operator><name>lquanta</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>base</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_BASE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>step</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_STEP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>levels</name> <init>= <expr><call><name>DTRACE_LQUANTIZE_LEVELS</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>lquanta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>levels</name></expr>;</condition> <incr><expr><name>base</name> <operator>+=</operator> <name>step</name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>lquanta</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>lquanta</name><index>[<expr><name>levels</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_lquantizedcmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>lsum</name> <init>= <expr><call><name>dt_aggregate_lquantizedsum</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>rsum</name> <init>= <expr><call><name>dt_aggregate_lquantizedsum</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lzero</name></decl>, <decl><type ref="prev"/><name>rzero</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lsum</name> <operator>&lt;</operator> <name>rsum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lsum</name> <operator>&gt;</operator> <name>rsum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><name>lzero</name> <operator>=</operator> <call><name>dt_aggregate_lquantizedzero</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rzero</name> <operator>=</operator> <call><name>dt_aggregate_lquantizedzero</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lzero</name> <operator>&lt;</operator> <name>rzero</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lzero</name> <operator>&gt;</operator> <name>rzero</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_llquantize</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>existing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>existing</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>new</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name></type>
<name>dt_aggregate_llquantizedsum</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>llquanta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>arg</name> <init>= <expr><operator>*</operator><name>llquanta</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>factor</name> <init>= <expr><call><name>DTRACE_LLQUANTIZE_FACTOR</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>low</name> <init>= <expr><call><name>DTRACE_LLQUANTIZE_LOW</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>high</name> <init>= <expr><call><name>DTRACE_LLQUANTIZE_HIGH</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nsteps</name> <init>= <expr><call><name>DTRACE_LLQUANTIZE_NSTEP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>next</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>total</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nsteps</name> <operator>&gt;=</operator> <name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nsteps</name> <operator>%</operator> <name>factor</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>order</name> <operator>&lt;</operator> <name>low</name></expr>;</condition> <incr><expr><name>order</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>total</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>llquanta</name><index>[<expr><name>bin</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><operator>(</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>value</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <ternary><condition><expr><name>next</name> <operator>&gt;</operator> <name>nsteps</name></expr> ?</condition><then> <expr><name>next</name> <operator>/</operator> <name>nsteps</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>order</name> <operator>&lt;=</operator> <name>high</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>&lt;</operator> <name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>llquanta</name><index>[<expr><name>bin</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><operator>(</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>+=</operator> <name>step</name><operator>)</operator> <operator>!=</operator> <name>next</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>value</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <ternary><condition><expr><name>next</name> <operator>&gt;</operator> <name>nsteps</name></expr> ?</condition><then> <expr><name>next</name> <operator>/</operator> <name>nsteps</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>order</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>total</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>llquanta</name><index>[<expr><name>bin</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_llquantizedcmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>lsum</name> <init>= <expr><call><name>dt_aggregate_llquantizedsum</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>rsum</name> <init>= <expr><call><name>dt_aggregate_llquantizedsum</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lzero</name></decl>, <decl><type ref="prev"/><name>rzero</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lsum</name> <operator>&lt;</operator> <name>rsum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lsum</name> <operator>&gt;</operator> <name>rsum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>lzero</name> <operator>=</operator> <name><name>lhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rzero</name> <operator>=</operator> <name><name>rhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lzero</name> <operator>&lt;</operator> <name>rzero</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lzero</name> <operator>&gt;</operator> <name>rzero</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_quantizedcmp</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nbuckets</name> <init>= <expr><name>DTRACE_QUANTIZE_NBUCKETS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ltotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rtotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lzero</name></decl>, <decl><type ref="prev"/><name>rzero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbuckets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bucketval</name> <init>= <expr><call><name>DTRACE_QUANTIZE_BUCKETVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bucketval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lzero</name> <operator>=</operator> <name><name>lhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rzero</name> <operator>=</operator> <name><name>rhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ltotal</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>bucketval</name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>lhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtotal</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>bucketval</name> <operator>*</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>rhs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ltotal</name> <operator>&lt;</operator> <name>rtotal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ltotal</name> <operator>&gt;</operator> <name>rtotal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>lzero</name> <operator>&lt;</operator> <name>rzero</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lzero</name> <operator>&gt;</operator> <name>rzero</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_usym</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pid</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>P</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>PGRAB_RDONLY</name> <operator>|</operator> <name>PGRAB_FORCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_proc_lock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Plookup_by_addr</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><operator>*</operator><name>pc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_umod</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pid</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>prmap_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>P</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>PGRAB_RDONLY</name> <operator>|</operator> <name>PGRAB_FORCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_proc_lock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>Paddr_to_map</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>pr_vaddr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_sym</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dtrace_lookup_by_addr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>*</operator><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_aggregate_mod</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_module_t</name> <modifier>*</modifier></type><name>dmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>








<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_modlist</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>dmp</name> <operator>=</operator> <call><name>dt_list_next</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pc</name> <operator>-</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name> <operator>&lt;</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>dmp</name><operator>-&gt;</operator><name>dm_text_va</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dtrace_aggvarid_t</name></type>
<name>dt_aggregate_aggvarid</name><parameter_list>(<parameter><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>data</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name></name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name> <operator>!=</operator> <name>DTRACE_AGGVARIDNONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>dtrace_aggvarid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator>
<name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_snap_cpu</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>processorid_t</name></type> <name>cpu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_epid_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offs</name></decl>, <decl><type ref="prev"/><name>roffs</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_bufdesc_t</name></type> <name>b</name> <init>= <expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_buf</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_flags</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>dtbd_cpu</name></name> <operator>=</operator> <name>cpu</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_AGGSNAP</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_AGGSNAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>





<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>dtbd_drops</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_handle_cpudrop</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>cpu</name></expr></argument>,
<argument><expr><name>DTRACEDROP_AGGREGATION</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>dtbd_drops</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>dtbd_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_size</name></name> <operator>=</operator> <name>DTRACE_AHASHSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_size</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>offs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offs</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>dtbd_size</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>



<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>dtrace_epid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>dtbd_data</name></name> <operator>+</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator><name>offs</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>DTRACE_AGGIDNONE</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>offs</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggid_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>dtbd_data</name></name> <operator>+</operator> <name>offs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtagd_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hashval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>roffs</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEACT_USYM</name></expr>:</case>
<expr_stmt><expr><call><name>dt_aggregate_usym</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEACT_UMOD</name></expr>:</case>
<expr_stmt><expr><call><name>dt_aggregate_umod</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEACT_SYM</name></expr>:</case>

<expr_stmt><expr><call><name>dt_aggregate_sym</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEACT_MOD</name></expr>:</case>

<expr_stmt><expr><call><name>dt_aggregate_mod</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>hashval</name> <operator>+=</operator> <name><name>addr</name><index>[<expr><name>roffs</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>ndx</name> <operator>=</operator> <name>hashval</name> <operator>%</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_hashval</name></name> <operator>!=</operator> <name>hashval</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_size</name></name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>roffs</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>addr</name><index>[<expr><name>roffs</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>data</name><index>[<expr><name>roffs</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>hashnext</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>





<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>roffs</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name><index>[<expr><name>cpu</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><index>[<expr><name>roffs</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<goto>goto <name>bufnext</name>;</goto>
<label><name>hashnext</name>:</label>
<continue>continue;</continue>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name> <operator>=</operator> <name>agg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_handle</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_epid_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_epid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_edesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_pdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_normal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_hashval</name></name> <operator>=</operator> <name>hashval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DTRACE_A_PERCPU</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_cpus</name> <init>= <expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name> <modifier>*</modifier></type><name>percpu</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>max_cpus</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>caddr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>percpu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>max_cpus</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>percpu</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>percpu</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>percpu</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>cpu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><index>[<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>percpu</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>percpu</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name></name> <operator>=</operator> <name>percpu</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEAGG_MIN</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name> <operator>=</operator> <name>dt_aggregate_min</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_MAX</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name> <operator>=</operator> <name>dt_aggregate_max</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_LQUANTIZE</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name> <operator>=</operator> <name>dt_aggregate_lquantize</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_LLQUANTIZE</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name> <operator>=</operator> <name>dt_aggregate_llquantize</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_COUNT</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_SUM</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_AVG</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_STDDEV</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_QUANTIZE</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_aggregate</name></name> <operator>=</operator> <name>dt_aggregate_count</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADAGG</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name><operator>-&gt;</operator><name>dtahe_prev</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_next</name></name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name><operator>-&gt;</operator><name>dtahe_prevall</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<label><name>bufnext</name>:</label>
<expr_stmt><expr><name>offs</name> <operator>+=</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtagd_size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type>
<name>dtrace_aggregate_snap</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hrtime_t</name></type> <name>now</name> <init>= <expr><call><name>gethrtime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>interval</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGRATE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_lastagg</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_lastagg</name></name> <operator>&lt;</operator> <name>interval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_lastagg</name></name> <operator>+=</operator> <name>interval</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_lastagg</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_active</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_buf</name><operator>.</operator><name>dtbd_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpus</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_snap_cpu</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_hashcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>lh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>rh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>lagg</name> <init>= <expr><name><name>lh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>ragg</name> <init>= <expr><name><name>rh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lagg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>&lt;</operator> <name><name>ragg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lagg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>&gt;</operator> <name><name>ragg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_varcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>lh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>rh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>lid</name></decl>, <decl><type ref="prev"/><name>rid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lid</name> <operator>=</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>lh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rid</name> <operator>=</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>rh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lid</name> <operator>&lt;</operator> <name>rid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lid</name> <operator>&gt;</operator> <name>rid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_keycmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>lh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>rh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>lagg</name> <init>= <expr><name><name>lh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>ragg</name> <init>= <expr><name><name>rh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>lrec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rrec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ldata</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>keypos</name></decl>, <decl><type ref="prev"/><name>nrecs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_hashcmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nrecs</name> <operator>=</operator> <name><name>lagg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nrecs</name> <operator>==</operator> <name><name>ragg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keypos</name> <operator>=</operator> <ternary><condition><expr><name>dt_keypos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>nrecs</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>dt_keypos</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrecs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lval</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ndx</name> <init>= <expr><name>i</name> <operator>+</operator> <name>keypos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ndx</name> <operator>&gt;=</operator> <name>nrecs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ndx</name> <operator>=</operator> <name>ndx</name> <operator>-</operator> <name>nrecs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lrec</name> <operator>=</operator> <operator>&amp;</operator><name><name>lagg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name>ndx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rrec</name> <operator>=</operator> <operator>&amp;</operator><name><name>ragg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name>ndx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ldata</name> <operator>=</operator> <name><name>lh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name> <operator>+</operator> <name><name>lrec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rdata</name> <operator>=</operator> <name><name>rh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name> <operator>+</operator> <name><name>rrec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lrec</name><operator>-&gt;</operator><name>dtrd_size</name></name> <operator>&lt;</operator> <name><name>rrec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lrec</name><operator>-&gt;</operator><name>dtrd_size</name></name> <operator>&gt;</operator> <name><name>rrec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>lrec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>

<expr_stmt><expr><name>lval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>ldata</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>

<expr_stmt><expr><name>lval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>ldata</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>

<expr_stmt><expr><name>lval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ldata</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>:</case>
<expr_stmt><expr><name>lval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ldata</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<switch>switch <condition>(<expr><name><name>lrec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEACT_UMOD</name></expr>:</case>
<case>case <expr><name>DTRACEACT_UADDR</name></expr>:</case>
<case>case <expr><name>DTRACEACT_USYM</name></expr>:</case>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>ldata</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>rdata</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lval</name> <operator>&lt;</operator> <name>rval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lval</name> <operator>&gt;</operator> <name>rval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<break>break;</break>

<default>default:</default>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>lrec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ldata</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>rdata</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lval</name> <operator>&lt;</operator> <name>rval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lval</name> <operator>&gt;</operator> <name>rval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></switch>

<continue>continue;</continue>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>lval</name> <operator>&lt;</operator> <name>rval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_LESSTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lval</name> <operator>&gt;</operator> <name>rval</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DT_GREATERTHAN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_valcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>lh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>rh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>lagg</name> <init>= <expr><name><name>lh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>ragg</name> <init>= <expr><name><name>rh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>ldata</name> <init>= <expr><name><name>lh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>rdata</name> <init>= <expr><name><name>rh</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>lrec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rrec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>laddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>raddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lagg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>==</operator> <name><name>ragg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lrec</name> <operator>=</operator> <operator>&amp;</operator><name><name>lagg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>lagg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rrec</name> <operator>=</operator> <operator>&amp;</operator><name><name>ragg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>ragg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lrec</name><operator>-&gt;</operator><name>dtrd_action</name></name> <operator>==</operator> <name><name>rrec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>laddr</name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>ldata</name> <operator>+</operator> <name><name>lrec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>raddr</name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>rdata</name> <operator>+</operator> <name><name>rrec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>lrec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEAGG_AVG</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_averagecmp</name><argument_list>(<argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_STDDEV</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_stddevcmp</name><argument_list>(<argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_QUANTIZE</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_quantizedcmp</name><argument_list>(<argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_LQUANTIZE</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_lquantizedcmp</name><argument_list>(<argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_LLQUANTIZE</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_llquantizedcmp</name><argument_list>(<argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_COUNT</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_SUM</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_MIN</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_MAX</name></expr>:</case>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_countcmp</name><argument_list>(<argument><expr><name>laddr</name></expr></argument>, <argument><expr><name>raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_valkeycmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_valcmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<return>return <expr><operator>(</operator><call><name>dt_aggregate_keycmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_keyvarcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_keycmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_aggregate_varcmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_varkeycmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_varcmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_aggregate_keycmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_valvarcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_valkeycmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_aggregate_varcmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_varvalcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_varcmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_aggregate_valkeycmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_keyvarrevcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_keyvarcmp</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_varkeyrevcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_varkeycmp</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_valvarrevcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_valvarcmp</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_varvalrevcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_varvalcmp</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_bundlecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><name>lhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rh</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dt_keysort</name></expr>)</condition> <block>{<block_content>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>lh</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rh</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_keycmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lh</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>dt_keysort</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rh</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_keycmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>dt_aggregate_valcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_aggregate_go</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_bufdesc_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpu</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name> <operator>=</operator> <call><name>dt_sysconf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>_SC_CPUID_MAX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpu</name></name> <operator>=</operator> <call><name>dt_sysconf</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>_SC_NPROCESSORS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpu</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>processorid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGSIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"aggsize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rval</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>dtbd_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>dtbd_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>dtbd_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dtrace_getopt</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rval</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cpu</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpu</name> <operator>!=</operator> <name>DTRACE_CPUALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cpu</name> <operator>&lt;</operator> <name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name><index>[<expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpus</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>processorid_t</name><operator>)</operator><name>cpu</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_status</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name><index>[<expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_ncpus</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggwalk_rval</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>aggdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>rval</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACE_AGGWALK_NEXT</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>DTRACE_AGGWALK_CLEAR</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>offs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>aggdesc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name> <operator>==</operator> <name>DTRACEAGG_LQUANTIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>dtada_data</name><index>[<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>]</index></name> <operator>+</operator> <name>offs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>dtada_percpu</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name><operator>.</operator><name>dtat_maxcpu</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtada_percpu</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>DTRACE_AGGWALK_ERROR</name></expr>:</case>



<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>DTRACE_AGGWALK_ABORT</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DIRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>DTRACE_AGGWALK_DENORMALIZE</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_normal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>DTRACE_AGGWALK_NORMALIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_normal</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_normal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADRVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>DTRACE_AGGWALK_REMOVE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_cpus</name> <init>= <expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_prev</name><operator>-&gt;</operator><name>dtahe_next</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ndx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_hashval</name></name> <operator>%</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name> <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name><index>[<expr><name>ndx</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_next</name><operator>-&gt;</operator><name>dtahe_prev</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_prevall</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_prevall</name><operator>-&gt;</operator><name>dtahe_nextall</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name> <operator>==</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name><operator>-&gt;</operator><name>dtahe_prevall</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_prevall</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_cpus</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block>

<default>default:</default>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADRVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_aggregate_qsort</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nel</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rev</name> <init>= <expr><name>dt_revsort</name></expr></init></decl>, <decl><type ref="prev"/><name>key</name> <init>= <expr><name>dt_keysort</name></expr></init></decl>, <decl><type ref="prev"/><name>keypos</name> <init>= <expr><name>dt_keypos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>keyposopt</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGSORTKEYPOS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dt_revsort</name> <operator>=</operator> <operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGSORTREV</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_keysort</name> <operator>=</operator> <operator>(</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGSORTKEY</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyposopt</name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name> <operator>&amp;&amp;</operator> <name>keyposopt</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dt_keypos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>keyposopt</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dt_keypos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compar</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dt_keysort</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>compar</name> <operator>=</operator> <name>dt_aggregate_varvalcmp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>compar</name> <operator>=</operator> <name>dt_aggregate_varkeycmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nel</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dt_revsort</name> <operator>=</operator> <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_keysort</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dt_keypos</name> <operator>=</operator> <name>keypos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name><operator>.</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>





<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_aggwalk_rval</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_total</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>boolean_t</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggid_t</name></type> <name>max</name> <init>= <expr><name>DTRACE_AGGVARIDNONE</name></expr></init></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tflags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tflags</name> <operator>=</operator> <name>DTRACE_A_TOTAL</name> <operator>|</operator> <name>DTRACE_A_HASNEGATIVES</name> <operator>|</operator> <name>DTRACE_A_HASPOSITIVES</name></expr>;</expr_stmt>








<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>=</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>tflags</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>clear</name> <operator>||</operator> <name>max</name> <operator>==</operator> <name>DTRACE_AGGVARIDNONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_aggdata_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEAGG_STDDEV</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>dt_stddev</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_SUM</name></expr>:</case>
<case>case <expr><name>DTRACEAGG_COUNT</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_AVG</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>total</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>total</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name> <operator>=</operator> <name>aggdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>|=</operator> <name>DTRACE_A_TOTAL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <name><name>total</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>|=</operator> <name>DTRACE_A_HASPOSITIVES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>|=</operator> <name>DTRACE_A_HASNEGATIVES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGZOOM</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>val</name> <operator>*</operator>
<operator>(</operator><literal type="number">1</literal> <operator>/</operator> <name>DTRACE_AGGZOOM_MAX</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_total</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_total</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_total</name></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <name><name>total</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>aggdata</name> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_total</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>dtada_total</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>|=</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>&amp;</operator> <name>tflags</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_minmaxbin</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>boolean_t</name></type> <name>clear</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>minmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggid_t</name></type> <name>max</name> <init>= <expr><name>DTRACE_AGGVARIDNONE</name></expr></init></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>=</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_minbin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_maxbin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DTRACE_A_MINMAXBIN</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>clear</name> <operator>||</operator> <name>max</name> <operator>==</operator> <name>DTRACE_AGGVARIDNONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>minmax</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_aggdata_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minmax</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minbin</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxbin</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>agg</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACEAGG_LQUANTIZE</name></expr>:</case>




<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>minbin</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxbin</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DTRACEAGG_QUANTIZE</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>minbin</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minbin</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxbin</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>minbin</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>minbin</name> <operator>=</operator> <name>maxbin</name> <operator>=</operator> <name>DTRACE_QUANTIZE_ZEROBUCKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name> <operator>=</operator> <name>aggdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>|=</operator> <name>DTRACE_A_MINMAXBIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_minbin</name></name> <operator>=</operator> <name>minbin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_maxbin</name></name> <operator>=</operator> <name>maxbin</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>minbin</name> <operator>&lt;</operator> <name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name><operator>-&gt;</operator><name>dtada_minbin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name><operator>-&gt;</operator><name>dtada_minbin</name> <operator>=</operator> <name>minbin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxbin</name> <operator>&gt;</operator> <name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name><operator>-&gt;</operator><name>dtada_maxbin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name><operator>-&gt;</operator><name>dtada_maxbin</name> <operator>=</operator> <name>maxbin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>




<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name> <init>= <expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mm</name> <operator>=</operator> <name><name>minmax</name><index>[<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>aggdata</name> <operator>==</operator> <name>mm</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_minbin</name></name> <operator>=</operator> <name><name>mm</name><operator>-&gt;</operator><name>dtada_minbin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_maxbin</name></name> <operator>=</operator> <name><name>mm</name><operator>-&gt;</operator><name>dtada_maxbin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_flags</name></name> <operator>|=</operator> <name>DTRACE_A_MINMAXBIN</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_aggregate_walk_sorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sfunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>sorted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nentries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DTRACE_A_TOTAL</name> <operator>|</operator> <name>DTRACE_A_MINMAXBIN</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGHIST</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_flags</name></name> <operator>|=</operator> <name>DTRACE_A_TOTAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_aggregate_total</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGPACK</name></expr>]</index></name> <operator>!=</operator> <name>DTRACEOPT_UNSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_flags</name></name> <operator>|=</operator> <name>DTRACE_A_MINMAXBIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_aggregate_minmaxbin</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nentries</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sorted</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>nentries</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sorted</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sorted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt_qsort_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sfunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_aggregate_qsort</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt_qsort_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_aggwalk_rval</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_flags</name></name> <operator>&amp;</operator> <name>DTRACE_A_TOTAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_aggregate_total</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_flags</name></name> <operator>&amp;</operator> <name>DTRACE_A_MINMAXBIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_aggregate_minmaxbin</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>B_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_sorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_keysorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_varkeycmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_valsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_varvalcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_keyvarsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_keyvarcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_valvarsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_valvarcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_keyrevsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_varkeyrevcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_valrevsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_varvalrevcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_keyvarrevsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_keyvarrevcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_valvarrevsorted</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dt_aggregate_walk_sorted</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>dt_aggregate_valvarrevcmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_walk_joined</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_aggvarid_t</name> <modifier>*</modifier></type><name>aggvars</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>naggvars</name></decl></parameter>, <parameter><decl><type><name>dtrace_aggregate_walk_joined_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>sorted</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>bundle</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>nbundle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>zaggdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nentries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nbundles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>zsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bundlesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>aggvar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>remap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_optval_t</name></type> <name>sortpos</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_options</name><index>[<expr><name>DTRACEOPT_AGGSORTPOS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>sortpos</name> <operator>==</operator> <name>DTRACEOPT_UNSET</name> <operator>||</operator> <name>sortpos</name> <operator>&gt;=</operator> <name>naggvars</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sortpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aggvars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DTRACE_AGGVARIDNONE</name> <operator>||</operator> <name><name>aggvars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADAGGVAR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aggvars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>aggvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zaggdata</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>naggvars</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zaggdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ndx</name> <init>= <expr><name>i</name> <operator>+</operator> <name>sortpos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ndx</name> <operator>&gt;=</operator> <name>naggvars</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ndx</name> <operator>-=</operator> <name>naggvars</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aggvar</name> <operator>=</operator> <name><name>aggvars</name><index>[<expr><name>ndx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>aggvar</name> <operator>&lt;=</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><name>aggvar</name></expr>]</index></name></expr>)</condition> <block>{<block_content>










<if_stmt><if>if <condition>(<expr><name>remap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>remap</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>naggvars</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aggvars</name><index>[<expr><operator>(</operator><name><name>map</name><index>[<expr><name>aggvar</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>sortpos</name><operator>)</operator> <operator>%</operator>
<name>naggvars</name></expr>]</index></name> <operator>==</operator> <name><name>aggvars</name><index>[<expr><name>ndx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>remap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>map</name><index>[<expr><name>aggvar</name></expr>]</index></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><index>[<expr><name>aggvar</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>






<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ndx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>=</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>ndx</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>id</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zaggdata</name><index>[<expr><name>ndx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dtahe_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zaggdata</name><index>[<expr><name>ndx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dtahe_size</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zaggdata</name><index>[<expr><name>ndx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dtahe_data</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nentries</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nentries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





















<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>aggvar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aggvar</name> <operator>=</operator> <name><name>aggvars</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <name>sortpos</name> <operator>+</operator> <name>naggvars</name><operator>)</operator> <operator>%</operator> <name>naggvars</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>DTRACE_AGGIDNONE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>agg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_aggid_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_varid</name></name> <operator>!=</operator> <name>aggvar</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <operator>&amp;</operator><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_size</name></name> <operator>=</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtagd_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name> <operator>=</operator> <name>agg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_handle</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_epid_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>agg</name><operator>-&gt;</operator><name>dtagd_epid</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_edesc</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_pdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_normal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_hashval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_size</name> <operator>=</operator> <name><name>agg</name><operator>-&gt;</operator><name>dtagd_size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>data</name></decl>;</decl_stmt>












<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zaggdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dtahe_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>zaggdata</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name> <init>= <expr><operator>&amp;</operator><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>aggdesc</name> <init>= <expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>larg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>zdata</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zsize</name> <operator>=</operator> <name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtahe_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zsize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>zdata</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zaggdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>aggvar</name> <operator>=</operator> <name><name>aggvars</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <name>sortpos</name> <operator>+</operator> <name>naggvars</name><operator>)</operator> <operator>%</operator> <name>naggvars</name></expr>]</index></name></expr>;</expr_stmt>






<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>dtrace_aggvarid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>zdata</name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>aggvar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_action</name></name> <operator>==</operator> <name>DTRACEAGG_LQUANTIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>larg</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name> <operator>+</operator>
<name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>











<decl_stmt><decl><type><name>dtrace_stmtdesc_t</name> <modifier>*</modifier></type><name>sdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>aid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idsig_t</name> <modifier>*</modifier></type><name>isp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sdp</name> <operator>=</operator> <operator>(</operator><name>dtrace_stmtdesc_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator>
<name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dtrd_uarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aid</name> <operator>=</operator> <name><name>sdp</name><operator>-&gt;</operator><name>dtsd_aggdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>isp</name> <operator>=</operator> <operator>(</operator><name>dt_idsig_t</name> <operator>*</operator><operator>)</operator><name><name>aid</name><operator>-&gt;</operator><name>di_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_auxinfo</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>larg</name> <operator>=</operator> <name><name>isp</name><operator>-&gt;</operator><name>dis_auxinfo</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>zdata</name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>larg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name> <operator>=</operator> <name>zdata</name></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><name>sorted</name> <operator>=</operator> <call><name>dt_alloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>nentries</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sorted</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>=</operator> <call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>!</operator><name><name>map</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sorted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>nentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt_qsort_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dt_aggregate_keyvarcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>bundle</name> <operator>=</operator> <operator>(</operator><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><name>sorted</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nentries</name> <operator>&amp;&amp;</operator>
<call><name>dt_aggregate_keycmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sorted</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>start</name> <operator>&lt;=</operator> <name>naggvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bundlesize</name> <operator>=</operator> <operator>(</operator><name>naggvars</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nbundle</name> <operator>=</operator> <call><name>dt_zalloc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>bundlesize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt_qsort_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_aggvarid_t</name></type> <name>id</name> <init>= <expr><call><name>dt_aggregate_aggvarid</name><argument_list>(<argument><expr><name><name>sorted</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>&lt;=</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>id</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>id</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>naggvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>nbundle</name><index>[<expr><name><name>map</name><index>[<expr><name>id</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nbundle</name><index>[<expr><name><name>map</name><index>[<expr><name>id</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nbundle</name><index>[<expr><name>naggvars</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nbundle</name><index>[<expr><name>naggvars</name></expr>]</index></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nbundle</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name>remap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>remap</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>remap</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>nbundle</name><index>[<expr><name><name>remap</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nbundle</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>nbundle</name><index>[<expr><name><name>remap</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>nbundle</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>zaggdata</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>bundle</name><index>[<expr><name>nbundles</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>nbundle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>dt_aggregate_qsort</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>, <argument><expr><name>nbundles</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ahashent_t</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dt_aggregate_bundlecmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt_qsort_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><operator>(</operator><name>naggvars</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_aggdata_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbundles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ndx</name> <init>= <expr><name>j</name> <operator>-</operator> <name>sortpos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ndx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ndx</name> <operator>+=</operator> <name>naggvars</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bundle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ndx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>bundle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ndx</name></expr>]</index></name><operator>-&gt;</operator><name>dtahe_data</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>






<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bundle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>bundle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>dtahe_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>naggvars</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>out</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbundles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>bundle</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>zaggdata</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>naggvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>zaggdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dtahe_data</name><operator>.</operator><name>dtada_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>zaggdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>remap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_aggregate_print</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
<parameter><decl><type><name>dtrace_aggregate_walk_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_print_aggdata_t</name></type> <name>pd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>dtpa_dtp</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>dtpa_fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>dtpa_allunprint</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>dtrace_aggregate_walk_sorted</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dt_print_agg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_errno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dtrace_aggregate_clear</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdesc_t</name> <modifier>*</modifier></type><name>aggdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_cpus</name> <init>= <expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>aggdesc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name><operator>.</operator><name>dtada_desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_rec</name><index>[<expr><name><name>aggdesc</name><operator>-&gt;</operator><name>dtagd_nrecs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>dtada_data</name><index>[<expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>dtada_percpu</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_cpus</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dtada_percpu</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>dtrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_aggregate_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_aggregate_t</name> <modifier>*</modifier></type><name>agp</name> <init>= <expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_aggregate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahash_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>agp</name><operator>-&gt;</operator><name>dtat_hash</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ahashent_t</name> <modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>aggdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max_cpus</name> <init>= <expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_maxcpu</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name></expr>;</init> <condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dtahe_nextall</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>aggdata</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>dtahe_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_cpus</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_percpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aggdata</name><operator>-&gt;</operator><name>dtada_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_all</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>dtah_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_buf</name><operator>.</operator><name>dtbd_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>agp</name><operator>-&gt;</operator><name>dtat_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function>
</unit>
