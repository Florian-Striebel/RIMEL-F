<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_ident.c">



























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/procfs_isa.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_ident.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_strtab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_sign</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_idsig_t</name> <modifier>*</modifier></type><name>isp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>compat</name></decl>, <decl><type ref="prev"/><name>mismatch</name></decl>, <decl><type ref="prev"/><name>arglimit</name></decl>, <decl><type ref="prev"/><name>iskey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>n1</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n2</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>iskey</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name> <operator>||</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_AGG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mismatch</name> <operator>=</operator> <name>argc</name> <operator>&lt;</operator> <name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arglimit</name> <operator>=</operator> <name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mismatch</name> <operator>=</operator> <operator>(</operator><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <name><name>isp</name><operator>-&gt;</operator><name>dis_argc</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>arglimit</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mismatch</name> <operator>=</operator> <name>argc</name> <operator>!=</operator> <name><name>isp</name><operator>-&gt;</operator><name>dis_argc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arglimit</name> <operator>=</operator> <name><name>isp</name><operator>-&gt;</operator><name>dis_argc</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mismatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PROTO_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s prototype mismatch: %d %s%s"</literal>
<literal type="string">"passed, %s%d expected\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>,
<argument><expr><name>argc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>iskey</name></expr> ?</condition><then> <expr><literal type="string">"key"</literal></expr> </then><else>: <expr><literal type="string">"arg"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"s "</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"at least "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name></expr> </then><else>: <expr><name>arglimit</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arglimit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>args</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dn_ctfp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>compat</name> <operator>=</operator> <call><name>dt_node_is_argcompat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>compat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PROTO_ARG</name></expr></argument>,
<argument><expr><literal type="string">"%s%s%s %s #%d is incompatible with "</literal>
<literal type="string">"prototype:\n\tprototype: %s\n\t%9s: %s\n"</literal></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>iskey</name></expr> ?</condition><then> <expr><literal type="string">"key"</literal></expr> </then><else>: <expr><literal type="string">"argument"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>iskey</name></expr> ?</condition><then> <expr><literal type="string">"key"</literal></expr> </then><else>: <expr><literal type="string">"argument"</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_assc</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dt_idsig_t</name> <modifier>*</modifier></type><name>isp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_idsig_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_auxinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>isp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_DECL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <call><name>DT_DYN_CTFP</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <call><name>DT_DYN_TYPE</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>args</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_dynamic</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>dt_node_is_void</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_KEY_TYPE</name></expr></argument>, <argument><expr><literal type="string">"%s expression may not be "</literal>
<literal type="string">"used as %s index: key #%d\n"</literal></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dt_idkind_name</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_node_type_propagate</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dn_list</name> <operator>=</operator> <operator>&amp;</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dn_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dt_idcook_sign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_AGG</name></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"[ ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_func</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_idsig_t</name> <modifier>*</modifier></type><name>isp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p2</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p1</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"internal error: malformed entry "</literal>
<literal type="string">"for built-in function %s\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</init> <condition><expr><operator>*</operator><name>p2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>isp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_idsig_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_argc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_auxinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>isp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_type_lookup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"failed to resolve type of %s (%s):"</literal>
<literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_AGGFUNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <call><name>DT_DYN_CTFP</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <call><name>DT_DYN_TYPE</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

















<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>isp</name><operator>-&gt;</operator><name>dis_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p1</name> <operator>=</operator> <name>p2</name></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dn_ctfp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dn_type</name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"optional arg#%d "</literal>
<literal type="string">"may not follow variable arg#%d\n"</literal></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_varargs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p1</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"required arg#%d may not "</literal>
<literal type="string">"follow optional arg#%d\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>isp</name><operator>-&gt;</operator><name>dis_optargs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_type_lookup</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"failed to resolve type of "</literal>
<literal type="string">"%s arg#%d (%s): %s\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>isp</name><operator>-&gt;</operator><name>dis_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr></argument>, <argument><expr><name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_idcook_sign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"( )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_args</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_probe_t</name> <modifier>*</modifier></type><name>prp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_probe</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dt_node_t</name></type> <name>tag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nnp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_xlator_t</name> <modifier>*</modifier></type><name>dxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>xidp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>n1</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n2</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PROTO_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s[ ] prototype mismatch: %d arg%s"</literal>
<literal type="string">"passed, 1 expected\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"s "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PROTO_ARG</name></expr></argument>, <argument><expr><literal type="string">"%s[ ] argument #1 is incompatible with "</literal>
<literal type="string">"prototype:\n\tprototype: %s\n\t argument: %s\n"</literal></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><literal type="string">"integer constant"</literal></expr></argument>,
<argument><expr><call><name>dt_type_name</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pdesc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ARGS_NONE</name></expr></argument>, <argument><expr><literal type="string">"%s[ ] may not be referenced outside "</literal>
<literal type="string">"of a probe clause\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ARGS_MULTI</name></expr></argument>,
<argument><expr><literal type="string">"%s[ ] may not be referenced because probe description %s "</literal>
<literal type="string">"matches an unstable set of probes\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><call><name>dtrace_desc2str</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pdesc</name></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name> <operator>&gt;=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_argc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ARGS_IDX</name></expr></argument>, <argument><expr><literal type="string">"index %lld is out of range for %s %s[ ]\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>longlong_t</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>, <argument><expr><call><name>dtrace_desc2str</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_pdesc</name></name></expr></argument>,
<argument><expr><name>n1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>xnp</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_xargv</name><index>[<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nnp</name> <operator>=</operator> <name><name>prp</name><operator>-&gt;</operator><name>pr_nargv</name><index>[<expr><name><name>prp</name><operator>-&gt;</operator><name>pr_mapping</name><index>[<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xnp</name><operator>-&gt;</operator><name>dn_type</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ARGS_TYPE</name></expr></argument>, <argument><expr><literal type="string">"failed to resolve translated type for "</literal>
<literal type="string">"%s[%lld]\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>longlong_t</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nnp</name><operator>-&gt;</operator><name>dn_type</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ARGS_TYPE</name></expr></argument>, <argument><expr><literal type="string">"failed to resolve native type for "</literal>
<literal type="string">"%s[%lld]\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>longlong_t</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_xlatemode</name></name> <operator>==</operator> <name>DT_XL_STATIC</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name>nnp</name> <operator>==</operator> <name>xnp</name> <operator>||</operator> <call><name>dt_node_is_argcompat</name><argument_list>(<argument><expr><name>nnp</name></expr></argument>, <argument><expr><name>xnp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name> <operator>=</operator> <call><name>dt_ident_create</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|</operator> <name>DT_IDFLG_ORPHAN</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>,
<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr>]</index></name><operator>.</operator><name>dtt_ctfp</name></expr></argument>,
<argument><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr>]</index></name><operator>.</operator><name>dtt_type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>prp</name><operator>-&gt;</operator><name>pr_argv</name><index>[<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr>]</index></name><operator>.</operator><name>dtt_flags</name> <operator>&amp;</operator> <name>DTT_FL_USER</name></expr> ?</condition><then>
<expr><name>B_TRUE</name></expr> </then><else>: <expr><name>B_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>dxp</name> <operator>=</operator> <call><name>dt_xlator_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>,
<argument><expr><name>nnp</name></expr></argument>, <argument><expr><name>xnp</name></expr></argument>, <argument><expr><name>DT_XLATE_FUZZY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator>
<name>dxp</name> <operator>=</operator> <call><name>dt_xlator_lookup</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dt_probe_tag</name><argument_list>(<argument><expr><name>prp</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>xnp</name></expr></argument>, <argument><expr><name>DT_XLATE_EXACT</name> <operator>|</operator> <name>DT_XLATE_EXTERN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>xidp</name> <operator>=</operator> <call><name>dt_xlator_ident</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>, <argument><expr><name><name>xnp</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>, <argument><expr><name><name>xnp</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name> <operator>=</operator> <call><name>dt_ident_create</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name><name>xidp</name><operator>-&gt;</operator><name>di_kind</name></name></expr></argument>,
<argument><expr><name><name>xidp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>|</operator> <name>DT_IDFLG_ORPHAN</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_xlator_dynamic</name><argument_list>(<argument><expr><name>dxp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dxp</name><operator>-&gt;</operator><name>dx_arg</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name><name>xidp</name><operator>-&gt;</operator><name>di_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>xidp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name><name>xidp</name><operator>-&gt;</operator><name>di_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><call><name>DT_DYN_CTFP</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DT_DYN_TYPE</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_ARGS_XLATOR</name></expr></argument>, <argument><expr><literal type="string">"translator for %s[%lld] from %s to %s "</literal>
<literal type="string">"is not defined\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>longlong_t</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>nnp</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>dt_node_type_name</name><argument_list>(<argument><expr><name>xnp</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_ORPHAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name><operator>-&gt;</operator><name>di_id</name></name> <operator>==</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_regs</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>n</name><index>[<expr><name>DT_TYPE_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PROTO_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s[ ] prototype mismatch: %d arg%s"</literal>
<literal type="string">"passed, 1 expected\n"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><name>argc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"s "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>dn_kind</name></name> <operator>!=</operator> <name>DT_NODE_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_PROTO_ARG</name></expr></argument>, <argument><expr><literal type="string">"%s[ ] argument #1 is incompatible with "</literal>
<literal type="string">"prototype:\n\tprototype: %s\n\t argument: %s\n"</literal></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><literal type="string">"integer constant"</literal></expr></argument>,
<argument><expr><call><name>dt_type_name</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dn_ctfp</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>dn_type</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>&amp;</operator> <name>DT_NF_SIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_REGS_IDX</name></expr></argument>, <argument><expr><literal type="string">"index %lld is out of range for array %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>longlong_t</name><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>dn_value</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_type_lookup</name><argument_list>(<argument><expr><literal type="string">"uint64_t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"failed to resolve type of %s: %s\n"</literal></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_type</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name> <init>= <expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_typeinfo_t</name></type> <name>dtt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_type_lookup</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xyerror</name><argument_list>(<argument><expr><name>D_UNKNOWN</name></expr></argument>,
<argument><expr><literal type="string">"failed to resolve type %s for identifier %s: %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><call><name>dtrace_errmsg</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><call><name>dtrace_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_ctfp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name><name>dtt</name><operator>.</operator><name>dtt_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_thaw</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_node_type_assign</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>, <argument><expr><name>B_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idcook_inline</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idcook_assc</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idcook_thaw</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_iddtor_sign</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>dt_idsig_t</name> <operator>*</operator><operator>)</operator><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name><operator>)</operator><operator>-&gt;</operator><name>dis_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_iddtor_free</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_iddtor_inline</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_idnode_t</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dt_node_link_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inp</name><operator>-&gt;</operator><name>din_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inp</name><operator>-&gt;</operator><name>din_hash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_destroy</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>din_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>din_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_iddtor_sign</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_iddtor_free</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_iddtor_none</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_iddtor_probe</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_probe_destroy</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>dt_idsize_type</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_type_size</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>dt_idsize_none</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_assc</name> <init>= <expr><block>{
<expr><name>dt_idcook_assc</name></expr>,
<expr><name>dt_iddtor_sign</name></expr>,
<expr><name>dt_idsize_none</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_func</name> <init>= <expr><block>{
<expr><name>dt_idcook_func</name></expr>,
<expr><name>dt_iddtor_sign</name></expr>,
<expr><name>dt_idsize_none</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_args</name> <init>= <expr><block>{
<expr><name>dt_idcook_args</name></expr>,
<expr><name>dt_iddtor_none</name></expr>,
<expr><name>dt_idsize_none</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_regs</name> <init>= <expr><block>{
<expr><name>dt_idcook_regs</name></expr>,
<expr><name>dt_iddtor_free</name></expr>,
<expr><name>dt_idsize_none</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_type</name> <init>= <expr><block>{
<expr><name>dt_idcook_type</name></expr>,
<expr><name>dt_iddtor_free</name></expr>,
<expr><name>dt_idsize_type</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_thaw</name> <init>= <expr><block>{
<expr><name>dt_idcook_thaw</name></expr>,
<expr><name>dt_iddtor_free</name></expr>,
<expr><name>dt_idsize_type</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_inline</name> <init>= <expr><block>{
<expr><name>dt_idcook_inline</name></expr>,
<expr><name>dt_iddtor_inline</name></expr>,
<expr><name>dt_idsize_type</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dt_idops_t</name></type> <name>dt_idops_probe</name> <init>= <expr><block>{
<expr><name>dt_idcook_thaw</name></expr>,
<expr><name>dt_iddtor_probe</name></expr>,
<expr><name>dt_idsize_none</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dt_idhash_populate</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_dprintf</name><argument_list>(<argument><expr><literal type="string">"populating %s idhash from %p\n"</literal></expr></argument>, <argument><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dt_idhash_insert</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name></expr> ?</condition><then> <expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>dt_idops_thaw</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_jmpbuf</name></name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>dt_idhash_t</name> <modifier>*</modifier></type>
<name>dt_idhash_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>tmpl</name></decl></parameter>,
<parameter><decl><type><name>uint_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>min</name> <operator>&lt;=</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>dt_idhash_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof <argument_list>(<argument><expr><name>dt_ident_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>_dtrace_strbuckets</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dhp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name> <operator>=</operator> <name>tmpl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nextid</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_minid</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_maxid</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name> <operator>=</operator> <name>_dtrace_strbuckets</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>dhp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type>
<name>dt_idhash_destroy</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name><operator>-&gt;</operator><name>di_dtor</name></name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_idhash_update</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>nextid</name> <init>= <expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_minid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_ARRAY</name> <operator>||</operator>
<name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_SCALAR</name> <operator>||</operator>
<name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>==</operator> <name>DT_IDENT_AGG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nextid</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>nextid</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nextid</name></name> <operator>=</operator> <name>nextid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_idhash_lookup</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_populate</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>idp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_idhash_nextid</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nextid</name></name> <operator>&gt;=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_maxid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_nextid</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ulong_t</name></type>
<name>dt_idhash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_idhash_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>dhp</name><operator>-&gt;</operator><name>dh_name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_idhash_insert</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type> <name>kind</name></decl></parameter>,
<parameter><decl><type><name>ushort_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>vers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type><name>ops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iarg</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_populate</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_ident_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>vers</name></expr></argument>, <argument><expr><name>ops</name></expr></argument>, <argument><expr><name>iarg</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>idp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>dhp</name><operator>-&gt;</operator><name>dh_defer</name></name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>idp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_idhash_xinsert</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_populate</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DT_IDFLG_ORPHAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>idp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_defer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>dhp</name><operator>-&gt;</operator><name>dh_defer</name></name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_idhash_delete</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><call><name>dt_strtab_hash</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idp</name> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_ORPHAN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_ident_destroy</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_idhash_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>dt_ident_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>dt_ident_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>di_id</name></name> <operator>!=</operator> <name><name>rhs</name><operator>-&gt;</operator><name>di_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>lhs</name><operator>-&gt;</operator><name>di_id</name></name> <operator>-</operator> <name><name>rhs</name><operator>-&gt;</operator><name>di_id</name></name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lhs</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>, <argument><expr><name><name>rhs</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_idhash_iter</name><parameter_list>(<parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>, <parameter><decl><type><name>dt_idhash_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_tmpl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dt_idhash_populate</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ids</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ident_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hashsz</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idp</name> <operator>=</operator> <name><name>dhp</name><operator>-&gt;</operator><name>dh_hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>idp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>idp</name> <operator>=</operator> <name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ids</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idp</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><name><name>dhp</name><operator>-&gt;</operator><name>dh_nelems</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ident_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dt_idhash_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_idstack_lookup</name><parameter_list>(<parameter><decl><type><name>dt_idstack_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dhp</name> <operator>=</operator> <call><name>dt_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>dids_list</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dhp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dhp</name> <operator>=</operator> <call><name>dt_list_prev</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name>dhp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>idp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_idstack_push</name><parameter_list>(<parameter><decl><type><name>dt_idstack_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dt_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>dids_list</name></name></expr></argument>, <argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_idstack_pop</name><parameter_list>(<parameter><decl><type><name>dt_idstack_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>dt_idhash_t</name> <modifier>*</modifier></type><name>dhp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>dt_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>dids_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>dids_list</name></name></expr></argument>, <argument><expr><name>dhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_ident_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>dtrace_attribute_t</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>vers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type><name>ops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iarg</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>gen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>idp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dt_ident_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_vers</name></name> <operator>=</operator> <name>vers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name> <operator>=</operator> <name>iarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name> <operator>=</operator> <name>gen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_lineno</name></name> <operator>=</operator> <name>yylineno</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>idp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dt_ident_destroy</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name><operator>-&gt;</operator><name>di_dtor</name></name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_ident_morph</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type> <name>kind</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dt_idops_t</name> <modifier>*</modifier></type><name>ops</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name><operator>-&gt;</operator><name>di_dtor</name></name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name> <operator>=</operator> <name>iarg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dtrace_attribute_t</name></type>
<name>dt_ident_cook</name><parameter_list>(<parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name></decl></parameter>, <parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>dt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pargp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_node_t</name> <modifier>*</modifier></type><name>args</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>dt_node_list_cook</name><argument_list>(<argument><expr><name>pargp</name></expr></argument>, <argument><expr><name>DT_IDFLG_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> <operator>=</operator> <ternary><condition><expr><name>pargp</name></expr> ?</condition><then> <expr><operator>*</operator><name>pargp</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>argp</name> <operator>=</operator> <name>args</name></expr>;</init> <condition><expr><name>argp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>argp</name> <operator>=</operator> <name><name>argp</name><operator>-&gt;</operator><name>dn_list</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name><operator>-&gt;</operator><name>di_cook</name></name><argument_list>(<argument><expr><name>dnp</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_USER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_flags</name></name> <operator>|=</operator> <name>DT_NF_USERLAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_attr_min</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_attr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_ident_type_assign</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_ctfp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idp</name><operator>-&gt;</operator><name>di_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dt_ident_t</name> <modifier>*</modifier></type>
<name>dt_ident_resolve</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DT_IDFLG_INLINE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dt_node_t</name> <modifier>*</modifier></type><name>dnp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dt_idnode_t</name> <operator>*</operator><operator>)</operator><name><name>idp</name><operator>-&gt;</operator><name>di_iarg</name></name><operator>)</operator><operator>-&gt;</operator><name>din_root</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dnp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>dnp</name><operator>-&gt;</operator><name>dn_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_NODE_VAR</name></expr>:</case>
<case>case <expr><name>DT_NODE_SYM</name></expr>:</case>
<case>case <expr><name>DT_NODE_FUNC</name></expr>:</case>
<case>case <expr><name>DT_NODE_AGG</name></expr>:</case>
<case>case <expr><name>DT_NODE_INLINE</name></expr>:</case>
<case>case <expr><name>DT_NODE_PROBE</name></expr>:</case>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>dt_node_is_dynamic</name><argument_list>(<argument><expr><name>dnp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <name><name>dnp</name><operator>-&gt;</operator><name>dn_ident</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>idp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>dt_ident_size</name><parameter_list>(<parameter><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_ident_resolve</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name><name>idp</name><operator>-&gt;</operator><name>di_ops</name><operator>-&gt;</operator><name>di_size</name></name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_ident_unref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_gen</name></name> <operator>==</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_hdl</name><operator>-&gt;</operator><name>dt_gen</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>idp</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DT_IDFLG_REF</name><operator>|</operator><name>DT_IDFLG_MOD</name><operator>|</operator><name>DT_IDFLG_DECL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_idkind_name</name><parameter_list>(<parameter><decl><type><name>uint_t</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DT_IDENT_ARRAY</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"associative array"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_SCALAR</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"scalar"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_PTR</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"pointer"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_FUNC</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"function"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_AGG</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"aggregation"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_AGGFUNC</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"aggregating function"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_ACTFUNC</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"tracing function"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_XLSOU</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"translated data"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_XLPTR</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"pointer to translated data"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_SYMBOL</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"external symbol reference"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_ENUM</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"enumerator"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_PRAGAT</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"#pragma attributes"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_PRAGBN</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"#pragma binding"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DT_IDENT_PROBE</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"probe definition"</literal><operator>)</operator></expr>;</return>
<default>default:</default> <return>return <expr><operator>(</operator><literal type="string">"&lt;?&gt;"</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
