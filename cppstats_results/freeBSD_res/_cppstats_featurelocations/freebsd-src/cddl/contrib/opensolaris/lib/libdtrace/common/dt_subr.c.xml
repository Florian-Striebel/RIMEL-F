<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/lib/libdtrace/common/dt_subr.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/isa_defs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc_compat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dt_impl.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>dtps_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dtps_len</name></decl>;</decl_stmt>
}</block> <decl><name><name>dtrace_probespecs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>, <argument><expr><name>dtpd_provider</name></expr></argument>)</argument_list></call></expr>, <expr><name>DTRACE_PROVNAMELEN</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>, <argument><expr><name>dtpd_mod</name></expr></argument>)</argument_list></call></expr>, <expr><name>DTRACE_MODNAMELEN</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>, <argument><expr><name>dtpd_func</name></expr></argument>)</argument_list></call></expr>, <expr><name>DTRACE_FUNCNAMELEN</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>, <argument><expr><name>dtpd_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>DTRACE_NAMELEN</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type>
<name>dtrace_xstr2desc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probespec_t</name></type> <name>spec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>wlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spec</name> <argument_list type="generic">&lt; <argument><expr><name>DTRACE_PROBESPEC_NONE</name> <operator>||</operator> <name>spec</name></expr></argument> &gt;</argument_list></name> <name>DTRACE_PROBESPEC_NAME</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>q</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>q</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>v</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>v</name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vlen</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <name>vlen</name> <operator>-</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name>v</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADSPCV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yypcb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>yypcb</name><operator>-&gt;</operator><name>pcb_sargv</name></name> <operator>==</operator> <name>argv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yypcb</name><operator>-&gt;</operator><name>pcb_sflagv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>DT_IDFLG_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vstr</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dt_ident_t</name> <modifier>*</modifier></type><name>idp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vstr</name><index>[<expr><name>vlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>dt_idhash_lookup</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_macros</name></name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADSPCV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>idp</name><operator>-&gt;</operator><name>di_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADSPCV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spec</name> <operator>==</operator> <name>DTRACE_PROBESPEC_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADSPEC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>vlen</name> <operator>&gt;=</operator> <name><name>dtrace_probespecs</name><index>[<expr><name>spec</name></expr>]</index></name><operator>.</operator><name>dtps_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>ENAMETOOLONG</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>dtrace_probespecs</name><index>[<expr><name>spec</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>dtps_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pdp</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pdp</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pdp</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>vlen</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>p</name> <operator>&gt;=</operator> <name>s</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name> <operator>=</operator> <name>DTRACE_IDNONE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_str2desc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probespec_t</name></type> <name>spec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>dtrace_xstr2desc</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_id2desc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_id_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>pdp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dtrace_probedesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dt_ioctl</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>DTRACEIOC_PROBES</name></expr></argument>, <argument><expr><name>pdp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dtrace_desc2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dtrace_probedesc_t</name> <modifier>*</modifier></type><name>pdp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s:%s:%s:%s"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_provider</name></name></expr></argument>,
<argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_mod</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_func</name></name></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>pdp</name><operator>-&gt;</operator><name>dtpd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dtrace_attr2str</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>attr</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name><name>attr</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name> <init>= <expr><call><name>dtrace_class_name</name><argument_list>(<argument><expr><name><name>attr</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>class</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dt_getstrattr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>qp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>qp</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_str2attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_stability_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtrace_class_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <name>_dtrace_maxattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dt_getstrattr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;=</operator> <name>DTRACE_STABILITY_MAX</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>dtat_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>DTRACE_STABILITY_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dt_getstrattr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;=</operator> <name>DTRACE_STABILITY_MAX</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>dtrace_stability_name</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>dtat_data</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>DTRACE_STABILITY_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dt_getstrattr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>DTRACE_CLASS_MAX</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>dtrace_class_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>dtat_class</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>DTRACE_CLASS_MAX</name> <operator>||</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>dt_getstrattr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dtrace_stability_name</name><parameter_list>(<parameter><decl><type><name>dtrace_stability_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACE_STABILITY_INTERNAL</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Internal"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_PRIVATE</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Private"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_OBSOLETE</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Obsolete"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_EXTERNAL</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"External"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_UNSTABLE</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Unstable"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_EVOLVING</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Evolving"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_STABLE</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Stable"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_STABILITY_STANDARD</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Standard"</literal><operator>)</operator></expr>;</return>
<default>default:</default> <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dtrace_class_name</name><parameter_list>(<parameter><decl><type><name>dtrace_class_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DTRACE_CLASS_UNKNOWN</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Unknown"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_CLASS_CPU</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"CPU"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_CLASS_PLATFORM</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Platform"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_CLASS_GROUP</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Group"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_CLASS_ISA</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"ISA"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DTRACE_CLASS_COMMON</name></expr>:</case> <return>return <expr><operator>(</operator><literal type="string">"Common"</literal><operator>)</operator></expr>;</return>
<default>default:</default> <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>dtrace_attribute_t</name></type>
<name>dt_attr_min</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>am</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>am</name><operator>.</operator><name>dtat_name</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>dtat_name</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>.</operator><name>dtat_data</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>dtat_data</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>.</operator><name>dtat_class</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>dtat_class</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>am</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>dtrace_attribute_t</name></type>
<name>dt_attr_max</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_attribute_t</name></type> <name>am</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>am</name><operator>.</operator><name>dtat_name</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>dtat_name</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>dtat_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>.</operator><name>dtat_data</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>dtat_data</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>dtat_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>.</operator><name>dtat_class</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>dtat_class</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>am</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>dt_attr_cmp</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>a1</name><operator>.</operator><name>dtat_name</name></name> <operator>-</operator> <name><name>a2</name><operator>.</operator><name>dtat_name</name></name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>a1</name><operator>.</operator><name>dtat_data</name></name> <operator>-</operator> <name><name>a2</name><operator>.</operator><name>dtat_data</name></name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>a1</name><operator>.</operator><name>dtat_class</name></name> <operator>-</operator> <name><name>a2</name><operator>.</operator><name>dtat_class</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dt_attr_str</name><parameter_list>(<parameter><decl><type><name>dtrace_attribute_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>stability</name><index>[]</index></name> <init>= <expr><literal type="string">"ipoxuesS"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>class</name><index>[]</index></name> <init>= <expr><literal type="string">"uCpgIc"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>dtat_name</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>stability</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name><name>a</name><operator>.</operator><name>dtat_data</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>stability</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>dtat_class</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"[%c/%c/%c]"</literal></expr></argument>, <argument><expr><name><name>stability</name><index>[<expr><name><name>a</name><operator>.</operator><name>dtat_name</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>stability</name><index>[<expr><name><name>a</name><operator>.</operator><name>dtat_data</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>class</name><index>[<expr><name><name>a</name><operator>.</operator><name>dtat_class</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"[%u/%u/%u]"</literal></expr></argument>,
<argument><expr><name><name>a</name><operator>.</operator><name>dtat_name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>dtat_data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>dtat_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dt_version_num2str</name><parameter_list>(<parameter><decl><type><name>dt_version_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>M</name> <init>= <expr><call><name>DT_VERSION_MAJOR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>m</name> <init>= <expr><call><name>DT_VERSION_MINOR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>u</name> <init>= <expr><call><name>DT_VERSION_MICRO</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%u.%u"</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u"</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_version_str2num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>dt_version_t</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>i</name><operator>++</operator> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>DT_VERSION_MAJMAX</name> <operator>||</operator>
<name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>DT_VERSION_MINMAX</name> <operator>||</operator>
<name><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>DT_VERSION_MICMAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <call><name>DT_VERSION_NUMBER</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_version_defined</name><parameter_list>(<parameter><decl><type><name>dt_version_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_dtrace_versions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_dtrace_versions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dt_cpp_add_arg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name> <operator>==</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_args</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>olds</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_args</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>news</name> <init>= <expr><name>olds</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>news</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>olds</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>olds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_args</name></name> <operator>=</operator> <name>news</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name><index>[<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>arg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dt_cpp_pop_arg</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name><index>[<expr><operator>--</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argv</name><index>[<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_cpp_argc</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>arg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>dt_dprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_dtrace_debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>alist</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>alist</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"libdtrace DEBUG: "</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>dt_ioctl</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
dt_ioctl<parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>v</name><operator>-&gt;</operator><name>dtv_ioctl</name></name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_varg</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ioctl</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_fd</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_status</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>processorid_t</name></type> <name>cpu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>p_online</name><argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><name>P_STATUS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>maxid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>maxid</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.smp.maxid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>cpu</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>cpu</name> <operator>&lt;=</operator> <name>maxid</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name><name>v</name><operator>-&gt;</operator><name>dtv_status</name></name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_varg</name></name></expr></argument>, <argument><expr><name>cpu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>dt_sysconf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dtrace_vector_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_vector</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>sysconf</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name><name>v</name><operator>-&gt;</operator><name>dtv_sysconf</name></name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_varg</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>ssize_t</name></type>
<name>dt_write</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>resid</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>resid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>resid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>resid</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>resid</name> <operator>==</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>n</name> <operator>-</operator> <name>resid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




















<function><type><name>int</name></type>
<name>dt_printf</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_freopen_fp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buflen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name><index>[<expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buf</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_sprintf_buflen</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name></decl>, <decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_bufhdlr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOBUFFERED</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>needed</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name> <operator>&lt;</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name> <operator>-</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>avail</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name></expr></argument>,
<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vsnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name><index>[<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>avail</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name> <operator>+=</operator> <name>needed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name><index>[<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_buffered_flush</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_probedata_t</name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dtrace_recdesc_t</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dtrace_aggdata_t</name> <modifier>*</modifier></type><name>agg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_bufdata_t</name></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtbda_handle</name></name> <operator>=</operator> <name>dtp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtbda_buffered</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtbda_probe</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtbda_recdesc</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtbda_aggdata</name></name> <operator>=</operator> <name>agg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dtbda_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>dtp</name><operator>-&gt;</operator><name>dt_bufhdlr</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_bufarg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DTRACE_HANDLE_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_DIRABORT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_buffered_destroy</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_offs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtp</name><operator>-&gt;</operator><name>dt_buffered_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>dt_zalloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>dt_alloc</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dt_set_errno</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>EDT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_free</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dtp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dt_difo_free</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>dtrace_difo_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_inttab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_strtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_vartab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_kreltab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_ureltab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dtdo_xlmtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dt_free</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dt_gmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>gmatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>dt_basename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>str</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>last</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>ulong_t</name></type>
<name>dt_popc</name><parameter_list>(<parameter><decl><type><name>ulong_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ILP32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555UL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x33333333UL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333UL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0FUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x5555555555555555ULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3333333333333333ULL</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3333333333333333ULL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F0F0F0F0FULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>ulong_t</name></type>
<name>dt_popcb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ulong_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>maxb</name> <init>= <expr><name>n</name> <operator>&amp;</operator> <name>BT_ULMASK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>maxw</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <name>BT_ULSHIFT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>popc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>maxw</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>popc</name> <operator>+=</operator> <call><name>dt_popc</name><argument_list>(<argument><expr><name><name>bp</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>popc</name> <operator>+</operator> <call><name>dt_popc</name><argument_list>(<argument><expr><name><name>bp</name><index>[<expr><name>maxw</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>maxb</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct_decl>struct <name>_rwlock</name>;</struct_decl>
<struct_decl>struct <name>_lwp_mutex</name>;</struct_decl>

<function><type><name>int</name></type>
<name>dt_rw_read_held</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_rw_read_held</name><argument_list>(<argument><expr>struct <name>_rwlock</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>_rw_read_held</name><argument_list>(<argument><expr><operator>(</operator>struct <name>_rwlock</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dt_rw_write_held</name><parameter_list>(<parameter><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_rw_write_held</name><argument_list>(<argument><expr>struct <name>_rwlock</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>_rw_write_held</name><argument_list>(<argument><expr><operator>(</operator>struct <name>_rwlock</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>dt_mutex_held</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_mutex_held</name><argument_list>(<argument><expr>struct <name>_lwp_mutex</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><call><name>_mutex_held</name><argument_list>(<argument><expr><operator>(</operator>struct <name>_lwp_mutex</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dt_string2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>nbytes</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>str</name><index>[<expr><name>nbytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_addr2str</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dtrace_syminfo_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dtrace_lookup_by_addr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dts</name><operator>.</operator><name>dts_object</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dts</name><operator>.</operator><name>dts_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>addr</name> <operator>!=</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s`%s+0x%llx"</literal></expr></argument>, <argument><expr><name><name>dts</name><operator>.</operator><name>dts_object</name></name></expr></argument>,
<argument><expr><name><name>dts</name><operator>.</operator><name>dts_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>addr</name> <operator>-</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s`%s"</literal></expr></argument>,
<argument><expr><name><name>dts</name><operator>.</operator><name>dts_object</name></name></expr></argument>, <argument><expr><name><name>dts</name><operator>.</operator><name>dts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>dtrace_lookup_by_addr</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s`0x%llx"</literal></expr></argument>, <argument><expr><name><name>dts</name><operator>.</operator><name>dts_object</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0x%llx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><call><name>dt_string2str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dtrace_uaddr2str</name><parameter_list>(<parameter><decl><type><name>dtrace_hdl_t</name> <modifier>*</modifier></type><name>dtp</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>objname</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>PATH_MAX</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ps_prochandle</name></name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>dt_proc_grab</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>PGRAB_RDONLY</name> <operator>|</operator> <name>PGRAB_FORCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>P</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>dt_string2str</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dt_proc_lock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Plookup_by_addr</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Pobjname</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>objname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>dt_basename</name><argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s`%s+0x%llx"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>u_longlong_t</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <name><name>sym</name><operator>.</operator><name>st_value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s`%s"</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Pobjname</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>objname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s`0x%jx"</literal></expr></argument>,
<argument><expr><call><name>dt_basename</name><argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%jx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dt_proc_unlock</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dt_proc_release</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>dt_string2str</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
