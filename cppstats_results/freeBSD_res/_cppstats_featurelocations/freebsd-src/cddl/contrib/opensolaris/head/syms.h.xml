<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/head/syms.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_SYMS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SYMS_H</name></cpp:macro></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storclass.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMNMLEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILNMLEN</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMNUM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>syment</name>
<block>{
<union>union
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>_n_name</name><index>[<expr><name>SYMNMLEN</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>_n_zeroes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_n_offset</name></decl>;</decl_stmt>
}</block> <decl><name>_n_n</name></decl>;</struct>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>_n_nptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>_n</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>n_scnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>n_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>n_sclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>n_numaux</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_name</name></cpp:macro> <cpp:value>_n._n_name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_nptr</name></cpp:macro> <cpp:value>_n._n_nptr[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_zeroes</name></cpp:macro> <cpp:value>_n._n_n._n_zeroes</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_offset</name></cpp:macro> <cpp:value>_n._n_n._n_offset</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_UNDEF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_ABS</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_DEBUG</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TV</name></cpp:macro> <cpp:value>(unsigned short)-3</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_TV</name></cpp:macro> <cpp:value>(unsigned short)-4</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EF</name></cpp:macro> <cpp:value>".ef"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ARG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CHAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SHORT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_INT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_LONG</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_FLOAT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DOUBLE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_STRUCT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_UNION</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ENUM</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MOE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_UCHAR</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_USHORT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_UINT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ULONG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NON</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PTR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FCN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ARY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_BTMASK</name></cpp:macro> <cpp:value>017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TMASK</name></cpp:macro> <cpp:value>060</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TMASK1</name></cpp:macro> <cpp:value>0300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TMASK2</name></cpp:macro> <cpp:value>0360</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_BTSHFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_TSHIFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; N_BTMASK)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; N_TMASK) == (DT_PTR &lt;&lt; N_BTSHFT))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISFCN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; N_TMASK) == (DT_FCN &lt;&lt; N_BTSHFT))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISARY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; N_TMASK) == (DT_ARY &lt;&lt; N_BTSHFT))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISTAG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == C_STRTAG || (x) == C_UNTAG || (x) == C_ENTAG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&amp;~N_BTMASK)&lt;&lt;N_TSHIFT)|(DT_PTR&lt;&lt;N_BTSHFT)|(x&amp;N_BTMASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECREF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)&gt;&gt;N_TSHIFT)&amp;~N_BTMASK)|((x)&amp;N_BTMASK))</cpp:value></cpp:define>





<union>union <name>auxent</name>
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>x_tagndx</name></decl>;</decl_stmt>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x_lnno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x_size</name></decl>;</decl_stmt>

}</block> <decl><name>x_lnsz</name></decl>;</struct>
<decl_stmt><decl><type><name>long</name></type> <name>x_fsize</name></decl>;</decl_stmt>
}</block> <decl><name>x_misc</name></decl>;</union>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>x_lnnoptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>x_endndx</name></decl>;</decl_stmt>

}</block> <decl><name>x_fcn</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>x_dimen</name><index>[<expr><name>DIMNUM</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>x_ary</name></decl>;</struct>
}</block> <decl><name>x_fcnary</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x_tvndx</name></decl>;</decl_stmt>
}</block> <decl><name>x_sym</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>x_fname</name><index>[<expr><name>FILNMLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>x_file</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>x_scnlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x_nreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x_nlinno</name></decl>;</decl_stmt>
}</block> <decl><name>x_scn</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>x_tvfill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x_tvlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>x_tvran</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>x_tv</name></decl>;</struct>
}</block>;</union>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMENT</name></cpp:macro> <cpp:value>struct syment</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMESZ</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUXENT</name></cpp:macro> <cpp:value>union auxent</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUXESZ</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ETEXT</name></cpp:macro> <cpp:value>"etext"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_EDATA</name></cpp:macro> <cpp:value>"edata"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_END</name></cpp:macro> <cpp:value>"end"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_START</name></cpp:macro> <cpp:value>"_start"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
