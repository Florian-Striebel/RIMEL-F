<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/cmd/dtrace/test/tst/common/nfs/tst.call3.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/rpc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpcsvc/mount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcsvc/nfs_prot.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name></type> <name><name>sharedpath</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fhandle3</name> <modifier>*</modifier></type><name>rootfh</name></decl>;</decl_stmt>











<function><type><name>int</name></type>
<name>waiting</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getattr_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GETATTR3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setattr_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SETATTR3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lookup_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LOOKUP3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>what</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"giant-skunk"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>what</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>what</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>access_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ACCESS3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>commit_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>COMMIT3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CREATE3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"pinky-blue"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fsinfo_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FSINFO3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>fsroot</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>fsroot</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fsstat_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FSSTAT3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>fsroot</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>fsroot</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>link_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LINK3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>link</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>link</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>link</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"samf"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mkdir_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MKDIR3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"cookie"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mknod_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MKNOD3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"pookie"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>null_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pathconf_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PATHCONF3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>READ3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>readdir_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>READDIR3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>readdirplus_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>READDIRPLUS3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>dircount</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>readlink_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>READLINK3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>REMOVE3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"antelope"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rename_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RENAME3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>from</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>from</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>from</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"walter"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"wendy"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rmdir_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RMDIR3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"bunny"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>symlink_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SYMLINK3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>dir</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>where</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"parlor"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>symlink</name><operator>.</operator><name>symlink_data</name></name> <operator>=</operator> <literal type="string">"interior"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_arginit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WRITE3args</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>data</name><operator>.</operator><name>data_val</name></name> <operator>=</operator> <name><name>rootfh</name><operator>-&gt;</operator><name>fhandle3_val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>call3_arginit_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>call3_arginit_t</name></type> <name>arginit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rpcproc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdrproc_t</name></type> <name>xdrargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>argsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xdrproc_t</name></type> <name>xdrres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ressize</name></decl>;</decl_stmt>
}</block></struct></type> <name>call3_test_t</name>;</typedef>
<decl_stmt><decl><type><name>call3_test_t</name></type> <name><name>call3_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>getattr_arginit</name></expr>, <expr><name>NFSPROC3_GETATTR</name></expr>, <expr><name>xdr_GETATTR3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>GETATTR3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_GETATTR3res</name></expr>, <expr>sizeof <operator>(</operator><name>GETATTR3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>setattr_arginit</name></expr>, <expr><name>NFSPROC3_SETATTR</name></expr>, <expr><name>xdr_SETATTR3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>SETATTR3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_SETATTR3res</name></expr>, <expr>sizeof <operator>(</operator><name>SETATTR3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>lookup_arginit</name></expr>, <expr><name>NFSPROC3_LOOKUP</name></expr>, <expr><name>xdr_LOOKUP3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>LOOKUP3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_LOOKUP3res</name></expr>, <expr>sizeof <operator>(</operator><name>LOOKUP3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>access_arginit</name></expr>, <expr><name>NFSPROC3_ACCESS</name></expr>, <expr><name>xdr_ACCESS3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>ACCESS3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_ACCESS3res</name></expr>, <expr>sizeof <operator>(</operator><name>ACCESS3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>commit_arginit</name></expr>, <expr><name>NFSPROC3_COMMIT</name></expr>, <expr><name>xdr_COMMIT3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>COMMIT3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_COMMIT3res</name></expr>, <expr>sizeof <operator>(</operator><name>COMMIT3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>create_arginit</name></expr>, <expr><name>NFSPROC3_CREATE</name></expr>, <expr><name>xdr_CREATE3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>CREATE3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_CREATE3res</name></expr>, <expr>sizeof <operator>(</operator><name>CREATE3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>fsinfo_arginit</name></expr>, <expr><name>NFSPROC3_FSINFO</name></expr>, <expr><name>xdr_FSINFO3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>FSINFO3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_FSINFO3res</name></expr>, <expr>sizeof <operator>(</operator><name>FSINFO3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>fsstat_arginit</name></expr>, <expr><name>NFSPROC3_FSSTAT</name></expr>, <expr><name>xdr_FSSTAT3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>FSSTAT3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_FSSTAT3res</name></expr>, <expr>sizeof <operator>(</operator><name>FSSTAT3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>link_arginit</name></expr>, <expr><name>NFSPROC3_LINK</name></expr>, <expr><name>xdr_LINK3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>LINK3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_LINK3res</name></expr>, <expr>sizeof <operator>(</operator><name>LINK3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>mkdir_arginit</name></expr>, <expr><name>NFSPROC3_MKDIR</name></expr>, <expr><name>xdr_MKDIR3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>MKDIR3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_MKDIR3res</name></expr>, <expr>sizeof <operator>(</operator><name>MKDIR3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>mknod_arginit</name></expr>, <expr><name>NFSPROC3_MKNOD</name></expr>, <expr><name>xdr_MKNOD3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>MKNOD3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_MKNOD3res</name></expr>, <expr>sizeof <operator>(</operator><name>MKNOD3res</name><operator>)</operator></expr>}</block></expr>,





<expr><block>{<expr><name>null_arginit</name></expr>, <expr><name>NFSPROC3_NULL</name></expr>, <expr><name>xdr_void</name></expr>, <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_void</name></expr>,
<expr>sizeof <operator>(</operator><name>int</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>pathconf_arginit</name></expr>, <expr><name>NFSPROC3_PATHCONF</name></expr>, <expr><name>xdr_PATHCONF3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>PATHCONF3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_PATHCONF3res</name></expr>, <expr>sizeof <operator>(</operator><name>PATHCONF3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>read_arginit</name></expr>, <expr><name>NFSPROC3_READ</name></expr>, <expr><name>xdr_READ3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>READ3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_READ3res</name></expr>, <expr>sizeof <operator>(</operator><name>READ3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>readdir_arginit</name></expr>, <expr><name>NFSPROC3_READDIR</name></expr>, <expr><name>xdr_READDIR3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>READDIR3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_READDIR3res</name></expr>, <expr>sizeof <operator>(</operator><name>READDIR3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>readdirplus_arginit</name></expr>, <expr><name>NFSPROC3_READDIRPLUS</name></expr>, <expr><name>xdr_READDIRPLUS3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>READDIRPLUS3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_READDIRPLUS3res</name></expr>,
<expr>sizeof <operator>(</operator><name>READDIRPLUS3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>readlink_arginit</name></expr>, <expr><name>NFSPROC3_READLINK</name></expr>, <expr><name>xdr_READLINK3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>READLINK3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_READLINK3res</name></expr>, <expr>sizeof <operator>(</operator><name>READLINK3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>remove_arginit</name></expr>, <expr><name>NFSPROC3_REMOVE</name></expr>, <expr><name>xdr_REMOVE3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>REMOVE3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_REMOVE3res</name></expr>, <expr>sizeof <operator>(</operator><name>REMOVE3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>rename_arginit</name></expr>, <expr><name>NFSPROC3_RENAME</name></expr>, <expr><name>xdr_RENAME3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>RENAME3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_RENAME3res</name></expr>, <expr>sizeof <operator>(</operator><name>RENAME3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>rmdir_arginit</name></expr>, <expr><name>NFSPROC3_RMDIR</name></expr>, <expr><name>xdr_RMDIR3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>RMDIR3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_RMDIR3res</name></expr>, <expr>sizeof <operator>(</operator><name>RMDIR3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>symlink_arginit</name></expr>, <expr><name>NFSPROC3_SYMLINK</name></expr>, <expr><name>xdr_SYMLINK3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>SYMLINK3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_SYMLINK3res</name></expr>, <expr>sizeof <operator>(</operator><name>SYMLINK3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>write_arginit</name></expr>, <expr><name>NFSPROC3_WRITE</name></expr>, <expr><name>xdr_WRITE3args</name></expr>,
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>WRITE3args</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>xdr_WRITE3res</name></expr>, <expr>sizeof <operator>(</operator><name>WRITE3res</name><operator>)</operator></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>dotest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CLIENT</name> <modifier>*</modifier></type><name>client</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mountclient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AUTH</name> <modifier>*</modifier></type><name>auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>clnt_stat</name></name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rpcproc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>call3_test_t</name> <modifier>*</modifier></type><name>test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>argbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>resbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mountres3</name></name></type> <name>mountres3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>waiting</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mountclient</name> <operator>=</operator> <call><name>clnt_create</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>MOUNTPROG</name></expr></argument>, <argument><expr><name>MOUNTVERS3</name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mountclient</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clnt_pcreateerror</name><argument_list>(<argument><expr><literal type="string">"clnt_create mount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>authsys_create_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mountclient</name><operator>-&gt;</operator><name>cl_auth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>sharedpath</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mountres3</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mountres3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>clnt_call</name><argument_list>(<argument><expr><name>mountclient</name></expr></argument>, <argument><expr><name>MOUNTPROC_MNT</name></expr></argument>,
<argument><expr><name>xdr_dirpath</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sp</name></expr></argument>,
<argument><expr><name>xdr_mountres3</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>mountres3</name></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RPC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clnt_perror</name><argument_list>(<argument><expr><name>mountclient</name></expr></argument>, <argument><expr><literal type="string">"mnt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mountres3</name><operator>.</operator><name>fhs_status</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"MOUNTPROG/MOUNTVERS3 failed %d\n"</literal></expr></argument>,
<argument><expr><name><name>mountres3</name><operator>.</operator><name>fhs_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rootfh</name> <operator>=</operator> <operator>&amp;</operator><name><name>mountres3</name><operator>.</operator><name>mountres3_u</name><operator>.</operator><name>mountinfo</name><operator>.</operator><name>fhandle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>clnt_create</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>NFS3_PROGRAM</name></expr></argument>, <argument><expr><name>NFS_V3</name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clnt_pcreateerror</name><argument_list>(<argument><expr><literal type="string">"clnt_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>cl_auth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>test</name> <operator>=</operator> <name>call3_tests</name></expr>;</init> <condition><expr><name><name>test</name><operator>-&gt;</operator><name>arginit</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>test</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>argbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>argbuf</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>argsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>resbuf</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>ressize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argbuf</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>resbuf</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"realloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name><name>test</name><operator>-&gt;</operator><name>arginit</name></name><operator>)</operator><operator>(</operator><name>argbuf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>resbuf</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>ressize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>clnt_call</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>,
<argument><expr><name><name>test</name><operator>-&gt;</operator><name>xdrargs</name></name></expr></argument>, <argument><expr><name>argbuf</name></expr></argument>,
<argument><expr><name><name>test</name><operator>-&gt;</operator><name>xdrres</name></name></expr></argument>, <argument><expr><name>resbuf</name></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RPC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clnt_perror</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>clnt_call</name><argument_list>(<argument><expr><name>mountclient</name></expr></argument>, <argument><expr><name>MOUNTPROC_UMNT</name></expr></argument>,
<argument><expr><name>xdr_dirpath</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sp</name></expr></argument>,
<argument><expr><name>xdr_void</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RPC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clnt_perror</name><argument_list>(<argument><expr><name>mountclient</name></expr></argument>, <argument><expr><literal type="string">"umnt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>shareline</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>unshareline</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sharedpath</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>sharedpath</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"/tmp/nfsv3test.%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>shareline</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>shareline</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"mkdir %s ; share %s"</literal></expr></argument>, <argument><expr><name>sharedpath</name></expr></argument>, <argument><expr><name>sharedpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>unshareline</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>unshareline</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"unshare %s ; rmdir %s"</literal></expr></argument>, <argument><expr><name>sharedpath</name></expr></argument>, <argument><expr><name>sharedpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>system</name><argument_list>(<argument><expr><name>shareline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dotest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>system</name><argument_list>(<argument><expr><name>unshareline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
