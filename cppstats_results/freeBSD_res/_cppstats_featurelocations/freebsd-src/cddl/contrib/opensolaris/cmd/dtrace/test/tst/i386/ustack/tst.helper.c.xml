<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/cmd/dtrace/test/tst/i386/ustack/tst.helper.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>baz</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>foo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>instr</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x55</literal></expr>,
<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xec</literal></expr>,
<expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>,
<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
<expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0xc3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>instr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>baz</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>fp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>instr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>fp</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>foo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
