<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/cmd/lockstat/sym.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;link.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;elf.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/machelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kstat.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/elf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/module.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/linker.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cpuvar.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>syment</name> <block>{
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>syment_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>syment_t</name> <modifier>*</modifier></type><name>symbol_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nsyms</name></decl>, <decl><type ref="prev"/><name>maxsyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>maxsymname</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ELF64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elf_getshdr</name></cpp:macro> <cpp:value>elf64_getshdr</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elf_getshdr</name></cpp:macro> <cpp:value>elf32_getshdr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__sElfN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef __CONCAT(__CONCAT(__CONCAT(Elf,__ELF_WORD_SIZE),_),x) x</cpp:value></cpp:define>
<expr_stmt><expr><call><name>__sElfN</name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__sElfN</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elf_getshdr</name></cpp:macro> <cpp:value>__elfN(getshdr)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_symbol</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>syment_t</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nsyms</name> <operator>&gt;=</operator> <name>maxsyms</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>maxsyms</name> <operator>+=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol_table</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>symbol_table</name></expr></argument>, <argument><expr><name>maxsyms</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>symbol_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"can't allocate symbol table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>&amp;</operator><name><name>symbol_table</name><index>[<expr><name>nsyms</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sep</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sep</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sep</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_symbol</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>syment_t</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><name>symbol_table</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>sep</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sep</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sep</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_up_certain_popular_kernel_symbols</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>kstat_ctl_t</name> <modifier>*</modifier></type><name>kc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kstat_t</name> <modifier>*</modifier></type><name>ksp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>kc</name> <operator>=</operator> <call><name>kstat_open</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ksp</name> <operator>=</operator> <name><name>kc</name><operator>-&gt;</operator><name>kc_chain</name></name></expr>;</init> <condition><expr><name>ksp</name></expr>;</condition> <incr><expr><name>ksp</name> <operator>=</operator> <name><name>ksp</name><operator>-&gt;</operator><name>ks_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ksp</name><operator>-&gt;</operator><name>ks_module</name></name></expr></argument>, <argument><expr><literal type="string">"cpu_info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ksp</name><operator>-&gt;</operator><name>ks_instance</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>remove_symbol</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ksp</name><operator>-&gt;</operator><name>ks_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cpu[%d]"</literal></expr></argument>, <argument><expr><name><name>ksp</name><operator>-&gt;</operator><name>ks_instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_symbol</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ksp</name><operator>-&gt;</operator><name>ks_private</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>cpu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>kstat_close</name><argument_list>(<argument><expr><name>kc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_up_certain_popular_kernel_symbols</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cpu[%d]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0x01000000</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_symbol</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>symcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>a1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>syment_t</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>addr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>a2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>syment_t</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>addr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a1</name> <operator>&lt;</operator> <name>a2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a1</name> <operator>&gt;</operator> <name>a2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>symtab_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sym</name> <modifier>*</modifier></type><name>symtab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>symp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lastsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strindex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/ksyms"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <call><name>modfind</name><argument_list>(<argument><expr><literal type="string">"ksyms"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kldload</name><argument_list>(<argument><expr><literal type="string">"ksyms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/ksyms"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/ksyms"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>elf</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Shdr</name> <modifier>*</modifier></type><name>shdr</name> <init>= <expr><call><name>elf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shdr</name><operator>-&gt;</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_SYMTAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symtab</name> <operator>=</operator> <operator>(</operator><name>Sym</name> <operator>*</operator><operator>)</operator><call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>d_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsyms</name> <operator>=</operator> <name><name>shdr</name><operator>-&gt;</operator><name>sh_size</name></name> <operator>/</operator> <name><name>shdr</name><operator>-&gt;</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>strindex</name> <operator>=</operator> <name><name>shdr</name><operator>-&gt;</operator><name>sh_link</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>elf</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>strindex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>strtab</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>d_buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>lastsym</name> <operator>=</operator> <name>symtab</name> <operator>+</operator> <name>nsyms</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nsyms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>symp</name> <operator>=</operator> <name>symtab</name></expr>;</init> <condition><expr><name>symp</name> <operator>&lt;</operator> <name>lastsym</name></expr>;</condition> <incr><expr><name>symp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint_t</name><operator>)</operator><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>STT_FUNC</name> <operator>&amp;&amp;</operator>
<name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_symbol</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_name</name></name> <operator>+</operator> <name>strtab</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>symp</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fake_up_certain_popular_kernel_symbols</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>maxsymname</name></expr></argument>, <argument><expr><literal type="string">"0x%lx"</literal></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_symbol</name><argument_list>(<argument><expr><name>maxsymname</name></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>symbol_table</name></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>syment_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>symcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>symbol_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <name><name>symbol_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>symbol_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>symbol_table</name></expr></argument>, <argument><expr><name>nsyms</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>syment_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>symcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>symbol_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbol_table</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nsyms</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>symbol_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"(usermode)"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbol_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>addr_to_sym</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><name>nsyms</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>syment_t</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>hi</name> <operator>-</operator> <name>lo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&gt;=</operator> <name><name>symbol_table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>&amp;</operator><name><name>symbol_table</name><index>[<expr><name>lo</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>addr</name> <operator>-</operator> <name><name>sep</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sizep</name> <operator>=</operator> <name><name>sep</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>sep</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uintptr_t</name></type>
<name>sym_to_addr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>syment_t</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><name>symbol_table</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>sep</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>sep</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sep</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>sym_size</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>syment_t</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><name>symbol_table</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsyms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>sep</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>sep</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sep</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
