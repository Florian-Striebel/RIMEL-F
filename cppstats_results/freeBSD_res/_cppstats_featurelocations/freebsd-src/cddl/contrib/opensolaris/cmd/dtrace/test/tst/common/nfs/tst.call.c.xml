<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/cmd/dtrace/test/tst/common/nfs/tst.call.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/rpc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcsvc/nfs4_prot.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>nfs4_skip_bytes</name></decl>;</decl_stmt>











<function><type><name>int</name></type>
<name>waiting</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dotest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CLIENT</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AUTH</name> <modifier>*</modifier></type><name>auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPOUND4args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COMPOUND4res</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>clnt_stat</name></name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfs_argop4</name></type> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><literal type="string">"dtrace test"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>waiting</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>clnt_create</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>NFS4_PROGRAM</name></expr></argument>, <argument><expr><name>NFS_V4</name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clnt_pcreateerror</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>authsys_create_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>cl_auth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>minorversion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>tag</name><operator>.</operator><name>utf8string_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>tag</name><operator>.</operator><name>utf8string_val</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>argarray</name><operator>.</operator><name>argarray_len</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>nfs_argop4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>argarray</name><operator>.</operator><name>argarray_val</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>argop</name> <operator>=</operator> <name>OP_PUTROOTFH</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>clnt_call</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>NFSPROC4_COMPOUND</name></expr></argument>,
<argument><expr><name>xdr_COMPOUND4args</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><name>xdr_COMPOUND4res</name></expr></argument>, <argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>res</name></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RPC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clnt_perror</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>shareline</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>unshareline</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>shareline</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>shareline</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"mkdir /tmp/nfsv4test.%d ; share /tmp/nfsv4test.%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>unshareline</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>unshareline</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"unshare /tmp/nfsv4test.%d ; rmdir /tmp/nfsv4test.%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>system</name><argument_list>(<argument><expr><name>shareline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dotest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>system</name><argument_list>(<argument><expr><name>unshareline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
