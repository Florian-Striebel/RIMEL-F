<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/util/strtolctype.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_COMMON_UTIL_CTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COMMON_UTIL_CTYPE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>illumos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_KERNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_BOOT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalnum</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isalpha(ch) || isdigit(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isalpha</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isupper(ch) || islower(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdigit</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) &gt;= '0' &amp;&amp; (ch) &lt;= '9')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>islower</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) &gt;= 'a' &amp;&amp; (ch) &lt;= 'z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isspace</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ch) == ' ') || ((ch) == '\r') || ((ch) == '\n') || ((ch) == '\t') || ((ch) == '\f'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isupper</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) &gt;= 'A' &amp;&amp; (ch) &lt;= 'Z')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isxdigit</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit(ch) || ((ch) &gt;= 'a' &amp;&amp; (ch) &lt;= 'f') || ((ch) &gt;= 'A' &amp;&amp; (ch) &lt;= 'F'))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit(x) ? (x) - '0' : islower(x) ? (x) + 10 - 'a' : (x) + 10 - 'A')</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBASE</name></cpp:macro> <cpp:value>('z' - 'a' + 1 + 10)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lisalnum</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit(x) || ((x) &gt;= 'a' &amp;&amp; (x) &lt;= 'z') || ((x) &gt;= 'A' &amp;&amp; (x) &lt;= 'Z'))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
