<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_error.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>_ctf_errlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"File is not in CTF or ELF format"</literal></expr>,
<expr><literal type="string">"File uses more recent ELF version than libctf"</literal></expr>,
<expr><literal type="string">"File uses more recent CTF version than libctf"</literal></expr>,
<expr><literal type="string">"File is a different endian-ness than libctf"</literal></expr>,
<expr><literal type="string">"Symbol table uses invalid entry size"</literal></expr>,
<expr><literal type="string">"Symbol table data buffer is not valid"</literal></expr>,
<expr><literal type="string">"String table data buffer is not valid"</literal></expr>,
<expr><literal type="string">"File data structure corruption detected"</literal></expr>,
<expr><literal type="string">"File does not contain CTF data"</literal></expr>,
<expr><literal type="string">"Buffer does not contain CTF data"</literal></expr>,
<expr><literal type="string">"Symbol table information is not available"</literal></expr>,
<expr><literal type="string">"Type information is in parent and unavailable"</literal></expr>,
<expr><literal type="string">"Cannot import types with different data model"</literal></expr>,
<expr><literal type="string">"Failed to mmap a needed data section"</literal></expr>,
<expr><literal type="string">"Decompression package SUNWzlib not installed"</literal></expr>,
<expr><literal type="string">"Failed to initialize decompression library"</literal></expr>,
<expr><literal type="string">"Failed to allocate decompression buffer"</literal></expr>,
<expr><literal type="string">"Failed to decompress CTF data"</literal></expr>,
<expr><literal type="string">"External string table is not available"</literal></expr>,
<expr><literal type="string">"String name offset is corrupt"</literal></expr>,
<expr><literal type="string">"Invalid type identifier"</literal></expr>,
<expr><literal type="string">"Type is not a struct or union"</literal></expr>,
<expr><literal type="string">"Type is not an enum"</literal></expr>,
<expr><literal type="string">"Type is not a struct, union, or enum"</literal></expr>,
<expr><literal type="string">"Type is not an integer or float"</literal></expr>,
<expr><literal type="string">"Type is not an array"</literal></expr>,
<expr><literal type="string">"Type does not reference another type"</literal></expr>,
<expr><literal type="string">"Input buffer is too small for type name"</literal></expr>,
<expr><literal type="string">"No type information available for that name"</literal></expr>,
<expr><literal type="string">"Syntax error in type name"</literal></expr>,
<expr><literal type="string">"Symbol table entry is not a function"</literal></expr>,
<expr><literal type="string">"No function information available for symbol"</literal></expr>,
<expr><literal type="string">"Symbol table entry is not a data object"</literal></expr>,
<expr><literal type="string">"No type information available for symbol"</literal></expr>,
<expr><literal type="string">"No label information available for that name"</literal></expr>,
<expr><literal type="string">"File does not contain any labels"</literal></expr>,
<expr><literal type="string">"Feature not supported"</literal></expr>,
<expr><literal type="string">"Invalid enum element name"</literal></expr>,
<expr><literal type="string">"Invalid member name"</literal></expr>,
<expr><literal type="string">"CTF container is read-only"</literal></expr>,
<expr><literal type="string">"Limit on number of dynamic type members reached"</literal></expr>,
<expr><literal type="string">"Limit on number of dynamic types reached"</literal></expr>,
<expr><literal type="string">"Duplicate member name definition"</literal></expr>,
<expr><literal type="string">"Conflicting type is already defined"</literal></expr>,
<expr><literal type="string">"Type has outstanding references"</literal></expr>,
<expr><literal type="string">"Type is not a dynamic type"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>_ctf_nerr</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>_ctf_errlist</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>_ctf_errlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ctf_errmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&gt;=</operator> <name>ECTF_BASE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>error</name> <operator>-</operator> <name>ECTF_BASE</name><operator>)</operator> <operator>&lt;</operator> <name>_ctf_nerr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>_ctf_errlist</name><index>[<expr><name>error</name> <operator>-</operator> <name>ECTF_BASE</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ctf_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>str</name></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><literal type="string">"Unknown error"</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ctf_errno</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_errno</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
