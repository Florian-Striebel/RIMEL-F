<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_lookup.c">


























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>















<function><type><specifier>static</specifier> <name>int</name></type>
<name>isqualifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>qual</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>q_len</name></decl>;</decl_stmt>
}</block> <decl><name><name>qhash</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"static"</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"volatile"</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"extern"</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"const"</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"register"</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"restrict"</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"_Restrict"</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>-</operator> <literal type="number">105</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>qual</name></name> <modifier>*</modifier></type><name>qp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>qhash</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>qhash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>qp</name> <operator>=</operator> <operator>&amp;</operator><name><name>qhash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>len</name> <operator>==</operator> <name><name>qp</name><operator>-&gt;</operator><name>q_len</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>qp</name><operator>-&gt;</operator><name>q_name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>qp</name><operator>-&gt;</operator><name>q_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><name>ctf_id_t</name></type>
<name>ctf_lookup_by_name</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>delimiters</name><index>[]</index></name> <init>= <expr><literal type="string">" \t\n\r\v\f*"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lookup_t</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_helem_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>ntype</name></decl>, <decl><type ref="prev"/><name>ptype</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>name</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>q</name></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>delimiters</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name>ntype</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ntype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ntype</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <operator>(</operator><name>ntype</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[
<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>ntype</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isqualifier</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>q</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name></name></expr>;</init> <condition><expr><name><name>lp</name><operator>-&gt;</operator><name>ctl_prefix</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>lp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ctl_prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>q</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&gt;=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ctl_len</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ctl_prefix</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>q</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>+=</operator> <name><name>lp</name><operator>-&gt;</operator><name>ctl_len</name></name></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name><name>lp</name><operator>-&gt;</operator><name>ctl_hash</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>q</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_type</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><operator>-&gt;</operator><name>ctl_prefix</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_SYNTAX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>

<label><name>err</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ptype</name> <operator>=</operator> <call><name>ctf_lookup_by_name</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ptype</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>ctf_id_t</name></type>
<name>ctf_lookup_by_symbol</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>symidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOSYMTAB</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>symidx</name> <operator>&gt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Sym</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>symp</name> <init>= <expr><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>+</operator> <name>symidx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STT_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTDATA</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>symp</name> <init>= <expr><operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>+</operator> <name>symidx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STT_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTDATA</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name><index>[<expr><name>symidx</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1u</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPEDAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ushort_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name><index>[<expr><name>symidx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPEDAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type>
<name>ctf_lookup_by_id</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>fpp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>*</operator><name>fpp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CTF_TYPE_ISPARENT</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><operator>*</operator><name>fpp</name></expr></argument>, <argument><expr><name>ECTF_NOPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fpp</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>LCTF_INDEX_TO_TYPEPTR</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_func_info</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>symidx</name></decl></parameter>, <parameter><decl><type><name>ctf_funcinfo_t</name> <modifier>*</modifier></type><name>fip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ushort_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>info</name></decl>, <decl><type ref="prev"/><name>kind</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOSYMTAB</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>symidx</name> <operator>&gt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Sym</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>symp</name> <init>= <expr><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>+</operator> <name>symidx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ELF32_ST_TYPE</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STT_FUNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTFUNC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type><name>symp</name> <init>= <expr><operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>+</operator> <name>symidx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>symp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STT_FUNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTFUNC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name><index>[<expr><name>symidx</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1u</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOFUNCDAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>ushort_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name><index>[<expr><name>symidx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>*</operator><name>dp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_UNKNOWN</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOFUNCDAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_FUNCTION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fip</name><operator>-&gt;</operator><name>ctc_return</name></name> <operator>=</operator> <operator>*</operator><name>dp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fip</name><operator>-&gt;</operator><name>ctc_argc</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fip</name><operator>-&gt;</operator><name>ctc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fip</name><operator>-&gt;</operator><name>ctc_flags</name></name> <operator>|=</operator> <name>CTF_FUNC_VARARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fip</name><operator>-&gt;</operator><name>ctc_argc</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_func_args</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>symidx</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ushort_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_funcinfo_t</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_func_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>symidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>ushort_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name><index>[<expr><name>symidx</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>ctc_argc</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>argv</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>dp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
