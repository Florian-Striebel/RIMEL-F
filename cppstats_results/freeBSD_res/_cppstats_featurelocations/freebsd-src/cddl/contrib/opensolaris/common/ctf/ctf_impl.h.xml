<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_impl.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CTF_IMPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CTF_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ctf_api.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_KERNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/systm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cmn_err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/varargs.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isspace</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == ' ' || (c) == '\t' || (c) == '\n' || (c) == '\r' || (c) == '\f' || (c) == '\v')</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FAILED</name></cpp:macro> <cpp:value>((void *)-1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>ctf_helem</name> <block>{
<decl_stmt><decl><type><name>uint_t</name></type> <name>h_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>h_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>h_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_helem_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_hash</name> <block>{
<decl_stmt><decl><type><name>ushort_t</name> <modifier>*</modifier></type><name>h_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>h_chains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>h_nbuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>h_nelems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>h_free</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_hash_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_strs</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cts_strs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cts_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_strs_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_dmodel</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctd_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctd_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctd_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctd_short</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctd_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctd_long</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_dmodel_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_lookup</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctl_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctl_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>ctl_hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_lookup_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_fileops</name> <block>{
<function_decl><type><name>ushort_t</name></type> (<modifier>*</modifier><name>ctfo_get_kind</name>)<parameter_list>(<parameter><decl><type><name>ushort_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ushort_t</name></type> (<modifier>*</modifier><name>ctfo_get_root</name>)<parameter_list>(<parameter><decl><type><name>ushort_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ushort_t</name></type> (<modifier>*</modifier><name>ctfo_get_vlen</name>)<parameter_list>(<parameter><decl><type><name>ushort_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ctf_fileops_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_list</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ctf_list</name></name> <modifier>*</modifier></type><name>l_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ctf_list</name></name> <modifier>*</modifier></type><name>l_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_list_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>CTF_PREC_BASE</name></decl>,
<decl><name>CTF_PREC_POINTER</name></decl>,
<decl><name>CTF_PREC_ARRAY</name></decl>,
<decl><name>CTF_PREC_FUNCTION</name></decl>,
<decl><name>CTF_PREC_MAX</name></decl>
}</block></enum></type> <name>ctf_decl_prec_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_decl_node</name> <block>{
<decl_stmt><decl><type><name>ctf_list_t</name></type> <name>cd_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>cd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>cd_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>cd_n</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_decl_node_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_decl</name> <block>{
<decl_stmt><decl><type><name>ctf_list_t</name></type> <name><name>cd_nodes</name><index>[<expr><name>CTF_PREC_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cd_order</name><index>[<expr><name>CTF_PREC_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_decl_prec_t</name></type> <name>cd_qualp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_decl_prec_t</name></type> <name>cd_ordp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cd_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cd_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cd_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cd_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cd_err</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_decl_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_dmdef</name> <block>{
<decl_stmt><decl><type><name>ctf_list_t</name></type> <name>dmd_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dmd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dmd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>dmd_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dmd_value</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_dmdef_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_dtdef</name> <block>{
<decl_stmt><decl><type><name>ctf_list_t</name></type> <name>dtd_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ctf_dtdef</name></name> <modifier>*</modifier></type><name>dtd_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dtd_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dtd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_type_t</name></type> <name>dtd_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dtd_ref</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>ctf_list_t</name></type> <name>dtu_members</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>dtu_arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>dtu_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name> <modifier>*</modifier></type><name>dtu_argv</name></decl>;</decl_stmt>
}</block> <decl><name>dtd_u</name></decl>;</union>
}</block></struct></type> <name>ctf_dtdef_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ctf_bundle</name> <block>{
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ctb_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>ctb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>ctb_dtd</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctf_bundle_t</name>;</typedef>













<struct>struct <name>ctf_file</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_fileops_t</name> <modifier>*</modifier></type><name>ctf_fileops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>ctf_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>ctf_symtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>ctf_strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_hash_t</name></type> <name>ctf_structs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_hash_t</name></type> <name>ctf_unions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_hash_t</name></type> <name>ctf_enums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_hash_t</name></type> <name>ctf_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_lookup_t</name></type> <name><name>ctf_lookups</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_strs_t</name></type> <name><name>ctf_str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uchar_t</name> <modifier>*</modifier></type><name>ctf_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uchar_t</name> <modifier>*</modifier></type><name>ctf_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>ctf_sxlate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>ctf_nsyms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>ctf_txlate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name> <modifier>*</modifier></type><name>ctf_ptrtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>ctf_typemax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_dmodel_t</name> <modifier>*</modifier></type><name>ctf_dmodel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ctf_file</name></name> <modifier>*</modifier></type><name>ctf_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctf_parlabel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctf_parname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>ctf_refcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>ctf_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctf_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctf_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctf_dthash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>ctf_dthashlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_list_t</name></type> <name>ctf_dtdefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctf_dtstrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>ctf_dtnextid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>ctf_dtoldid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctf_specific</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_INDEX_TO_TYPEPTR</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctf_type_t *)((uintptr_t)(fp)-&gt;ctf_buf + (fp)-&gt;ctf_txlate[(i)]))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_INFO_KIND</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fp)-&gt;ctf_fileops-&gt;ctfo_get_kind(info))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_INFO_ROOT</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fp)-&gt;ctf_fileops-&gt;ctfo_get_root(info))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_INFO_VLEN</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fp)-&gt;ctf_fileops-&gt;ctfo_get_vlen(info))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_MMAP</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_CHILD</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_RDWR</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCTF_DIRTY</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECTF_BASE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>ECTF_FMT</name> <init>= <expr><name>ECTF_BASE</name></expr></init></decl>,
<decl><name>ECTF_ELFVERS</name></decl>,
<decl><name>ECTF_CTFVERS</name></decl>,
<decl><name>ECTF_ENDIAN</name></decl>,
<decl><name>ECTF_SYMTAB</name></decl>,
<decl><name>ECTF_SYMBAD</name></decl>,
<decl><name>ECTF_STRBAD</name></decl>,
<decl><name>ECTF_CORRUPT</name></decl>,
<decl><name>ECTF_NOCTFDATA</name></decl>,
<decl><name>ECTF_NOCTFBUF</name></decl>,
<decl><name>ECTF_NOSYMTAB</name></decl>,
<decl><name>ECTF_NOPARENT</name></decl>,
<decl><name>ECTF_DMODEL</name></decl>,
<decl><name>ECTF_MMAP</name></decl>,
<decl><name>ECTF_ZMISSING</name></decl>,
<decl><name>ECTF_ZINIT</name></decl>,
<decl><name>ECTF_ZALLOC</name></decl>,
<decl><name>ECTF_DECOMPRESS</name></decl>,
<decl><name>ECTF_STRTAB</name></decl>,
<decl><name>ECTF_BADNAME</name></decl>,
<decl><name>ECTF_BADID</name></decl>,
<decl><name>ECTF_NOTSOU</name></decl>,
<decl><name>ECTF_NOTENUM</name></decl>,
<decl><name>ECTF_NOTSUE</name></decl>,
<decl><name>ECTF_NOTINTFP</name></decl>,
<decl><name>ECTF_NOTARRAY</name></decl>,
<decl><name>ECTF_NOTREF</name></decl>,
<decl><name>ECTF_NAMELEN</name></decl>,
<decl><name>ECTF_NOTYPE</name></decl>,
<decl><name>ECTF_SYNTAX</name></decl>,
<decl><name>ECTF_NOTFUNC</name></decl>,
<decl><name>ECTF_NOFUNCDAT</name></decl>,
<decl><name>ECTF_NOTDATA</name></decl>,
<decl><name>ECTF_NOTYPEDAT</name></decl>,
<decl><name>ECTF_NOLABEL</name></decl>,
<decl><name>ECTF_NOLABELDATA</name></decl>,
<decl><name>ECTF_NOTSUP</name></decl>,
<decl><name>ECTF_NOENUMNAM</name></decl>,
<decl><name>ECTF_NOMEMBNAM</name></decl>,
<decl><name>ECTF_RDONLY</name></decl>,
<decl><name>ECTF_DTFULL</name></decl>,
<decl><name>ECTF_FULL</name></decl>,
<decl><name>ECTF_DUPMEMBER</name></decl>,
<decl><name>ECTF_CONFLICT</name></decl>,
<decl><name>ECTF_REFERENCED</name></decl>,
<decl><name>ECTF_NOTDYN</name></decl>
}</block>;</enum>

<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>ctf_get_ctt_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>ctf_lookup_by_id</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ctf_hash_create</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ctf_hash_insert</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ctf_hash_define</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ctf_helem_t</name> <modifier>*</modifier></type><name>ctf_hash_lookup</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uint_t</name></type> <name>ctf_hash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_hash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_hash_destroy</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctf_list_prev</name><parameter_list>(<parameter><type><name>elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(((ctf_list_t *)(elem))-&gt;l_prev))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctf_list_next</name><parameter_list>(<parameter><type><name>elem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(((ctf_list_t *)(elem))-&gt;l_next))</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_list_append</name><parameter_list>(<parameter><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_list_prepend</name><parameter_list>(<parameter><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_list_delete</name><parameter_list>(<parameter><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_dtd_insert</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_dtd_delete</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>ctf_dtd_lookup</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_decl_init</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_decl_fini</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_decl_push</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_decl_sprintf</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctf_strraw</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctf_strptr</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>ctf_file_t</name> <modifier>*</modifier></type><name>ctf_set_open_errno</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>long</name></type> <name>ctf_set_errno</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctf_sect_mmap</name><parameter_list>(<parameter><decl><type><name>ctf_sect_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_sect_munmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ctf_data_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_data_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_data_protect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ctf_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>ctf_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctf_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ctf_dprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ctf_zopen</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_CTF_SECTION</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_CTF_NULLSTR</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_libctf_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_libctf_debug</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
