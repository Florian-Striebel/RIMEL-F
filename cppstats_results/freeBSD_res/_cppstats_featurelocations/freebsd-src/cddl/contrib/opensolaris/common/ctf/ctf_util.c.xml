<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_util.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>








<function><type><name>void</name></type>
<name>ctf_list_append</name><parameter_list>(<parameter><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>l_prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>new</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ctf_list_prepend</name><parameter_list>(<parameter><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>new</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>lp</name><operator>-&gt;</operator><name>l_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ctf_list_delete</name><parameter_list>(<parameter><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_list_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>existing</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l_prev</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>l_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>l_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l_next</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l_prev</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lp</name><operator>-&gt;</operator><name>l_prev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ctf_strraw</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_strs_t</name> <modifier>*</modifier></type><name>ctsp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><call><name>CTF_NAME_STID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_strs</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>CTF_NAME_OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctsp</name><operator>-&gt;</operator><name>cts_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>ctsp</name><operator>-&gt;</operator><name>cts_strs</name></name> <operator>+</operator> <call><name>CTF_NAME_OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ctf_strptr</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ctf_strraw</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><literal type="string">"(?)"</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>ctf_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>ctf_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>s2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_set_open_errno</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>long</name></type>
<name>ctf_set_errno</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_errno</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
