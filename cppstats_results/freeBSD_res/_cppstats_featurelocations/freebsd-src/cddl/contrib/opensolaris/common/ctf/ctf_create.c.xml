<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_create.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/debug.h&gt;</cpp:file></cpp:include>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_CTF_STRTAB_TEMPLATE</name><index>[]</index></name> <init>= <expr><literal type="string">"\0PARENT"</literal></expr></init></decl>;</decl_stmt>








<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_create</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ctf_header_t</name></type> <name>hdr</name> <init>= <expr><block>{ <expr><block>{ <expr><name>CTF_MAGIC</name></expr>, <expr><name>CTF_VERSION</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ulong_t</name></type> <name>hashlen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>ctf_alloc</name><argument_list>(<argument><expr><name>hashlen</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>cts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>_CTF_SECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name>SHT_PROGBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_RDWR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>=</operator> <name>hashlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_CTF_STRTAB_TEMPLATE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtoldid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uchar_t</name> <modifier>*</modifier></type>
<name>ctf_copy_smembers</name><parameter_list>(<parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>soff</name></decl></parameter>, <parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name> <init>= <expr><call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_member_t</name></type> <name>ctm</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctm</name><operator>.</operator><name>ctm_name</name></name> <operator>=</operator> <name>soff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctm</name><operator>.</operator><name>ctm_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctm</name><operator>.</operator><name>ctm_type</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctm</name><operator>.</operator><name>ctm_offset</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uchar_t</name> <modifier>*</modifier></type>
<name>ctf_copy_lmembers</name><parameter_list>(<parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>soff</name></decl></parameter>, <parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name> <init>= <expr><call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_lmember_t</name></type> <name>ctlm</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctlm</name><operator>.</operator><name>ctlm_name</name></name> <operator>=</operator> <name>soff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctlm</name><operator>.</operator><name>ctlm_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctlm</name><operator>.</operator><name>ctlm_type</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctlm</name><operator>.</operator><name>ctlm_pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctlm</name><operator>.</operator><name>ctlm_offsethi</name></name> <operator>=</operator> <call><name>CTF_OFFSET_TO_LMEMHI</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctlm</name><operator>.</operator><name>ctlm_offsetlo</name></name> <operator>=</operator> <call><name>CTF_OFFSET_TO_LMEMLO</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctlm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctlm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctlm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uchar_t</name> <modifier>*</modifier></type>
<name>ctf_copy_emembers</name><parameter_list>(<parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>soff</name></decl></parameter>, <parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name> <init>= <expr><call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_enum_t</name></type> <name>cte</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cte</name><operator>.</operator><name>cte_name</name></name> <operator>=</operator> <name>soff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cte</name><operator>.</operator><name>cte_value</name></name> <operator>=</operator> <name><name>dmd</name><operator>-&gt;</operator><name>dmd_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cte</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cte</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>cte</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uchar_t</name> <modifier>*</modifier></type>
<name>ctf_copy_membnames</name><parameter_list>(<parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl></parameter>, <parameter><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name> <init>= <expr><call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type>
<name>ctf_ref_inc</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name> <init>= <expr><call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dtd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_ref</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>ctf_ref_dec</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name> <init>= <expr><call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dtd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_ref</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_ref</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><name>int</name></type>
<name>ctf_update</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name></type> <name>ofp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_header_t</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>cts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uchar_t</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_DIRTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>cth_magic</name></name> <operator>=</operator> <name>CTF_MAGIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>cth_version</name></name> <operator>=</operator> <name>CTF_VERSION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>cth_parname</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dtd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name> <init>= <expr><call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>vlen</name> <init>= <expr><call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>!=</operator> <name>CTF_LSIZE_SENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_stype_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_type_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_array_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>vlen</name> <operator>+</operator> <operator>(</operator><name>vlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_member_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_lmember_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_enum_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>






<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>cth_stroff</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>cth_typeoff</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>cth_strlen</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>cth_stroff</name></name> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>cth_strlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>ctf_data_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>cth_stroff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>_CTF_STRTAB_TEMPLATE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>_CTF_STRTAB_TEMPLATE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>_CTF_STRTAB_TEMPLATE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dtd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name> <init>= <expr><call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>vlen</name> <init>= <expr><call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctf_array_t</name></type> <name>cta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_name</name></name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>s0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>!=</operator> <name>CTF_LSIZE_SENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_stype_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_type_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>CTF_INT_DATA</name><argument_list>(
<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name><operator>.</operator><name>cte_format</name></name></expr></argument>,
<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name><operator>.</operator><name>cte_offset</name></name></expr></argument>,
<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name><operator>.</operator><name>cte_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>CTF_FP_DATA</name><argument_list>(
<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name><operator>.</operator><name>cte_format</name></name></expr></argument>,
<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name><operator>.</operator><name>cte_offset</name></name></expr></argument>,
<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name><operator>.</operator><name>cte_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoding</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><name><name>cta</name><operator>.</operator><name>cta_contents</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator>
<name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_contents</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cta</name><operator>.</operator><name>cta_index</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator>
<name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cta</name><operator>.</operator><name>cta_nelems</name></name> <operator>=</operator> <name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_nelems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cta</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>cta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>cta</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>ushort_t</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>(</operator><name>ushort_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>argc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argc</name> <operator>&lt;</operator> <name>vlen</name></expr>;</condition> <incr><expr><name>argc</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>argv</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>argv</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>argv</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ctf_copy_smembers</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>s0</name><operator>)</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ctf_copy_lmembers</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>s0</name><operator>)</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctf_copy_membnames</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ctf_copy_emembers</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>s0</name><operator>)</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctf_copy_membnames</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>





<expr_stmt><expr><call><name>ctf_data_protect</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>_CTF_SECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_type</name></name> <operator>=</operator> <name>SHT_PROGBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_entsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cts</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nfp</name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>, <argument><expr><call><name>ctf_getmodel</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_import</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>LCTF_DIRTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_dthash</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_dtoldid</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_specific</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_specific</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ofp</name></expr></argument>, <argument><expr><name>nfp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name>nfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ctf_dtd_insert</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_hash</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>dtd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>, <argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ctf_dtd_delete</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtd_hash</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>dtd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dtd_hash</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>dtd_hash</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<for>for <control>(<init><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <name>nmd</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_ENUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_argv</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_list_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>, <argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type>
<name>ctf_dtd_lookup</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><name>type</name> <operator>&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dtd</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>dtd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dtd</name> <operator>=</operator> <name><name>dtd</name><operator>-&gt;</operator><name>dtd_hash</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>dtd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>ctf_discard</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ntd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_DIRTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dtd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dtd</name> <operator>=</operator> <name>ntd</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ntd</name> <operator>=</operator> <call><name>ctf_list_prev</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtoldid</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_dtd_delete</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtoldid</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LCTF_DIRTY</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ctf_id_t</name></type>
<name>ctf_add_generic</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <name>CTF_ADD_NONROOT</name> <operator>&amp;&amp;</operator> <name>flag</name> <operator>!=</operator> <name>CTF_ADD_ROOT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CTF_MAX_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_FULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dtd</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dtnextid</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_dtd_insert</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_DIRTY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <name>dtd</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>clp2</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ctf_id_t</name></type>
<name>ctf_add_encoded</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_encoding_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <call><name>clp2</name><argument_list>(<argument><expr><call><name>P2ROUNDUP</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_bits</name></name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name></name> <operator>=</operator> <operator>*</operator><name>ep</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ctf_id_t</name></type>
<name>ctf_add_reftype</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <name><name>ref</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ref</name></expr></argument> &gt;</argument_list></name> <name>CTF_MAX_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_integer</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_encoding_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_add_encoded</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>CTF_K_INTEGER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_float</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_encoding_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_add_encoded</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>CTF_K_FLOAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_pointer</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_add_reftype</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>CTF_K_POINTER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_array</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_arinfo_t</name> <modifier>*</modifier></type><name>arp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fpd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_ARRAY</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name></name> <operator>=</operator> <operator>*</operator><name>arp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ctf_set_array</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_arinfo_t</name> <modifier>*</modifier></type><name>arp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fpd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name> <init>= <expr><call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dtd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_K_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_dec</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name><operator>.</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_DIRTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_arr</name></name> <operator>=</operator> <operator>*</operator><name>arp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_function</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ctf_funcinfo_t</name> <modifier>*</modifier></type><name>ctc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_id_t</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name> <modifier>*</modifier></type><name>vdat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fpd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>ctc</name><operator>-&gt;</operator><name>ctc_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>CTF_FUNC_VARARG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>ctc</name><operator>-&gt;</operator><name>ctc_argc</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argv</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vlen</name> <operator>=</operator> <name><name>ctc</name><operator>-&gt;</operator><name>ctc_argc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctc</name><operator>-&gt;</operator><name>ctc_flags</name></name> <operator>&amp;</operator> <name>CTF_FUNC_VARARG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <name>CTF_MAX_VLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EOVERFLOW</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name><name>ctc</name><operator>-&gt;</operator><name>ctc_return</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ctc</name><operator>-&gt;</operator><name>ctc_return</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctc</name><operator>-&gt;</operator><name>ctc_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>vdat</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>vdat</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_FUNCTION</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name><name>ctc</name><operator>-&gt;</operator><name>ctc_return</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ctc</name><operator>-&gt;</operator><name>ctc_return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctc</name><operator>-&gt;</operator><name>ctc_argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>vdat</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_id_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>ctc</name><operator>-&gt;</operator><name>ctc_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctc</name><operator>-&gt;</operator><name>ctc_flags</name></name> <operator>&amp;</operator> <name>CTF_FUNC_VARARG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vdat</name><index>[<expr><name>vlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_argv</name></name> <operator>=</operator> <name>vdat</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_struct</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name> <operator>=</operator> <name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_STRUCT</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_union</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name> <operator>=</operator> <name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_UNION</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_enum</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name> <operator>=</operator> <name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_ENUM</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name><operator>-&gt;</operator><name>ctd_int</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_forward</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTSUE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>,
<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_FORWARD</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_typedef</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fpd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <operator>(</operator><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>CTF_K_TYPEDEF</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_type</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_volatile</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_add_reftype</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>CTF_K_VOLATILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_const</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_add_reftype</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>CTF_K_CONST</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_id_t</name></type>
<name>ctf_add_restrict</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_add_reftype</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>CTF_K_RESTRICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ctf_add_enumerator</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>enid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name> <init>= <expr><call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>enid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dtd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>CTF_INFO_ISROOT</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_ENUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTENUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <name>CTF_MAX_VLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_DTFULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_DUPMEMBER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmd</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>, <argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_DIRTY</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ctf_add_member</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>souid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name> <init>= <expr><call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>souid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>msize</name></decl>, <decl><type ref="prev"/><name>malign</name></decl>, <decl><type ref="prev"/><name>ssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>, <decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dtd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_BADID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>CTF_INFO_ISROOT</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <name>CTF_K_UNION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTSOU</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>==</operator> <name>CTF_MAX_VLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_DTFULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_DUPMEMBER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msize</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<operator>(</operator><name>malign</name> <operator>=</operator> <call><name>ctf_type_align</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmd</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_value</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>vlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>lmd</name> <init>= <expr><call><name>ctf_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>ltype</name> <init>= <expr><call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmd</name><operator>-&gt;</operator><name>dmd_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><name><name>lmd</name><operator>-&gt;</operator><name>dmd_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>linfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>lsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>linfo</name><operator>.</operator><name>cte_bits</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>lsize</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>lsize</name> <operator>*</operator> <name>NBBY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>










<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>NBBY</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>NBBY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>malign</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name> <operator>=</operator> <name>off</name> <operator>*</operator> <name>NBBY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name>msize</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>ssize</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>&gt;</operator> <name>CTF_MAX_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <name>CTF_LSIZE_SENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_lsizehi</name></name> <operator>=</operator> <call><name>CTF_SIZE_TO_LSIZE_HI</name><argument_list>(<argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_lsizelo</name></name> <operator>=</operator> <call><name>CTF_SIZE_TO_LSIZE_LO</name><argument_list>(<argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name>ssize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>, <argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_DIRTY</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>ctf_delete_type</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fpd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name> <init>= <expr><call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>fpd</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpd</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>ctf_dtd_lookup</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dtd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTDYN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_ref</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_REFERENCED</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_dtd_delete</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_DIRTY</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>enumcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_bundle_t</name> <modifier>*</modifier></type><name>ctb</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bvalue</name></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>ctf_enum_value</name><argument_list>(<argument><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_file</name></name></expr></argument>, <argument><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_type</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bvalue</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator> <name>value</name> <operator>!=</operator> <name>bvalue</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>enumadd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_bundle_t</name> <modifier>*</modifier></type><name>ctb</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>ctf_add_enumerator</name><argument_list>(<argument><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_file</name></name></expr></argument>, <argument><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_type</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>membadd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_bundle_t</name> <modifier>*</modifier></type><name>ctb</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dmd</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_file</name></name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dmdef_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_file</name></name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_value</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctb</name><operator>-&gt;</operator><name>ctb_dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>, <argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_file</name><operator>-&gt;</operator><name>ctf_dtstrlen</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctb</name><operator>-&gt;</operator><name>ctb_file</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_DIRTY</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>soucmp</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>src_fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>src_type</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>dst_fp</name></decl></parameter>,
<parameter><decl><type><name>ctf_id_t</name></type> <name>dst_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ctf_type</name></name> <modifier>*</modifier></type><name>src_tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>src_sz</name></decl>, <decl><type ref="prev"/><name>dst_sz</name></decl>, <decl><type ref="prev"/><name>src_inc</name></decl>, <decl><type ref="prev"/><name>dst_inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src_type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst_type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src_tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst_tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>src_tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name><name>dst_tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <name>CTF_K_UNION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>src_tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name><name>dst_tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>src_sz</name> <operator>!=</operator> <name>dst_sz</name> <operator>||</operator> <name>src_inc</name> <operator>!=</operator> <name>dst_inc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src_sz</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_member_t</name> <modifier>*</modifier></type><name>src_mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_mp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_mp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_member_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>src_tp</name> <operator>+</operator> <name>src_inc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_mp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_member_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dst_tp</name> <operator>+</operator> <name>dst_inc</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>src_mp</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst_mp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src_mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>!=</operator> <name><name>dst_mp</name><operator>-&gt;</operator><name>ctm_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_name</name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>src_mp</name><operator>-&gt;</operator><name>ctm_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_name</name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name><name>dst_mp</name><operator>-&gt;</operator><name>ctm_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src_name</name></expr></argument>, <argument><expr><name>dst_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lmember_t</name> <modifier>*</modifier></type><name>src_mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_mp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_mp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_lmember_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>src_tp</name> <operator>+</operator> <name>src_inc</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_mp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_lmember_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dst_tp</name> <operator>+</operator> <name>dst_inc</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>src_mp</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst_mp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src_mp</name><operator>-&gt;</operator><name>ctlm_offsethi</name></name> <operator>!=</operator> <name><name>dst_mp</name><operator>-&gt;</operator><name>ctlm_offsethi</name></name> <operator>||</operator>
<name><name>src_mp</name><operator>-&gt;</operator><name>ctlm_offsetlo</name></name> <operator>!=</operator> <name><name>dst_mp</name><operator>-&gt;</operator><name>ctlm_offsetlo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src_name</name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>src_mp</name><operator>-&gt;</operator><name>ctlm_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_name</name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name><name>dst_mp</name><operator>-&gt;</operator><name>ctlm_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src_name</name></expr></argument>, <argument><expr><name>dst_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>ctf_id_t</name></type>
<name>ctf_add_type</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>dst_fp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>src_fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>src_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>dst_type</name> <init>= <expr><name>CTF_ERR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>dst_kind</name> <init>= <expr><name>CTF_K_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctf_bundle_t</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>src_en</name></decl>, <decl><type ref="prev"/><name>main_en</name></decl>, <decl><type ref="prev"/><name>dst_en</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>src_ar</name></decl>, <decl><type ref="prev"/><name>dst_ar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_funcinfo_t</name></type> <name>ctc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_fp</name> <operator>==</operator> <name>src_fp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>src_type</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_RDWR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>LCTF_INFO_ROOT</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>CTF_ADD_ROOT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <operator>(</operator><name>ctf_id_t</name><operator>)</operator><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_kind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <name>dst_kind</name> <operator>!=</operator> <name>kind</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst_kind</name> <operator>!=</operator> <name>CTF_K_FORWARD</name> <operator>||</operator> <operator>(</operator><name>kind</name> <operator>!=</operator> <name>CTF_K_ENUM</name> <operator>&amp;&amp;</operator>
<name>kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <name>CTF_K_UNION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <name>CTF_ERR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dtd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>dst_fp</name><operator>-&gt;</operator><name>ctf_dtoldid</name></name></expr>;</condition>
<incr><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_prev</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kind</name> <operator>||</operator>
<name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_INTEGER</name> <operator>||</operator> <name>kind</name> <operator>==</operator> <name>CTF_K_FLOAT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_enc</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_encoding_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_type</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>ctb_file</name></name> <operator>=</operator> <name>src_fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>.</operator><name>ctb_type</name></name> <operator>=</operator> <name>src_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>.</operator><name>ctb_dtd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ctb_file</name></name> <operator>=</operator> <name>dst_fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ctb_type</name></name> <operator>=</operator> <name>dst_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ctb_dtd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>







<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src_fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name>src_type</name> <operator>!=</operator> <operator>(</operator><name>ctf_id_t</name><operator>)</operator><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><operator>(</operator><name>ctf_id_t</name><operator>)</operator><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>main_en</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>,
<argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>main_en</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_encoding_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>,
<argument><expr><operator>(</operator><name>ctf_id_t</name><operator>)</operator><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_en</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_en</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_encoding_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_integer</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_float</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><name>src_type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_type</name> <operator>=</operator> <call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_reftype</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_ar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><call><name>ctf_errno</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>src_ar</name><operator>.</operator><name>ctr_contents</name></name> <operator>=</operator>
<call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>src_ar</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_ar</name><operator>.</operator><name>ctr_index</name></name> <operator>=</operator>
<call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>src_ar</name><operator>.</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_ar</name><operator>.</operator><name>ctr_nelems</name></name> <operator>=</operator> <name><name>src_ar</name><operator>.</operator><name>ctr_nelems</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_ar</name><operator>.</operator><name>ctr_contents</name></name> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<name><name>src_ar</name><operator>.</operator><name>ctr_index</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>!=</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_ar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_ar</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_arinfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_array</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name><name>ctc</name><operator>.</operator><name>ctc_return</name></name> <operator>=</operator> <call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctc</name><operator>.</operator><name>ctc_argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctc</name><operator>.</operator><name>ctc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctc</name><operator>.</operator><name>ctc_return</name></name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_function</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>ctf_dmdef_t</name> <modifier>*</modifier></type><name>dmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <name>dst_kind</name> <operator>!=</operator> <name>CTF_K_FORWARD</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>soucmp</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_generic</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ctb_type</name></name> <operator>=</operator> <name>dst_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ctb_dtd</name></name> <operator>=</operator> <name>dtd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_member_iter</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><name>membadd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>CTF_MAX_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <name>CTF_LSIZE_SENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_lsizehi</name></name> <operator>=</operator> <call><name>CTF_SIZE_TO_LSIZE_HI</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_lsizelo</name></name> <operator>=</operator> <call><name>CTF_SIZE_TO_LSIZE_LO</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_size</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dtd</name><operator>-&gt;</operator><name>dtd_data</name><operator>.</operator><name>ctt_info</name></name> <operator>=</operator> <call><name>CTF_TYPE_INFO</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name> <operator>=</operator> <call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>,
<argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtd</name><operator>-&gt;</operator><name>dtd_u</name><operator>.</operator><name>dtu_members</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>dmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dmd</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>dmd</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_ref_inc</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name><name>dmd</name><operator>-&gt;</operator><name>dmd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>!=</operator> <name>CTF_ERR</name> <operator>&amp;&amp;</operator> <name>dst_kind</name> <operator>!=</operator> <name>CTF_K_FORWARD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ctf_enum_iter</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><name>enumcmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ctf_enum_iter</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>, <argument><expr><name>enumcmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CONFLICT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_enum</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dst</name><operator>.</operator><name>ctb_type</name></name> <operator>=</operator> <name>dst_type</name><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<call><name>ctf_enum_iter</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>, <argument><expr><name>enumadd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_FORWARD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_forward</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>,
<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>CTF_K_STRUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><name>src_type</name> <operator>=</operator> <call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_type</name> <operator>=</operator> <call><name>ctf_add_type</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>src_fp</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_type</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>dst_type</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst_type</name> <operator>=</operator> <call><name>ctf_add_typedef</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>src_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>dst_fp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>dst_type</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
