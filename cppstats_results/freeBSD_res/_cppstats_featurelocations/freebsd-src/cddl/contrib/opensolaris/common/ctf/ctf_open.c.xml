<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_open.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/zmod.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ctf_dmodel_t</name></type> <name><name>_libctf_models</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ILP32"</literal></expr>, <expr><name>CTF_MODEL_ILP32</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LP64"</literal></expr>, <expr><name>CTF_MODEL_LP64</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>_CTF_SECTION</name><index>[]</index></name> <init>= <expr><literal type="string">".SUNW_ctf"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>_CTF_NULLSTR</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>_libctf_version</name> <init>= <expr><name>CTF_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_libctf_debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ushort_t</name></type>
<name>get_kind_v1</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INFO_KIND_V1</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ushort_t</name></type>
<name>get_kind_v2</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INFO_KIND</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ushort_t</name></type>
<name>get_root_v1</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INFO_ISROOT_V1</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ushort_t</name></type>
<name>get_root_v2</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INFO_ISROOT</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ushort_t</name></type>
<name>get_vlen_v1</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INFO_VLEN_V1</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ushort_t</name></type>
<name>get_vlen_v2</name><parameter_list>(<parameter><decl><type><name>ushort_t</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INFO_VLEN</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ctf_fileops_t</name></type> <name><name>ctf_fileops</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>get_kind_v1</name></expr>, <expr><name>get_root_v1</name></expr>, <expr><name>get_vlen_v1</name></expr> }</block></expr>,
<expr><block>{ <expr><name>get_kind_v2</name></expr>, <expr><name>get_root_v2</name></expr>, <expr><name>get_vlen_v2</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>Elf64_Sym</name> <modifier>*</modifier></type>
<name>sym_to_gelf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Elf32_Sym</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>Elf64_Sym</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_name</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_value</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_info</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_other</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_other</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>st_shndx</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_symtab</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_header_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uchar_t</name> <modifier>*</modifier></type><name>symp</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>xp</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>xend</name> <init>= <expr><name>xp</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_t</name></type> <name>objtoff</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>cth_objtoff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>funcoff</name> <init>= <expr><name><name>hp</name><operator>-&gt;</operator><name>cth_funcoff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ushort_t</name></type> <name>info</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Sym</name></type> <name>sym</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>








<for>for <control>(<init>;</init> <condition><expr><name>xp</name> <operator>&lt;</operator> <name>xend</name></expr>;</condition> <incr><expr><name>xp</name><operator>++</operator></expr><operator>,</operator> <expr><name>symp</name> <operator>+=</operator> <name><name>sp</name><operator>-&gt;</operator><name>cts_entsize</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Sym</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gsp</name> <operator>=</operator> <call><name>sym_to_gelf</name><argument_list>(<argument><expr><operator>(</operator><name>Elf32_Sym</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>symp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>gsp</name> <operator>=</operator> <operator>(</operator><name>Elf64_Sym</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>symp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gsp</name><operator>-&gt;</operator><name>st_name</name></name> <operator>&lt;</operator> <name><name>strp</name><operator>-&gt;</operator><name>cts_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>strp</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>+</operator> <name><name>gsp</name><operator>-&gt;</operator><name>st_name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>_CTF_NULLSTR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gsp</name><operator>-&gt;</operator><name>st_name</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>gsp</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_START_"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_END_"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <operator>-</operator><literal type="number">1u</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>ELF64_ST_TYPE</name><argument_list>(<argument><expr><name><name>gsp</name><operator>-&gt;</operator><name>st_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STT_OBJECT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>objtoff</name> <operator>&gt;=</operator> <name><name>hp</name><operator>-&gt;</operator><name>cth_funcoff</name></name> <operator>||</operator>
<operator>(</operator><name><name>gsp</name><operator>-&gt;</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_ABS</name> <operator>&amp;&amp;</operator> <name><name>gsp</name><operator>-&gt;</operator><name>st_value</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <operator>-</operator><literal type="number">1u</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <name>objtoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>objtoff</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STT_FUNC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>funcoff</name> <operator>&gt;=</operator> <name><name>hp</name><operator>-&gt;</operator><name>cth_typeoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <operator>-</operator><literal type="number">1u</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <name>funcoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ushort_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name>funcoff</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_UNKNOWN</name> <operator>&amp;&amp;</operator>
<name>vlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>funcoff</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>funcoff</name> <operator>+=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>vlen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <operator>-</operator><literal type="number">1u</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"loaded %lu symtab entries\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_types</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_header_t</name> <modifier>*</modifier></type><name>cth</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><operator>(</operator><name>ctf_type_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name><name>cth</name><operator>-&gt;</operator><name>cth_typeoff</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tend</name> <init>= <expr><operator>(</operator><name>ctf_type_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name><name>cth</name><operator>-&gt;</operator><name>cth_stroff</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong_t</name></type> <name><name>pop</name><index>[<expr><name>CTF_K_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>xp</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>child</name> <init>= <expr><name><name>cth</name><operator>-&gt;</operator><name>cth_parname</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlstructs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nlunions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>tbuf</name></expr>;</init> <condition><expr><name>tp</name> <operator>&lt;</operator> <name>tend</name></expr>;</condition> <incr><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>kind</name> <init>= <expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>vlen</name> <init>= <expr><call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>vbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_array_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>vlen</name> <operator>+</operator> <operator>(</operator><name>vlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator>
<name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ctf_member_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><operator>(</operator><name>ctf_member_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_member_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>vlen</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>mp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>child</name> <operator>|=</operator> <call><name>CTF_TYPE_ISCHILD</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ctf_lmember_t</name> <modifier>*</modifier></type><name>lmp</name> <init>= <expr><operator>(</operator><name>ctf_lmember_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_lmember_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>vlen</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>lmp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>child</name> <operator>|=</operator>
<call><name>CTF_TYPE_ISCHILD</name><argument_list>(<argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_enum_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FORWARD</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name> <operator>==</operator> <name>CTF_K_UNKNOWN</name> <operator>||</operator>
<name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name> <operator>&gt;=</operator> <name>CTF_K_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pop</name><index>[<expr><name>CTF_K_STRUCT</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pop</name><index>[<expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<case>case <expr><name>CTF_K_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><name>child</name> <operator>|=</operator> <call><name>CTF_TYPE_ISCHILD</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"detected invalid CTF kind -- %u\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ECTF_CORRUPT</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>ctf_type_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name> <operator>+</operator> <name>vbytes</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pop</name><index>[<expr><name>kind</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"CTF container %p is a child\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_CHILD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"CTF container %p is a parent\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctf_hash_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr></argument>, <argument><expr><name><name>pop</name><index>[<expr><name>CTF_K_STRUCT</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctf_hash_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr></argument>, <argument><expr><name><name>pop</name><index>[<expr><name>CTF_K_UNION</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctf_hash_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr></argument>, <argument><expr><name><name>pop</name><index>[<expr><name>CTF_K_ENUM</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctf_hash_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>,
<argument><expr><name><name>pop</name><index>[<expr><name>CTF_K_INTEGER</name></expr>]</index></name> <operator>+</operator> <name><name>pop</name><index>[<expr><name>CTF_K_FLOAT</name></expr>]</index></name> <operator>+</operator> <name><name>pop</name><index>[<expr><name>CTF_K_FUNCTION</name></expr>]</index></name> <operator>+</operator>
<name><name>pop</name><index>[<expr><name>CTF_K_TYPEDEF</name></expr>]</index></name> <operator>+</operator> <name><name>pop</name><index>[<expr><name>CTF_K_POINTER</name></expr>]</index></name> <operator>+</operator> <name><name>pop</name><index>[<expr><name>CTF_K_VOLATILE</name></expr>]</index></name> <operator>+</operator>
<name><name>pop</name><index>[<expr><name>CTF_K_CONST</name></expr>]</index></name> <operator>+</operator> <name><name>pop</name><index>[<expr><name>CTF_K_RESTRICT</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_txlate</name></name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name></name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_txlate</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAGAIN</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_txlate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_txlate</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <name>tbuf</name></expr>;</init> <condition><expr><name>tp</name> <operator>&lt;</operator> <name>tend</name></expr>;</condition> <incr><expr><name>xp</name><operator>++</operator></expr><operator>,</operator> <expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>kind</name> <init>= <expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>vlen</name> <init>= <expr><call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>vbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>cte</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hep</name> <operator>=</operator> <call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cte</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cte</name><operator>.</operator><name>cte_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name> <operator>=</operator> <call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_array_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>vlen</name> <operator>+</operator> <operator>(</operator><name>vlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_define</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator>
<name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_member_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_lmember_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlstructs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_define</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator>
<name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_member_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_lmember_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlunions</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_define</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_enum_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_FORWARD</name></expr>:</case>




<switch>switch <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_insert</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><call><name>CTF_TYPE_ISCHILD</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>child</name> <operator>&amp;&amp;</operator>
<call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[
<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ctf_hash_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>,
<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ECTF_STRTAB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<default>default:</default>
<expr_stmt><expr><name>vbytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>xp</name> <operator>=</operator> <operator>(</operator><name>uint_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>ctf_type_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name> <operator>+</operator> <name>vbytes</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"%lu total types processed\n"</literal></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"%u enum names hashed\n"</literal></expr></argument>, <argument><expr><call><name>ctf_hash_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"%u struct names hashed (%d long)\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_hash_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nlstructs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"%u union names hashed (%d long)\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_hash_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nlunions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"%u base type names hashed\n"</literal></expr></argument>,
<argument><expr><call><name>ctf_hash_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[<expr><name>id</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>LCTF_INDEX_TO_TYPEPTR</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_TYPEDEF</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>CTF_TYPE_ISCHILD</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>child</name> <operator>&amp;&amp;</operator>
<call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[
<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_bufopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>ctfsect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>symsect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ctf_sect_t</name> <modifier>*</modifier></type><name>strsect</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_preamble_t</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_header_t</name></type> <name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>hdrsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctfsect</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>symsect</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>strsect</name> <operator>==</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>symsect</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>symsect</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf32_Sym</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name><name>symsect</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>!=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf64_Sym</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_SYMTAB</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>symsect</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>symsect</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_SYMBAD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strsect</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>strsect</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_STRBAD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_preamble_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_NOCTFBUF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_preamble_t</name> <operator>*</operator><operator>)</operator><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"ctf_bufopen: magic=0x%x version=%u\n"</literal></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>ctp_magic</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>ctp_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ctp_magic</name></name> <operator>!=</operator> <name>CTF_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_NOCTFBUF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ctp_version</name></name> <operator>==</operator> <name>CTF_VERSION_2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_NOCTFBUF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrsz</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>ctp_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_header_v1_t</name> <modifier>*</modifier></type><name>h1p</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>ctf_header_v1_t</name> <operator>*</operator><operator>)</operator><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_v1_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_NOCTFBUF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>.</operator><name>cth_preamble</name></name> <operator>=</operator> <name><name>h1p</name><operator>-&gt;</operator><name>cth_preamble</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>.</operator><name>cth_objtoff</name></name> <operator>=</operator> <name><name>h1p</name><operator>-&gt;</operator><name>cth_objtoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>.</operator><name>cth_funcoff</name></name> <operator>=</operator> <name><name>h1p</name><operator>-&gt;</operator><name>cth_funcoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>.</operator><name>cth_typeoff</name></name> <operator>=</operator> <name><name>h1p</name><operator>-&gt;</operator><name>cth_typeoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>.</operator><name>cth_stroff</name></name> <operator>=</operator> <name><name>h1p</name><operator>-&gt;</operator><name>cth_stroff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>.</operator><name>cth_strlen</name></name> <operator>=</operator> <name><name>h1p</name><operator>-&gt;</operator><name>cth_strlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdrsz</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_header_v1_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CTFVERS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>hp</name><operator>.</operator><name>cth_stroff</name></name> <operator>+</operator> <name><name>hp</name><operator>.</operator><name>cth_strlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"ctf_bufopen: uncompressed size=%lu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>.</operator><name>cth_lbloff</name></name> <operator>&gt;</operator> <name>size</name> <operator>||</operator> <name><name>hp</name><operator>.</operator><name>cth_objtoff</name></name> <operator>&gt;</operator> <name>size</name> <operator>||</operator>
<name><name>hp</name><operator>.</operator><name>cth_funcoff</name></name> <operator>&gt;</operator> <name>size</name> <operator>||</operator> <name><name>hp</name><operator>.</operator><name>cth_typeoff</name></name> <operator>&gt;</operator> <name>size</name> <operator>||</operator>
<name><name>hp</name><operator>.</operator><name>cth_stroff</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>.</operator><name>cth_lbloff</name></name> <operator>&gt;</operator> <name><name>hp</name><operator>.</operator><name>cth_objtoff</name></name> <operator>||</operator>
<name><name>hp</name><operator>.</operator><name>cth_objtoff</name></name> <operator>&gt;</operator> <name><name>hp</name><operator>.</operator><name>cth_funcoff</name></name> <operator>||</operator>
<name><name>hp</name><operator>.</operator><name>cth_funcoff</name></name> <operator>&gt;</operator> <name><name>hp</name><operator>.</operator><name>cth_typeoff</name></name> <operator>||</operator>
<name><name>hp</name><operator>.</operator><name>cth_typeoff</name></name> <operator>&gt;</operator> <name><name>hp</name><operator>.</operator><name>cth_stroff</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hp</name><operator>.</operator><name>cth_lbloff</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hp</name><operator>.</operator><name>cth_objtoff</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>hp</name><operator>.</operator><name>cth_funcoff</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hp</name><operator>.</operator><name>cth_typeoff</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>.</operator><name>cth_flags</name></name> <operator>&amp;</operator> <name>CTF_F_COMPRESS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>srclen</name></decl>, <decl><type ref="prev"/><name>dstlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_zopen</name><argument_list>(<argument><expr><name>errp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>base</name> <operator>=</operator> <call><name>ctf_data_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>hdrsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_ZALLOC</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_data</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>hdrsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ctf_preamble_t</name> <operator>*</operator><operator>)</operator><name>base</name><operator>)</operator><operator>-&gt;</operator><name>ctp_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CTF_F_COMPRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <name>hdrsz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_data</name></name> <operator>+</operator> <name>hdrsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srclen</name> <operator>=</operator> <name><name>ctfsect</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>-</operator> <name>hdrsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>z_uncompress</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"zlib inflate err: %s\n"</literal></expr></argument>, <argument><expr><call><name>z_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>hdrsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_DECOMPRESS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstlen</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"zlib inflate short -- got %lu of %lu "</literal>
<literal type="string">"bytes\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>dstlen</name></expr></argument>, <argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>hdrsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_data_protect</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>hdrsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ctfsect</name><operator>-&gt;</operator><name>cts_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <name>hdrsz</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>=</operator> <name><name>hp</name><operator>.</operator><name>cth_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_fileops</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctf_fileops</name><index>[<expr><name><name>hp</name><operator>.</operator><name>cth_version</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>ctfsect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>symsect</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>symsect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>strsect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <call><name>ctf_strdup</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>_CTF_NULLSTR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>_CTF_NULLSTR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>=</operator> <name>_CTF_NULLSTR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><name>CTF_STRTAB_0</name></expr>]</index></name><operator>.</operator><name>cts_strs</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name><name>hp</name><operator>.</operator><name>cth_stroff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><name>CTF_STRTAB_0</name></expr>]</index></name><operator>.</operator><name>cts_len</name> <operator>=</operator> <name><name>hp</name><operator>.</operator><name>cth_strlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strsect</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><name>CTF_STRTAB_1</name></expr>]</index></name><operator>.</operator><name>cts_strs</name> <operator>=</operator> <name><name>strsect</name><operator>-&gt;</operator><name>cts_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><name>CTF_STRTAB_1</name></expr>]</index></name><operator>.</operator><name>cts_len</name> <operator>=</operator> <name><name>strsect</name><operator>-&gt;</operator><name>cts_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_size</name></name> <operator>=</operator> <name>size</name> <operator>+</operator> <name>hdrsz</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>.</operator><name>cth_parlabel</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parlabel</name></name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>hp</name><operator>.</operator><name>cth_parlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>.</operator><name>cth_parname</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parname</name></name> <operator>=</operator> <call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>hp</name><operator>.</operator><name>cth_parname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"ctf_bufopen: parent name %s (label %s)\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parname</name></name></expr> ?</condition><then> <expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parname</name></name></expr> </then><else>: <expr><literal type="string">"&lt;NULL&gt;"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parlabel</name></name></expr> ?</condition><then> <expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parlabel</name></name></expr> </then><else>: <expr><literal type="string">"&lt;NULL&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>symsect</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name> <operator>=</operator> <name><name>symsect</name><operator>-&gt;</operator><name>cts_size</name></name> <operator>/</operator> <name><name>symsect</name><operator>-&gt;</operator><name>cts_entsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name></name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>init_symtab</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hp</name></expr></argument>, <argument><expr><name>symsect</name></expr></argument>, <argument><expr><name>strsect</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>init_types</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_open_errno</name><argument_list>(<argument><expr><name>errp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name> <operator>=</operator> <literal type="string">"struct"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctl_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name> <operator>=</operator> <literal type="string">"union"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctl_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name> <operator>=</operator> <literal type="string">"enum"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ctl_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name> <operator>=</operator> <name>_CTF_NULLSTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ctl_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ctl_prefix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ctl_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_lookups</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ctl_hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>symsect</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>symsect</name><operator>-&gt;</operator><name>cts_entsize</name></name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>Elf64_Sym</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>CTF_MODEL_LP64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>CTF_MODEL_ILP32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_setmodel</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>CTF_MODEL_NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>

<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_dup</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name></type> <name>ctfsect</name></decl>, <decl><type ref="prev"/><name>symsect</name></decl>, <decl><type ref="prev"/><name>strsect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_sect_t</name> <modifier>*</modifier></type><name>ctp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>symp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>symbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <name>symbuf</name> <operator>=</operator> <name>strbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofp</name><operator>-&gt;</operator><name>ctf_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctfsect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <call><name>ctf_data_alloc</name><argument_list>(<argument><expr><name><name>ctfsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_MMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>ctfsect</name><operator>.</operator><name>cts_data</name></name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name><name>ctfsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_data_protect</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name><name>ctfsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>cbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctfsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ctp</name> <operator>=</operator> <operator>&amp;</operator><name>ctfsect</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ofp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofp</name><operator>-&gt;</operator><name>ctf_symtab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>symsect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>symbuf</name> <operator>=</operator> <call><name>ctf_data_alloc</name><argument_list>(<argument><expr><name><name>symsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>symbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_MMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>symsect</name><operator>.</operator><name>cts_data</name></name></expr></argument>, <argument><expr><name>symbuf</name></expr></argument>, <argument><expr><name><name>symsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_data_protect</name><argument_list>(<argument><expr><name>symbuf</name></expr></argument>, <argument><expr><name><name>symsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>symbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symp</name> <operator>=</operator> <operator>&amp;</operator><name>symsect</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>symp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ofp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofp</name><operator>-&gt;</operator><name>ctf_strtab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strsect</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_sect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strbuf</name> <operator>=</operator> <call><name>ctf_data_alloc</name><argument_list>(<argument><expr><name><name>strsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_MMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name><name>strsect</name><operator>.</operator><name>cts_data</name></name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name><name>strsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_data_protect</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name><name>strsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_data</name></name> <operator>=</operator> <name>strbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strsect</name><operator>.</operator><name>cts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>strp</name> <operator>=</operator> <operator>&amp;</operator><name>strsect</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>strp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>ctf_bufopen</name><argument_list>(<argument><expr><name>ctp</name></expr></argument>, <argument><expr><name>symp</name></expr></argument>, <argument><expr><name>strp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_MMAP</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name><name>ctfsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>symbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><name>symbuf</name></expr></argument>, <argument><expr><name><name>symsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>strbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name><name>strsect</name><operator>.</operator><name>cts_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ctf_close</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_dtdef_t</name> <modifier>*</modifier></type><name>dtd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ntd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"ctf_close(%p) refcnt=%u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>dtd</name> <operator>=</operator> <call><name>ctf_list_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dtdefs</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>dtd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dtd</name> <operator>=</operator> <name>ntd</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ntd</name> <operator>=</operator> <call><name>ctf_list_prev</name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_dtd_delete</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthash</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dthashlen</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_dtdef_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_MMAP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_sect_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>_CTF_NULLSTR</name> <operator>&amp;&amp;</operator>
<name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>_CTF_NULLSTR</name> <operator>&amp;&amp;</operator>
<name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_symtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>_CTF_NULLSTR</name> <operator>&amp;&amp;</operator>
<name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_strtab</name><operator>.</operator><name>cts_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_base</name></name> <operator>!=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_data</name></name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_base</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_data_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_base</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_sxlate</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_nsyms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_txlate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_txlate</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_structs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_unions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_enums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_file_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>ctf_file_t</name> <modifier>*</modifier></type>
<name>ctf_parent_file</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ctf_parent_name</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_parname</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ctf_import</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>pfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fp</name> <operator>==</operator> <name>pfp</name> <operator>||</operator> <operator>(</operator><name>pfp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pfp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pfp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pfp</name><operator>-&gt;</operator><name>ctf_dmodel</name></name> <operator>!=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_DMODEL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_close</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pfp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>|=</operator> <name>LCTF_CHILD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfp</name><operator>-&gt;</operator><name>ctf_refcnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_parent</name></name> <operator>=</operator> <name>pfp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_setmodel</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_dmodel_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name>_libctf_models</name></expr>;</init> <condition><expr><name><name>dp</name><operator>-&gt;</operator><name>ctd_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>ctd_code</name></name> <operator>==</operator> <name>model</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_getmodel</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name><operator>-&gt;</operator><name>ctd_code</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ctf_setspecific</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_specific</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ctf_getspecific</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_specific</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
