<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_decl.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>ctf_decl_init</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_decl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CTF_PREC_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CTF_PREC_BASE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_qualp</name></name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_ordp</name></name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_end</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ctf_decl_fini</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_decl_node_t</name> <modifier>*</modifier></type><name>cdp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ndp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CTF_PREC_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>cdp</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>cdp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cdp</name> <operator>=</operator> <name>ndp</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ndp</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>cdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name>cdp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_decl_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ctf_decl_push</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_decl_node_t</name> <modifier>*</modifier></type><name>cdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_decl_prec_t</name></type> <name>prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_qual</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>ar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_err</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_errno</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_array_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_decl_push</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ar</name><operator>.</operator><name>ctr_nelems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>CTF_PREC_ARRAY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_decl_push</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_push</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>CTF_PREC_FUNCTION</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_push</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>CTF_PREC_POINTER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_push</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>cd_qualp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_qual</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cdp</name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_decl_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_err</name></name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cdp</name><operator>-&gt;</operator><name>cd_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cdp</name><operator>-&gt;</operator><name>cd_kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cdp</name><operator>-&gt;</operator><name>cd_n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_nodes</name><index>[<expr><name>prec</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_order</name><index>[<expr><name>prec</name></expr>]</index></name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>cd_ordp</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;</operator> <name><name>cd</name><operator>-&gt;</operator><name>cd_qualp</name></name> <operator>&amp;&amp;</operator> <name>prec</name> <operator>&lt;</operator> <name>CTF_PREC_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_qualp</name></name> <operator>=</operator> <name>prec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CTF_K_ARRAY</name> <operator>||</operator> <operator>(</operator><name>is_qual</name> <operator>&amp;&amp;</operator> <name>prec</name> <operator>==</operator> <name>CTF_PREC_BASE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_list_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_nodes</name><index>[<expr><name>prec</name></expr>]</index></name></expr></argument>, <argument><expr><name>cdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_nodes</name><index>[<expr><name>prec</name></expr>]</index></name></expr></argument>, <argument><expr><name>cdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ctf_decl_sprintf</name><parameter_list>(<parameter><decl><type><name>ctf_decl_t</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>cd</name><operator>-&gt;</operator><name>cd_end</name></name> <operator>-</operator> <name><name>cd</name><operator>-&gt;</operator><name>cd_ptr</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_ptr</name></name> <operator>+=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cd_len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
