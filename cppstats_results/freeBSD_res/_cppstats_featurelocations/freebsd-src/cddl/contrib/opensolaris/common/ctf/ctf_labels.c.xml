<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_labels.c">

























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>extract_label_info</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_lblent_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctl</name></decl></parameter>, <parameter><decl><type><name>uint_t</name> <modifier>*</modifier></type><name>num_labels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_header_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>&lt;</operator> <name>CTF_VERSION_2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOTSUP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_header_t</name> <operator>*</operator><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_data</name><operator>.</operator><name>cts_data</name></name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>ctl</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_lblent_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_buf</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cth_lbloff</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_labels</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cth_objtoff</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>cth_lbloff</name></name><operator>)</operator> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_lblent_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ctf_label_topmost</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lblent_t</name> <modifier>*</modifier></type><name>ctlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>num_labels</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extract_label_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctlp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_labels</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_labels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOLABELDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>ctf_strraw</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>ctlp</name> <operator>+</operator> <name>num_labels</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>ctl_label</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_label_iter</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_label_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lblent_t</name> <modifier>*</modifier></type><name>ctlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_labels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_lblinfo_t</name></type> <name>linfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>extract_label_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctlp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_labels</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_labels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOLABELDATA</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_labels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ctlp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lname</name> <operator>=</operator> <call><name>ctf_strraw</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ctlp</name><operator>-&gt;</operator><name>ctl_label</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"failed to decode label %u with "</literal>
<literal type="string">"typeidx %u\n"</literal></expr></argument>, <argument><expr><name><name>ctlp</name><operator>-&gt;</operator><name>ctl_label</name></name></expr></argument>, <argument><expr><name><name>ctlp</name><operator>-&gt;</operator><name>ctl_typeidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>linfo</name><operator>.</operator><name>ctb_typeidx</name></name> <operator>=</operator> <name><name>ctlp</name><operator>-&gt;</operator><name>ctl_typeidx</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>lname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linfo</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>linfo_cb_arg</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lca_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_lblinfo_t</name> <modifier>*</modifier></type><name>lca_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>linfo_cb_arg_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>label_info_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_lblinfo_t</name> <modifier>*</modifier></type><name>linfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>lname</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>linfo_cb_arg_t</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>lca_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>linfo_cb_arg_t</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>lca_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>linfo</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>linfo_cb_arg_t</name> <operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>lca_info</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_lblinfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_label_info</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl></parameter>, <parameter><decl><type><name>ctf_lblinfo_t</name> <modifier>*</modifier></type><name>linfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linfo_cb_arg_t</name></type> <name>cb_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb_arg</name><operator>.</operator><name>lca_name</name></name> <operator>=</operator> <name>lname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_arg</name><operator>.</operator><name>lca_info</name></name> <operator>=</operator> <name>linfo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>ctf_label_iter</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>label_info_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NOLABEL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
