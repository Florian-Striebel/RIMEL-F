<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_hash.c">


























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>ident</name> <cpp:literal>"%Z%%M% %I% %E% SMI"</cpp:literal></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ushort_t</name></type> <name><name>_CTF_EMPTY</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>ctf_hash_create</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>nelems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nelems</name> <operator>&gt;</operator> <name>USHRT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOVERFLOW</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>nelems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_hash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name> <operator>=</operator> <operator>(</operator><name>ushort_t</name> <operator>*</operator><operator>)</operator><name>_CTF_EMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name> <operator>=</operator> <literal type="number">211</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name> <operator>=</operator> <name>nelems</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_free</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name></name> <operator>=</operator> <call><name>ctf_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_helem_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_chains</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_hash_destroy</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EAGAIN</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_helem_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint_t</name></type>
<name>ctf_hash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name></expr> ?</condition><then> <expr><name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ulong_t</name></type>
<name>ctf_hash_compute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><name>key</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>key</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>h</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ctf_hash_insert</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_strs_t</name> <modifier>*</modifier></type><name>ctsp</name> <init>= <expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><call><name>CTF_NAME_STID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_strs</name></name> <operator>+</operator> <call><name>CTF_NAME_OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name> <init>= <expr><operator>&amp;</operator><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name><index>[<expr><name><name>hp</name><operator>-&gt;</operator><name>h_free</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>h_free</name></name> <operator>&gt;=</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOVERFLOW</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_strs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ECTF_STRTAB</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctsp</name><operator>-&gt;</operator><name>cts_len</name></name> <operator>&lt;=</operator> <call><name>CTF_NAME_OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ECTF_BADNAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hep</name><operator>-&gt;</operator><name>h_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>ctf_hash_compute</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hep</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_free</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ctf_hash_define</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ushort_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name> <init>= <expr><call><name>ctf_hash_lookup</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_hash_insert</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hep</name><operator>-&gt;</operator><name>h_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ctf_helem_t</name> <modifier>*</modifier></type>
<name>ctf_hash_lookup</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_helem_t</name> <modifier>*</modifier></type><name>hep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_strs_t</name> <modifier>*</modifier></type><name>ctsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong_t</name></type> <name>h</name> <init>= <expr><call><name>ctf_hash_compute</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>hep</name><operator>-&gt;</operator><name>h_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hep</name> <operator>=</operator> <operator>&amp;</operator><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_str</name><index>[<expr><call><name>CTF_NAME_STID</name><argument_list>(<argument><expr><name><name>hep</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>ctsp</name><operator>-&gt;</operator><name>cts_strs</name></name> <operator>+</operator> <call><name>CTF_NAME_OFFSET</name><argument_list>(<argument><expr><name><name>hep</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>hep</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ctf_hash_destroy</name><parameter_list>(<parameter><decl><type><name>ctf_hash_t</name> <modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ushort_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_buckets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_free</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_helem_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_nelems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>h_chains</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
