<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/cddl/contrib/opensolaris/common/ctf/ctf_types.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctf_impl.h&gt;</cpp:file></cpp:include>

<function><type><name>ssize_t</name></type>
<name>ctf_get_ctt_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>incrementp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>&gt;</operator> <name>CTF_VERSION_1</name> <operator>&amp;&amp;</operator>
<name><name>tp</name><operator>-&gt;</operator><name>ctt_size</name></name> <operator>==</operator> <name>CTF_LSIZE_SENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>CTF_TYPE_LSIZE</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>increment</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_type_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ctt_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>increment</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>ctf_stype_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sizep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sizep</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>incrementp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>incrementp</name> <operator>=</operator> <name>increment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_member_iter</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctf_member_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <name>CTF_K_UNION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTSOU</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_member_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ctf_member_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>mp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name></expr></argument>,
<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lmember_t</name> <modifier>*</modifier></type><name>lmp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ctf_lmember_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>lmp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_type</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><call><name>CTF_LMEM_OFFSET</name><argument_list>(<argument><expr><name>lmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_enum_iter</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctf_enum_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_enum_t</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_K_ENUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTENUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_enum_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_value</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_type_iter</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_type_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_typemax</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>child</name> <init>= <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name>max</name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>LCTF_INDEX_TO_TYPEPTR</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CTF_INFO_ISROOT</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>ctf_id_t</name></type>
<name>ctf_type_resolve</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>prev</name> <init>= <expr><name>type</name></expr></init></decl>, <decl><type ref="prev"/><name>otype</name> <init>= <expr><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name> <operator>==</operator> <name>type</name> <operator>||</operator> <name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name> <operator>==</operator> <name>otype</name> <operator>||</operator>
<name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name> <operator>==</operator> <name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_dprintf</name><argument_list>(<argument><expr><literal type="string">"type %ld cycle detected\n"</literal></expr></argument>, <argument><expr><name>otype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_CORRUPT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ctf_type_qlname</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_decl_t</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_decl_node_t</name> <modifier>*</modifier></type><name>cdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_decl_prec_t</name></type> <name>prec</name></decl>, <decl><type ref="prev"/><name>lp</name></decl>, <decl><type ref="prev"/><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_decl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctf_decl_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>.</operator><name>cd_err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_decl_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>cd</name><operator>.</operator><name>cd_err</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>cd_order</name><index>[<expr><name>CTF_PREC_POINTER</name></expr>]</index></name> <operator>&gt;</operator> <name>CTF_PREC_POINTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arr</name> <operator>=</operator> <name><name>cd</name><operator>.</operator><name>cd_order</name><index>[<expr><name>CTF_PREC_ARRAY</name></expr>]</index></name> <operator>&gt;</operator> <name>CTF_PREC_ARRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name> <operator>=</operator> <ternary><condition><expr><name>arr</name></expr> ?</condition><then> <expr><name>CTF_PREC_ARRAY</name></expr> </then><else>: <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name>CTF_PREC_POINTER</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name>CTF_PREC_POINTER</name></expr> </then><else>: <expr><ternary><condition><expr><name>arr</name></expr> ?</condition><then> <expr><name>CTF_PREC_ARRAY</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CTF_K_POINTER</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>prec</name> <operator>=</operator> <name>CTF_PREC_BASE</name></expr>;</init> <condition><expr><name>prec</name> <operator>&lt;</operator> <name>CTF_PREC_MAX</name></expr>;</condition> <incr><expr><name>prec</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>cdp</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cd</name><operator>.</operator><name>cd_nodes</name><index>[<expr><name>prec</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>cdp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cdp</name> <operator>=</operator> <call><name>ctf_list_next</name><argument_list>(<argument><expr><name>cdp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>rfp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name> <init>=
<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfp</name></expr></argument>, <argument><expr><name><name>cdp</name><operator>-&gt;</operator><name>cd_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name>CTF_K_POINTER</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>!=</operator> <name>CTF_K_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lp</name> <operator>==</operator> <name>prec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>cdp</name><operator>-&gt;</operator><name>cd_kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>qname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s`"</literal></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"[%u]"</literal></expr></argument>, <argument><expr><name><name>cdp</name><operator>-&gt;</operator><name>cd_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_FORWARD</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"struct "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s`"</literal></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"union "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s`"</literal></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"enum "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s`"</literal></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"volatile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">"restrict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>cdp</name><operator>-&gt;</operator><name>cd_kind</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>prec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ctf_decl_sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>cd</name><operator>.</operator><name>cd_len</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ECTF_NAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ctf_decl_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>cd</name><operator>.</operator><name>cd_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>ctf_type_lname</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_type_qlname</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>ctf_type_name</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rv</name> <init>= <expr><call><name>ctf_type_qlname</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>rv</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rv</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ctf_type_qname</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rv</name> <init>= <expr><call><name>ctf_type_qlname</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>rv</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rv</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>ssize_t</name></type>
<name>ctf_type_size</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>ar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name><operator>-&gt;</operator><name>ctd_pointer</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name><operator>-&gt;</operator><name>ctd_int</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name> <operator>||</operator>
<operator>(</operator><name>size</name> <operator>=</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size</name> <operator>*</operator> <name><name>ar</name><operator>.</operator><name>ctr_nelems</name></name><operator>)</operator></expr>;</return>

<default>default:</default>
<return>return <expr><operator>(</operator><call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>ssize_t</name></type>
<name>ctf_type_align</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<case>case <expr><name>CTF_K_FUNCTION</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name><operator>-&gt;</operator><name>ctd_pointer</name></name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>ctf_type_align</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name> <init>= <expr><call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>align</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vmp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vmp</name> <operator>=</operator> <operator>(</operator><name>uchar_t</name> <operator>*</operator><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTF_K_STRUCT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator>
<name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_member_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>vmp</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>mp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>am</name> <init>= <expr><call><name>ctf_type_align</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>align</name></expr></argument>, <argument><expr><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lmember_t</name> <modifier>*</modifier></type><name>lmp</name> <init>= <expr><name>vmp</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>lmp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>am</name> <init>= <expr><call><name>ctf_type_align</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>align</name></expr></argument>, <argument><expr><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>align</name><operator>)</operator></expr>;</return>
</block_content>}</block>

<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_dmodel</name><operator>-&gt;</operator><name>ctd_int</name></name><operator>)</operator></expr>;</return>

<default>default:</default>
<return>return <expr><operator>(</operator><call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_type_kind</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>ctf_id_t</name></type>
<name>ctf_type_reference</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<case>case <expr><name>CTF_K_TYPEDEF</name></expr>:</case>
<case>case <expr><name>CTF_K_VOLATILE</name></expr>:</case>
<case>case <expr><name>CTF_K_CONST</name></expr>:</case>
<case>case <expr><name>CTF_K_RESTRICT</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>ctt_type</name></name><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTREF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><name>ctf_id_t</name></type>
<name>ctf_type_pointer</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>ntype</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ntype</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>ntype</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ntype</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>ctf_ptrtab</name><index>[<expr><call><name>CTF_TYPE_TO_INDEX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>CTF_INDEX_TO_TYPE</name><argument_list>(<argument><expr><name>ntype</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>ctf_flags</name></name> <operator>&amp;</operator> <name>LCTF_CHILD</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTYPE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_type_encoding</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctf_encoding_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_format</name></name> <operator>=</operator> <call><name>CTF_INT_ENCODING</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_offset</name></name> <operator>=</operator> <call><name>CTF_INT_OFFSET</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_bits</name></name> <operator>=</operator> <call><name>CTF_INT_BITS</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_format</name></name> <operator>=</operator> <call><name>CTF_FP_ENCODING</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_offset</name></name> <operator>=</operator> <call><name>CTF_FP_OFFSET</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_bits</name></name> <operator>=</operator> <call><name>CTF_FP_BITS</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTINTFP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ctf_type_cmp</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>lfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ltype</name></decl></parameter>, <parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>rfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>rtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ltype</name> <operator>&lt;</operator> <name>rtype</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ltype</name> <operator>&gt;</operator> <name>rtype</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lfp</name> <operator>==</operator> <name>rfp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CTF_TYPE_ISPARENT</name><argument_list>(<argument><expr><name>ltype</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>lfp</name><operator>-&gt;</operator><name>ctf_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lfp</name> <operator>=</operator> <name><name>lfp</name><operator>-&gt;</operator><name>ctf_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CTF_TYPE_ISPARENT</name><argument_list>(<argument><expr><name>rtype</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>rfp</name><operator>-&gt;</operator><name>ctf_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rfp</name> <operator>=</operator> <name><name>rfp</name><operator>-&gt;</operator><name>ctf_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lfp</name> <operator>&lt;</operator> <name>rfp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lfp</name> <operator>&gt;</operator> <name>rfp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>ctf_type_compat</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>lfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>ltype</name></decl></parameter>,
<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>rfp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>rtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>ltp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_encoding_t</name></type> <name>le</name></decl>, <decl><type ref="prev"/><name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctf_arinfo_t</name></type> <name>la</name></decl>, <decl><type ref="prev"/><name>ra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>lkind</name></decl>, <decl><type ref="prev"/><name>rkind</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctf_type_cmp</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>, <argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ltype</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lkind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtype</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rkind</name> <operator>=</operator> <call><name>ctf_type_kind</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lkind</name> <operator>!=</operator> <name>rkind</name> <operator>||</operator>
<operator>(</operator><name>ltp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>rtp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name><name>ltp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name><name>rtp</name><operator>-&gt;</operator><name>ctt_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>lkind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTF_K_INTEGER</name></expr>:</case>
<case>case <expr><name>CTF_K_FLOAT</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>le</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ctf_type_encoding</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>re</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>bcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>le</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ctf_encoding_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>CTF_K_POINTER</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ctf_type_compat</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rfp</name></expr></argument>, <argument><expr><call><name>ctf_type_reference</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>CTF_K_ARRAY</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ctf_array_info</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>la</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ctf_array_info</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ra</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>la</name><operator>.</operator><name>ctr_nelems</name></name> <operator>==</operator> <name><name>ra</name><operator>.</operator><name>ctr_nelems</name></name> <operator>&amp;&amp;</operator> <call><name>ctf_type_compat</name><argument_list>(
<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name><name>la</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>, <argument><expr><name>rfp</name></expr></argument>, <argument><expr><name><name>ra</name><operator>.</operator><name>ctr_contents</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ctf_type_compat</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name><name>la</name><operator>.</operator><name>ctr_index</name></name></expr></argument>, <argument><expr><name>rfp</name></expr></argument>, <argument><expr><name><name>ra</name><operator>.</operator><name>ctr_index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>CTF_K_STRUCT</name></expr>:</case>
<case>case <expr><name>CTF_K_UNION</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ctf_type_size</name><argument_list>(<argument><expr><name>lfp</name></expr></argument>, <argument><expr><name>ltype</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ctf_type_size</name><argument_list>(<argument><expr><name>rfp</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>CTF_K_ENUM</name></expr>:</case>
<case>case <expr><name>CTF_K_FORWARD</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_ctf_member_info</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><name>ctf_membinfo_t</name> <modifier>*</modifier></type><name>mip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <name>CTF_K_UNION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTSOU</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_member_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ctf_member_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>mp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_name</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>_ctf_member_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>mip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mip</name><operator>-&gt;</operator><name>ctm_type</name></name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mip</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lmember_t</name> <modifier>*</modifier></type><name>lmp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ctf_lmember_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>lmp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_name</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>_ctf_member_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><operator>(</operator><name>ulong_t</name><operator>)</operator><call><name>CTF_LMEM_OFFSET</name><argument_list>(<argument><expr><name>lmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>mip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mip</name><operator>-&gt;</operator><name>ctm_type</name></name> <operator>=</operator> <name><name>lmp</name><operator>-&gt;</operator><name>ctlm_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mip</name><operator>-&gt;</operator><name>ctm_offset</name></name> <operator>=</operator>
<operator>(</operator><name>ulong_t</name><operator>)</operator><call><name>CTF_LMEM_OFFSET</name><argument_list>(<argument><expr><name>lmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOMEMBNAM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_member_info</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>ctf_membinfo_t</name> <modifier>*</modifier></type><name>mip</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>_ctf_member_info</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mip</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ctf_array_info</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctf_arinfo_t</name> <modifier>*</modifier></type><name>arp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_array_t</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>increment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_K_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTARRAY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ap</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_array_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_contents</name></name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cta_contents</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_index</name></name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cta_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arp</name><operator>-&gt;</operator><name>ctr_nelems</name></name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cta_nelems</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ctf_enum_name</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_enum_t</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_K_ENUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTENUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_enum_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>cte_value</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOENUMNAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_enum_value</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>ofp</name> <init>= <expr><name>fp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_enum_t</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CTF_K_ENUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOTENUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ctf_enum_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>cte_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>valp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>cte_value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_set_errno</name><argument_list>(<argument><expr><name>ofp</name></expr></argument>, <argument><expr><name>ECTF_NOENUMNAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>ctf_type_rvisit</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctf_visit_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ulong_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ctf_id_t</name></type> <name>otype</name> <init>= <expr><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_type_t</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_t</name></type> <name>kind</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>ctf_type_resolve</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CTF_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tp</name> <operator>=</operator> <call><name>ctf_lookup_by_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>CTF_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>otype</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>LCTF_INFO_KIND</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>!=</operator> <name>CTF_K_STRUCT</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <name>CTF_K_UNION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ctf_get_ctt_size</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>ctf_version</name></name> <operator>==</operator> <name>CTF_VERSION_1</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <name>CTF_LSTRUCT_THRESH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_member_t</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ctf_member_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>mp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>ctf_type_rvisit</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_type</name></name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>ctm_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>offset</name> <operator>+</operator> <name><name>mp</name><operator>-&gt;</operator><name>ctm_offset</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ctf_lmember_t</name> <modifier>*</modifier></type><name>lmp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ctf_lmember_t</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tp</name> <operator>+</operator> <name>increment</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name>LCTF_INFO_VLEN</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>ctt_info</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>lmp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>ctf_type_rvisit</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_type</name></name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>ctf_strptr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>lmp</name><operator>-&gt;</operator><name>ctlm_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>offset</name> <operator>+</operator> <operator>(</operator><name>ulong_t</name><operator>)</operator><call><name>CTF_LMEM_OFFSET</name><argument_list>(<argument><expr><name>lmp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>ctf_type_visit</name><parameter_list>(<parameter><decl><type><name>ctf_file_t</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ctf_id_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ctf_visit_f</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ctf_type_rvisit</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
