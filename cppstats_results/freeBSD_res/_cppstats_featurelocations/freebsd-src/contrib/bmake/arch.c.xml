<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/arch.c">


















































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ar.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>ar_hdr</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_date</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_uid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_gid</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_mode</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_size</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARFMAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARFMAG</name></cpp:macro> <cpp:value>"`\n"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar_fmag</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RANLIB_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NO_RANLIB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ranlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utime.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: arch.c,v 1.205 2021/12/12 22:41:47 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>List</name></name></type> <name>ArchList</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ListNode</name></name></type> <name>ArchListNode</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ArchList</name></type> <name>archives</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>Arch</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashTable</name></type> <name>members</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fnametab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fnamesize</name></decl>;</decl_stmt>
}</block></struct></type> <name>Arch</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>ArchFindMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ELF__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVR4ARCHIVES</name></cpp:macro></cpp:define>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ArchSVR4Entry</name><parameter_list>(<parameter><decl><type><name>Arch</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_NAME</name></cpp:macro> <cpp:value>_ar_name.ar_name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_FMAG</name></cpp:macro> <cpp:value>_ar_name.ar_fmag</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SARMAG</name></cpp:macro> <cpp:value>SAIAMAG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARMAG</name></cpp:macro> <cpp:value>AIAMAG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARFMAG</name></cpp:macro> <cpp:value>AIAFMAG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AR_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_NAME</name></cpp:macro> <cpp:value>ar_name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AR_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_DATE</name></cpp:macro> <cpp:value>ar_date</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AR_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_SIZE</name></cpp:macro> <cpp:value>ar_size</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AR_FMAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_FMAG</name></cpp:macro> <cpp:value>ar_fmag</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARMAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARMAG</name></cpp:macro> <cpp:value>"!&lt;arch&gt;\n"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SARMAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SARMAG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ArchFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Arch</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>ap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashIter</name></type> <name>hi</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>HashIter_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>HashIter_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hi</name><operator>.</operator><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fnametab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>FullName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len3</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><name>len1</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len3</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>len1</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>len1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>len3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>len1</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len3</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>bool</name></type>
<name>Arch_ParseArchive</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type><name>gns</name></decl></parameter>, <parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFStr</name></type> <name>libName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FStr</name></type> <name>mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>saveChar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>expandLibName</name></decl>;</decl_stmt>



<expr_stmt><expr><name>libName</name> <operator>=</operator> <call><name>MFStr_InitRefer</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expandLibName</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>libName</name><operator>.</operator><name>str</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nested_p</name> <init>= <expr><name>cp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FStr</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isError</name></decl>;</decl_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_p</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>,
<argument><expr><name>VARE_UNDEFERR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isError</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>str</name></name> <operator>==</operator> <name>var_Error</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FStr_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isError</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expandLibName</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>nested_p</name> <operator>-</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expandLibName</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expanded</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Subst</name><argument_list>(<argument><expr><name><name>libName</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>VARE_UNDEFERR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expanded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>libName</name> <operator>=</operator> <call><name>MFStr_InitOwn</name><argument_list>(<argument><expr><name>expanded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>





<decl_stmt><decl><type><name>bool</name></type> <name>doSubst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pp_skip_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>FStr_InitRefer</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ch_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>FStr</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nested_p</name> <init>= <expr><name>cp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_p</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>,
<argument><expr><name>VARE_UNDEFERR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isError</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>str</name></name> <operator>==</operator> <name>var_Error</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FStr_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isError</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>doSubst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>nested_p</name> <operator>-</operator> <name>cp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>







<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Parse_Error</name><argument_list>(<argument><expr><name>PARSE_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"No closing parenthesis "</literal>
<literal type="string">"in archive specification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name><name>mem</name><operator>.</operator><name>str</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>saveChar</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>














<if_stmt><if>if <condition>(<expr><name>doSubst</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>expandedMem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unexpandedMem</name> <init>= <expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Subst</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>VARE_UNDEFERR</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>expandedMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>FStr_InitOwn</name><argument_list>(<argument><expr><name>expandedMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>fullName</name> <operator>=</operator> <call><name>FullName</name><argument_list>(<argument><expr><name><name>libName</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>fullName</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>unexpandedMem</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>gn</name> <operator>=</operator> <call><name>Targ_GetNode</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OP_ARCHV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>gns</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>Arch_ParseArchive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>gns</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Dir_HasWildcards</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StringList</name></type> <name>members</name> <init>= <expr><name>LST_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SearchPath_Expand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirSearchPath</name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>members</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>member</name> <init>= <expr><call><name>Lst_Dequeue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>members</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name> <init>= <expr><call><name>FullName</name><argument_list>(<argument><expr><name><name>libName</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gn</name> <operator>=</operator> <call><name>Targ_GetNode</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OP_ARCHV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>gns</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullname</name> <init>= <expr><call><name>FullName</name><argument_list>(<argument><expr><name><name>libName</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>gn</name> <operator>=</operator> <call><name>Targ_GetNode</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OP_ARCHV</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>gns</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>FStr_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>saveChar</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>MFStr_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>libName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pp_skip_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type>
<name>ArchStatMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>addToCache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_MAX_NAME_LEN</name></cpp:macro> <cpp:value>(sizeof arh.ar_name - 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><name>SARMAG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ArchListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Arch</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name></type> <name>arh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>memName</name><index>[<expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>






<expr_stmt><expr><name>member</name> <operator>=</operator> <call><name>str_basename</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>archives</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Arch</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>archive</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>HashTable_FindValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>members</name></name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hdr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hdr</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>copy</name><index>[<expr><name>AR_MAX_NAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>AR_MAX_NAME_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><sizeof>sizeof <name>copy</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>HashTable_FindValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>members</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>hdr</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>addToCache</name></expr>)</condition> <block>{<block_content>







<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ar_hdr</name></name></type> <name>sarh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>ArchFindMember</name><argument_list>(<argument><expr><name>archive</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sarh</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arch</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name>sarh</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>archive</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arch</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>SARMAG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>ARMAG</name></expr></argument>, <argument><expr><name>SARMAG</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bmake_strdup</name><argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>fnamesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>memName</name><index>[<expr><name>AR_MAX_NAME_LEN</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arh</name></expr></argument>, <argument><expr><sizeof>sizeof <name>arh</name></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nameend</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>arh</name><operator>.</operator><name>AR_FMAG</name></name></expr></argument>, <argument><expr><name>ARFMAG</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>arh</name><operator>.</operator><name>AR_FMAG</name></name></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badarch</name>;</goto></block_content></block></if></if_stmt>








<expr_stmt><expr><name><name>arh</name><operator>.</operator><name>AR_SIZE</name><index>[<expr><sizeof>sizeof <name><name>arh</name><operator>.</operator><name>AR_SIZE</name></name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>arh</name><operator>.</operator><name>AR_SIZE</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>memName</name></expr></argument>, <argument><expr><name><name>arh</name><operator>.</operator><name>AR_NAME</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>arh</name><operator>.</operator><name>AR_NAME</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nameend</name> <operator>=</operator> <name>memName</name> <operator>+</operator> <name>AR_MAX_NAME_LEN</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nameend</name> <operator>&gt;</operator> <name>memName</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>nameend</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nameend</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>nameend</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVR4ARCHIVES</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name><name>memName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>ArchSVR4Entry</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>memName</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<goto>goto <name>badarch</name>;</goto>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<continue>continue;</continue>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nameend</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nameend</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AR_EFMT1</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>memName</name></expr></argument>, <argument><expr><name>AR_EFMT1</name></expr></argument>, <argument><expr><sizeof>sizeof <name>AR_EFMT1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ch_isdigit</name><argument_list>(<argument><expr><name><name>memName</name><index>[<expr><sizeof>sizeof <name>AR_EFMT1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>elen</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>memName</name> <operator>+</operator> <sizeof>sizeof <name>AR_EFMT1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&gt;</operator> <name>MAXPATHLEN</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badarch</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>memName</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badarch</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>memName</name><index>[<expr><name>elen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>elen</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badarch</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>DEBUG</name><argument_list>(<argument><expr><name>MAKE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(
<argument><expr><literal type="string">"ArchStatMember: "</literal>
<literal type="string">"Extended format entry for %s\n"</literal></expr></argument>,
<argument><expr><name>memName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>cached_hdr</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(
<argument><expr><sizeof>sizeof <name/></sizeof>*<name>cached_hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cached_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arh</name></expr></argument>, <argument><expr><sizeof>sizeof <name>arh</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>members</name></name></expr></argument>, <argument><expr><name>memName</name></expr></argument>, <argument><expr><name>cached_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>badarch</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archives</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return <expr><call><name>HashTable_FindValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>members</name></name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>badarch</name>:</label>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVR4ARCHIVES</name></expr></argument>)</argument_list></call></expr></cpp:if>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>ArchSVR4Entry</name><parameter_list>(<parameter><decl><type><name>Arch</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inout_name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>arch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARLONGNAMES1</name></cpp:macro> <cpp:value>"//"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARLONGNAMES2</name></cpp:macro> <cpp:value>"/ARFILENAMES"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>inout_name</name></expr></argument>, <argument><expr><name>ARLONGNAMES1</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ARLONGNAMES1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>inout_name</name></expr></argument>, <argument><expr><name>ARLONGNAMES2</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ARLONGNAMES2</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>,
<argument><expr><literal type="string">"Attempted to redefine an SVR4 name table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>fnamesize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>, <argument><expr><literal type="string">"Reading an SVR4 name table failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>eptr</name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ptr</name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>fnametab</name></name></expr>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>eptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>, <argument><expr><literal type="string">"Found svr4 archive name table with %lu entries\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inout_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>inout_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inout_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>eptr</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>eptr</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <name>eptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>inout_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>, <argument><expr><literal type="string">"Could not parse SVR4 name %s\n"</literal></expr></argument>, <argument><expr><name>inout_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&gt;=</operator> <name><name>ar</name><operator>-&gt;</operator><name>fnamesize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>, <argument><expr><literal type="string">"SVR4 entry offset %s is greater than %lu\n"</literal></expr></argument>,
<argument><expr><name>inout_name</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>fnamesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>, <argument><expr><literal type="string">"Replaced %s with %s\n"</literal></expr></argument>, <argument><expr><name>inout_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name><index>[<expr><name>entry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>inout_name</name></expr></argument>, <argument><expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>fnametab</name><index>[<expr><name>entry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ArchiveMember_HasName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ar_name_len</name> <init>= <expr><sizeof>sizeof <name><name>hdr</name><operator>-&gt;</operator><name>AR_NAME</name></name></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ar_name</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>AR_NAME</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>ar_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <name>ar_name_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>namelen</name> <operator>==</operator> <name>ar_name_len</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ar_name</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ar_name</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>namelen</name> <operator>==</operator> <name>ar_name_len</name> <operator>||</operator> <name><name>ar_name</name><index>[<expr><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type>
<name>ArchFindMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>out_arh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><name>SARMAG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arch</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>archive</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arch</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>SARMAG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>ARMAG</name></expr></argument>, <argument><expr><name>SARMAG</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>member</name> <operator>=</operator> <call><name>str_basename</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>out_arh</name></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>out_arh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>out_arh</name><operator>-&gt;</operator><name>AR_FMAG</name></name></expr></argument>, <argument><expr><name>ARFMAG</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>out_arh</name><operator>-&gt;</operator><name>AR_FMAG</name></name></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG5</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>, <argument><expr><literal type="string">"Reading archive %s member %.*s mtime %.*s\n"</literal></expr></argument>,
<argument><expr><name>archive</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof <name><name>out_arh</name><operator>-&gt;</operator><name>AR_NAME</name></name></sizeof></expr></argument>, <argument><expr><name><name>out_arh</name><operator>-&gt;</operator><name>AR_NAME</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof <name><name>out_arh</name><operator>-&gt;</operator><name>ar_date</name></name></sizeof></expr></argument>, <argument><expr><name><name>out_arh</name><operator>-&gt;</operator><name>ar_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ArchiveMember_HasName</name><argument_list>(<argument><expr><name>out_arh</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof <name/></sizeof>*<name>out_arh</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>arch</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AR_EFMT1</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>out_arh</name><operator>-&gt;</operator><name>AR_NAME</name></name></expr></argument>, <argument><expr><name>AR_EFMT1</name></expr></argument>, <argument><expr><sizeof>sizeof <name>AR_EFMT1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ch_isdigit</name><argument_list>(<argument><expr><name><name>out_arh</name><operator>-&gt;</operator><name>AR_NAME</name><index>[<expr><sizeof>sizeof <name>AR_EFMT1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>elen</name> <init>= <expr><call><name>atoi</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>out_arh</name><operator>-&gt;</operator><name>AR_NAME</name><index>[<expr><sizeof>sizeof <name>AR_EFMT1</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ename</name><index>[<expr><name>MAXPATHLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&gt;</operator> <name>MAXPATHLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>ename</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ename</name><index>[<expr><name>elen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>DEBUG</name><argument_list>(<argument><expr><name>MAKE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(
<argument><expr><literal type="string">"ArchFindMember: "</literal>
<literal type="string">"Extended format entry for %s\n"</literal></expr></argument>,
<argument><expr><name>ename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>ename</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>arch</name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ar_hdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>elen</name><operator>)</operator></expr></argument>,
<argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>arch</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>elen</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<expr_stmt><expr><name><name>out_arh</name><operator>-&gt;</operator><name>AR_SIZE</name><index>[<expr><sizeof>sizeof <name><name>out_arh</name><operator>-&gt;</operator><name>AR_SIZE</name></name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>out_arh</name><operator>-&gt;</operator><name>AR_SIZE</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>arch</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>void</name></type>
<name>Arch_Touch</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name></type> <name>arh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>ArchFindMember</name><argument_list>(<argument><expr><call><name>GNode_VarArchive</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GNode_VarMember</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>arh</name></expr></argument>,
<argument><expr><literal type="string">"r+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>arh</name><operator>.</operator><name>ar_date</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>arh</name><operator>.</operator><name>ar_date</name></name></sizeof></expr></argument>, <argument><expr><literal type="string">"%-ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arh</name></expr></argument>, <argument><expr><sizeof>sizeof <name>arh</name></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>Arch_TouchLib</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier><name>gn</name></type> <name>MAKE_ATTR_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RANLIBMAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name></type> <name>arh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>times</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>ArchFindMember</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>RANLIBMAG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arh</name></expr></argument>, <argument><expr><literal type="string">"r+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>arh</name><operator>.</operator><name>ar_date</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>arh</name><operator>.</operator><name>ar_date</name></name></sizeof></expr></argument>, <argument><expr><literal type="string">"%-ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arh</name></expr></argument>, <argument><expr><sizeof>sizeof <name>arh</name></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>times</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <name><name>times</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>utime</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Arch_UpdateMTime</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>arh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arh</name> <operator>=</operator> <call><name>ArchStatMember</name><argument_list>(<argument><expr><call><name>GNode_VarArchive</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GNode_VarMember</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arh</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_date</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Arch_UpdateMemberMTime</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNodeListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>gn</name><operator>-&gt;</operator><name>parents</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>pgn</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pgn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_ARCHV</name></expr>)</condition> <block>{<block_content>








<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameStart</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pgn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameEnd</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>nameStart</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nameLen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nameEnd</name> <operator>-</operator> <name>nameStart</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pgn</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>remake</name></name> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>nameStart</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nameLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Arch_UpdateMTime</name><argument_list>(<argument><expr><name>pgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>pgn</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pgn</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>remake</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
















<function><type><name>void</name></type>
<name>Arch_FindLib</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>libName</name> <init>= <expr><call><name>str_concat3</name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">".a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>Dir_FindFile</name><argument_list>(<argument><expr><name>libName</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>libName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBRARIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Var_Set</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>TARGET</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Var_Set</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>TARGET</name></expr></argument>, <argument><expr><call><name>GNode_Path</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>RanlibOODate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier><name>gn</name></type> <name>MAKE_ATTR_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RANLIBMAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>arh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tocModTime</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arh</name> <operator>=</operator> <call><name>ArchStatMember</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>RANLIBMAG</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>DEBUG</name><argument_list>(<argument><expr><name>MAKE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"no toc..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tocModTime</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_date</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>ARCH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>DEBUG</name><argument_list>(<argument><expr><name>MAKE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"%s modified %s..."</literal></expr></argument>,
<argument><expr><name>RANLIBMAG</name></expr></argument>, <argument><expr><call><name>Targ_FmtTime</name><argument_list>(<argument><expr><name>tocModTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>gn</name><operator>-&gt;</operator><name>youngestChild</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>gn</name><operator>-&gt;</operator><name>youngestChild</name><operator>-&gt;</operator><name>mtime</name></name> <operator>&gt;</operator> <name>tocModTime</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>































<function><type><name>bool</name></type>
<name>Arch_LibOODate</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_PHONY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>GNode_IsTarget</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>gn</name><operator>-&gt;</operator><name>youngestChild</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>&gt;</operator> <name>now</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>youngestChild</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>&lt;</operator> <name><name>gn</name><operator>-&gt;</operator><name>youngestChild</name><operator>-&gt;</operator><name>mtime</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>RanlibOODate</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Arch_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Arch_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Lst_DoneCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archives</name></expr></argument>, <argument><expr><name>ArchFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>Arch_IsLib</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>armag</name><index>[]</index></name> <init>= <expr><literal type="string">"!&lt;arch&gt;\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof <name>armag</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof <name>buf</name></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>armag</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
