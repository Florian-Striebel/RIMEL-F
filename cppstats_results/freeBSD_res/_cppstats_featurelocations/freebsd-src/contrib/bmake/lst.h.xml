<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/lst.h">












































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_LST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_LST_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name><name>struct</name> <name>List</name></name></type> <name>List</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>ListNode</name></name></type> <name>ListNode</name>;</typedef>

<struct>struct <name>ListNode</name> <block>{
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>List</name> <block>{
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <function_decl><type><name>void</name></type> <name>LstFreeProc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<function_decl><type><name>List</name> <modifier>*</modifier></type><name>Lst_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Lst_Done</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Lst_DoneCall</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LstFreeProc</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Lst_Free</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LST_INIT</name></cpp:macro> <cpp:value>{ NULL, NULL }</cpp:value></cpp:define>


<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>Lst_Init</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>Lst_IsEmpty</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>ListNode</name> <modifier>*</modifier></type><name>Lst_FindDatum</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>Lst_InsertBefore</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Lst_Prepend</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Lst_Append</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Lst_Remove</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Lst_PrependAll</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Lst_AppendAll</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Lst_MoveAll</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>LstNode_Set</name><parameter_list>(<parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>LstNode_SetNull</name><parameter_list>(<parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>Lst_Enqueue</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>Lst_Dequeue</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <name>Vector</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>itemSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>
}</block></struct></type> <name>Vector</name>;</typedef>

<function_decl><type><name>void</name></type> <name>Vector_Init</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name>MAKE_INLINE</name> <name>void</name> <modifier>*</modifier></type>
<name>Vector_Get</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>items</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>items</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>itemSize</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>Vector_Push</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>Vector_Pop</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>Vector_Done</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
