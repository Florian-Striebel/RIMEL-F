<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/filemon/filemon_ktrace.c">






























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_KERNTYPES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filemon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/rbtree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ktrace.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AT_CWD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_CWD</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>filemon</name>;</struct_decl>
<struct_decl>struct <name>filemon_key</name>;</struct_decl>
<struct_decl>struct <name>filemon_state</name>;</struct_decl>

<typedef>typedef <function_decl><type><name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>filemon_syscall_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_chdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_execve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_exit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_fork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_openat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_symlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_unlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name></type> <name>filemon_sys_rename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>filemon_syscall_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>filemon_syscalls</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>SYS_chdir</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_chdir</name></expr>,
<expr><index>[<expr><name>SYS_execve</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_execve</name></expr>,
<expr><index>[<expr><name>SYS_exit</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_exit</name></expr>,
<expr><index>[<expr><name>SYS_fork</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_fork</name></expr>,
<expr><index>[<expr><name>SYS_link</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_link</name></expr>,
<expr><index>[<expr><name>SYS_open</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_open</name></expr>,
<expr><index>[<expr><name>SYS_openat</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_openat</name></expr>,
<expr><index>[<expr><name>SYS_symlink</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_symlink</name></expr>,
<expr><index>[<expr><name>SYS_unlink</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_unlink</name></expr>,
<expr><index>[<expr><name>SYS_rename</name></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name>filemon_sys_rename</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>filemon</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ktrfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_tree_t</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>child</name></decl>;</decl_stmt>


<enum>enum <block>{
<decl><name>FILEMON_START</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FILEMON_HEADER</name></decl>,
<decl><name>FILEMON_PAYLOAD</name></decl>,
<decl><name>FILEMON_ERROR</name></decl>,
}</block> <decl><name>state</name></decl>;</enum>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>resid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ktr_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ktr_syscall</name></name></type> <name>syscall</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ktr_sysret</name></name></type> <name>sysret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>namei</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>payload</name></decl>;</union>
}</block>;</struct>

<struct>struct <name>filemon_state</name> <block>{
<struct>struct <name>filemon_key</name> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lwpid_t</name></type> <name>lid</name></decl>;</decl_stmt>
}</block> <decl><name>key</name></decl>;</struct>
<decl_stmt><decl><type><name><name>struct</name> <name>rb_node</name></name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syscode</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>show</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>npath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>path</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_filemon_states</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>na</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>Sa</name> <init>= <expr><name>na</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>Sb</name> <init>= <expr><name>nb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Sa</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name> <operator>&lt;</operator> <name><name>Sb</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Sa</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name> <operator>&gt;</operator> <name><name>Sb</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Sa</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lid</name></name> <operator>&lt;</operator> <name><name>Sb</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Sa</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lid</name></name> <operator>&gt;</operator> <name><name>Sb</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_filemon_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name> <operator>&lt;</operator> <name><name>key</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name> <operator>&gt;</operator> <name><name>key</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lid</name></name> <operator>&lt;</operator> <name><name>key</name><operator>-&gt;</operator><name>lid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lid</name></name> <operator>&gt;</operator> <name><name>key</name><operator>-&gt;</operator><name>lid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_tree_ops_t</name></type> <name>filemon_rb_ops</name> <init>= <expr><block>{
<expr><operator>.</operator><name>rbto_compare_nodes</name> <operator>=</operator> <operator>&amp;</operator><name>compare_filemon_states</name></expr>,
<expr><operator>.</operator><name>rbto_compare_key</name> <operator>=</operator> <operator>&amp;</operator><name>compare_filemon_key</name></expr>,
<expr><operator>.</operator><name>rbto_node_offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>filemon_state</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>rbto_context</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>







<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>filemon_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="string">"ktrace"</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type>
<name>filemon_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ktrpipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>F</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>F</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pipe2</name><argument_list>(<argument><expr><name>ktrpipe</name></expr></argument>, <argument><expr><name>O_CLOEXEC</name><operator>|</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>fail0</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>F</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name><name>ktrpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>fail1</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ktrpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>ktrfd</name></name> <operator>=</operator> <name><name>ktrpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_tree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filemon_rb_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>F</name></expr>;</return>

<label><name>fail1</name>:</label> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>ktrpipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>ktrpipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail0</name>:</label> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>filemon_closefd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>filemon_setfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>filemon_closefd</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"#filemon version 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"#Target pid %jd\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"V 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>filemon_setpid_parent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>filemon_setpid_child</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ops</name></decl>, <decl><type ref="prev"/><name>trpoints</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ops</name> <operator>=</operator> <name>KTROP_SET</name><operator>|</operator><name>KTRFLAG_DESCEND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trpoints</name> <operator>=</operator> <name>KTRFACv2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trpoints</name> <operator>|=</operator> <name>KTRFAC_SYSCALL</name><operator>|</operator><name>KTRFAC_NAMEI</name><operator>|</operator><name>KTRFAC_SYSRET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>trpoints</name> <operator>|=</operator> <name>KTRFAC_INHERIT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fktrace</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>ktrfd</name></name></expr></argument>, <argument><expr><name>ops</name></expr></argument>, <argument><expr><name>trpoints</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>filemon_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>filemon_closefd</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>ktrfd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><operator>(</operator><name>S</name> <operator>=</operator> <call><name>RB_TREE_MIN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_tree_remove_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>filemon_readfd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>FILEMON_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>filemon_dispatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name></type> <name>key</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>F</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ktr_pid</name></name></expr>,
<expr><operator>.</operator><name>lid</name> <operator>=</operator> <name><name>F</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ktr_lid</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ktr_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KTR_SYSCALL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name> <init>= <expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>syscall</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S1</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>ktr_code</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>call</name><operator>-&gt;</operator><name>ktr_code</name></name> <operator>&gt;=</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>filemon_syscalls</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>filemon_syscalls</name><index>[<expr><name><name>call</name><operator>-&gt;</operator><name>ktr_code</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<expr_stmt><expr><name>S</name> <operator>=</operator> <call>(<modifier>*</modifier><name>filemon_syscalls</name><index>[<expr><name><name>call</name><operator>-&gt;</operator><name>ktr_code</name></name></expr>]</index>)<argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>










<expr_stmt><expr><name>S1</name> <operator>=</operator> <call><name>rb_tree_insert_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S1</name> <operator>!=</operator> <name>S</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>KTR_NAMEI</name></expr>:</case>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>rb_tree_find_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>S</name><operator>-&gt;</operator><name>npath</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><name><name>S</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>namei</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>F</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>namei</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KTR_SYSRET</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>sysret</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>rb_tree_find_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_tree_remove_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name><name>S</name><operator>-&gt;</operator><name>npath</name></name> <operator>&amp;&amp;</operator> <name><name>S</name><operator>-&gt;</operator><name>syscode</name></name> <operator>==</operator> <name><name>ret</name><operator>-&gt;</operator><name>ktr_code</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>S</name><operator>-&gt;</operator><name>show</name></name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>S</name><operator>-&gt;</operator><name>i</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
















<function><type><name>int</name></type>
<name>filemon_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<label><name>top</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name></expr></argument>, <argument><expr><name><name>F</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FILEMON_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;=</operator> <name><name>F</name><operator>-&gt;</operator><name>resid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILEMON_START</name></expr>:</case>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FILEMON_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>hdr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>=</operator> <sizeof>sizeof <name><name>F</name><operator>-&gt;</operator><name>hdr</name></name></sizeof></expr>;</expr_stmt>
<goto>goto <name>top</name>;</goto>
<case>case <expr><name>FILEMON_HEADER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ktr_len</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>F</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ktr_len</name></name> <operator>&gt;</operator> <sizeof>sizeof <name><name>F</name><operator>-&gt;</operator><name>payload</name></name></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FILEMON_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FILEMON_PAYLOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>F</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ktr_len</name></name></expr>;</expr_stmt>
<goto>goto <name>top</name>;</goto>
<case>case <expr><name>FILEMON_PAYLOAD</name></expr>:</case>

<expr_stmt><expr><call><name>filemon_dispatch</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FILEMON_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>F</name><operator>-&gt;</operator><name>hdr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>=</operator> <sizeof>sizeof <name><name>F</name><operator>-&gt;</operator><name>hdr</name></name></sizeof></expr>;</expr_stmt>
<goto>goto <name>top</name>;</goto>
<default>default:</default>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>FILEMON_ERROR</name></expr>;</expr_stmt>

<case>case <expr><name>FILEMON_ERROR</name></expr>:</case>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>resid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>syscall_enter</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>npath</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>show</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>filemon_state</name></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>npath</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>show</name></name> <operator>=</operator> <name>show</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>syscode</name></name> <operator>=</operator> <name><name>call</name><operator>-&gt;</operator><name>ktr_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>npath</name></name> <operator>=</operator> <name>npath</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npath</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>S</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_paths</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name><name>S</name><operator>-&gt;</operator><name>npath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>ktr_error</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>-&gt;</operator><name>ktr_error</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"%s %jd"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>S</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>S</name><operator>-&gt;</operator><name>npath</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><ternary><condition><expr><name><name>S</name><operator>-&gt;</operator><name>npath</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"'"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">" %s%s%s"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_retval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>ktr_error</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>-&gt;</operator><name>ktr_error</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"%s %jd %jd\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>S</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>pid</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>ret</name><operator>-&gt;</operator><name>ktr_retval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_chdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_execve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_fork</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_retval</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_open_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_open_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_open_readwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_openat_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_openat_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_openat_readwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_rename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_sysret</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>show_paths</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_chdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_chdir</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_execve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_execve</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_exit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>register_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>call</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"X %jd %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name><name>F</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"#Bye bye\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>F</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_fork</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_fork</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_link</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>register_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>call</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>ktr_argsize</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_RDWR</name><operator>)</operator> <operator>==</operator> <name>O_RDWR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_open_readwrite</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_WRONLY</name><operator>)</operator> <operator>==</operator> <name>O_WRONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_open_write</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_RDONLY</name><operator>)</operator> <operator>==</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_open_read</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_openat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>register_t</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>call</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>ktr_argsize</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>AT_CWD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_RDWR</name><operator>)</operator> <operator>==</operator> <name>O_RDWR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>show_open_readwrite</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_WRONLY</name><operator>)</operator> <operator>==</operator> <name>O_WRONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_open_write</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_RDONLY</name><operator>)</operator> <operator>==</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_open_read</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_RDWR</name><operator>)</operator> <operator>==</operator> <name>O_RDWR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>show_openat_readwrite</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_WRONLY</name><operator>)</operator> <operator>==</operator> <name>O_WRONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_openat_write</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_RDONLY</name><operator>)</operator> <operator>==</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_openat_read</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_symlink</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_unlink</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>filemon_state</name></name> <modifier>*</modifier></type>
<name>filemon_sys_rename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ktr_syscall</name></name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>syscall_enter</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_rename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
