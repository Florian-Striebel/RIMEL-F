<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/filemon/filemon_dev.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filemon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FILEMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;filemon.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_FILEMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PATH_FILEMON</name></cpp:macro> <cpp:value>"/dev/filemon"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>filemon</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>filemon_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>_PATH_FILEMON</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type>
<name>filemon_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>F</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>F</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>F</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>_PATH_FILEMON</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CLOEXEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>fail0</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><name>F</name></expr>;</return>

<label><name>fail0</name>:</label> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>filemon_setfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FILEMON_SET_FD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>filemon_setpid_parent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>filemon_setpid_child</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>, <parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FILEMON_SET_PID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>filemon_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>F</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>filemon_readfd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>filemon_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filemon</name></name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
