<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/trace.c">











































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: trace.c,v 1.29 2021/09/21 23:06:18 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>trfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>trpid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>evname</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"BEG"</literal></expr>,
<expr><literal type="string">"END"</literal></expr>,
<expr><literal type="string">"ERR"</literal></expr>,
<expr><literal type="string">"JOB"</literal></expr>,
<expr><literal type="string">"DON"</literal></expr>,
<expr><literal type="string">"INT"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>Trace_Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FStr</name></type> <name>curDir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>trpid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>curDir</name> <operator>=</operator> <call><name>Var_Value</name><argument_list>(<argument><expr><name>SCOPE_GLOBAL</name></expr></argument>, <argument><expr><literal type="string">".CURDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trwd</name> <operator>=</operator> <name><name>curDir</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>trfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Trace_Log</name><parameter_list>(<parameter><decl><type><name>TrEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>rightnow</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rightnow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>trfile</name></expr></argument>, <argument><expr><literal type="string">"%lld.%06ld %d %s %d %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>rightnow</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>rightnow</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
<argument><expr><name>jobTokensRunning</name></expr></argument>,
<argument><expr><name><name>evname</name><index>[<expr><name>event</name></expr>]</index></name></expr></argument>, <argument><expr><name>trpid</name></expr></argument>, <argument><expr><name>trwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Job_FlagsToString</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof <name>flags</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>trfile</name></expr></argument>, <argument><expr><literal type="string">" %s %d %s %x"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>trfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>trfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Trace_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>trfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>trfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
