<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/sigcompat.c">






















































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SIGCOMPAT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SIGCOMPAT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SIGCOMPAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SA_NOCLDSTOP</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rcsid</name> <init>= <expr><literal type="string">"$Id: sigcompat.c,v 1.23 2011/02/14 00:07:11 sjg Exp $"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>signal</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name></cpp:macro> <cpp:value>assert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBUG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DBUG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SA_RESTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_RESTART</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SV_INTERRUPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SV_INTERRUPT</name></cpp:macro> <cpp:value>SA_RESTART</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MASK_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_T</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_T</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HPUX_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__HPUX_VERSION</name> <operator>&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAUSE_MASK_T</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAUSE_MASK_T</name></cpp:macro> <cpp:value>MASK_T</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIG_HDLR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_HDLR</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FORCE_POSIX_SIGNALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>libsig</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>libsjg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIGNAL_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>_signalFlags</name> <init>= <expr><name>SIGNAL_FLAGS</name></expr></init></decl>;</decl_stmt>

<macro><name>SIG_HDLR</name><argument_list>(<argument>*signal(int sig, SIG_HDLR(*handler)(int))</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>int</name><operator>)</operator>
<block>{
<macro><name>_DBUG</name><argument_list>(<argument>static int depth_signal = <literal type="number">0</literal></argument>)</argument_list></macro>;
struct <expr><name>sigaction</name> <name>act</name></expr>, <expr><name>oact</name></expr>;
<expr><name>int</name> <name>n</name></expr>;

<expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>++</operator><name>depth_signal</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depth_signal</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
<expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>handler</name></expr>;
<expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>_signalFlags</name></expr>;
<expr><name>n</name> <operator>=</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>--</operator><name>depth_signal</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>SIG_ERR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><name><name>oact</name><operator>.</operator><name>sa_handler</name></name><operator>)</operator></expr>;</return>
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
SIG_HDLR<expr_stmt><expr><operator>(</operator><operator>*</operator><macro><name>signal</name><argument_list>(<argument>int sig</argument>, <argument>SIG_HDLR(*handler)(int)</argument>)</argument_list></macro><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator>
<block>{
<expr><specifier>extern</specifier> <call><call><name>SIG_HDLR</name><argument_list>(<argument><expr><operator>*</operator><call><name>Signal</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;
<macro><name>_DBUG</name><argument_list>(<argument>static int depth_signal = <literal type="number">0</literal></argument>)</argument_list></macro>;
<macro><name>SIG_HDLR</name><argument_list>(<argument>*old</argument>)</argument_list></macro> <expr><call><name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;

<expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>++</operator><name>depth_signal</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depth_signal</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>old</name> <operator>=</operator> <call><name>Signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>--</operator><name>depth_signal</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>old</name></expr>;</return>
}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGSET_T_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss2m</name><parameter_list>(<parameter><type><name>ss</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(MASK_T) *(ss)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m2ss</name><parameter_list>(<parameter><type><name>ss</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*ss = (sigset_t) *(m)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>MASK_T</name></type>
<name>ss2m</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MASK_T</name></type> <name><name>ma</name><index>[<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MASK_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ma</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ss</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>m2ss</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>MASK_T</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MASK_T</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ss</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MASK_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETMASK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FORCE_POSIX_SIGNALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>MASK_T</name></type>
<name>sigsetmask</name><parameter_list>(<parameter><decl><type><name>MASK_T</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>_DBUG</name><argument_list>(<argument>static int depth_sigsetmask = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>omask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>++</operator><name>depth_sigsetmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depth_sigsetmask</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>m2ss</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>(</operator><name>sigset_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>sigset_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>omask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>--</operator><name>depth_sigsetmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ss2m</name><argument_list>(<argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>MASK_T</name></type>
<name>sigblock</name><parameter_list>(<parameter><decl><type><name>MASK_T</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>_DBUG</name><argument_list>(<argument>static int depth_sigblock = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>omask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>++</operator><name>depth_sigblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depth_sigblock</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>m2ss</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>(</operator><name>sigset_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>mask</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>m</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>sigset_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>omask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>--</operator><name>depth_sigblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ss2m</name><argument_list>(<argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sigpause</name></cpp:undef>

<function><type><name>PAUSE_MASK_T</name></type>
<name>sigpause</name><parameter_list>(<parameter><decl><type><name>PAUSE_MASK_T</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>_DBUG</name><argument_list>(<argument>static int depth_sigpause = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAUSE_MASK_T</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>++</operator><name>depth_sigpause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depth_sigpause</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>m2ss</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sigsuspend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>--</operator><name>depth_sigpause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGVEC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FORCE_POSIX_SIGNALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>sigvec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigvec</name></name> <modifier>*</modifier></type><name>sv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigvec</name></name> <modifier>*</modifier></type><name>osv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>_DBUG</name><argument_list>(<argument>static int depth_sigvec = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sigvec</name></name></type> <name>nsv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>++</operator><name>depth_sigvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depth_sigvec</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsv</name> <operator>=</operator> <operator>*</operator><name>sv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>.</operator><name>sv_flags</name></name> <operator>^=</operator> <name>SV_INTERRUPT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><ternary><condition><expr><name>sv</name></expr> ?</condition><then> <expr><operator>(</operator>struct <name>sigaction</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>nsv</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sigaction</name> <operator>*</operator><operator>)</operator> <name>osv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DBUG</name><argument_list>(<argument><expr><operator>--</operator><name>depth_sigvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>osv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>osv</name><operator>-&gt;</operator><name>sv_flags</name></name> <operator>^=</operator> <name>SV_INTERRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>sigmask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigmask</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)1 &lt;&lt; (((n) - 1) &amp; (32 - 1)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MASK_T</name></type> <name>old</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expect: old=0,old=2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>sigblock</name><argument_list>(<argument><expr><call><name>sigmask</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"old=%d,"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>sigsetmask</name><argument_list>(<argument><expr><call><name>sigmask</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"old=%d\n"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
