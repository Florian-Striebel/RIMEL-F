<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/dir.c">
































































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"job.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: dir.c,v 1.275 2021/11/28 21:46:17 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







































































<struct>struct <name>CachedDir</name> <block>{








<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>refCount</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>hits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>HashSet</name></type> <name>files</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>List</name></type> <name>CachedDirList</name>;</typedef>
<typedef>typedef <type><name>ListNode</name></type> <name>CachedDirListNode</name>;</typedef>

<typedef>typedef <type><name>ListNode</name></type> <name>SearchPathNode</name>;</typedef>


<typedef>typedef <type><struct>struct <name>OpenDirs</name> <block>{
<decl_stmt><decl><type><name>CachedDirList</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashTable</name></type> <name>table</name></decl>;</decl_stmt>
}</block></struct></type> <name>OpenDirs</name>;</typedef>


<decl_stmt><decl><type><name>SearchPath</name></type> <name>dirSearchPath</name> <init>= <expr><block>{ <expr><name>LST_INIT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OpenDirs</name></type> <name>openDirs</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>misses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nearmisses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bigmisses</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type><name>dotLast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>static</specifier> <name>HashTable</name></type> <name>mtimes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HashTable</name></type> <name>lmtimes</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OpenDirs_Remove</name><parameter_list>(<parameter><decl><type><name>OpenDirs</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type>
<name>CachedDir_New</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bmake_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashSet_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFCNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"CachedDir %p new for \"%s\"\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type>
<name>CachedDir_Ref</name><parameter_list>(<parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFCNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUG3</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"CachedDir %p ++ %d for \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CachedDir_Unref</name><parameter_list>(<parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name><operator>--</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFCNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUG3</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"CachedDir %p -- %d for \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REFCNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"CachedDir %p free for \"%s\"\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>OpenDirs_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>openDirs</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashSet_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>CachedDir_Assign</name><parameter_list>(<parameter><decl><type><name>CachedDir</name> <modifier>*</modifier><modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>*</operator><name>var</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CachedDir_Ref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CachedDir_Unref</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>OpenDirs_Init</name><parameter_list>(<parameter><decl><type><name>OpenDirs</name> <modifier>*</modifier></type><name>odirs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>OpenDirs_Done</name><parameter_list>(<parameter><decl><type><name>OpenDirs</name> <modifier>*</modifier></type><name>odirs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDirListNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><name><name>odirs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"OpenDirs_Done: %u entries to remove\n"</literal></expr></argument>,
<argument><expr><name><name>odirs</name><operator>-&gt;</operator><name>table</name><operator>.</operator><name>numEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDirListNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"OpenDirs_Done: refCount %d for \"%s\"\n"</literal></expr></argument>,
<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CachedDir_Unref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type>
<name>OpenDirs_Find</name><parameter_list>(<parameter><decl><type><name>OpenDirs</name> <modifier>*</modifier></type><name>odirs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDirListNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>HashTable_FindValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>OpenDirs_Add</name><parameter_list>(<parameter><decl><type><name>OpenDirs</name> <modifier>*</modifier></type><name>odirs</name></decl></parameter>, <parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>cdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>HashTable_FindEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>cdir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>cdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>cdir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>odirs</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>OpenDirs_Remove</name><parameter_list>(<parameter><decl><type><name>OpenDirs</name> <modifier>*</modifier></type><name>odirs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>HashTable_FindEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CachedDirListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>HashEntry_Get</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_DeleteEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odirs</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cached_stats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cached_stat</name></name> <modifier>*</modifier></type><name>out_cst</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>useLstat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceRefresh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><ternary><condition><expr><name>useLstat</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>lmtimes</name></expr> </then><else>: <expr><operator>&amp;</operator><name>mtimes</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sys_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_stat</name></name> <modifier>*</modifier></type><name>cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pathname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cst</name> <operator>=</operator> <call><name>HashTable_FindValue</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>forceRefresh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_cst</name> <operator>=</operator> <operator>*</operator><name>cst</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Using cached time %s for %s\n"</literal></expr></argument>,
<argument><expr><call><name>Targ_FmtTime</name><argument_list>(<argument><expr><name><name>cst</name><operator>-&gt;</operator><name>cst_mtime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>useLstat</name></expr> ?</condition><then> <expr><name>lstat</name></expr> </then><else>: <expr><name>stat</name></expr></else></ternary><operator>)</operator><operator>(</operator><name>pathname</name><operator>,</operator> <operator>&amp;</operator><name>sys_st</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys_st</name><operator>.</operator><name>st_mtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys_st</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cst</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Set</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cst</name><operator>-&gt;</operator><name>cst_mtime</name></name> <operator>=</operator> <name><name>sys_st</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cst</name><operator>-&gt;</operator><name>cst_mode</name></name> <operator>=</operator> <name><name>sys_st</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_cst</name> <operator>=</operator> <operator>*</operator><name>cst</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" Caching %s for %s\n"</literal></expr></argument>,
<argument><expr><call><name>Targ_FmtTime</name><argument_list>(<argument><expr><name><name>sys_st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cached_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cached_stat</name></name> <modifier>*</modifier></type><name>cst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cached_stats</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>cst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cached_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cached_stat</name></name> <modifier>*</modifier></type><name>cst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cached_stats</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>cst</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Dir_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>OpenDirs_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>openDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lmtimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CachedDir_Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dotLast</name></expr></argument>, <argument><expr><call><name>CachedDir_New</name><argument_list>(<argument><expr><literal type="string">".DOTLAST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>Dir_InitCur</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newCurdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newCurdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>SearchPath_Add</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newCurdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CachedDir_Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Dir_InitDot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>SearchPath_Add</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Error</name><argument_list>(<argument><expr><literal type="string">"Cannot open `.' (%s)"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CachedDir_Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dot</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Dir_SetPATH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Dir_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CachedDir_Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CachedDir_Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CachedDir_Assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dotLast</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SearchPath_Clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirSearchPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OpenDirs_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>openDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lmtimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>Dir_SetPATH</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDirListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>seenDotLast</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Global_Delete</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <name><name>dirSearchPath</name><operator>.</operator><name>dirs</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dotLast</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seenDotLast</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>, <argument><expr><name><name>dotLast</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seenDotLast</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>, <argument><expr><name><name>dot</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>dirSearchPath</name><operator>.</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dotLast</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dot</name> <operator>&amp;&amp;</operator> <name>seenDotLast</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>seenDotLast</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>, <argument><expr><name><name>dot</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".PATH"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>











<function><type><name>bool</name></type>
<name>Dir_HasWildcards</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wild</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>braces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>brackets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<expr_stmt><expr><name>braces</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wild</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'}'</literal></expr>:</case>
<expr_stmt><expr><name>braces</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>brackets</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wild</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<expr_stmt><expr><name>brackets</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<expr_stmt><expr><name>wild</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>wild</name> <operator>&amp;&amp;</operator> <name>brackets</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>braces</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>void</name></type>
<name>DirMatchFiles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>expansions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirName</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isDot</name> <init>= <expr><name><name>dirName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>dirName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashIter</name></type> <name>hi</name></decl>;</decl_stmt>







<expr_stmt><expr><call><name>HashIter_InitSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>HashIter_Next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>hi</name><operator>.</operator><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Str_Match</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name><name>base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullName</name> <init>= <expr><ternary><condition><expr><name>isDot</name></expr>
?</condition><then> <expr><call><name>bmake_strdup</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>str_concat3</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>expansions</name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>closing_brace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name>nest</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nest</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nest</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>separator_comma</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>nest</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nest</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nest</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>contains_wildcard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>concat3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>a_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><name>a_len</name> <operator>+</operator> <name>b_len</name> <operator>+</operator> <name>c_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><name>s_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>a_len</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>a_len</name> <operator>+</operator> <name>b_len</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>s_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>void</name></type>
<name>DirExpandCurly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>brace</name></decl></parameter>, <parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>expansions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>middle</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>piece</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>middle_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name></decl>, <decl><type ref="prev"/><name>suffix_len</name></decl>;</decl_stmt>



<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>brace</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>middle_end</name> <operator>=</operator> <call><name>closing_brace</name><argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>middle_end</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Error</name><argument_list>(<argument><expr><literal type="string">"Unterminated {} clause \"%s\""</literal></expr></argument>, <argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>brace</name> <operator>-</operator> <name>prefix</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>suffix</name> <operator>=</operator> <name>middle_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>suffix_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>piece</name> <operator>=</operator> <name>middle</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>piece</name> <operator>&lt;</operator> <name>middle_end</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>piece_end</name> <init>= <expr><call><name>separator_comma</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>piece_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>piece_end</name> <operator>-</operator> <name>piece</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>concat3</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>, <argument><expr><name>piece</name></expr></argument>, <argument><expr><name>piece_len</name></expr></argument>,
<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>suffix_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>contains_wildcard</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SearchPath_Expand</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>expansions</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>piece</name> <operator>=</operator> <name>piece_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>DirExpandPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>expansions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DirMatchFiles</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintExpansions</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>expansions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>expansions</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>SearchPath_ExpandMiddle</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wildcardComponent</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>expansions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>partPath</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>bmake_strsedup</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>wildcardComponent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>dirpath</name> <operator>=</operator> <call><name>Dir_FindFile</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name>dirpath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>dirpath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>partPath</name> <operator>=</operator> <call><name>SearchPath_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SearchPath_Add</name><argument_list>(<argument><expr><name>partPath</name></expr></argument>, <argument><expr><name>dirpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DirExpandPath</name><argument_list>(<argument><expr><name>wildcardComponent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>partPath</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SearchPath_Free</name><argument_list>(<argument><expr><name>partPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type>
<name>SearchPath_Expand</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>expansions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>brace</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slash</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wildcard</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wildcardComponent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>expansions</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Expanding \"%s\"... "</literal></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>brace</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>brace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DirExpandCurly</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>brace</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>DirMatchFiles</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>dot</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DirExpandPath</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>wildcard</name> <operator>=</operator> <name>pattern</name></expr>;</init> <condition><expr><operator>*</operator><name>wildcard</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>wildcard</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <operator>*</operator><name>wildcard</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <operator>*</operator><name>wildcard</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wildcard</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>DirExpandPath</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>wildcardComponent</name> <operator>=</operator> <name>wildcard</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>wildcardComponent</name> <operator>&gt;</operator> <name>pattern</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>wildcardComponent</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wildcardComponent</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>wildcardComponent</name> <operator>==</operator> <name>pattern</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>DirExpandPath</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SearchPath_ExpandMiddle</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>wildcardComponent</name></expr></argument>,
<argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PrintExpansions</name><argument_list>(<argument><expr><name>expansions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>DirLookup</name><parameter_list>(<parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" %s ...\n"</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HashSet_Contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>str_concat3</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" returning %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hits</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hits</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>DirLookupSubdir</name><parameter_list>(<parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_stat</name></name></type> <name>cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>dot</name></expr> ?</condition><then> <expr><call><name>bmake_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>str_concat3</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"checking %s ...\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cached_stat</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nearmisses</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>DirLookupAbs</name><parameter_list>(<parameter><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" %s ...\n"</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>dnp</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr><operator>,</operator> <expr><name>np</name> <operator>=</operator> <name>name</name></expr>;</init>
<condition><expr><operator>*</operator><name>dnp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>dnp</name> <operator>==</operator> <operator>*</operator><name>np</name></expr>;</condition> <incr><expr><name>dnp</name><operator>++</operator></expr><operator>,</operator> <expr><name>np</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dnp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>np</name> <operator>!=</operator> <name>cp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HashSet_Contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" must be here but isn't -- returning\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bmake_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hits</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hits</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" returning %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bmake_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>DirFindDot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>HashSet_Contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dot</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" in '.'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hits</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dot</name><operator>-&gt;</operator><name>hits</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>bmake_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>HashSet_Contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" in ${.CURDIR} = %s\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hits</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hits</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>str_concat3</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>FindFileRelative</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>seenDotLast</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>checkedDot</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" Trying subdirectories...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seenDotLast</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>checkedDot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupSubdir</name><argument_list>(<argument><expr><name>dot</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupSubdir</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dotLast</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dot</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>checkedDot</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>checkedDot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupSubdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>seenDotLast</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>checkedDot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>checkedDot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupSubdir</name><argument_list>(<argument><expr><name>dot</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupSubdir</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>checkedDot</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" Checked . already, returning NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<label><name>found</name>:</label>
<expr_stmt><expr><operator>*</operator><name>out_file</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>FindFileAbsolute</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>seenDotLast</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>











<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" Trying exact path matches...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seenDotLast</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupAbs</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dotLast</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupAbs</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>seenDotLast</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookupAbs</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out_file</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>char</name> <modifier>*</modifier></type>
<name>Dir_FindFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>seenDotLast</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_stat</name></name></type> <name>cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trailing_dot</name> <init>= <expr><literal type="string">"."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>str_basename</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Searching for %s ..."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"couldn't open path, file not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>misses</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dotLast</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seenDotLast</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"[dot last]..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>name</name> <operator>||</operator> <operator>(</operator><name>base</name> <operator>-</operator> <name>name</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>















<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seenDotLast</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirFindDot</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>file</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>dotLast</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirLookup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>file</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>seenDotLast</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>file</name> <operator>=</operator> <call><name>DirFindDot</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>file</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>















<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>misses</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>base</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>trailing_dot</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FindFileRelative</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>seenDotLast</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>file</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FindFileAbsolute</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>seenDotLast</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>file</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{
CachedDir *dir;
char *prefix;

if (base == trailing_dot) {
base = strrchr(name, '/');
base++;
}
prefix = bmake_strsedup(name, base - 1);
(void)SearchPath_Add(path, prefix);
free(prefix);

bigmisses++;
if (path-&gt;last == NULL)
return NULL;

dir = path-&gt;last-&gt;datum;
if (HashSet_Contains(&amp;dir-&gt;files, base))
return bmake_strdup(name);
return NULL;
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" Looking for \"%s\" ...\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bigmisses</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cached_stat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>bmake_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG0</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">" failed. Returning NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>













<function><type><name>char</name> <modifier>*</modifier></type>
<name>Dir_FindHereOrAbove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>here</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>search_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_stat</name></name></type> <name>cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirbase</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dirbase_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>try</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>try_end</name></decl>;</decl_stmt>


<expr_stmt><expr><name>dirbase</name> <operator>=</operator> <call><name>bmake_strdup</name><argument_list>(<argument><expr><name>here</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirbase_end</name> <operator>=</operator> <name>dirbase</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dirbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>


<expr_stmt><expr><name>try</name> <operator>=</operator> <call><name>str_concat3</name><argument_list>(<argument><expr><name>dirbase</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>search_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cached_stat</name><argument_list>(<argument><expr><name>try</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cst</name><operator>.</operator><name>cst_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>!=</operator> <name>S_IFDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>try_end</name> <operator>=</operator> <name>try</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>try</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>try_end</name> <operator>&gt;</operator> <name>try</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>try_end</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>try_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>try_end</name> <operator>&gt;</operator> <name>try</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>try_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dirbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>try</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>try</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>dirbase_end</name> <operator>==</operator> <name>dirbase</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<while>while <condition>(<expr><name>dirbase_end</name> <operator>&gt;</operator> <name>dirbase</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dirbase_end</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dirbase_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>dirbase_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dirbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ResolveMovedDepends</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>str_basename</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fullName</name> <operator>=</operator> <call><name>Dir_FindFile</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>Suff_FindPath</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fullName</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>bmake_strdup</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Job_RunTarget</name><argument_list>(<argument><expr><literal type="string">".STALE"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,
<argument><expr><literal type="string">"%s: %s, %d: ignoring stale %s for %s, found %s\n"</literal></expr></argument>,
<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
<argument><expr><name>makeDependfile</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fullName</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ResolveFullName</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullName</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fullName</name> <operator>=</operator> <name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fullName</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_NOPATH</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fullName</name> <operator>=</operator> <call><name>Dir_FindFile</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>Suff_FindPath</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fullName</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>gn</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>fromDepend</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>implicitParents</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fullName</name> <operator>=</operator> <call><name>ResolveMovedDepends</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Found '%s' as '%s'\n"</literal></expr></argument>,
<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>fullName</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>fullName</name></expr> </then><else>: <expr><literal type="string">"(not found)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fullName</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fullName</name> <operator>=</operator> <call><name>bmake_strdup</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<return>return <expr><name>fullName</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>Dir_UpdateMTime</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceRefresh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cached_stat</name></name></type> <name>cst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_ARCHV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Arch_UpdateMTime</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_PHONY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fullName</name> <operator>=</operator> <call><name>ResolveFullName</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cached_stats</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>forceRefresh</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_MEMBER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fullName</name> <operator>!=</operator> <name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Arch_UpdateMemberMTime</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cst</name><operator>.</operator><name>cst_mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fullName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>gn</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>fullName</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>cst</name><operator>.</operator><name>cst_mtime</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>CachedDir</name> <modifier>*</modifier></type>
<name>CacheNewDir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Caching %s ... not found\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Caching %s ...\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>CachedDir_New</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>d_ino</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>d_fileno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>HashSet_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>closedir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OpenDirs_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>openDirs</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><call><name>CachedDir_Ref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>DIR</name></expr></argument>, <argument><expr><literal type="string">"Caching %s done\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>



















<function><type><name>CachedDir</name> <modifier>*</modifier></type>
<name>SearchPath_Add</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".DOTLAST"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>pathDir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pathDir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pathDir</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>Lst_Prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><call><name>CachedDir_Ref</name><argument_list>(<argument><expr><name>dotLast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>OpenDirs_Find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>openDirs</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Lst_FindDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><call><name>CachedDir_Ref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CacheNewDir</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>SearchPath</name> <modifier>*</modifier></type>
<name>Dir_CopyDirSearchPath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>SearchPath_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>dirSearchPath</name><operator>.</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><call><name>CachedDir_Ref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>char</name> <modifier>*</modifier></type>
<name>SearchPath_ToFlags</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Buf_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Buf_AddStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Buf_AddStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Buf_AddStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>Buf_DoneData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>SearchPath_Free</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CachedDir_Unref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>SearchPath_Clear</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>Lst_Dequeue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CachedDir_Unref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>SearchPath_AddAll</name><parameter_list>(<parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>SearchPath</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Lst_FindDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>dirs</name></name></expr></argument>, <argument><expr><call><name>CachedDir_Ref</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>percentage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>den</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>den</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Dir_PrintDirectories</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CachedDirListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#*** Directory Cache:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(
<argument><expr><literal type="string">"#Stats: %d hits %d misses %d near misses %d losers (%d%%)\n"</literal></expr></argument>,
<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>misses</name></expr></argument>, <argument><expr><name>nearmisses</name></expr></argument>, <argument><expr><name>bigmisses</name></expr></argument>,
<argument><expr><call><name>percentage</name><argument_list>(<argument><expr><name>hits</name></expr></argument>, <argument><expr><name>hits</name> <operator>+</operator> <name>bigmisses</name> <operator>+</operator> <name>nearmisses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#refs hits directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>openDirs</name><operator>.</operator><name>list</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#%4d %4d %s\n"</literal></expr></argument>,
<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>hits</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>SearchPath_Print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SearchPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SearchPathNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>dirs</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CachedDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
