<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/job.h">














































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_JOB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_JOB_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMPPAT</name></cpp:macro> <cpp:value>"makeXXXXXX"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>poll</name></cpp:macro> <cpp:value>emul_poll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pollfd</name></cpp:macro> <cpp:value>emul_pollfd</cpp:value></cpp:define>

<struct>struct <name>emul_pollfd</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>revents</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLIN</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLOUT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<function_decl><type><name>int</name></type>
<name>emul_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_MSEC</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>

<struct_decl>struct <name>pollfd</name>;</struct_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>JobStatus</name> <block>{
<decl><name>JOB_ST_FREE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>JOB_ST_SET_UP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>JOB_ST_RUNNING</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>JOB_ST_FINISHED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>JobStatus</name>;</typedef>














<typedef>typedef <type><struct>struct <name>Job</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>tailCmds</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>cmdFILE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exit_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JobStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>suspended</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ignerr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>echo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>special</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inPipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outPipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>inPollfd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOB_BUFSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>outBuf</name><index>[<expr><name>JOB_BUFSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>curPos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>BuildMon</name></name></type> <name>bm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>Job</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shellPath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shellName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>shellErrFlag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>jobTokensRunning</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Shell_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Shell_GetNewline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_Touch</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Job_CheckCommands</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>abortProc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_CatchChildren</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_CatchOutput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_Make</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Job_ParseShell</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Job_Finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_Wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_AbortAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_TokenReturn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Job_TokenWithdraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_ServerStart</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_SetPrefix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Job_RunTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Job_FlagsToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Job</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Job_TempFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
