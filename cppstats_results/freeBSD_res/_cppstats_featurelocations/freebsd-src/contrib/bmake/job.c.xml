<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/job.c">



























































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wait.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SELECT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utime.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pathnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: job.c,v 1.440 2021/11/28 19:51:06 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



































<typedef>typedef <type><struct>struct <name>Shell</name> <block>{







<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasEchoCtl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>echoOff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>echoOn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>noPrint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>noPrintLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasErrCtl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errOn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errOff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>echoTmpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>runIgnTmpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>runChkTmpl</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>commentChar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>echoFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errFlag</name></decl>;</decl_stmt>
}</block></struct></type> <name>Shell</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CommandFlags</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>echo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>always</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>ignerr</name></decl>;</decl_stmt>
}</block></struct></type> <name>CommandFlags</name>;</typedef>







<typedef>typedef <type><struct>struct <name>ShellWriter</name> <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>xtraced</name></decl>;</decl_stmt>

}</block></struct></type> <name>ShellWriter</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ALWAYS_PASS_JOB_QUEUE</name></cpp:macro> <cpp:value>"${.MAKE.ALWAYS_PASS_JOB_QUEUE:U}"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>Always_pass_job_queue</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_JOB_ERROR_TOKEN</name></cpp:macro> <cpp:value>"${MAKE_JOB_ERROR_TOKEN:U}"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>Job_error_token</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>job_errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<enum><specifier>static</specifier> enum <block>{
<decl><name>ABORT_NONE</name></decl>,
<decl><name>ABORT_ERROR</name></decl>,
<decl><name>ABORT_INTERRUPT</name></decl>,
<decl><name>ABORT_WAIT</name></decl>
}</block> <decl><name>aborting</name> <init>= <expr><name>ABORT_NONE</name></expr></init></decl>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOB_TOKENS</name></cpp:macro> <cpp:value>"+EI+"</cpp:value></cpp:define>




<decl_stmt><decl><type><name>int</name></type> <name>jobTokensRunning</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>JobStartResult</name> <block>{
<decl><name>JOB_RUNNING</name></decl>,
<decl><name>JOB_ERROR</name></decl>,
<decl><name>JOB_FINISHED</name></decl>
}</block></enum></type> <name>JobStartResult</name>;</typedef>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFSHELL_CUSTOM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_CUSTOM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_SH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_KSH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_CSH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_SH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_KSH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX_CSH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFSHELL_INDEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFSHELL_INDEX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>Shell</name></type> <name><name>shells</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFSHELL_CUSTOM</name></expr></argument>)</argument_list></call></expr></cpp:if>







<expr><block>{
<expr><name>DEFSHELL_CUSTOM</name></expr>,
<expr><name>false</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>false</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"echo \"%s\"\n"</literal></expr>,
<expr><literal type="string">"%s\n"</literal></expr>,
<expr><literal type="string">"{ %s \n} || exit $?\n"</literal></expr>,
<expr><literal type="string">"'\n'"</literal></expr>,
<expr><literal type="char">'#'</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr><block>{
<expr><literal type="string">"sh"</literal></expr>,
<expr><name>false</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>false</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"echo \"%s\"\n"</literal></expr>,
<expr><literal type="string">"%s\n"</literal></expr>,
<expr><literal type="string">"{ %s \n} || exit $?\n"</literal></expr>,
<expr><literal type="string">"'\n'"</literal></expr>,
<expr><literal type="char">'#'</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_NATIVE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"q"</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><literal type="string">""</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">""</literal></expr>,
}</block></expr>,



<expr><block>{
<expr><literal type="string">"ksh"</literal></expr>,
<expr><name>true</name></expr>,
<expr><literal type="string">"set +v"</literal></expr>,
<expr><literal type="string">"set -v"</literal></expr>,
<expr><literal type="string">"set +v"</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><name>false</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"echo \"%s\"\n"</literal></expr>,
<expr><literal type="string">"%s\n"</literal></expr>,
<expr><literal type="string">"{ %s \n} || exit $?\n"</literal></expr>,
<expr><literal type="string">"'\n'"</literal></expr>,
<expr><literal type="char">'#'</literal></expr>,
<expr><literal type="string">"v"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
}</block></expr>,





<expr><block>{
<expr><literal type="string">"csh"</literal></expr>,
<expr><name>true</name></expr>,
<expr><literal type="string">"unset verbose"</literal></expr>,
<expr><literal type="string">"set verbose"</literal></expr>,
<expr><literal type="string">"unset verbose"</literal></expr>,
<expr><literal type="number">13</literal></expr>,
<expr><name>false</name></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"echo \"%s\"\n"</literal></expr>,
<expr><literal type="string">"csh -c \"%s || exit 0\"\n"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"'\\\n'"</literal></expr>,
<expr><literal type="char">'#'</literal></expr>,
<expr><literal type="string">"v"</literal></expr>,
<expr><literal type="string">"e"</literal></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>Shell</name> <modifier>*</modifier></type><name>shell</name> <init>= <expr><operator>&amp;</operator><name><name>shells</name><index>[<expr><name>DEFSHELL_INDEX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shellPath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shellName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shellErrFlag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>shell_freeIt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Job</name> <modifier>*</modifier></type><name>job_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Job</name> <modifier>*</modifier></type><name>job_table_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>wantToken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>lurking_children</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>make_suspended</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Job</name> <modifier>*</modifier><modifier>*</modifier></type><name>jobByFdIndex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>nfds_t</name></type> <name>fdsLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>watchfd</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clearfd</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>readyfd</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>targPrefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Job</name></type> <name>tokenWaitJob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Job</name></type> <name>childExitJob</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_EXIT</name></cpp:macro> <cpp:value>"."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_JOB_RESUME</name></cpp:macro> <cpp:value>"R"</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>npseudojobs</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>sigset_t</name></type> <name>caught_signals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>caught_sigchld</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CollectOutput</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>JobInterrupt</name><argument_list>(<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list> <name>MAKE_ATTR_DEAD</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JobRestartJobs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JobSigReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SwitchOutputTo</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>GNode</name> <modifier>*</modifier></type><name>lastNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gn</name> <operator>==</operator> <name>lastNode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lastNode</name> <operator>=</operator> <name>gn</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>maxJobs</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>targPrefix</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>targPrefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s %s ---\n"</literal></expr></argument>, <argument><expr><name>targPrefix</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>nfds_per_job</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON_DEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Job_FlagsToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"%c%c%c"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name></expr> ?</condition><then> <expr><literal type="char">'i'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>echo</name></name></expr> ?</condition><then> <expr><literal type="char">'s'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>job</name><operator>-&gt;</operator><name>special</name></name></expr> ?</condition><then> <expr><literal type="char">'S'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DumpJobs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>where</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"job table @ %s\n"</literal></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Job_FlagsToString</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof <name>flags</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"job %d, status %d, flags %s, pid %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>job</name> <operator>-</operator> <name>job_table</name><operator>)</operator></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobDeleteTarget</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_JOIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_PHONY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Targ_Precious</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>noExecute</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>GNode_Path</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eunlink</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Error</name><argument_list>(<argument><expr><literal type="string">"*** %s removed"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobSigLock</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>omaskp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caught_signals</name></expr></argument>, <argument><expr><name>omaskp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"JobSigLock: sigprocmask: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><name>omaskp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobSigUnlock</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>omaskp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><name>omaskp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobCreatePipe</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pipe_fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipe_fds</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot create pipe: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>pipe_fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>F_DUPFD</name></expr></argument>, <argument><expr><name>minfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pipe_fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name> <operator>=</operator> <name><name>pipe_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>outPipe</name></name> <operator>=</operator> <name><name>pipe_fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot set close-on-exec: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>outPipe</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot set close-on-exec: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot get flags: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot set flags: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobCondPassSig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"JobCondPassSig(%d) called.\n"</literal></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>JOB_ST_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"JobCondPassSig passing signal %d to child %d.\n"</literal></expr></argument>,
<argument><expr><name>signo</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KILLPG</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobChildSig</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>MAKE_ATTR_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>caught_sigchld</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>childExitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>, <argument><expr><name>CHILD_EXIT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobContinueSig</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>MAKE_ATTR_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<while>while <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>childExitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>, <argument><expr><name>DO_JOB_RESUME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></function>





<function><type><name>MAKE_ATTR_DEAD</name> <specifier>static</specifier> <name>void</name></type>
<name>JobPassSig_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>JobInterrupt</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>MAKE_ATTR_DEAD</name> <specifier>static</specifier> <name>void</name></type>
<name>JobPassSig_term</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>JobInterrupt</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobPassSig_suspend</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>nmask</name></decl>, <decl><type ref="prev"/><name>omask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>


<expr_stmt><expr><name>make_suspended</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>JobCondPassSig</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>sigfillset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nmask</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"JobPassSig passing signal %d to self.\n"</literal></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




















<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>JobPassSig_suspend</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>omask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Job</name> <modifier>*</modifier></type>
<name>JobFindPid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>JobStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isJobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>status</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>job</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>isJobs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DumpJobs</name><argument_list>(<argument><expr><literal type="string">"no pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>ParseCommandFlags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>CommandFlags</name> <modifier>*</modifier></type><name>out_cmdFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out_cmdFlags</name><operator>-&gt;</operator><name>echo</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_cmdFlags</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_cmdFlags</name><operator>-&gt;</operator><name>always</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_cmdFlags</name><operator>-&gt;</operator><name>echo</name></name> <operator>=</operator> <call><name>DEBUG</name><argument_list>(<argument><expr><name>LOUD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_cmdFlags</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_cmdFlags</name><operator>-&gt;</operator><name>always</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pp_skip_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>EscapeShellDblQuot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>esc</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal> <operator>||</operator> <name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator>
<name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>esc</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>esc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>esc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>esc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_WriteFmt</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name><name>wr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wr</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>stdout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>wr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_WriteLine</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShellWriter_WriteFmt</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_EchoOff</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>hasEchoCtl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_WriteLine</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>shell</name><operator>-&gt;</operator><name>echoOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_EchoCmd</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escCmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ShellWriter_WriteFmt</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>shell</name><operator>-&gt;</operator><name>echoTmpl</name></name></expr></argument>, <argument><expr><name>escCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_EchoOn</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>hasEchoCtl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_WriteLine</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>shell</name><operator>-&gt;</operator><name>echoOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_TraceOn</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wr</name><operator>-&gt;</operator><name>xtraced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ShellWriter_WriteLine</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><literal type="string">"set -x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wr</name><operator>-&gt;</operator><name>xtraced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_ErrOff</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>echo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>echo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOff</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ShellWriter_WriteLine</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>shell</name><operator>-&gt;</operator><name>errOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>echo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOn</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShellWriter_ErrOn</name><parameter_list>(<parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>echo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>echo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOff</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ShellWriter_WriteLine</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>shell</name><operator>-&gt;</operator><name>errOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>echo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOn</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobWriteSpecialsEchoCtl</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>CommandFlags</name> <modifier>*</modifier></type><name>inout_cmdFlags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escCmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>inout_cmdTemplate</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>&amp;&amp;</operator> <name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOff</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShellWriter_EchoCmd</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name>escCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>echo</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>echo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoCmd</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name>escCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>inout_cmdTemplate</name> <operator>=</operator> <name><name>shell</name><operator>-&gt;</operator><name>runIgnTmpl</name></name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobWriteSpecials</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escCmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>run</name></decl></parameter>,
<parameter><decl><type><name>CommandFlags</name> <modifier>*</modifier></type><name>inout_cmdFlags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>inout_cmdTemplate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>hasErrCtl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_ErrOff</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>&amp;&amp;</operator> <name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>echo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>runIgnTmpl</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>runIgnTmpl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>JobWriteSpecialsEchoCtl</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>inout_cmdFlags</name></expr></argument>, <argument><expr><name>escCmd</name></expr></argument>,
<argument><expr><name>inout_cmdTemplate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>inout_cmdFlags</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobWriteCommand</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>ShellWriter</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ucmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CommandFlags</name></type> <name>cmdFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdTemplate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xcmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xcmdStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escCmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>GNode_ShouldExecute</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Var_Subst</name><argument_list>(<argument><expr><name>ucmd</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>VARE_WANTRES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xcmdStart</name> <operator>=</operator> <name>xcmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdTemplate</name> <operator>=</operator> <literal type="string">"%s\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ParseCommandFlags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xcmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cmdFlags</name><operator>.</operator><name>always</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>run</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>Compat_RunCommand</name><argument_list>(<argument><expr><name>ucmd</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xcmdStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>escCmd</name> <operator>=</operator> <ternary><condition><expr><name><name>shell</name><operator>-&gt;</operator><name>hasErrCtl</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>EscapeShellDblQuot</name><argument_list>(<argument><expr><name>xcmd</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdFlags</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>&amp;&amp;</operator> <name>run</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>hasEchoCtl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOff</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>hasErrCtl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmdFlags</name><operator>.</operator><name>echo</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdFlags</name><operator>.</operator><name>ignerr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>JobWriteSpecials</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>escCmd</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdFlags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdTemplate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shell</name><operator>-&gt;</operator><name>hasErrCtl</name></name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>runChkTmpl</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>shell</name><operator>-&gt;</operator><name>runChkTmpl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>&amp;&amp;</operator> <name><name>cmdFlags</name><operator>.</operator><name>echo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOff</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShellWriter_EchoCmd</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name>escCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdFlags</name><operator>.</operator><name>echo</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>cmdTemplate</name> <operator>=</operator> <ternary><condition><expr><name><name>escCmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>shell</name><operator>-&gt;</operator><name>commentChar</name></name> <operator>||</operator>
<name><name>escCmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>
?</condition><then> <expr><name><name>shell</name><operator>-&gt;</operator><name>runIgnTmpl</name></name></expr>
</then><else>: <expr><name><name>shell</name><operator>-&gt;</operator><name>runChkTmpl</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmdFlags</name><operator>.</operator><name>ignerr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>SHELL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>shellName</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_TraceOn</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ShellWriter_WriteFmt</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name>cmdTemplate</name></expr></argument>, <argument><expr><name>xcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xcmdStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>escCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdFlags</name><operator>.</operator><name>ignerr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_ErrOn</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>cmdFlags</name><operator>.</operator><name>echo</name></name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>echo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdFlags</name><operator>.</operator><name>echo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ShellWriter_EchoOn</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>bool</name></type>
<name>JobWriteCommands</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>seen</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShellWriter</name></type> <name>wr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wr</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wr</name><operator>.</operator><name>xtraced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>commands</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>OP_SAVE_CMDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>tailCmds</name></name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JobWriteCommand</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wr</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>seen</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobSaveCommands</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>tailCmds</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expanded_cmd</name></decl>;</decl_stmt>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Subst</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>VARE_WANTRES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expanded_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>Targ_GetEndNode</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>commands</name></expr></argument>, <argument><expr><name>expanded_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobClosePipes</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clearfd</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>outPipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>outPipe</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CollectOutput</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DebugFailedJob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEBUG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"*** Failed target: %s\n"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"*** Failed commands:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>commands</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xcmd</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Subst</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>VARE_WANTRES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\t=&gt; %s\n"</literal></expr></argument>, <argument><expr><name>xcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobFinishDoneExitedError</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>WAIT_T</name> <modifier>*</modifier></type><name>inout_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SwitchOutputTo</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>meta_job_error</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><operator>*</operator><name>inout_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldDieQuietly</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DebugFailedJob</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Error code %d%s\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><operator>*</operator><name>inout_status</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name></expr> ?</condition><then> <expr><literal type="string">" (ignored)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WAIT_STATUS</name><argument_list>(<argument><expr><operator>*</operator><name>inout_status</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deleteOnError</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobDeleteTarget</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PrintOnError</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobFinishDoneExited</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>WAIT_T</name> <modifier>*</modifier></type><name>inout_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"Process %d [%s] exited.\n"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><operator>*</operator><name>inout_status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobFinishDoneExitedError</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>inout_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SwitchOutputTo</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Completed successfully\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobFinishDoneSignaled</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>WAIT_T</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SwitchOutputTo</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DebugFailedJob</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Signal %d\n"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>deleteOnError</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobDeleteTarget</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobFinishDone</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>WAIT_T</name> <modifier>*</modifier></type><name>inout_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><operator>*</operator><name>inout_status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobFinishDoneExited</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>inout_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobFinishDoneSignaled</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>*</operator><name>inout_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobFinish</name> <parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>WAIT_T</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name></decl>, <decl><type ref="prev"/><name>return_job_token</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUG3</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"JobFinish: %d [%s], status %d\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
<call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>JobClosePipes</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>!=</operator> <name>stdout</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot write shell script for '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JobClosePipes</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobFinishDone</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>meta_status</name> <init>= <expr><call><name>meta_job_finish</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>meta_status</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>meta_status</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>return_job_token</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Trace_Log</name><argument_list>(<argument><expr><name>JOBEND</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>special</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WAIT_STATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>aborting</name> <operator>==</operator> <name>ABORT_ERROR</name><operator>)</operator> <operator>||</operator> <name>aborting</name> <operator>==</operator> <name>ABORT_INTERRUPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>return_job_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aborting</name> <operator>!=</operator> <name>ABORT_ERROR</name> <operator>&amp;&amp;</operator> <name>aborting</name> <operator>!=</operator> <name>ABORT_INTERRUPT</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>WAIT_STATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>JobSaveCommands</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>made</name></name> <operator>=</operator> <name>MADE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>special</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>return_job_token</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Make_Update</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>JOB_ST_FREE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>job_errors</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>JOB_ST_FREE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>job_errors</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>.</operator><name>keepgoing</name></name> <operator>&amp;&amp;</operator> <name>aborting</name> <operator>!=</operator> <name>ABORT_INTERRUPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>aborting</name> <operator>=</operator> <name>ABORT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>return_job_token</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Job_TokenReturn</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aborting</name> <operator>==</operator> <name>ABORT_ERROR</name> <operator>&amp;&amp;</operator> <name>jobTokensRunning</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Finish</name><argument_list>(<argument><expr><name>job_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>TouchRegular</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>GNode_Path</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>times</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>times</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>times</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utime</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>times</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"*** couldn't touch %s: %s\n"</literal></expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>Job_Touch</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>echo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator>
<operator>(</operator><name>OP_JOIN</name> <operator>|</operator> <name>OP_USE</name> <operator>|</operator> <name>OP_USEBEFORE</name> <operator>|</operator> <name>OP_EXEC</name> <operator>|</operator> <name>OP_OPTIONAL</name> <operator>|</operator>
<name>OP_SPECIAL</name> <operator>|</operator> <name>OP_PHONY</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>echo</name> <operator>||</operator> <operator>!</operator><call><name>GNode_ShouldExecute</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"touch %s\n"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GNode_ShouldExecute</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_ARCHV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Arch_Touch</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_LIB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Arch_TouchLib</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TouchRegular</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>














<function><type><name>bool</name></type>
<name>Job_CheckCommands</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>abortProc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GNode_IsTarget</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_LIB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>defaultNode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>defaultNode</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_SPECIAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call><name>Make_HandleUse</name><argument_list>(<argument><expr><name>defaultNode</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Var_Set</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>IMPSRC</name></expr></argument>, <argument><expr><call><name>GNode_VarTarget</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Dir_UpdateMTime</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_SPECIAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>fromDepend</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Job_RunTarget</name><argument_list>(<argument><expr><literal type="string">".STALE"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,
<argument><expr><literal type="string">"%s: %s, %d: ignoring stale %s for %s\n"</literal></expr></argument>,
<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>makeDependfile</name></expr></argument>,
<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_OPTIONAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s: don't know how to make %s (%s)\n"</literal></expr></argument>,
<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>keepgoing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s: don't know how to make %s (%s)\n"</literal></expr></argument>,
<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"continuing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>abortProc</name><argument_list>(<argument><expr><literal type="string">"%s: don't know how to make %s. Stop"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobExec</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"Running %s\n"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\tCommand: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SwitchOutputTo</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>JobSigLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>JOB_ST_RUNNING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Var_ReexportVars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpid</name> <operator>=</operator> <call><name>vfork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot vfork: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>sigset_t</name></type> <name>tmask</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>meta_job_child</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>JobSigReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JobSigUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"dup2"</literal></expr></argument>, <argument><expr><literal type="string">"job-&gt;cmdFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"fcntl clear close-on-exec"</literal></expr></argument>, <argument><expr><literal type="string">"stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"lseek to 0"</literal></expr></argument>, <argument><expr><literal type="string">"stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Always_pass_job_queue</name> <operator>||</operator>
<operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><name>OP_MAKE</name> <operator>|</operator> <name>OP_SUBMAKE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>inPipe</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"clear close-on-exec"</literal></expr></argument>,
<argument><expr><literal type="string">"tokenWaitJob.inPipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"clear close-on-exec"</literal></expr></argument>,
<argument><expr><literal type="string">"tokenWaitJob.outPipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>outPipe</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"dup2"</literal></expr></argument>, <argument><expr><literal type="string">"job-&gt;outPipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"clear close-on-exec"</literal></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"dup2"</literal></expr></argument>, <argument><expr><literal type="string">"1, 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETPGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setpgrp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>execv</name><argument_list>(<argument><expr><name>shellPath</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>execDie</name><argument_list>(<argument><expr><literal type="string">"exec"</literal></expr></argument>, <argument><expr><name>shellPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>cpid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Trace_Log</name><argument_list>(<argument><expr><name>JOBSTART</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>meta_job_parent</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>cpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>watchfd</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>!=</operator> <name>stdout</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Cannot write shell script for '%s': %s"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"JobExec(%s): pid %d added to jobs table\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DumpJobs</name><argument_list>(<argument><expr><literal type="string">"job started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>JobSigUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobMakeArgv</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>UNCONST</name><argument_list>(<argument><expr><name>shellName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>errFlag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>










<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <name>args</name></sizeof></expr></argument>, <argument><expr><literal type="string">"-%s%s"</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>echo</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>UNCONST</name><argument_list>(<argument><expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>UNCONST</name><argument_list>(<argument><expr><name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobWriteShellCommands</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out_run</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>char</name></type> <name><name>tfile</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tfd</name> <operator>=</operator> <call><name>Job_TempFile</name><argument_list>(<argument><expr><name>TMPPAT</name></expr></argument>, <argument><expr><name>tfile</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tfile</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>tfd</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Could not fdopen %s"</literal></expr></argument>, <argument><expr><name>tfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>meta_job_start</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_SILENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>out_run</name> <operator>=</operator> <call><name>JobWriteCommands</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>JobStartResult</name></type>
<name>JobStart</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cmdsOK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>run</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>JOB_ST_FREE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>&gt;=</operator> <name>job_table_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"JobStart no job slots vacant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>gn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>tailCmds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>JOB_ST_SET_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>special</name></name> <operator>=</operator> <name>special</name> <operator>||</operator> <name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>ignerr</name></name> <operator>=</operator> <name><name>opts</name><operator>.</operator><name>ignoreErrors</name></name> <operator>||</operator> <name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_IGNORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>opts</name><operator>.</operator><name>beSilent</name></name> <operator>||</operator> <name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_SILENT</name><operator>)</operator></expr>;</expr_stmt>





<expr_stmt><expr><name>cmdsOK</name> <operator>=</operator> <call><name>Job_CheckCommands</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdsOK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PrintOnError</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DieHorribly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_MAKE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>.</operator><name>noRecursiveExecute</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>opts</name><operator>.</operator><name>noExecute</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>.</operator><name>touchFlag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>











<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdsOK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PrintOnError</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DieHorribly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JobWriteShellCommands</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>GNode_ShouldExecute</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>SwitchOutputTo</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdsOK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobWriteCommands</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>Job_Touch</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>echo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>special</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Job_TokenReturn</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>!=</operator> <name>stdout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>cmdFILE</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>cmdsOK</name> <operator>&amp;&amp;</operator> <name>aborting</name> <operator>==</operator> <name>ABORT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>JobSaveCommands</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>made</name></name> <operator>=</operator> <name>MADE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Make_Update</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>JOB_ST_FREE</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>cmdsOK</name></expr> ?</condition><then> <expr><name>JOB_FINISHED</name></expr> </then><else>: <expr><name>JOB_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>JobMakeArgv</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>JobCreatePipe</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JobExec</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>JOB_RUNNING</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>PrintFilteredOutput</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ecp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>noPrint</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>shell</name><operator>-&gt;</operator><name>noPrint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>







<while>while <condition>(<expr><operator>(</operator><name>ecp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>shell</name><operator>-&gt;</operator><name>noPrint</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ecp</name> <operator>!=</operator> <name>cp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ecp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>







<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ecp</name> <operator>+</operator> <name><name>shell</name><operator>-&gt;</operator><name>noPrintLen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pp_skip_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type>
<name>CollectOutput</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>finish</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>gotNL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nRead</name></decl>;</decl_stmt>


<label><name>again</name>:</label>
<expr_stmt><expr><name>gotNL</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fbuf</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>JOB_BUFSIZE</name> <operator>-</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nRead</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DEBUG</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"CollectOutput(piperead)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nRead</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>







<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>finish</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>finish</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>+</operator> <name>nr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>+</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gotNL</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotNL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>+=</operator> <name>nr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>==</operator> <name>JOB_BUFSIZE</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>fbuf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gotNL</name> <operator>||</operator> <name>fbuf</name></expr>)</condition> <block>{<block_content>










<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>job</name><operator>-&gt;</operator><name>curPos</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>







<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>PrintFilteredOutput</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>.</operator><name>beSilent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SwitchOutputTo</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_META</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>meta_job_output</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>gotNL</name></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>gotNL</name></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memmove</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>outBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>outBuf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>max</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>=</operator> <name>max</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>curPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>finish</name></expr>)</condition> <block>{<block_content>








<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobRun</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>targ</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>








GNodeList lst = LST_INIT;
Lst_Append(&amp;lst, targ);
(void)Make_Run(&amp;lst);
Lst_Done(&amp;lst);
JobStart(targ, true);
while (jobTokensRunning != 0) {
Job_CatchOutput();
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Compat_Make</name><argument_list>(<argument><expr><name>targ</name></expr></argument>, <argument><expr><name>targ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>targ</name><operator>-&gt;</operator><name>made</name></name> <operator>==</operator> <name>ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PrintOnError</name><argument_list>(<argument><expr><name>targ</name></expr></argument>, <argument><expr><literal type="string">"\n\nStop."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>











<function><type><name>void</name></type>
<name>Job_CatchChildren</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAIT_T</name></type> <name>status</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>jobTokensRunning</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>caught_sigchld</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>caught_sigchld</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>(</operator><name>pid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>WNOHANG</name> <operator>|</operator> <name>WUNTRACED</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"Process %d exited/stopped status %x.\n"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>WAIT_STATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JobReapChild</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>JobReapChild</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>WAIT_T</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isJobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>jobTokensRunning</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>JobFindPid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>JOB_ST_RUNNING</name></expr></argument>, <argument><expr><name>isJobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isJobs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lurking_children</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Error</name><argument_list>(<argument><expr><literal type="string">"Child (%d) status %x not in table?"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"Process %d (%s) stopped.\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>make_suspended</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>WSTOPSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SIGTSTP</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Suspended\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGSTOP</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Stopped\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Stopped -- signal %d\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>WSTOPSIG</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>suspended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>JOB_ST_FINISHED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>exit_status</name></name> <operator>=</operator> <call><name>WAIT_STATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JobFinish</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>Job_CatchOutput</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>nready</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>fds</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>wantToken</name></expr></argument>, <argument><expr><name>fdsLen</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>wantToken</name></expr></argument>,
<argument><expr><name>POLL_MSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>nready</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>nready</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"poll: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nready</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>readyfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>childExitJob</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>token</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>childExitJob</name><operator>.</operator><name>inPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name><name>DO_JOB_RESUME</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><call><name>JobRestartJobs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"unexpected eof on token pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"token pipe read: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nready</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Job_CatchChildren</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nready</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>npseudojobs</name> <operator>*</operator> <call><name>nfds_per_job</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fdsLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>jobByFdIndex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>JOB_ST_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CollectOutput</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON_DEV</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name>useMeta</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>meta_job_event</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>nready</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Job_Make</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>JobStart</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitShellNameAndPath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>shellName</name> <operator>=</operator> <name><name>shell</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFSHELL_CUSTOM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>shellName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shellPath</name> <operator>=</operator> <name>shellName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shellName</name> <operator>=</operator> <call><name>str_basename</name><argument_list>(<argument><expr><name>shellPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFSHELL_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>shellPath</name> <operator>=</operator> <name>DEFSHELL_PATH</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>shellPath</name> <operator>=</operator> <call><name>str_concat3</name><argument_list>(<argument><expr><name>_PATH_DEFSHELLDIR</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>shellName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Shell_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shellPath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>InitShellNameAndPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Var_SetWithFlags</name><argument_list>(<argument><expr><name>SCOPE_CMDLINE</name></expr></argument>, <argument><expr><literal type="string">".SHELL"</literal></expr></argument>, <argument><expr><name>shellPath</name></expr></argument>, <argument><expr><name>VAR_SET_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shell</name><operator>-&gt;</operator><name>echoFlag</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>hasErrCtl</name></name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>errFlag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shellErrFlag</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shellErrFlag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shellErrFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shellErrFlag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shellErrFlag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>shellErrFlag</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shellErrFlag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>shellErrFlag</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>,
<argument><expr><name><name>shell</name><operator>-&gt;</operator><name>errFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shellErrFlag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shellErrFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shellErrFlag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>Shell_GetNewline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>shell</name><operator>-&gt;</operator><name>newline</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Job_SetPrefix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>targPrefix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>targPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>Var_Exists</name><argument_list>(<argument><expr><name>SCOPE_GLOBAL</name></expr></argument>, <argument><expr><name>MAKE_JOB_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Global_Set</name><argument_list>(<argument><expr><name>MAKE_JOB_PREFIX</name></expr></argument>, <argument><expr><literal type="string">"---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Var_Subst</name><argument_list>(<argument><expr><literal type="string">"${"</literal> <name>MAKE_JOB_PREFIX</name> <literal type="string">"}"</literal></expr></argument>,
<argument><expr><name>SCOPE_GLOBAL</name></expr></argument>, <argument><expr><name>VARE_WANTRES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>targPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddSig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>SignalProc</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bmake_signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>caught_signals</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bmake_signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Job_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Job_SetPrefix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>job_table</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>opts</name><operator>.</operator><name>maxJobs</name></name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>job_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>job_table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>opts</name><operator>.</operator><name>maxJobs</name></name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>job_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>job_table_end</name> <operator>=</operator> <name>job_table</name> <operator>+</operator> <name><name>opts</name><operator>.</operator><name>maxJobs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wantToken</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>caught_sigchld</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>aborting</name> <operator>=</operator> <name>ABORT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>job_errors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Always_pass_job_queue</name> <operator>=</operator> <call><name>GetBooleanExpr</name><argument_list>(<argument><expr><name>MAKE_ALWAYS_PASS_JOB_QUEUE</name></expr></argument>,
<argument><expr><name>Always_pass_job_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Job_error_token</name> <operator>=</operator> <call><name>GetBooleanExpr</name><argument_list>(<argument><expr><name>MAKE_JOB_ERROR_TOKEN</name></expr></argument>, <argument><expr><name>Job_error_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAIT_T</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>(</operator><name>pid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lurking_children</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><call><name>Shell_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JobCreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>childExitJob</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>nfds</name> <init>= <expr><operator>(</operator><name>npseudojobs</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>opts</name><operator>.</operator><name>maxJobs</name></name><operator>)</operator> <operator>*</operator>
<call><name>nfds_per_job</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fds</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>fds</name> <operator>*</operator> <name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jobByFdIndex</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>jobByFdIndex</name> <operator>*</operator> <name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>watchfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tokenWaitJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>watchfd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>childExitJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>caught_signals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bmake_signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>JobChildSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>caught_signals</name></expr></argument>, <argument><expr><name>SIGCHLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>JobPassSig_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>JobPassSig_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>JobPassSig_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>JobPassSig_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>, <argument><expr><name>JobPassSig_suspend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>, <argument><expr><name>JobPassSig_suspend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>, <argument><expr><name>JobPassSig_suspend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>JobCondPassSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddSig</name><argument_list>(<argument><expr><name>SIGCONT</name></expr></argument>, <argument><expr><name>JobContinueSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Job_RunTarget</name><argument_list>(<argument><expr><literal type="string">".BEGIN"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Targ_GetEndNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DelSig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sigismember</name><argument_list>(<argument><expr><operator>&amp;</operator><name>caught_signals</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bmake_signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobSigReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DelSig</name><argument_list>(<argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bmake_signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Shell</name> <modifier>*</modifier></type>
<name>FindShellByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Shell</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><name>shells</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Shell</name> <modifier>*</modifier></type><name>shellsEnd</name> <init>= <expr><name>sh</name> <operator>+</operator> <sizeof>sizeof <name>shells</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>shells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sh</name> <operator>=</operator> <name>shells</name></expr>;</init> <condition><expr><name>sh</name> <operator>&lt;</operator> <name>shellsEnd</name></expr>;</condition> <incr><expr><name>sh</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sh</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>












































<function><type><name>bool</name></type>
<name>Job_ParseShell</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Words</name></type> <name>wordsList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>words</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Shell</name></type> <name>newShell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fullSpec</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Shell</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>pp_skip_whitespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shell_freeIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newShell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>newShell</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>wordsList</name> <operator>=</operator> <call><name>Str_Words</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>words</name> <operator>=</operator> <name><name>wordsList</name><operator>.</operator><name>words</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>wordsList</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>wordsList</name><operator>.</operator><name>freeIt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>words</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Error</name><argument_list>(<argument><expr><literal type="string">"Unterminated quoted string [%s]"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shell_freeIt</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>argv</name> <operator>=</operator> <name>words</name></expr>;</init> <condition><expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>*</operator><name>argv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"path="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"name="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"quiet="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>echoOff</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"echo="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>echoOn</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"filter="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>noPrint</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>noPrintLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>newShell</name><operator>.</operator><name>noPrint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"echoFlag="</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>echoFlag</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"errFlag="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>errFlag</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"hasErrCtl="</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>arg</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>hasErrCtl</name></name> <operator>=</operator> <name>c</name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'y'</literal> <operator>||</operator>
<name>c</name> <operator>==</operator> <literal type="char">'T'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"newline="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>newline</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"check="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>errOn</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>echoTmpl</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ignore="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>errOff</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>runIgnTmpl</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"errout="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>runChkTmpl</name></name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"comment="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newShell</name><operator>.</operator><name>commentChar</name></name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>Parse_Error</name><argument_list>(<argument><expr><name>PARSE_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"Unknown keyword \"%s\""</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fullSpec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>newShell</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Parse_Error</name><argument_list>(<argument><expr><name>PARSE_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"Neither path nor name specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sh</name> <operator>=</operator> <call><name>FindShellByName</name><argument_list>(<argument><expr><name><name>newShell</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Parse_Error</name><argument_list>(<argument><expr><name>PARSE_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%s: No matching shell"</literal></expr></argument>, <argument><expr><name><name>newShell</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>sh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shellName</name> <operator>=</operator> <name><name>newShell</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shellPath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>UNCONST</name><argument_list>(<argument><expr><name>shellPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shellPath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Shell_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><name>shellPath</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>UNCONST</name><argument_list>(<argument><expr><name>shellPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newShell</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shellName</name> <operator>=</operator> <name><name>newShell</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shellName</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fullSpec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sh</name> <operator>=</operator> <call><name>FindShellByName</name><argument_list>(<argument><expr><name>shellName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Parse_Error</name><argument_list>(<argument><expr><name>PARSE_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%s: No matching shell"</literal></expr></argument>, <argument><expr><name>shellName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>sh</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>shell</name> <operator>=</operator> <name>newShell</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Shell_Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>echoOn</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>-&gt;</operator><name>echoOff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shell</name><operator>-&gt;</operator><name>hasEchoCtl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shell</name><operator>-&gt;</operator><name>hasErrCtl</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>echoTmpl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shell</name><operator>-&gt;</operator><name>echoTmpl</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>-&gt;</operator><name>runIgnTmpl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shell</name><operator>-&gt;</operator><name>runIgnTmpl</name></name> <operator>=</operator> <literal type="string">"%s\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobInterrupt</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>runINTERRUPT</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>interrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aborting</name> <operator>=</operator> <name>ABORT_INTERRUPT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JobSigLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>JOB_ST_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gn</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JobDeleteTarget</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>,
<argument><expr><literal type="string">"JobInterrupt passing signal %d to child %d.\n"</literal></expr></argument>,
<argument><expr><name>signo</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KILLPG</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>JobSigUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>runINTERRUPT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>.</operator><name>touchFlag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>interrupt</name> <operator>=</operator> <call><name>Targ_FindNode</name><argument_list>(<argument><expr><literal type="string">".INTERRUPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interrupt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>ignoreErrors</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JobRun</name><argument_list>(<argument><expr><name>interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Trace_Log</name><argument_list>(<argument><expr><name>MAKEINTR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>Job_Finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>endNode</name> <init>= <expr><call><name>Targ_GetEndNode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>endNode</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>endNode</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>job_errors</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Error</name><argument_list>(<argument><expr><literal type="string">"Errors reported so .END ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>JobRun</name><argument_list>(<argument><expr><name>endNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>job_errors</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Job_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shell_freeIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Job_Wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>aborting</name> <operator>=</operator> <name>ABORT_WAIT</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>jobTokensRunning</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Job_CatchOutput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>aborting</name> <operator>=</operator> <name>ABORT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>Job_AbortAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAIT_T</name></type> <name>foo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aborting</name> <operator>=</operator> <name>ABORT_ERROR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>jobTokensRunning</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>JOB_ST_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>KILLPG</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KILLPG</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><operator>(</operator><name>pid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>foo</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobRestartJobs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>job_table</name></expr>;</init> <condition><expr><name>job</name> <operator>&lt;</operator> <name>job_table_end</name></expr>;</condition> <incr><expr><name>job</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>JOB_ST_RUNNING</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>make_suspended</name> <operator>||</operator> <name><name>job</name><operator>-&gt;</operator><name>suspended</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"Restarting stopped job pid %d.\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>suspended</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** [%s] Continued\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>suspended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>KILLPG</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>DEBUG</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"Failed to send SIGCONT to %d\n"</literal></expr></argument>,
<argument><expr><name><name>job</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>JOB_ST_FINISHED</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>JobFinish</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>exit_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>make_suspended</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>watchfd</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Watching watched job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>inPipe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jobByFdIndex</name><index>[<expr><name>fdsLen</name></expr>]</index></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fdsLen</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON_DEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>meta_job_fd</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <ternary><condition><expr><name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>POLLIN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jobByFdIndex</name><index>[<expr><name>fdsLen</name></expr>]</index></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fdsLen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clearfd</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Unwatching unwatched job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>-</operator> <name>fds</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fdsLen</name><operator>--</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON_DEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>nfds_per_job</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"odd-numbered fd with meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fdsLen</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>fdsLen</name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fds</name><index>[<expr><name>fdsLen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jobByFdIndex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>jobByFdIndex</name><index>[<expr><name>fdsLen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jobByFdIndex</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>inPollfd</name> <operator>=</operator> <operator>&amp;</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILEMON_DEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useMeta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fds</name><index>[<expr><name>fdsLen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jobByFdIndex</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>jobByFdIndex</name><index>[<expr><name>fdsLen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>readyfd</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Polling unwatched job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>inPollfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobTokenAdd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>tok</name> <init>= <expr><name><name>JOB_TOKENS</name><index>[<expr><name>aborting</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>tok1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Job_error_token</name> <operator>&amp;&amp;</operator> <name>aborting</name> <operator>==</operator> <name>ABORT_ERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jobTokensRunning</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>tok</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>inPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>

<expr_stmt><expr><call><name>DEBUG3</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"(%d) aborting %d, deposit token %c\n"</literal></expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aborting</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>Job_TempFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tfile</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tfile_sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JobSigLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkTempFile</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>tfile</name></expr></argument>, <argument><expr><name>tfile_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tfile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DEBUG</name><argument_list>(<argument><expr><name>SCRIPT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>JobSigUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Job_ServerStart</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jp_0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jp_1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>jobarg</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jp_0</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>jp_1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tokenWaitJob</name><operator>.</operator><name>inPipe</name></name> <operator>=</operator> <name>jp_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tokenWaitJob</name><operator>.</operator><name>outPipe</name></name> <operator>=</operator> <name>jp_1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name>jp_0</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name>jp_1</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JobCreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tokenWaitJob</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>jobarg</name></expr></argument>, <argument><expr><sizeof>sizeof <name>jobarg</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%d,%d"</literal></expr></argument>,
<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>inPipe</name></name></expr></argument>, <argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><name>MAKEFLAGS</name></expr></argument>, <argument><expr><literal type="string">"-J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><name>MAKEFLAGS</name></expr></argument>, <argument><expr><name>jobarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_tokens</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobTokenAdd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Job_TokenReturn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>jobTokensRunning</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jobTokensRunning</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"token botch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jobTokensRunning</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>JOB_TOKENS</name><index>[<expr><name>aborting</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JobTokenAdd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>










<function><type><name>bool</name></type>
<name>Job_TokenWithdraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>tok</name></decl>, <decl><type ref="prev"/><name>tok1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wantToken</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG3</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"Job_TokenWithdraw(%d): aborting %d, running %d\n"</literal></expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aborting</name></expr></argument>, <argument><expr><name>jobTokensRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aborting</name> <operator>!=</operator> <name>ABORT_NONE</name> <operator>||</operator> <operator>(</operator><name>jobTokensRunning</name> <operator>&gt;=</operator> <name><name>opts</name><operator>.</operator><name>maxJobs</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>inPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="string">"eof on job pipe!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>jobTokensRunning</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="string">"job pipe read: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"(%d) blocked for token\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wantToken</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUG2</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"(%d) aborted by token %c\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>inPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>

<while>while <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>shouldDieQuietly</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="string">"A failure has been detected "</literal>
<literal type="string">"in another branch of the parallel make"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>jobTokensRunning</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>tokenWaitJob</name><operator>.</operator><name>outPipe</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jobTokensRunning</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>JOB</name></expr></argument>, <argument><expr><literal type="string">"(%d) withdrew token\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type>
<name>Job_RunTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><call><name>Targ_FindNode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>gn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Var_Set</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>ALLSRC</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>JobRun</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>==</operator> <name>ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PrintOnError</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><literal type="string">"\n\nStop."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>emul_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>, <decl><type ref="prev"/><name>wfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maxfd</name></decl>, <decl><type ref="prev"/><name>nselect</name></decl>, <decl><type ref="prev"/><name>npoll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tvp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usecs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;</operator> <name>maxfd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>&gt;=</operator> <name>FD_SETSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Punt</name><argument_list>(<argument><expr><literal type="string">"Ran out of fd_set slots; "</literal>
<literal type="string">"recompile with a larger FD_SETSIZE."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tvp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>usecs</name> <operator>=</operator> <name>timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>usecs</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>usecs</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nselect</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nselect</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nselect</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>npoll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>npoll</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>npoll</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
