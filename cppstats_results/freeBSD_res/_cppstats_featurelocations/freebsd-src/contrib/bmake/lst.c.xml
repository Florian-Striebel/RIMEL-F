<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/lst.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: lst.c,v 1.105 2021/03/15 16:45:30 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>ListNode</name> <modifier>*</modifier></type>
<name>LstNodeNew</name><parameter_list>(<parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt>

<return>return <expr><name>ln</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>List</name> <modifier>*</modifier></type>
<name>Lst_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Lst_Done</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Lst_DoneCall</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>LstFreeProc</name></type> <name>freeProc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeProc</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Lst_Free</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Lst_InsertBefore</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>newNode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newNode</name> <operator>=</operator> <call><name>LstNodeNew</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newNode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newNode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>newNode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Lst_Prepend</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>LstNodeNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Lst_Append</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>LstNodeNew</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Lst_Remove</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>ln</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name>ln</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>LstNode_Set</name><parameter_list>(<parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>LstNode_SetNull</name><parameter_list>(<parameter><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>ListNode</name> <modifier>*</modifier></type>
<name>Lst_FindDatum</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name> <operator>==</operator> <name>datum</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ln</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Lst_MoveAll</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>last</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Lst_PrependAll</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>last</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Lst_Prepend</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Lst_AppendAll</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type>
<name>Lst_Dequeue</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>datum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Lst_Remove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>datum</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>datum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Vector_Init</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>itemSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>itemSize</name></name> <operator>=</operator> <name>itemSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>itemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type>
<name>Vector_Push</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>bmake_realloc</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>cap</name></name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>itemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>Vector_Get</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type>
<name>Vector_Pop</name><parameter_list>(<parameter><decl><type><name>Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><call><name>Vector_Get</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
