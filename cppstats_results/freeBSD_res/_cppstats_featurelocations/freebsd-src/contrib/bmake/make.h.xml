<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/make.h">














































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_MAKE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_MAKE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CLOEXEC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_GNUC_PREREQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((__GNUC__ == (x) &amp;&amp; __GNUC_MINOR__ &gt;= (y)) || (__GNUC__ &gt; (x)))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_GNUC_PREREQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MAKE_GNUC_PREREQ</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_UNUSED</name></cpp:macro> <cpp:value>__attribute__((__unused__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MAKE_GNUC_PREREQ</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_DEAD</name></cpp:macro> <cpp:value>__attribute__((__noreturn__))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_DEAD</name></cpp:macro> <cpp:value>__volatile</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_DEAD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>MAKE_GNUC_PREREQ</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_PRINTFLIKE</name><parameter_list>(<parameter><type><name>fmtarg</name></type></parameter>, <parameter><type><name>firstvararg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__ (__printf__, fmtarg, firstvararg)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ATTR_PRINTFLIKE</name><parameter_list>(<parameter><type><name>fmtarg</name></type></parameter>, <parameter><type><name>firstvararg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_INLINE</name></cpp:macro> <cpp:value>static inline MAKE_ATTR_UNUSED</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_STATIC</name></cpp:macro> <cpp:value>MAKE_INLINE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_STATIC</name></cpp:macro> <cpp:value>static MAKE_ATTR_UNUSED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_C99_BOOLEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__bool_true_false_are_defined</name></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"&lt;stdbool.h&gt; is included in pre-C99 mode"</cpp:literal></cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"bool/true/false is defined in pre-C99 mode"</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>bool</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make-conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buf.h"</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_IFDIR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_ISDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFDIR)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSIX_SIGNALS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



















<typedef>typedef <type><enum>enum <name>GNodeMade</name> <block>{

<decl><name>UNMADE</name></decl>,


<decl><name>DEFERRED</name></decl>,


<decl><name>REQUESTED</name></decl>,



<decl><name>BEINGMADE</name></decl>,


<decl><name>MADE</name></decl>,

<decl><name>UPTODATE</name></decl>,


<decl><name>ERROR</name></decl>,


<decl><name>ABORTED</name></decl>
}</block></enum></type> <name>GNodeMade</name>;</typedef>










<typedef>typedef <type><enum>enum <name>GNodeType</name> <block>{
<decl><name>OP_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,



<decl><name>OP_DEPENDS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,


<decl><name>OP_FORCE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,




<decl><name>OP_DOUBLEDEP</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,


<decl><name>OP_OPMASK</name> <init>= <expr><name>OP_DEPENDS</name> <operator>|</operator> <name>OP_FORCE</name> <operator>|</operator> <name>OP_DOUBLEDEP</name></expr></init></decl>,


<decl><name>OP_OPTIONAL</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,

<decl><name>OP_USE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,


<decl><name>OP_EXEC</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,


<decl><name>OP_IGNORE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,

<decl><name>OP_PRECIOUS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,

<decl><name>OP_SILENT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,



<decl><name>OP_MAKE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,

<decl><name>OP_JOIN</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>,

<decl><name>OP_MADE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></init></decl>,

<decl><name>OP_SPECIAL</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>,

<decl><name>OP_USEBEFORE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>,


<decl><name>OP_INVISIBLE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>,


<decl><name>OP_NOTMAIN</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>,

<decl><name>OP_PHONY</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,

<decl><name>OP_NOPATH</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></init></decl>,




<decl><name>OP_WAIT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>,

<decl><name>OP_NOMETA</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr></init></decl>,

<decl><name>OP_META</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>,

<decl><name>OP_NOMETA_CMP</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></init></decl>,

<decl><name>OP_SUBMAKE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr></init></decl>,




<decl><name>OP_TRANSFORM</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>,


<decl><name>OP_MEMBER</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>,


<decl><name>OP_LIB</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr></init></decl>,



<decl><name>OP_ARCHV</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr></init></decl>,



<decl><name>OP_HAS_COMMANDS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal></expr></init></decl>,



<decl><name>OP_SAVE_CMDS</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal></expr></init></decl>,


<decl><name>OP_DEPS_FOUND</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>,

<decl><name>OP_MARK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr></init></decl>,

<decl><name>OP_NOTARGET</name> <init>= <expr><name>OP_NOTMAIN</name> <operator>|</operator> <name>OP_USE</name> <operator>|</operator> <name>OP_EXEC</name> <operator>|</operator> <name>OP_TRANSFORM</name></expr></init></decl>
}</block></enum></type> <name>GNodeType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>GNodeFlags</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>remake</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>childMade</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>doneWait</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>doneOrder</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fromDepend</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>doneAllsrc</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cycle</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>doneCycle</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>GNodeFlags</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>List</name></name></type> <name>StringList</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ListNode</name></name></type> <name>StringListNode</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>List</name></name></type> <name>GNodeList</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ListNode</name></name></type> <name>GNodeListNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SearchPath</name> <block>{
<decl_stmt><decl><type><name>List</name></type> <name>dirs</name></decl>;</decl_stmt>
}</block></struct></type> <name>SearchPath</name>;</typedef>





<typedef>typedef <type><struct>struct <name>GNode</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uname</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>GNodeType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GNodeFlags</name></type> <name>flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GNodeMade</name></type> <name>made</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unmade</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>GNode</name></name> <modifier>*</modifier></type><name>youngestChild</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>GNodeList</name></type> <name>implicitParents</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>GNodeList</name></type> <name>parents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GNodeList</name></type> <name>children</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>GNodeList</name></type> <name>order_pred</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>GNodeList</name></type> <name>order_succ</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>GNodeList</name></type> <name>cohorts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cohort_num</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unmade_cohorts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>GNode</name></name> <modifier>*</modifier></type><name>centurion</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>checked_seqno</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>HashTable</name></type> <name>vars</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringList</name></type> <name>commands</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>Suffix</name></name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
}</block></struct></type> <name>GNode</name>;</typedef>


<typedef>typedef <type><enum>enum <name>ParseErrorLevel</name> <block>{


<decl><name>PARSE_FATAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PARSE_WARNING</name></decl>,

<decl><name>PARSE_INFO</name></decl>
}</block></enum></type> <name>ParseErrorLevel</name>;</typedef>




<typedef>typedef <type><enum>enum <name>CondEvalResult</name> <block>{
<decl><name>COND_PARSE</name></decl>,
<decl><name>COND_SKIP</name></decl>,
<decl><name>COND_INVALID</name></decl>
}</block></enum></type> <name>CondEvalResult</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET</name></cpp:macro> <cpp:value>"@"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OODATE</name></cpp:macro> <cpp:value>"?"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLSRC</name></cpp:macro> <cpp:value>"&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPSRC</name></cpp:macro> <cpp:value>"&lt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX</name></cpp:macro> <cpp:value>"*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCHIVE</name></cpp:macro> <cpp:value>"!"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMBER</name></cpp:macro> <cpp:value>"%"</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>allPrecious</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>deleteOnError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>doing_depend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>GNode</name> <modifier>*</modifier></type><name>defaultNode</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name>GNode</name> <modifier>*</modifier></type><name>SCOPE_INTERNAL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>GNode</name> <modifier>*</modifier></type><name>SCOPE_GLOBAL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>GNode</name> <modifier>*</modifier></type><name>SCOPE_CMDLINE</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>var_Error</name><index>[]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>time_t</name></type> <name>now</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name>SearchPath</name></type> <name>dirSearchPath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SearchPath</name> <modifier>*</modifier></type><name>parseIncPath</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>SearchPath</name> <modifier>*</modifier></type><name>sysIncPath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SearchPath</name> <modifier>*</modifier></type><name>defSysIncPath</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>curdir</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>makelevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>makeDependfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>savedEnv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pid_t</name></type> <name>myPid</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEFLAGS</name></cpp:macro> <cpp:value>".MAKEFLAGS"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEOVERRIDES</name></cpp:macro> <cpp:value>".MAKEOVERRIDES"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_JOB_PREFIX</name></cpp:macro> <cpp:value>".MAKE.JOB.PREFIX"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_EXPORTED</name></cpp:macro> <cpp:value>".MAKE.EXPORTED"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_MAKEFILES</name></cpp:macro> <cpp:value>".MAKE.MAKEFILES"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_LEVEL</name></cpp:macro> <cpp:value>".MAKE.LEVEL"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_MAKEFILE_PREFERENCE</name></cpp:macro> <cpp:value>".MAKE.MAKEFILE_PREFERENCE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_DEPENDFILE</name></cpp:macro> <cpp:value>".MAKE.DEPENDFILE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_MODE</name></cpp:macro> <cpp:value>".MAKE.MODE"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_LEVEL_ENV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_LEVEL_ENV</name></cpp:macro> <cpp:value>"MAKELEVEL"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>DebugFlags</name> <block>{
<decl><name>DEBUG_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>DEBUG_ARCH</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>DEBUG_COND</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>DEBUG_CWD</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>DEBUG_DIR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>DEBUG_ERROR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>DEBUG_FOR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>DEBUG_GRAPH1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>DEBUG_GRAPH2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>DEBUG_GRAPH3</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,
<decl><name>DEBUG_HASH</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,
<decl><name>DEBUG_JOB</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>,
<decl><name>DEBUG_LOUD</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></init></decl>,
<decl><name>DEBUG_MAKE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>,
<decl><name>DEBUG_META</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>,
<decl><name>DEBUG_PARSE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>,
<decl><name>DEBUG_SCRIPT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>,
<decl><name>DEBUG_SHELL</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>DEBUG_SUFF</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></init></decl>,
<decl><name>DEBUG_TARG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>,
<decl><name>DEBUG_VAR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr></init></decl>,
<decl><name>DEBUG_ALL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>DebugFlags</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>module</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((opts.debug &amp; CONCAT(DEBUG_, module)) != 0)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>debug_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> MAKE_ATTR_PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_IMPL</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (DEBUG(module)) debug_printf args; } while (false)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG0</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>text</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_IMPL(module, ("%s", text))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG1</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_IMPL(module, (fmt, arg1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG2</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_IMPL(module, (fmt, arg1, arg2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG3</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_IMPL(module, (fmt, arg1, arg2, arg3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG4</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_IMPL(module, (fmt, arg1, arg2, arg3, arg4))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG5</name><parameter_list>(<parameter><type><name>module</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>arg1</name></type></parameter>, <parameter><type><name>arg2</name></type></parameter>, <parameter><type><name>arg3</name></type></parameter>, <parameter><type><name>arg4</name></type></parameter>, <parameter><type><name>arg5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_IMPL(module, (fmt, arg1, arg2, arg3, arg4, arg5))</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <name>PrintVarsMode</name> <block>{
<decl><name>PVM_NONE</name></decl>,
<decl><name>PVM_UNEXPANDED</name></decl>,
<decl><name>PVM_EXPANDED</name></decl>
}</block></enum></type> <name>PrintVarsMode</name>;</typedef>


<typedef>typedef <type><struct>struct <name>CmdOpts</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>compatMake</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>DebugFlags</name></type> <name>debug</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>debug_file</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>strict</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>debugVflag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>checkEnvFirst</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringList</name></type> <name>makefiles</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ignoreErrors</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>maxJobs</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>keepgoing</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>noRecursiveExecute</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>noExecute</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>queryFlag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>noBuiltins</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>beSilent</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>touchFlag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PrintVarsMode</name></type> <name>printVars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StringList</name></type> <name>variables</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>parseWarnFatal</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>enterFlag</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>varNoExportEnv</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>StringList</name></type> <name>create</name></decl>;</decl_stmt>

}</block></struct></type> <name>CmdOpts</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CmdOpts</name></type> <name>opts</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nonints.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>GNode_UpdateYoungestChild</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GNode_IsOODate</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Make_ExpandUse</name><parameter_list>(<parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>time_t</name></type> <name>Make_Recheck</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Make_HandleUse</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Make_Update</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GNode_SetLocalVars</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Make_Run</name><parameter_list>(<parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>shouldDieQuietly</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PrintOnError</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Main_ExportMAKEFLAGS</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Main_SetObjdir</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> MAKE_ATTR_PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>int</name></type> <name>mkTempFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>str2Lst_Append</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GNode_FprintDetails</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GNode_ShouldExecute</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>GNode_IsTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_OPMASK</name><operator>)</operator> <operator>!=</operator> <name>OP_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_Path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>GNode_IsWaitingFor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>gn</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>remake</name></name> <operator>&amp;&amp;</operator> <name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>&lt;=</operator> <name>REQUESTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>GNode_IsReady</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>&gt;</operator> <name>DEFERRED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>GNode_IsDone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>&gt;=</operator> <name>MADE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>GNode_IsError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>==</operator> <name>ERROR</name> <operator>||</operator> <name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>==</operator> <name>ABORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarTarget</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>TARGET</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarOodate</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>OODATE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarAllsrc</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>ALLSRC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarImpsrc</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>IMPSRC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarPrefix</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>PREFIX</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarArchive</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>ARCHIVE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_VarMember</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>GNode_ValueDirect</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>MEMBER</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name> <modifier>*</modifier></type>
<name>UNCONST</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>BMAKE_PATH_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>MAXPATHLEN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILLPG</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>, <parameter><type><name>sig</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kill(-(pid), (sig))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILLPG</name><parameter_list>(<parameter><type><name>pid</name></type></parameter>, <parameter><type><name>sig</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>killpg((pid), (sig))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>ch_isalnum</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>ch_isalpha</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>ch_isdigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>ch_isspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>ch_isupper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <name>char</name></type>
<name>ch_tolower</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>MAKE_INLINE</name> <name>char</name></type>
<name>ch_toupper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>cpp_skip_whitespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>ch_isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>cpp_skip_hspace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pp</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>pp</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>pp_skip_whitespace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>ch_isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>pp_skip_hspace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>pp</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>pp</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RCSID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern void do_not_define_rcsid(void)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IDSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IDSTRING</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const char name[] MAKE_ATTR_UNUSED = string</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__RCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__RCSID</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__IDSTRING(rcsid,s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__COPYRIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COPYRIGHT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__IDSTRING(copyright,s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RCSID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__RCSID(id)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_ALL_IN_ONE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__COUNTER__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RCSID_CONCAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CONCAT(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RCSID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static volatile char MAKE_RCSID_CONCAT(rcsid_, __COUNTER__)[] = id</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKE_ALL_IN_ONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RCSID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern void do_not_define_rcsid(void)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RCSID</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static volatile char rcsid[] = id</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
