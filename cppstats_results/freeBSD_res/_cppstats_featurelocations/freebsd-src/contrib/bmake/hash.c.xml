<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/hash.c">








































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: hash.c,v 1.66 2021/12/07 21:58:01 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rebuildLimit</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>Hash_String</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>key</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>out_keylen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_keylen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>key</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type>
<name>Hash_Substring</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>start</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name><name>key</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HashEntry</name> <modifier>*</modifier></type>
<name>HashTable_Find</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chainlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_HASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUG4</name><argument_list>(<argument><expr><name>HASH</name></expr></argument>, <argument><expr><literal type="string">"%s: %p h=%08x key=%s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>chainlen</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>key_hash</name></name> <operator>==</operator> <name>h</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>chainlen</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name> <operator>=</operator> <name>chainlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>HashEntry_KeyEquals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HashEntry</name> <modifier>*</modifier></type><name>he</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>heKey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>heKey</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>start</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name><name>key</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>heKey</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>heKey</name> <operator>||</operator> <operator>*</operator><name>heKey</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>*</operator><name>heKey</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HashEntry</name> <modifier>*</modifier></type>
<name>HashTable_FindEntryBySubstring</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chainlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_HASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUG5</name><argument_list>(<argument><expr><name>HASH</name></expr></argument>, <argument><expr><literal type="string">"%s: %p h=%08x key=%.*s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>Substring_Length</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>chainlen</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>key_hash</name></name> <operator>==</operator> <name>h</name> <operator>&amp;&amp;</operator> <call><name>HashEntry_KeyEquals</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>chainlen</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name> <operator>=</operator> <name>chainlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>HashTable_Init</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>buckets</name> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>buckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>numEntries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>HashTable_Done</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>he</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>HashEntry</name> <modifier>*</modifier></type>
<name>HashTable_FindEntry</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>Hash_String</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>HashTable_Find</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type>
<name>HashTable_FindValue</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>HashTable_FindEntry</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>he</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>he</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type>
<name>HashTable_FindValueBySubstringHash</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>HashTable_FindEntryBySubstring</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>he</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>he</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>HashTable_Enlarge</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oldSize</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>oldBuckets</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>newSize</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>oldSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>newMask</name> <init>= <expr><name>newSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>newBuckets</name> <init>= <expr><call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>newBuckets</name> <operator>*</operator> <name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newBuckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oldSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>oldBuckets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>he</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>newBuckets</name><index>[<expr><name><name>he</name><operator>-&gt;</operator><name>key_hash</name></name> <operator>&amp;</operator> <name>newMask</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newBuckets</name><index>[<expr><name><name>he</name><operator>-&gt;</operator><name>key_hash</name></name> <operator>&amp;</operator> <name>newMask</name></expr>]</index></name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldBuckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name> <operator>=</operator> <name>newMask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>newBuckets</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG5</name><argument_list>(<argument><expr><name>HASH</name></expr></argument>, <argument><expr><literal type="string">"%s: %p size=%d entries=%d maxchain=%d\n"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>numEntries</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>HashEntry</name> <modifier>*</modifier></type>
<name>HashTable_CreateEntry</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out_isNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>Hash_String</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>HashTable_Find</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>he</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_isNew</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_isNew</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>he</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>numEntries</name></name> <operator>&gt;=</operator> <name>rebuildLimit</name> <operator>*</operator> <name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HashTable_Enlarge</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>he</name> <operator>+</operator> <name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>key_hash</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name></expr>]</index></name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>numEntries</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_isNew</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out_isNew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>he</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HashEntry</name> <modifier>*</modifier></type>
<name>HashTable_Set</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>HashTable_CreateEntry</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HashEntry_Set</name><argument_list>(<argument><expr><name>he</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>he</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>HashTable_DeleteEntry</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name><name>he</name><operator>-&gt;</operator><name>key_hash</name></name> <operator>&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>bucketsMask</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>ref</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>he</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ref</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>numEntries</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>HashEntry</name> <modifier>*</modifier></type>
<name>HashIter_Next</name><parameter_list>(<parameter><decl><type><name>HashIter</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>hi</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>hi</name><operator>-&gt;</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>buckets</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buckets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bucketsSize</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>he</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>he</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>nextBucket</name></name> <operator>&gt;=</operator> <name>bucketsSize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>buckets</name><index>[<expr><name><name>hi</name><operator>-&gt;</operator><name>nextBucket</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
<return>return <expr><name>he</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>HashTable_DebugStats</name><parameter_list>(<parameter><decl><type><name>HashTable</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DEBUG4</name><argument_list>(<argument><expr><name>HASH</name></expr></argument>, <argument><expr><literal type="string">"HashTable %s: size=%u numEntries=%u maxchain=%u\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>bucketsSize</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>numEntries</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>maxchain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
