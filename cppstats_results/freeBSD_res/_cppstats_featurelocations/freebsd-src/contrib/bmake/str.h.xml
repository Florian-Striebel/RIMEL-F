<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/str.h">



































<typedef>typedef <type><struct>struct <name>FStr</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>freeIt</name></decl>;</decl_stmt>
}</block></struct></type> <name>FStr</name>;</typedef>


<typedef>typedef <type><struct>struct <name>MFStr</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>freeIt</name></decl>;</decl_stmt>
}</block></struct></type> <name>MFStr</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Substring</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>Substring</name>;</typedef>





<typedef>typedef <type><struct>struct <name>LazyBuf</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl>;</decl_stmt>
}</block></struct></type> <name>LazyBuf</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Words</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>words</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>freeIt</name></decl>;</decl_stmt>
}</block></struct></type> <name>Words</name>;</typedef>


<typedef>typedef <type><struct>struct <name>SubstringWords</name> <block>{
<decl_stmt><decl><type><name>Substring</name> <modifier>*</modifier></type><name>words</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>freeIt</name></decl>;</decl_stmt>
}</block></struct></type> <name>SubstringWords</name>;</typedef>


<function><type><name>MAKE_INLINE</name> <name>FStr</name></type>
<name>FStr_Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>freeIt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FStr</name></type> <name>fstr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fstr</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fstr</name><operator>.</operator><name>freeIt</name></name> <operator>=</operator> <name>freeIt</name></expr>;</expr_stmt>
<return>return <expr><name>fstr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>MAKE_INLINE</name> <name>FStr</name></type>
<name>FStr_InitOwn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FStr_Init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>MAKE_INLINE</name> <name>FStr</name></type>
<name>FStr_InitRefer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FStr_Init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>FStr_Done</name><parameter_list>(<parameter><decl><type><name>FStr</name> <modifier>*</modifier></type><name>fstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fstr</name><operator>-&gt;</operator><name>freeIt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>fstr</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fstr</name><operator>-&gt;</operator><name>freeIt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>MAKE_INLINE</name> <name>MFStr</name></type>
<name>MFStr_Init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>freeIt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MFStr</name></type> <name>mfstr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mfstr</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mfstr</name><operator>.</operator><name>freeIt</name></name> <operator>=</operator> <name>freeIt</name></expr>;</expr_stmt>
<return>return <expr><name>mfstr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>MAKE_INLINE</name> <name>MFStr</name></type>
<name>MFStr_InitOwn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MFStr_Init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>MAKE_INLINE</name> <name>MFStr</name></type>
<name>MFStr_InitRefer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MFStr_Init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>MFStr_Done</name><parameter_list>(<parameter><decl><type><name>MFStr</name> <modifier>*</modifier></type><name>mfstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mfstr</name><operator>-&gt;</operator><name>freeIt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mfstr</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mfstr</name><operator>-&gt;</operator><name>freeIt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>MAKE_STATIC</name> <name>Substring</name></type>
<name>Substring_Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Substring</name></type> <name>sub</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><name>sub</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>Substring</name></type>
<name>Substring_InitStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Substring_Init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>size_t</name></type>
<name>Substring_Length</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>sub</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>sub</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>bool</name></type>
<name>Substring_IsEmpty</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>sub</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>sub</name><operator>.</operator><name>end</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>Substring_Equals</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Substring_Length</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>bool</name></type>
<name>Substring_Eq</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>Substring_Length</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>len</name> <operator>==</operator> <call><name>Substring_Length</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>Substring</name></type>
<name>Substring_Sub</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>&lt;=</operator> <call><name>Substring_Length</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>&lt;=</operator> <call><name>Substring_Length</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Substring_Init</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>bool</name></type>
<name>Substring_HasPrefix</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Substring_Length</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>Substring_Length</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>prefix</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><call><name>Substring_Length</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>bool</name></type>
<name>Substring_HasSuffix</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>suffixLen</name> <init>= <expr><call><name>Substring_Length</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Substring_Length</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>suffixLen</name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>suffixLen</name></expr></argument>, <argument><expr><name><name>suffix</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>suffixLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>MAKE_STATIC</name> <name>FStr</name></type>
<name>Substring_Str</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Substring_IsEmpty</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FStr_InitRefer</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>FStr_InitOwn</name><argument_list>(<argument><expr><call><name>bmake_strsedup</name><argument_list>(<argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>Substring_SkipFirst</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>sub</name><operator>.</operator><name>start</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name><name>sub</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name><name>sub</name><operator>.</operator><name>start</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>Substring_LastIndex</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>sub</name><operator>.</operator><name>end</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name><name>sub</name><operator>.</operator><name>start</name></name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>Substring</name></type>
<name>Substring_Dirname</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>pathname</name><operator>.</operator><name>end</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name><name>pathname</name><operator>.</operator><name>start</name></name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Substring_Init</name><argument_list>(<argument><expr><name><name>pathname</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><call><name>Substring_InitStr</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>Substring</name></type>
<name>Substring_Basename</name><parameter_list>(<parameter><decl><type><name>Substring</name></type> <name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>pathname</name><operator>.</operator><name>end</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name><name>pathname</name><operator>.</operator><name>start</name></name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Substring_Init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pathname</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>pathname</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>MAKE_STATIC</name> <name>void</name></type>
<name>LazyBuf_Init</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>expected</name></name> <operator>=</operator> <name>expected</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>LazyBuf_Done</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>void</name></type>
<name>LazyBuf_Add</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>cap</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>bmake_realloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>expected</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>expected</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>void</name></type>
<name>LazyBuf_AddStr</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LazyBuf_Add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>void</name></type>
<name>LazyBuf_AddBytesBetween</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LazyBuf_Add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>LazyBuf_AddSubstring</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>Substring</name></type> <name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LazyBuf_AddBytesBetween</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sub</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>MAKE_STATIC</name> <name>Substring</name></type>
<name>LazyBuf_Get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>expected</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Substring_Init</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>MAKE_STATIC</name> <name>FStr</name></type>
<name>LazyBuf_DoneGet</name><parameter_list>(<parameter><decl><type><name>LazyBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LazyBuf_Add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>FStr_InitOwn</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>Substring_Str</name><argument_list>(<argument><expr><call><name>LazyBuf_Get</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>Words</name></type> <name>Str_Words</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>Words_Free</name><parameter_list>(<parameter><decl><type><name>Words</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>freeIt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>SubstringWords</name></type> <name>Substring_Words</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>SubstringWords_Init</name><parameter_list>(<parameter><decl><type><name>SubstringWords</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>freeIt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>MAKE_INLINE</name> <name>void</name></type>
<name>SubstringWords_Free</name><parameter_list>(<parameter><decl><type><name>SubstringWords</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>freeIt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>char</name> <modifier>*</modifier></type><name>str_concat2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>str_concat3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Str_Match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
