<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/setenv.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETENV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rcsid</name> <init>= <expr><literal type="string">"$Id: setenv.c,v 1.5 1996/09/04 22:10:42 sjg Exp $"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>










<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__findenv</name><parameter_list>(<parameter><decl><type><name>name</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>P</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>C</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>C</name> <operator>=</operator> <name>name</name></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>C</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>C</name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><operator>++</operator><name>C</name></expr><operator>,</operator> <expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>P</name> <operator>=</operator> <name>environ</name></expr>;</init> <condition><expr><operator>*</operator><name>P</name></expr>;</condition> <incr><expr><operator>++</operator><name>P</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>P</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>C</name> <operator>=</operator> <operator>*</operator><name>P</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>P</name> <operator>-</operator> <name>environ</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>++</operator><name>C</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call>
<specifier>register</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rewrite</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>alloced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l_value</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>__findenv</name><parameter_list>()</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l_value</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>C</name> <operator>=</operator> <call><name>__findenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rewrite</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>l_value</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>C</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>value</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>P</name> <operator>=</operator> <name>environ</name></expr><operator>,</operator> <expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>P</name></expr>;</condition> <incr><expr><operator>++</operator><name>P</name></expr><operator>,</operator> <expr><operator>++</operator><name>cnt</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>alloced</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>environ</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>environ</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>cnt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>environ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>alloced</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>P</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>(</operator><name>cnt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>P</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>environ</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>environ</name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>environ</name><index>[<expr><name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>C</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>C</name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><operator>++</operator><name>C</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>environ</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator>
<call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>C</name> <operator>-</operator> <name>name</name><operator>)</operator> <operator>+</operator> <name>l_value</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>C</name> <operator>=</operator> <name><name>environ</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>C</name> <operator>=</operator> <operator>*</operator><name>name</name><operator>++</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>C</name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><operator>++</operator><name>C</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init><expr><operator>*</operator><name>C</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</init> <condition><expr><operator>*</operator><name>C</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>value</name><operator>++</operator></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block>





<function><type><name>void</name></type>
<name>unsetenv</name><parameter_list>(<parameter><decl><type><name>name</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>__findenv</name><parameter_list>()</parameter_list>;</function_decl>

<while>while <condition>(<expr><call><name>__findenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>P</name> <operator>=</operator> <operator>&amp;</operator><name><name>environ</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>P</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>P</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>P</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
