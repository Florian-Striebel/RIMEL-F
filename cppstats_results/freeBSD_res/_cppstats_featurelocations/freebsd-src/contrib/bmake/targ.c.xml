<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bmake/targ.c">












































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"make.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>MAKE_RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: targ.c,v 1.173 2021/11/28 19:51:06 rillig Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>GNodeList</name></type> <name>allTargets</name> <init>= <expr><name>LST_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HashTable</name></type> <name>allTargetsByName</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>GNodeList</name></type> <name>allNodes</name> <init>= <expr><name>LST_INIT</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GNode_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>Targ_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>HashTable_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargetsByName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Targ_End</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Targ_Stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargetsByName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_DoneCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allNodes</name></expr></argument>, <argument><expr><name>GNode_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Targ_Stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>HashTable_DebugStats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargetsByName</name></expr></argument>, <argument><expr><literal type="string">"targets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>GNodeList</name> <modifier>*</modifier></type>
<name>Targ_List</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>allTargets</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>GNode</name> <modifier>*</modifier></type>
<name>GNode_New</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gn</name> <operator>=</operator> <call><name>bmake_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>bmake_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>uname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr> ?</condition><then> <expr><name>OP_LIB</name></expr> </then><else>: <expr><name>OP_NONE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>=</operator> <name>UNMADE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>unmade</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>youngestChild</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>implicitParents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>order_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>order_succ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>cohorts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>cohort_num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>unmade_cohorts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>centurion</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>checked_seqno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HashTable_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>suffix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allNodes</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>gn</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GNode_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><name>gnp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>implicitParents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>order_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>order_succ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>cohorts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><call><name>HashTable_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>Lst_Done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>GNode</name> <modifier>*</modifier></type>
<name>Targ_FindNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>HashTable_FindValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargetsByName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>GNode</name> <modifier>*</modifier></type>
<name>Targ_GetNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isNew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashEntry</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>HashTable_CreateEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargetsByName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNew</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>HashEntry_Get</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><call><name>Targ_NewInternalNode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>HashEntry_Set</name><argument_list>(<argument><expr><name>he</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>gn</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>







<function><type><name>GNode</name> <modifier>*</modifier></type>
<name>Targ_NewInternalNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><call><name>GNode_New</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Global_Append</name><argument_list>(<argument><expr><literal type="string">".ALLTARGETS"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargets</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>TARG</name></expr></argument>, <argument><expr><literal type="string">"Adding \"%s\" to all targets.\n"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>doing_depend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gn</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>fromDepend</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>gn</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>GNode</name> <modifier>*</modifier></type>
<name>Targ_GetEndNode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <name>GNode</name> <modifier>*</modifier></type><name>endNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>endNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endNode</name> <operator>=</operator> <call><name>Targ_GetNode</name><argument_list>(<argument><expr><literal type="string">".END"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>endNode</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OP_SPECIAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>endNode</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Targ_FindList</name><parameter_list>(<parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type><name>gns</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>names</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>names</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><call><name>Targ_GetNode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Lst_Append</name><argument_list>(<argument><expr><name>gns</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>Targ_Precious</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>allPrecious</name> <operator>||</operator> <name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><name>OP_PRECIOUS</name> <operator>|</operator> <name>OP_DOUBLEDEP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>GNode</name> <modifier>*</modifier></type><name>mainTarg</name></decl>;</decl_stmt>


<function><type><name>void</name></type>
<name>Targ_SetMain</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>mainTarg</name> <operator>=</operator> <name>gn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintNodeNames</name><parameter_list>(<parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type><name>gnodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNodeListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>gnodes</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">" %s%s"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>cohort_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintNodeNamesLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type><name>gnodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Lst_IsEmpty</name><argument_list>(<argument><expr><name>gnodes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#%s:"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintNodeNames</name><argument_list>(<argument><expr><name>gnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Targ_PrintCmds</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StringListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>gn</name><operator>-&gt;</operator><name>commands</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\t%s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>Targ_FmtTime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>parts</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S %b %d, %Y"</literal></expr></argument>, <argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Targ_PrintType</name><parameter_list>(<parameter><decl><type><name>GNodeType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>GNodeType</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>internal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>OP_MEMBER</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"MEMBER"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_LIB</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"LIB"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_ARCHV</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"ARCHV"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_PHONY</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"PHONY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_NOTMAIN</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"NOTMAIN"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_INVISIBLE</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"INVISIBLE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_MADE</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"MADE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_JOIN</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"JOIN"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_MAKE</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"MAKE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_SILENT</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"SILENT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_PRECIOUS</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"PRECIOUS"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_IGNORE</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"IGNORE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_EXEC</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"EXEC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_USE</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"USE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>OP_OPTIONAL</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"OPTIONAL"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>internal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUG1</name><argument_list>(<argument><expr><name>TARG</name></expr></argument>, <argument><expr><literal type="string">" .%s"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">" .%s"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNodeMade_Name</name><parameter_list>(<parameter><decl><type><name>GNodeMade</name></type> <name>made</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>made</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UNMADE</name></expr>:</case> <return>return <expr><literal type="string">"unmade"</literal></expr>;</return>
<case>case <expr><name>DEFERRED</name></expr>:</case> <return>return <expr><literal type="string">"deferred"</literal></expr>;</return>
<case>case <expr><name>REQUESTED</name></expr>:</case> <return>return <expr><literal type="string">"requested"</literal></expr>;</return>
<case>case <expr><name>BEINGMADE</name></expr>:</case> <return>return <expr><literal type="string">"being made"</literal></expr>;</return>
<case>case <expr><name>MADE</name></expr>:</case> <return>return <expr><literal type="string">"made"</literal></expr>;</return>
<case>case <expr><name>UPTODATE</name></expr>:</case> <return>return <expr><literal type="string">"up-to-date"</literal></expr>;</return>
<case>case <expr><name>ERROR</name></expr>:</case> <return>return <expr><literal type="string">"error when made"</literal></expr>;</return>
<case>case <expr><name>ABORTED</name></expr>:</case> <return>return <expr><literal type="string">"aborted"</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="string">"unknown enum_made value"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GNode_OpName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_OPMASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OP_DEPENDS</name></expr>:</case>
<return>return <expr><literal type="string">":"</literal></expr>;</return>
<case>case <expr><name>OP_FORCE</name></expr>:</case>
<return>return <expr><literal type="string">"!"</literal></expr>;</return>
<case>case <expr><name>OP_DOUBLEDEP</name></expr>:</case>
<return>return <expr><literal type="string">"::"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>GNodeFlags_IsNone</name><parameter_list>(<parameter><decl><type><name>GNodeFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>flags</name><operator>.</operator><name>remake</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>childMade</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>force</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>doneWait</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>doneOrder</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>fromDepend</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>doneAllsrc</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>cycle</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>flags</name><operator>.</operator><name>doneCycle</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>Targ_PrintNode</name><parameter_list>(<parameter><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#%s%s"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>cohort_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GNode_FprintDetails</name><argument_list>(<argument><expr><name><name>opts</name><operator>.</operator><name>debug_file</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>gn</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GNodeFlags_IsNone</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GNode_IsTarget</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gn</name> <operator>==</operator> <name>mainTarg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#*** MAIN TARGET ***\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>unmade</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#%d unmade children\n"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>unmade</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#No unmade children\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><name>OP_JOIN</name> <operator>|</operator> <name>OP_USE</name> <operator>|</operator> <name>OP_USEBEFORE</name> <operator>|</operator> <name>OP_EXEC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#last modified %s: %s\n"</literal></expr></argument>,
<argument><expr><call><name>Targ_FmtTime</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GNodeMade_Name</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name> <operator>!=</operator> <name>UNMADE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#nonexistent (maybe): %s\n"</literal></expr></argument>,
<argument><expr><call><name>GNodeMade_Name</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>made</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#unmade\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PrintNodeNamesLine</name><argument_list>(<argument><expr><literal type="string">"implicit parents"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>implicitParents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>unmade</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#%d unmade children\n"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>unmade</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>PrintNodeNamesLine</name><argument_list>(<argument><expr><literal type="string">"parents"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintNodeNamesLine</name><argument_list>(<argument><expr><literal type="string">"order_pred"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>order_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintNodeNamesLine</name><argument_list>(<argument><expr><literal type="string">"order_succ"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>order_succ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"%-16s%s"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>GNode_OpName</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Targ_PrintType</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintNodeNames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Targ_PrintCmds</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>OP_DOUBLEDEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Targ_PrintNodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><operator>-&gt;</operator><name>cohorts</name></name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Targ_PrintNodes</name><parameter_list>(<parameter><decl><type><name>GNodeList</name> <modifier>*</modifier></type><name>gnodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNodeListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>gnodes</name><operator>-&gt;</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Targ_PrintNode</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>PrintOnlySources</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNodeListNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>allTargets</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GNode_IsTarget</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#\t%s [%s]"</literal></expr></argument>, <argument><expr><name><name>gn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>GNode_Path</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Targ_PrintType</name><argument_list>(<argument><expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>Targ_PrintGraph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#*** Input graph:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Targ_PrintNodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allTargets</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#Files that are only sources:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintOnlySources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#*** Global Variables:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Var_Dump</name><argument_list>(<argument><expr><name>SCOPE_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"#*** Command-line Variables:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Var_Dump</name><argument_list>(<argument><expr><name>SCOPE_CMDLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Dir_PrintDirectories</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Suff_PrintAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>Targ_Propagate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GNodeListNode</name> <modifier>*</modifier></type><name>ln</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cln</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>allTargets</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ln</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GNodeType</name></type> <name>type</name> <init>= <expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>OP_DOUBLEDEP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cln</name> <operator>=</operator> <name><name>gn</name><operator>-&gt;</operator><name>cohorts</name><operator>.</operator><name>first</name></name></expr>;</init> <condition><expr><name>cln</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cln</name> <operator>=</operator> <name><name>cln</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GNode</name> <modifier>*</modifier></type><name>cohort</name> <init>= <expr><name><name>cln</name><operator>-&gt;</operator><name>datum</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cohort</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>type</name> <operator>&amp;</operator> <operator>~</operator><name>OP_OPMASK</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
