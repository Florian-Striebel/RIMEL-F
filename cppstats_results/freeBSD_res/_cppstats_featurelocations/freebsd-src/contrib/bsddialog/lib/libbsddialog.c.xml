<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/lib/libbsddialog.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PORTNCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_theme.h"</cpp:file></cpp:include>















<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>bsddialog_theme</name></name></type> <name>t</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>bsddialog_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_error_string</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>initscr</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot init ncurses (initscr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <call><name>keypad</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <call><name>cbreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <call><name>noecho</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsddialog_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot init ncurses (keypad and cursor)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <call><name>start_color</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <call><name>init_pair</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsddialog_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot init ncurses (colors)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bsddialog_set_default_theme</name><argument_list>(<argument><expr><name>BSDDIALOG_THEME_DEFAULT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsddialog_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bsddialog_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>endwin</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot end ncurses (endwin)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bsddialog_backtitle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>backtitle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mvaddstr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>backtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name> <operator>!=</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><name>ACS_HLINE</name></expr></else></ternary></expr></argument>, <argument><expr><name>COLS</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsddialog_geterror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>get_error_string</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bsddialog_initconf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"conf is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>conf</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>bsddialog_conf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad conf size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bsddialog_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>BSDDIALOG_CENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>BSDDIALOG_CENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bsddialog_clearterminal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot clear the terminal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
