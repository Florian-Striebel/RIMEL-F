<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/lib/menubox.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PORTNCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_theme.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEPTHSPACE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_HEIGHT</name></cpp:macro> <cpp:value>VBORDERS + 6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>bsddialog_theme</name></name></type> <name>t</name></decl>;</decl_stmt>

<enum>enum <name>menumode</name> <block>{
<decl><name>BUILDLISTMODE</name></decl>,
<decl><name>CHECKLISTMODE</name></decl>,
<decl><name>MENUMODE</name></decl>,
<decl><name>MIXEDLISTMODE</name></decl>,
<decl><name>RADIOLISTMODE</name></decl>,
<decl><name>SEPARATORMODE</name></decl>
}</block>;</enum>

<struct>struct <name>lineposition</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxsepstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxprefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xselector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>selectorlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxdepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>line</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkradiolist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkmenu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getfirst</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <operator>*</operator><name>rel</name> <operator>=</operator> <operator>*</operator><name>group</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>ngroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getfirst_with_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getfirst</name><argument_list>(<argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>abs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><operator>*</operator><name>group</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>ngroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>default_item</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>default_item</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getlast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>totnitems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>totnitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ngroups</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getnext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>abs</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>group</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>rel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rel</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><operator>*</operator><name>group</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <operator>*</operator><name>rel</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <operator>*</operator><name>abs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>group</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>ngroups</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>group</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ngroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getfastnext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>menurows</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getnext</name><argument_list>(<argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>abs</name> <operator>!=</operator> <name>a</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>abs</name> <argument_list type="generic">&lt; <argument><expr><name>start</name> <operator>+</operator> <name>menurows</name> <operator>&amp;&amp;</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getprev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>abs</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>group</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>rel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <operator>*</operator><name>rel</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <operator>*</operator><name>abs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>group</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>group</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getfastprev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>menurows</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>abs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getprev</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>abs</name> <operator>!=</operator> <name>a</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>abs</name> <operator>&gt;</operator> <name>start</name> <operator>-</operator> <name>menurows</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>getnextshortcut</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>menumode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>abs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ng</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>, <decl><type ref="prev"/><name>na</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mainloop</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>abs</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ngroups</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>rel</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>BUILDLISTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>na</name> <operator>=</operator> <name>a</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mainloop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ngroups</name> <operator>&amp;&amp;</operator> <name>mainloop</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <operator>*</operator><name>abs</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <operator>*</operator><name>abs</name> <operator>&amp;&amp;</operator> <name>na</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>na</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <operator>*</operator><name>abs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>na</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mainloop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>na</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>abs</name> <operator>=</operator> <name>na</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>ng</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>menumode</name></name></type>
<name>getmode</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>menumode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MIXEDLISTMODE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>group</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SEPARATORMODE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>group</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BSDDIALOG_RADIOLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>RADIOLISTMODE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>group</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BSDDIALOG_CHECKLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>CHECKLISTMODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>drawitem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>menumode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lineposition</name></name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>curr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>colordesc</name></decl>, <decl><type ref="prev"/><name>colorname</name></decl>, <decl><type ref="prev"/><name>colorshortcut</name></decl>, <decl><type ref="prev"/><name>linech</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shortcut</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SEPARATORMODE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>desccolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linech</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><name>ACS_HLINE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwhline</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>linech</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>desccolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>namesepcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>namesepcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>descsepcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>descsepcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>prefix</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>xselector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>selectorcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>CHECKLISTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="string">"[%c]"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>on</name></name></expr> ?</condition><then> <expr><literal type="char">'X'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RADIOLISTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="string">"(%c)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>on</name></name></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>selectorcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>colorname</name> <operator>=</operator> <ternary><condition><expr><name>curr</name></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>f_namecolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>namecolor</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>BUILDLISTMODE</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_name</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>colorname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>xname</name></name> <operator>+</operator> <name><name>item</name><operator>.</operator><name>depth</name></name> <operator>*</operator> <name>DEPTHSPACE</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>colorname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>BUILDLISTMODE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colordesc</name> <operator>=</operator> <ternary><condition><expr><name><name>item</name><operator>.</operator><name>on</name></name></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>namecolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>desccolor</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>colordesc</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>f_namecolor</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colordesc</name> <operator>=</operator> <ternary><condition><expr><name>curr</name></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>f_namecolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>namecolor</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>colordesc</name> <operator>=</operator> <ternary><condition><expr><name>curr</name></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>f_desccolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>desccolor</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>BUILDLISTMODE</name> <operator>||</operator> <name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_desc</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>colordesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>xname</name></name> <operator>+</operator> <name><name>item</name><operator>.</operator><name>depth</name></name> <operator>*</operator> <name>DEPTHSPACE</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>xdesc</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>colordesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>BUILDLISTMODE</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>shortcut_buttons</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>colorshortcut</name> <operator>=</operator> <ternary><condition><expr><name>curr</name></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>f_shortcutcolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>shortcutcolor</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>colorshortcut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shortcut</name> <operator>=</operator> <name><name>item</name><operator>.</operator><name>desc</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shortcut</name> <operator>=</operator> <name><name>item</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>xname</name></name> <operator>+</operator> <name><name>item</name><operator>.</operator><name>depth</name></name> <operator>*</operator> <name>DEPTHSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shortcut</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shortcut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>shortcut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>colorshortcut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><name>LINES</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clrtoeol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>bottomdesc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addstr</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>bottomdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>menu_autosize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linelen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>textrow</name></decl>, <decl><type ref="prev"/><name>menusize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>textrow</name> <operator>=</operator> <ternary><condition><expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>.</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <ternary><condition><expr><name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><name>linelen</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><call><name>widget_max_width</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>HBORDERS</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>textrow</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menurows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>+=</operator> <name>nitems</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menusize</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>nitems</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>*</operator><name>h</name> <operator>-</operator> <operator>(</operator><name>HBORDERS</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>textrow</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menusize</name> <operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>menurows</name> <operator>=</operator> <ternary><condition><expr><name>menusize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>menusize</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <operator>*</operator><name>h</name> <operator>+</operator> <operator>*</operator><name>menurows</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>menurows</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name>textrow</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>menurows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menurows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>menurows</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>rows</name><operator>-</operator><literal type="number">6</literal><operator>-</operator><name>textrow</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>menu_checksize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mincols</name></decl>, <decl><type ref="prev"/><name>textrow</name></decl>, <decl><type ref="prev"/><name>menusize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mincols</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mincols</name> <operator>+=</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>.</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mincols</name> <operator>+=</operator> <ternary><condition><expr><name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <name>mincols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few cols, width &lt; size buttons or "</literal>\
<literal type="string">"name+descripion of the items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textrow</name> <operator>=</operator> <ternary><condition><expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>menurows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"items &gt; 0 but menurows == 0, probably terminal "</literal>\
<literal type="string">"too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menusize</name> <operator>=</operator> <ternary><condition><expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>menusize</name> <operator>+</operator> <name>textrow</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few lines for this menus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_menuwin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>menuwin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>totnitems</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ymenupad</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>draw_borders</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>LOWERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>totnitems</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>menurows</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>arrowcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ymenupad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwprintw</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"^^^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ymenupad</name> <operator>+</operator> <name>menurows</name><operator>)</operator> <operator>&lt;</operator> <name>totnitems</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwprintw</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"vvv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>menu</name><operator>.</operator><name>arrowcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvwprintw</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"%3d%%"</literal></expr></argument>,
<argument><expr><literal type="number">100</literal> <operator>*</operator> <operator>(</operator><name>ymenupad</name> <operator>+</operator> <name>menurows</name><operator>)</operator> <operator>/</operator> <name>totnitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_mixedlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>menumode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focuslist</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>shadow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>menuwin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>menupad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ymenupad</name></decl>, <decl><type ref="prev"/><name>ys</name></decl>, <decl><type ref="prev"/><name>ye</name></decl>, <decl><type ref="prev"/><name>xs</name></decl>, <decl><type ref="prev"/><name>xe</name></decl>, <decl><type ref="prev"/><name>abs</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>rel</name></decl>, <decl><type ref="prev"/><name>totnitems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>, <decl><type ref="prev"/><name>automenurows</name></decl>, <decl><type ref="prev"/><name>shortcut_buttons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>menumode</name></name></type> <name>currmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lineposition</name></name></type> <name>pos</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>shortcut_buttons</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>shortcut_buttons</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>automenurows</name> <operator>=</operator> <ternary><condition><expr><name>menurows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>totnitems</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ngroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>currmode</name> <operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>RADIOLISTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>checkradiolist</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>MENUMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>checkmenu</name><argument_list>(<argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>RADIOLISTMODE</name> <operator>||</operator> <name>currmode</name> <operator>==</operator> <name>CHECKLISTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>selectorlen</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>totnitems</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxsepstr</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>maxsepstr</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxprefix</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>maxprefix</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxdepth</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>maxdepth</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxname</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>maxname</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxdesc</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>maxdesc</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxname</name></name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_name</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pos</name><operator>.</operator><name>maxname</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxdesc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>no_desc</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pos</name><operator>.</operator><name>maxdesc</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>maxdepth</name></name> <operator>*=</operator> <name>DEPTHSPACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>xselector</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>maxprefix</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>.</operator><name>maxprefix</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>xname</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>xselector</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>selectorlen</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>.</operator><name>selectorlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>xdesc</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>maxdepth</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>xname</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>maxname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>xdesc</name></name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>.</operator><name>maxname</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>line</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>maxsepstr</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>xdesc</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>maxdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>get_buttons</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>extra_label</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>help_label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>menu_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menurows</name></expr></argument>,
<argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>menu_checksize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <name>menurows</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menuwin</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>menurows</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>LOWERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menupad</name> <operator>=</operator> <call><name>newpad</name><argument_list>(<argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>ngroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>currmode</name> <operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ymenupad</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>getfirst_with_default</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currmode</name> <operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>rel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>menurows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ye</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal></expr> ;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>align_left</name></name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>line</name></name> <operator>&gt;</operator> <name>w</name> <operator>-</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xs</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>w</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>line</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xs</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ymenupad</name> <operator>+</operator> <name>menurows</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>abs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <name>abs</name> <operator>-</operator> <name>menurows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_menuwin</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>shortcut_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_ENTER</name></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name><name>bs</name><operator>.</operator><name>curr</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>MENUMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>on</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <operator>(</operator><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>shortcut_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>shortcut_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>shortcut_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>KEY_CTRL</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f1help</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>hide_widget</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>menurows</name> <operator>=</operator> <ternary><condition><expr><name>automenurows</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>menurows</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>menu_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>menurows</name></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>menu_checksize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>htextpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>update_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>RAISED</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>shortcut_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <name>menurows</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>menurows</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>,<argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_menuwin</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>,
<argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>menurows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ye</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal></expr> ;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>menu</name><operator>.</operator><name>align_left</name></name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>.</operator><name>line</name></name> <operator>&gt;</operator> <name>w</name> <operator>-</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xs</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>w</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>line</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xs</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ymenupad</name> <operator>+</operator> <name>menurows</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>abs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <name>abs</name> <operator>-</operator> <name>menurows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>abs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_HOME</name></expr>:</case>
<case>case <expr><name>KEY_UP</name></expr>:</case>
<case>case <expr><name>KEY_PPAGE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>abs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>KEY_HOME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getfirst</name><argument_list>(<argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>input</name> <operator>==</operator> <name>KEY_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getprev</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getfastprev</name><argument_list>(<argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>rel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>currmode</name><operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ymenupad</name> <operator>&gt;</operator> <name>abs</name> <operator>&amp;&amp;</operator> <name>ymenupad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <name>abs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_menuwin</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>,
<argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_END</name></expr>:</case>
<case>case <expr><name>KEY_DOWN</name></expr>:</case>
<case>case <expr><name>KEY_NPAGE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>abs</name> <operator>==</operator> <name>totnitems</name> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>KEY_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getlast</name><argument_list>(<argument><expr><name>totnitems</name></expr></argument>, <argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>input</name> <operator>==</operator> <name>KEY_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getnext</name><argument_list>(<argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getfastnext</name><argument_list>(<argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>rel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>currmode</name><operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ymenupad</name> <operator>+</operator> <name>menurows</name><operator>)</operator> <operator>&lt;=</operator> <name>abs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <name>abs</name> <operator>-</operator> <name>menurows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_menuwin</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>,
<argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>MENUMODE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>CHECKLISTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>on</name></name> <operator>=</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>on</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>rel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>,
<argument><expr><name>abs</name> <operator>-</operator> <name>rel</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>on</name></name> <operator>=</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>on</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>shortcut_buttons</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currmode</name> <operator>==</operator> <name>MENUMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>on</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getnextshortcut</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>rel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>currmode</name> <operator>=</operator> <call><name>getmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>, <argument><expr><operator>*</operator><name>item</name></expr></argument>, <argument><expr><name>currmode</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ymenupad</name> <operator>&gt;</operator> <name>abs</name> <operator>&amp;&amp;</operator> <name>ymenupad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <name>abs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ymenupad</name> <operator>+</operator> <name>menurows</name><operator>)</operator> <operator>&lt;=</operator> <name>abs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ymenupad</name> <operator>=</operator> <name>abs</name> <operator>-</operator> <name>menurows</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_menuwin</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>menuwin</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>totnitems</name></expr></argument>,
<argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>, <argument><expr><name>ymenupad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>focuslist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>focuslist</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>focusitem</name> <operator>!=</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>focusitem</name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>menupad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>menuwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>bsddialog_mixedlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngroups</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name> <modifier>*</modifier></type><name>groups</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focuslist</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>do_mixedlist</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>MIXEDLISTMODE</name></expr></argument>,
<argument><expr><name>ngroups</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name>focuslist</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_checklist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name></type> <name>group</name> <init>= <expr><block>{
<expr><name>BSDDIALOG_CHECKLIST</name></expr> , <expr><name>nitems</name></expr>, <expr><name>items</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>do_mixedlist</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>CHECKLISTMODE</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_menu</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name></type> <name>group</name> <init>= <expr><block>{
<expr><name>BSDDIALOG_CHECKLIST</name></expr> , <expr><name>nitems</name></expr>, <expr><name>items</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>do_mixedlist</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>MENUMODE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_radiolist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name></type> <name>group</name> <init>= <expr><block>{
<expr><name>BSDDIALOG_RADIOLIST</name></expr> , <expr><name>nitems</name></expr>, <expr><name>items</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>do_mixedlist</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>RADIOLISTMODE</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>buildlist_autosize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unimplemented cols autosize for buildlist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unimplemented rows autosize for buildlist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>buildlist_checksize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mincols</name></decl>, <decl><type ref="prev"/><name>textrow</name></decl>, <decl><type ref="prev"/><name>menusize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mincols</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mincols</name> <operator>+=</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>.</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mincols</name> <operator>+=</operator> <ternary><condition><expr><name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <name>mincols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few cols, width &lt; size buttons or "</literal>\
<literal type="string">"name+descripion of the items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textrow</name> <operator>=</operator> <ternary><condition><expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>menurows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"items &gt; 0 but menurows == 0, probably terminal "</literal>\
<literal type="string">"too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menusize</name> <operator>=</operator> <ternary><condition><expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>menusize</name> <operator>+</operator> <name>textrow</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few lines for this menus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_buildlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>menurows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>leftwin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>leftpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rightwin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rightpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>, <decl><type ref="prev"/><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>, <decl><type ref="prev"/><name>buttupdate</name></decl>, <decl><type ref="prev"/><name>padsupdate</name></decl>, <decl><type ref="prev"/><name>startleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlefts</name></decl>, <decl><type ref="prev"/><name>nrights</name></decl>, <decl><type ref="prev"/><name>leftwinx</name></decl>, <decl><type ref="prev"/><name>rightwinx</name></decl>, <decl><type ref="prev"/><name>winsy</name></decl>, <decl><type ref="prev"/><name>padscols</name></decl>, <decl><type ref="prev"/><name>curr</name></decl>;</decl_stmt>
<enum>enum <name>side</name> <block>{<decl><name>LEFT</name></decl>, <decl><name>RIGHT</name></decl>}</block> <decl><name>currV</name></decl>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>currH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lineposition</name></name></type> <name>pos</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startleft</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>line</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>startleft</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>get_buttons</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>extra_label</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>help_label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buildlist_autosize</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buildlist_checksize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <name>menurows</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>winsy</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>menurows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>leftwinx</name> <operator>=</operator> <name>x</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftwin</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>winsy</name></expr></argument>, <argument><expr><name>leftwinx</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>w</name><operator>-</operator><literal type="number">5</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name>LOWERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rightwinx</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator><operator>(</operator><name>w</name><operator>-</operator><literal type="number">5</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rightwin</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>winsy</name></expr></argument>, <argument><expr><name>rightwinx</name></expr></argument>, <argument><expr><name>menurows</name><operator>+</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>w</name><operator>-</operator><literal type="number">5</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOWERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>leftwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>rightwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>padscols</name> <operator>=</operator> <operator>(</operator><name>w</name><operator>-</operator><literal type="number">5</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>leftpad</name> <operator>=</operator> <call><name>newpad</name><argument_list>(<argument><expr><name>nitems</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rightpad</name> <operator>=</operator> <call><name>newpad</name><argument_list>(<argument><expr><name>nitems</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name>leftpad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name>rightpad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currV</name> <operator>=</operator> <ternary><condition><expr><name>startleft</name></expr> ?</condition><then> <expr><name>LEFT</name></expr> </then><else>: <expr><name>RIGHT</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>buttupdate</name> <operator>=</operator> <name>padsupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buttupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padsupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>leftpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>rightpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlefts</name> <operator>=</operator> <name>nrights</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currV</name> <operator>==</operator> <name>LEFT</name> <operator>&amp;&amp;</operator> <name>currH</name> <operator>==</operator> <name>nlefts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>leftpad</name></expr></argument>, <argument><expr><name>nlefts</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>BUILDLISTMODE</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>curr</name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nlefts</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>currV</name> <operator>==</operator> <name>RIGHT</name> <operator>&amp;&amp;</operator> <name>currH</name> <operator>==</operator> <name>nrights</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>drawitem</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rightpad</name></expr></argument>, <argument><expr><name>nrights</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>BUILDLISTMODE</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>curr</name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nrights</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>leftpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>winsy</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>leftwinx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>winsy</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>menurows</name></expr></argument>, <argument><expr><name>leftwinx</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>padscols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>rightpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>winsy</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rightwinx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>winsy</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>menurows</name></expr></argument>, <argument><expr><name>rightwinx</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>padscols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padsupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_ENTER</name></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name><name>bs</name><operator>.</operator><name>curr</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <operator>(</operator><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>currV</name> <operator>==</operator> <name>RIGHT</name> <operator>&amp;&amp;</operator> <name>nrights</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>currV</name> <operator>=</operator> <name>LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padsupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>currV</name> <operator>==</operator> <name>LEFT</name> <operator>&amp;&amp;</operator> <name>nrights</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>currV</name> <operator>=</operator> <name>RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padsupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_UP</name></expr>:</case>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>currH</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>currH</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>padsupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>currV</name> <operator>==</operator> <name>LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>currH</name> <operator>&lt;</operator> <name>nlefts</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>currH</name> <operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>currH</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>currH</name> <operator>&lt;</operator> <name>nrights</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>currH</name> <operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>currH</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>padsupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>curr</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>=</operator> <operator>!</operator> <name><name>items</name><index>[<expr><name>curr</name></expr>]</index></name><operator>.</operator><name>on</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currV</name> <operator>==</operator> <name>LEFT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nlefts</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <ternary><condition><expr><name>currH</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>currH</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currV</name> <operator>=</operator> <name>RIGHT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nrights</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <ternary><condition><expr><name>currH</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>currH</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>currH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>currV</name> <operator>=</operator> <name>LEFT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>padsupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>focusitem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>focusitem</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>leftpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>leftwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>rightpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>rightwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
