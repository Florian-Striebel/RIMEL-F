<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/lib/lib_util.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PORTNCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_theme.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>bsddialog_theme</name></name></type> <name>t</name></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRBUFLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errorbuffer</name><index>[<expr><name>ERRBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_error_string</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>errorbuffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_error_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>errorbuffer</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ERRBUFLEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>hide_widget</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withshadow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>clear</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>clear</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot hide the widget"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name>clear</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>terminal</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>withshadow</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>clear</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>f1help</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name></type> <name>hconf</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>bsddialog_initconf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>title</name></name> <operator>=</operator> <literal type="string">"HELP"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>button</name><operator>.</operator><name>ok_label</name></name> <operator>=</operator> <literal type="string">"EXIT"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>clear</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>ascii_lines</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>no_lines</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>shadow</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hconf</name><operator>.</operator><name>text</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>colors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_msgbox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hconf</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>BSDDIALOG_ERROR</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_textbox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hconf</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr> ?</condition><then> <expr><name>BSDDIALOG_ERROR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>draw_button</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>selected</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>shortkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>color_arrows</name></decl>, <decl><type ref="prev"/><name>color_shortkey</name></decl>, <decl><type ref="prev"/><name>color_button</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>color_arrows</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>f_delimcolor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>color_shortkey</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>f_shortcutcolor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>color_button</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>f_color</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>color_arrows</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>delimcolor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>color_shortkey</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>shortcutcolor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>color_button</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_arrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>leftch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_arrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_arrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>rightch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_arrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shortkey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_shortkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>color_shortkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>draw_buttons</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shortkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>start_x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_x</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>sizebutton</name></name> <operator>*</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>+</operator> <operator>(</operator><name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_x</name> <operator>=</operator> <name>cols</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>start_x</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name><name>bs</name><operator>.</operator><name>sizebutton</name></name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_button</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>start_x</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>bs</name><operator>.</operator><name>sizebutton</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>.</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>i</name> <operator>==</operator> <name><name>bs</name><operator>.</operator><name>curr</name></name></expr></argument>, <argument><expr><name>shortkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>get_buttons</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buttons</name></name> <modifier>*</modifier></type><name>bs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>yesoklabel</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>extralabel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nocancellabel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>helplabel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEBUTTON</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUTTON_LABEL</name></cpp:macro> <cpp:value>LABEL_ok_label</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUTTON_VALUE</name></cpp:macro> <cpp:value>BSDDIALOG_OK</cpp:value></cpp:define>


<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yesoklabel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>without_ok</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>yesoklabel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>BSDDIALOG_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extralabel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>with_extra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>extralabel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>BSDDIALOG_EXTRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nocancellabel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>without_cancel</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>nocancellabel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>BSDDIALOG_CANCEL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>default_cancel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>helplabel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>with_help</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>helplabel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>BSDDIALOG_HELP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>generic1_label</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>generic1_label</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>BSDDIALOG_GENERIC1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>generic2_label</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>generic2_label</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>]</index></name> <operator>=</operator> <name>BSDDIALOG_GENERIC2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DEFAULT_BUTTON_LABEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DEFAULT_BUTTON_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>default_label</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>default_label</name></name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>SIZEBUTTON</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_ncurses_attr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strnlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"nbBrRuU01234567"</literal></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_set_ncurses_attr</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_ncurses_attr</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><call><name>bsddialog_color</name><argument_list>( <argument><expr><name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>, <argument><expr><name>COLOR_WHITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>A_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_str</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>reallen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>reallen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_ncurses_attr</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reallen</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>+</operator> <name>reallen</name> <operator>&gt;</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>*</operator><name>y</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>y</name> <operator>&gt;=</operator> <operator>*</operator><name>rows</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>*</operator><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>cols</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <call><name>check_set_ncurses_attr</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>str</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>reallen</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_text_properties</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>maxword</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>maxline</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nlines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>buflen</name></decl>, <decl><type ref="prev"/><name>wordlen</name></decl>, <decl><type ref="prev"/><name>linelen</name></decl>;</decl_stmt>


<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maxword</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wordlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>wordlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxword</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>maxword</name></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wordlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>colors</name></name> <operator>&amp;&amp;</operator> <call><name>is_ncurses_attr</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wordlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>maxline</name> <operator>=</operator> <name>linelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nlines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>nlines</name> <operator>=</operator> <operator>*</operator><name>nlines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>maxline</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>maxline</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>colors</name></name> <operator>&amp;&amp;</operator> <call><name>is_ncurses_attr</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>linelen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nlines</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>maxline</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>print_textpad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot build (analyze) text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>string</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator>
<name><name>string</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name><name>string</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>string</name></expr></argument>,
<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <operator>*</operator><name>rows</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><operator>*</operator><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>widget_max_height</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxheight</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxheight</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr> ?</condition><then> <expr><name>LINES</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr> </then><else>: <expr><name>LINES</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Terminal too small, LINES - shadow &lt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxheight</name> <operator>-=</operator> <name><name>conf</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator> <operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Terminal too small, LINES - shadow - y &lt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>maxheight</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>widget_max_width</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxwidth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxwidth</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr> ?</condition><then> <expr><name>COLS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr> </then><else>: <expr><name>COLS</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Terminal too small, COLS - shadow &lt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxwidth</name> <operator>-=</operator> <name><name>conf</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator> <operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Terminal too small, COLS - shadow - x &lt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>maxwidth</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>set_widget_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxheight</name></decl>, <decl><type ref="prev"/><name>maxwidth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxheight</name> <operator>=</operator> <call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_FULLSCREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>maxheight</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <name>BSDDIALOG_FULLSCREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Negative (less than -1) height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>h</name> <operator>=</operator> <name>rows</name><operator>)</operator> <operator>&gt;</operator> <name>maxheight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Height too big (&gt; terminal height - "</literal>\
<literal type="string">"shadow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxwidth</name> <operator>=</operator> <call><name>widget_max_width</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_FULLSCREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>maxwidth</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <name>BSDDIALOG_FULLSCREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Negative (less than -1) width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>w</name> <operator>=</operator> <name>cols</name><operator>)</operator> <operator>&gt;</operator> <name>maxwidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Width too big (&gt; terminal width - shadow)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>set_widget_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <name>BSDDIALOG_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>LINES</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>h</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <name>BSDDIALOG_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Negative begin y (less than -1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;=</operator> <name>LINES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Begin Y under the terminal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>y</name> <operator>+</operator> <name>h</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>LINES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"The lower of the box under the terminal "</literal>\
<literal type="string">"(begin Y + height (+ shadow) &gt; terminal lines)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>BSDDIALOG_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>COLS</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>w</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>BSDDIALOG_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Negative begin x (less than -1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;=</operator> <name>COLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Begin X over the right of the terminal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x</name> <operator>+</operator> <name>w</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>COLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"The right of the box over the terminal "</literal>\
<literal type="string">"(begin X + width (+ shadow) &gt; terminal cols)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>draw_borders</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>elevation</name></name></type> <name>elev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>leftcolor</name></decl>, <decl><type ref="prev"/><name>rightcolor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ls</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>ts</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>, <decl><type ref="prev"/><name>tl</name></decl>, <decl><type ref="prev"/><name>tr</name></decl>, <decl><type ref="prev"/><name>bl</name></decl>, <decl><type ref="prev"/><name>br</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ltee</name></decl>, <decl><type ref="prev"/><name>rtee</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ls</name> <operator>=</operator> <name>rs</name> <operator>=</operator> <name>ACS_VLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name>bs</name> <operator>=</operator> <name>ACS_HLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>ACS_ULCORNER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tr</name> <operator>=</operator> <name>ACS_URCORNER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bl</name> <operator>=</operator> <name>ACS_LLCORNER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <name>ACS_LRCORNER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ltee</name> <operator>=</operator> <name>ACS_LTEE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtee</name> <operator>=</operator> <name>ACS_RTEE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ls</name> <operator>=</operator> <name>rs</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name>bs</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>tr</name> <operator>=</operator> <name>bl</name> <operator>=</operator> <name>br</name> <operator>=</operator> <name>ltee</name> <operator>=</operator> <name>rtee</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>leftcolor</name> <operator>=</operator> <ternary><condition><expr><name>elev</name> <operator>==</operator> <name>RAISED</name></expr> ?</condition><then>
<expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>lineraisecolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>linelowercolor</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>rightcolor</name> <operator>=</operator> <ternary><condition><expr><name>elev</name> <operator>==</operator> <name>RAISED</name></expr> ?</condition><then>
<expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>linelowercolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>lineraisecolor</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>leftcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wborder</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>leftcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>rightcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cols</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwvline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cols</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>rows</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>rows</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cols</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwhline</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>rows</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>cols</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>rightcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>WINDOW</name> <modifier>*</modifier></type>
<name>new_boxed_window</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>elevation</name></name></type> <name>elev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_error_string</name><argument_list>(<argument><expr><literal type="string">"Cannot build boxed window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_borders</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>elev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>win</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>draw_widget_withtextpad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>shadow</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>elevation</name></name></type> <name>elev</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>textpad</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>htextpad</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buttons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ts</name></decl>, <decl><type ref="prev"/><name>ltee</name></decl>, <decl><type ref="prev"/><name>rtee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colordelimtitle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><name>ACS_HLINE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ltee</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><name>ACS_LTEE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>rtee</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>ascii_lines</name></name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><name>ACS_RTEE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>colordelimtitle</name> <operator>=</operator> <ternary><condition><expr><name>elev</name> <operator>==</operator> <name>RAISED</name></expr> ?</condition><then>
<expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>lineraisecolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>linelowercolor</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shadow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>draw_borders</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>elev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>delimtitle</name></name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>colordelimtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rtee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>colordelimtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>titlecolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>titlecolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>delimtitle</name></name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>colordelimtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>ltee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>colordelimtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>bottomtitle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>bottomtitlecolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>bottomtitle</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>bottomtitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>bottomtitlecolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>no_lines</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>lineraisecolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ltee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwhline</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>lineraisecolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>linelowercolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddch</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rtee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>linelowercolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textpad</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>print_textpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>htextpad</name></expr></argument>,
<argument><expr><name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>update_widget_withtextpad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>shadow</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>elevation</name></name></type> <name>elev</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>textpad</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>htextpad</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buttons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>



<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>draw_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>elev</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>new_widget_withtextpad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier><modifier>*</modifier></type><name>shadow</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier><modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>elevation</name></name></type> <name>elev</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier><modifier>*</modifier></type><name>textpad</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>htextpad</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>buttons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>shadow</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>shadow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot build shadow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><operator>*</operator><name>shadow</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>widget</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>elev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><operator>*</operator><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textpad</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>draw_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>*</operator><name>shadow</name></expr></argument>, <argument><expr><operator>*</operator><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>elev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>htextpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>textpad</name> <operator>=</operator> <call><name>newpad</name><argument_list>(<argument><expr><operator>*</operator><name>htextpad</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>textpad</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><operator>*</operator><name>textpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><operator>*</operator><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot build the pad window for text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><operator>*</operator><name>textpad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>draw_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>*</operator><name>shadow</name></expr></argument>, <argument><expr><operator>*</operator><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>elev</name></expr></argument>,
<argument><expr><operator>*</operator><name>textpad</name></expr></argument>, <argument><expr><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>end_widget_withtextpad</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>textpad</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>shadow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getbegyx</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>sleep</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>sleep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textpad</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>clear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hide_widget</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>shadow</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>get_height</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>conf</name><operator>-&gt;</operator><name>get_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>get_width</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>conf</name><operator>-&gt;</operator><name>get_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
