<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/lib/barbox.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PORTNCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_progressview.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_theme.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARMARGIN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINBARWIDTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINWIDTH</name></cpp:macro> <cpp:value>(VBORDERS + MINBARWIDTH + BARMARGIN * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINHEIGHT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>



<decl_stmt><decl><type><name>bool</name></type> <name>bsddialog_interruptprogview</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bsddialog_abortprogview</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bsddialog_total_progview</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>bsddialog_theme</name></name></type> <name>t</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>draw_perc_bar</name><parameter_list>(<parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withlabel</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>labelstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>blue_x</name></decl>, <decl><type ref="prev"/><name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blue_x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>perc</name><operator>*</operator><operator>(</operator><name>size</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;=</operator> <name>blue_x</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>bar</name><operator>.</operator><name>f_color</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>bar</name><operator>.</operator><name>color</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>withlabel</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>labelstr</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>labelstr</name></expr></argument>, <argument><expr><literal type="string">"%3d%%"</literal></expr></argument>, <argument><expr><name>perc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>size</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>labelstr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>blue_x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>size</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>labelstr</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>i</name> <operator>)</operator></expr> ?</condition><then>
<expr><name><name>t</name><operator>.</operator><name>bar</name><operator>.</operator><name>color</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>bar</name><operator>.</operator><name>f_color</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>labelstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bar_autosize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buttons</name></name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maxword</name></decl>, <decl><type ref="prev"/><name>maxline</name></decl>, <decl><type ref="prev"/><name>nlines</name></decl>, <decl><type ref="prev"/><name>buttonswidth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_text_properties</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlines</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buttonswidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buttonswidth</name><operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buttonswidth</name> <operator>+=</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <name>buttonswidth</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><name>MINWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>maxline</name> <operator>+</operator> <name>VBORDERS</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><call><name>widget_max_width</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>MINHEIGHT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxword</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bar_checksize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buttons</name></name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>minheight</name></decl>, <decl><type ref="prev"/><name>minwidth</name></decl>;</decl_stmt>

<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>-&gt;</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minwidth</name> <operator>+=</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>minwidth</name> <operator>+</operator> <name>VBORDERS</name></expr></argument>, <argument><expr><name>MINBARWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name><operator>&lt;</operator> <name>minwidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few cols for this widget"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>minheight</name> <operator>=</operator> <name>MINHEIGHT</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <name>minheight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few rows for this mixedgauge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_gauge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>perc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ntext</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pntext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mainloop</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_checksize</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bar</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mainloop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>mainloop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">4</literal></expr></argument>,
<argument><expr><name>x</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_perc_bar</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>perc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>,<argument><expr><literal type="string">"EOF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mainloop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>,<argument><expr><literal type="string">"XXX"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>perc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <ternary><condition><expr><name>perc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>perc</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <ternary><condition><expr><name>perc</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name>perc</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>htextpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pntext</name> <operator>=</operator> <operator>&amp;</operator><name><name>ntext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ntext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>,<argument><expr><literal type="string">"EOF"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mainloop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>,<argument><expr><literal type="string">"XXX"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pntext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pntext</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pntext</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pntext</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>print_textpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name>ntext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>BSDDIALOG_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>mixedgauge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mainperc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nminibars</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>minilabels</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minipercs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>miniperc</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>max_minbarlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxword</name></decl>, <decl><type ref="prev"/><name>maxline</name></decl>, <decl><type ref="prev"/><name>nlines</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>, <decl><type ref="prev"/><name>ypad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorperc</name></decl>, <decl><type ref="prev"/><name>red</name></decl>, <decl><type ref="prev"/><name>green</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>states</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">" Succeeded "</literal></expr>,
<expr><literal type="string">" Failed "</literal></expr>,
<expr><literal type="string">" Passed "</literal></expr>,
<expr><literal type="string">" Completed "</literal></expr>,
<expr><literal type="string">" Checked "</literal></expr>,
<expr><literal type="string">" Done "</literal></expr>,
<expr><literal type="string">" Skipped "</literal></expr>,
<expr><literal type="string">" In Progress "</literal></expr>,
<expr><literal type="string">"(blank) "</literal></expr>,
<expr><literal type="string">" N/A "</literal></expr>,
<expr><literal type="string">" Pending "</literal></expr>,
<expr><literal type="string">" UNKNOWN "</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>red</name> <operator>=</operator> <call><name>bsddialog_color</name><argument_list>(<argument><expr><name>BSDDIALOG_WHITE</name></expr></argument>,<argument><expr><name>BSDDIALOG_RED</name></expr></argument>, <argument><expr><name>BSDDIALOG_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>green</name> <operator>=</operator> <call><name>bsddialog_color</name><argument_list>(<argument><expr><name>BSDDIALOG_WHITE</name></expr></argument>,<argument><expr><name>BSDDIALOG_GREEN</name></expr></argument>,<argument><expr><name>BSDDIALOG_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_minbarlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nminibars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_minbarlen</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>max_minbarlen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>minilabels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>max_minbarlen</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">16</literal></expr> ;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_text_properties</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlines</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>max_minbarlen</name> <operator>+</operator> <name>HBORDERS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>maxline</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><call><name>widget_max_width</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>nminibars</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <name>max_minbarlen</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few cols for this mixedgauge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nminibars</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few rows for this mixedgauge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>RAISED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>output</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nminibars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>miniperc</name> <operator>=</operator> <name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>miniperc</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>miniperc</name> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator> <name>miniperc</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>A_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>minilabels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>A_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>miniperc</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>states</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>miniperc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>miniperc</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"[ ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <name>miniperc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorperc</name> <operator>=</operator> <name>red</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <name>miniperc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorperc</name> <operator>=</operator> <name>green</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>miniperc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>miniperc</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>colorperc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>states</name><index>[<expr><name>miniperc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>miniperc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>miniperc</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>colorperc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>miniperc</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>miniperc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"[ ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_perc_bar</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>miniperc</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>htextpad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <ternary><condition><expr><name>ypad</name> <operator>&lt;</operator> <name>y</name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>nminibars</name></expr> ?</condition><then> <expr><name>y</name><operator>+</operator><name>nminibars</name></expr> </then><else>: <expr><name>ypad</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ypad</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bar</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name> <operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_perc_bar</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>mainperc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wattron</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>bar</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Overall Progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattroff</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>bar</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>BSDDIALOG_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_mixedgauge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mainperc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nminibars</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>minilabels</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minipercs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>mixedgauge</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>mainperc</name></expr></argument>, <argument><expr><name>nminibars</name></expr></argument>,
<argument><expr><name>minilabels</name></expr></argument>, <argument><expr><name>minipercs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_progressview</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_progviewconf</name></name> <modifier>*</modifier></type><name>pvconf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nminibar</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_fileminibar</name></name> <modifier>*</modifier></type><name>minibar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>perc</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>minipercs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>minilabels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mainperc</name></decl>, <decl><type ref="prev"/><name>totaltodo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>tstart</name></decl>, <decl><type ref="prev"/><name>told</name></decl>, <decl><type ref="prev"/><name>tnew</name></decl>, <decl><type ref="prev"/><name>refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>readforsec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>minilabels</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nminibar</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate memory for minilabels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>minipercs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nminibar</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate memory for minipercs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>totaltodo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nminibar</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>totaltodo</name> <operator>+=</operator> <name><name>minibar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>minilabels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>minibar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>refresh</name> <operator>=</operator> <ternary><condition><expr><name><name>pvconf</name><operator>-&gt;</operator><name>refresh</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pvconf</name><operator>-&gt;</operator><name>refresh</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>told</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tstart</name> <operator>=</operator> <name>told</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>bsddialog_interruptprogview</name> <operator>||</operator> <name>bsddialog_abortprogview</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bsddialog_total_progview</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>totaltodo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mainperc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mainperc</name> <operator>=</operator> <operator>(</operator><name>bsddialog_total_progview</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <name>totaltodo</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>update</name> <operator>||</operator> <name>tnew</name> <operator>&gt;</operator> <name>told</name> <operator>+</operator> <name>refresh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>mixedgauge</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>mainperc</name></expr></argument>,
<argument><expr><name>nminibar</name></expr></argument>, <argument><expr><name>minilabels</name></expr></argument>, <argument><expr><name>minipercs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><name>LINES</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clrtoeol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>readforsec</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>tnew</name> <operator>-</operator> <name>tstart</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>bsddialog_total_progview</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tnew</name> <operator>-</operator> <name>tstart</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printw</name><argument_list>(<argument><expr><name><name>pvconf</name><operator>-&gt;</operator><name>fmtbottomstr</name></name></expr></argument>, <argument><expr><name>bsddialog_total_progview</name></expr></argument>,
<argument><expr><name>readforsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>told</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>update</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>nminibar</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>minibar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>perc</name> <operator>=</operator> <call><name><name>pvconf</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>minibar</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>minibar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>minibar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>perc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>perc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>perc</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>minilabels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>minipercs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_rangebox</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>, <decl><type ref="prev"/><name>buttupdate</name></decl>, <decl><type ref="prev"/><name>barupdate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input</name></decl>, <decl><type ref="prev"/><name>currvalue</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>sizebar</name></decl>, <decl><type ref="prev"/><name>bigchange</name></decl>, <decl><type ref="prev"/><name>positions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>perc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"*value cannot be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"min &gt;= max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>currvalue</name> <operator>=</operator> <operator>*</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>positions</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>min</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_buttons</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>extra_label</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>help_label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_checksize</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">7</literal></expr></argument>,
<argument><expr><name>x</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sizebar</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>BARMARGIN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bigchange</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sizebar</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bar</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>BARMARGIN</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name>sizebar</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>buttupdate</name> <operator>=</operator> <name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buttupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>barupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>currvalue</name> <operator>-</operator> <name>min</name><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>positions</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_perc_bar</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sizebar</name></expr></argument>, <argument><expr><name>perc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>currvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_ENTER</name></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name><name>bs</name><operator>.</operator><name>curr</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>currvalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <operator>(</operator><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_HOME</name></expr>:</case>
<expr_stmt><expr><name>currvalue</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_END</name></expr>:</case>
<expr_stmt><expr><name>currvalue</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_NPAGE</name></expr>:</case>
<expr_stmt><expr><name>currvalue</name> <operator>-=</operator> <name>bigchange</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currvalue</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>currvalue</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_PPAGE</name></expr>:</case>
<expr_stmt><expr><name>currvalue</name> <operator>+=</operator> <name>bigchange</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currvalue</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>currvalue</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>currvalue</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>currvalue</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>currvalue</name> <operator>&gt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>currvalue</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f1help</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>hide_widget</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_checksize</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>htextpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sizebar</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>BARMARGIN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bigchange</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sizebar</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>BARMARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sizebar</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>update_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>RAISED</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">7</literal></expr></argument>,
<argument><expr><name>x</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_borders</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sizebar</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>, <decl><type ref="prev"/><name>buttupdate</name></decl>, <decl><type ref="prev"/><name>barupdate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input</name></decl>, <decl><type ref="prev"/><name>tout</name></decl>, <decl><type ref="prev"/><name>sizebar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>perc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_buttons</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>extra_label</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>help_label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_checksize</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">7</literal></expr></argument>,
<argument><expr><name>x</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sizebar</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>BARMARGIN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bar</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>BARMARGIN</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name>sizebar</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tout</name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nodelay</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>timeout</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>buttupdate</name> <operator>=</operator> <name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>barupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>tout</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>sec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_perc_bar</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sizebar</name></expr></argument>, <argument><expr><name>perc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>tout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buttupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>input</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tout</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_TIMEOUT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_ENTER</name></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name><name>bs</name><operator>.</operator><name>curr</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <operator>(</operator><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f1help</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>hide_widget</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bar_checksize</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>htextpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sizebar</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>HBORDERS</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>BARMARGIN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>BARMARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sizebar</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>update_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>RAISED</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>h</name><operator>-</operator><literal type="number">7</literal></expr></argument>,
<argument><expr><name>x</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_borders</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sizebar</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>barupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>nodelay</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
