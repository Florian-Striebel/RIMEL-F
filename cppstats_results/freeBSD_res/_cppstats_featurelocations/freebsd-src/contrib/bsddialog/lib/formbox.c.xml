<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/lib/formbox.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PORTNCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/form.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_theme.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDRAWFORM</name></cpp:macro> <cpp:value>14021986</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISFIELDHIDDEN</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(item.flags &amp; BSDDIALOG_FIELDHIDDEN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISFIELDREADONLY</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(item.flags &amp; BSDDIALOG_FIELDREADONLY)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>bsddialog_theme</name></name></type> <name>t</name></decl>;</decl_stmt>


<struct>struct <name>myfield</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>securech</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bottomdesc</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETMYFIELD</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct myfield*)field_userptr(field))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETMYFIELD2</name><parameter_list>(<parameter><type><name>form</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct myfield*)field_userptr(current_field(form)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insertch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>myfield</name></name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>maxpos</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>maxpos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>maxpos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shiftleft</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>myfield</name></name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>last</name> <operator>=</operator> <ternary><condition><expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_bottomdesc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>myfield</name></name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><name>LINES</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clrtoeol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>bottomdesc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addstr</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>bottomdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>return_values</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>FORM</name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><name>FIELD</name> <modifier>*</modifier><modifier>*</modifier></type><name>cfield</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>myfield</name></name> <modifier>*</modifier></type><name>mf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>value</name><index>[<expr><name><name>bs</name><operator>.</operator><name>curr</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_HELP</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>form</name><operator>.</operator><name>value_withhelp</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>output</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>form</name><operator>.</operator><name>value_withextra</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>output</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_CANCEL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>form</name><operator>.</operator><name>value_withcancel</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>output</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_GENERIC1</name> <operator>||</operator> <name>output</name> <operator>==</operator> <name>BSDDIALOG_GENERIC2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>output</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_NEXT_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_PREV_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot allocate memory for form value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>form_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>formwin</name></decl></parameter>, <parameter><decl><type><name>FORM</name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><name>FIELD</name> <modifier>*</modifier><modifier>*</modifier></type><name>cfield</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>, <decl><type ref="prev"/><name>buttupdate</name></decl>, <decl><type ref="prev"/><name>informwin</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>input</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>myfield</name></name> <modifier>*</modifier></type><name>mf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bottomdesc</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pos_form_cursor</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_END_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>maxpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buttupdate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><operator>!</operator><name>informwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>formwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_ENTER</name></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>informwin</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>return_values</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>cfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>informwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>informwin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>informwin</name> <operator>=</operator> <ternary><condition><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr> ?</condition><then>
<expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>informwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pos_form_cursor</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>informwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_PREV_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>informwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_NEXT_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buttupdate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>KEY_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_field_fore</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_back</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_PREV_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_END_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bottomdesc</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>maxpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_fore</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>f_fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_back</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>f_fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_field_fore</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_back</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_NEXT_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_END_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_bottomdesc</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>maxpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_fore</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>f_fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_back</name><argument_list>(<argument><expr><call><name>current_field</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>f_fieldcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_BACKSPACE</name></expr>:</case>
<case>case <expr><literal type="number">127</literal></expr>:</case>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_DEL_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_BEG_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_NEXT_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>shiftleft</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_DC</name></expr>:</case>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>REQ_DEL_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>mf</name><operator>-&gt;</operator><name>buflen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shiftleft</name><argument_list>(<argument><expr><name>mf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f1help</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>REDRAWFORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>



<if_stmt><if>if <condition>(<expr><name>informwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <call><name>GETMYFIELD2</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>secure</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name><name>mf</name><operator>-&gt;</operator><name>securech</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>form_driver</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>insertch</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>label</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>curr</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>return_values</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>,
<argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>cfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>form_autosize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linelen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>formheight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>textrow</name></decl>, <decl><type ref="prev"/><name>menusize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>textrow</name> <operator>=</operator> <ternary><condition><expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>.</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <ternary><condition><expr><name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><name>linelen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><call><name>widget_max_width</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>HBORDERS</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>textrow</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>formheight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>+=</operator> <name>nitems</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menusize</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>nitems</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>*</operator><name>h</name> <operator>-</operator> <operator>(</operator><name>HBORDERS</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>textrow</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menusize</name> <operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>formheight</name> <operator>=</operator> <ternary><condition><expr><name>menusize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>menusize</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <operator>*</operator><name>h</name> <operator>+</operator> <operator>*</operator><name>formheight</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>formheight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>formheight</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>rows</name><operator>-</operator><literal type="number">6</literal><operator>-</operator><name>textrow</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>form_checksize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>formheight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mincols</name></decl>, <decl><type ref="prev"/><name>textrow</name></decl>, <decl><type ref="prev"/><name>formrows</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mincols</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mincols</name> <operator>+=</operator> <name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>*</operator> <name><name>bs</name><operator>.</operator><name>sizebutton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mincols</name> <operator>+=</operator> <ternary><condition><expr><name><name>bs</name><operator>.</operator><name>nbuttons</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>bs</name><operator>.</operator><name>nbuttons</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t</name><operator>.</operator><name>button</name><operator>.</operator><name>space</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <name>mincols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few cols, width &lt; size buttons or "</literal>\
<literal type="string">"labels + forms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textrow</name> <operator>=</operator> <ternary><condition><expr><name>text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>formheight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"fields &gt; 0 but formheight == 0, probably "</literal>\
<literal type="string">"terminal too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formrows</name> <operator>=</operator> <ternary><condition><expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>formrows</name> <operator>+</operator> <name>textrow</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few lines for this menus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_form</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>formheight</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>formwin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>textpad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>color</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>htextpad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FIELD</name> <modifier>*</modifier><modifier>*</modifier></type><name>cfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FORM</name> <modifier>*</modifier></type><name>form</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buttons</name></name></type> <name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>myfield</name></name> <modifier>*</modifier></type><name>myfields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxline</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>formheight</name> <operator>&lt;</operator> <name>nitems</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>formheight</name> <operator>=</operator> <name>nitems</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"maxvaluelen cannot be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"fieldlen cannot be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name> <operator>&gt;</operator> <name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"fieldlen cannot be &gt; maxvaluelen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>maxline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>myfields</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nitems</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>myfield</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cfield</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nitems</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIELD</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>new_field</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>yfield</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfield</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>field_opts_off</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_max_field</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_buffer</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buflen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxpos</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buflen</name></expr></argument>, <argument><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_userptr</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>field_opts_off</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_AUTOSKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>field_opts_off</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ISFIELDHIDDEN</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>secure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>securech</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>form</name><operator>.</operator><name>securech</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>securech</name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>form</name><operator>.</operator><name>securech</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>secure</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ISFIELDREADONLY</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>field_opts_off</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_EDIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>field_opts_off</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>readonlycolor</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>f_fieldcolor</name></name></expr> </then><else>: <expr><name><name>t</name><operator>.</operator><name>form</name><operator>.</operator><name>fieldcolor</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_field_fore</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_back</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxline</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>maxline</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xlabel</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxline</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>maxline</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfield</name> <operator>+</operator> <name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>formheight</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nitems</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xfield</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_field_fore</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_field_back</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_buttons</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>ok_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>extra_label</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>cancel_label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUTTONLABEL</name><argument_list>(<argument><expr><name>help_label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>form_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>maxline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formheight</name></expr></argument>,
<argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>form_checksize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>formheight</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <name>formheight</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>formwin</name> <operator>=</operator> <call><name>new_boxed_window</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>formheight</name> <operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>formheight</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOWERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>new_form</name><argument_list>(<argument><expr><name>cfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_form_win</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>formwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_form_sub</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><call><name>derwin</name><argument_list>(<argument><expr><name>formwin</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>post_form</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>formwin</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ylabel</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xlabel</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>formwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>form_handler</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>formwin</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,
<argument><expr><name>cfield</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>update_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>RAISED</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>htextpad</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>draw_buttons</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>textpad</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>,
<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <name>formheight</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>w</name> <operator>-</operator> <name><name>t</name><operator>.</operator><name>text</name><operator>.</operator><name>hmargin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_borders</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>formwin</name></expr></argument>, <argument><expr><name>formheight</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>LOWERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>output</name> <operator>==</operator> <name>REDRAWFORM</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>unpost_form</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_form</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free_field</name><argument_list>(<argument><expr><name><name>cfield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>myfields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>myfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>formwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>textpad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
