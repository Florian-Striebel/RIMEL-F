<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/lib/textbox.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PORTNCURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses/ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsddialog_theme.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTON_TEXTBOX</name></cpp:macro> <cpp:value>"EXIT"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>bsddialog_theme</name></name></type> <name>t</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>textbox_autosize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hpad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wpad</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>VBORDERS</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>BUTTON_TEXTBOX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><name>wpad</name> <operator>+</operator> <name>VBORDERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>, <argument><expr><call><name>widget_max_width</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>BSDDIALOG_AUTOSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>hpad</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conf</name><operator>-&gt;</operator><name>auto_minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><call><name>widget_max_height</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>textbox_checksize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hpad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mincols</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mincols</name> <operator>=</operator> <name>VBORDERS</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>BUTTON_TEXTBOX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr> ;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <name>mincols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few cols for the textbox"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>hpad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Few rows for the textbox"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bsddialog_textbox</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>widget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pad</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shadow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>input</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>hpad</name></decl>, <decl><type ref="prev"/><name>wpad</name></decl>, <decl><type ref="prev"/><name>ypad</name></decl>, <decl><type ref="prev"/><name>xpad</name></decl>, <decl><type ref="prev"/><name>ys</name></decl>, <decl><type ref="prev"/><name>ye</name></decl>, <decl><type ref="prev"/><name>xs</name></decl>, <decl><type ref="prev"/><name>xe</name></decl>, <decl><type ref="prev"/><name>printrows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>exitbutt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><literal type="string">"Cannot open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wpad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <call><name>newpad</name><argument_list>(<argument><expr><name>hpad</name></expr></argument>, <argument><expr><name>wpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>dialog</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wpad</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wpad</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>, <argument><expr><name>wpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>hpad</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hpad</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>, <argument><expr><name>wpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mvwaddstr</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>textbox_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>, <argument><expr><name>wpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>textbox_checksize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>RAISED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exitbutt</name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>exit_label</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>BUTTON_TEXTBOX</name></expr> </then><else>: <expr><name><name>conf</name><operator>-&gt;</operator><name>button</name><operator>.</operator><name>exit_label</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_button</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>w</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>exitbutt</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>exitbutt</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name>exitbutt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ye</name> <operator>=</operator> <name>ys</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xs</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <name>xpad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printrows</name> <operator>=</operator> <name>h</name><operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prefresh</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><name>ypad</name></expr></argument>, <argument><expr><name>xpad</name></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><name>xs</name></expr></argument>, <argument><expr><name>ye</name></expr></argument>, <argument><expr><name>xe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>KEY_ENTER</name></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_HOME</name></expr>:</case>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_END</name></expr>:</case>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <name>hpad</name> <operator>-</operator> <name>printrows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <ternary><condition><expr><name>ypad</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ypad</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_PPAGE</name></expr>:</case>
<expr_stmt><expr><name>ypad</name> <operator>-=</operator> <name>printrows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <ternary><condition><expr><name>ypad</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ypad</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_NPAGE</name></expr>:</case>
<expr_stmt><expr><name>ypad</name> <operator>+=</operator> <name>printrows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <ternary><condition><expr><name>ypad</name> <operator>+</operator> <name>printrows</name> <operator>&gt;</operator> <name>hpad</name></expr> ?</condition><then> <expr><name>hpad</name> <operator>-</operator> <name>printrows</name></expr> </then><else>: <expr><name>ypad</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><name>xpad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>xpad</name> <operator>=</operator> <ternary><condition><expr><name>xpad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>xpad</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>xpad</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>xpad</name> <operator>+</operator> <name>w</name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>wpad</name><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>xpad</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>xpad</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_UP</name></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <ternary><condition><expr><name>ypad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ypad</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KEY_DOWN</name></expr>:</case>
<case>case<expr><literal type="char">'j'</literal></expr>:</case>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <ternary><condition><expr><name>ypad</name> <operator>+</operator> <name>printrows</name> <operator>&lt;=</operator> <name>hpad</name> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>ypad</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>ypad</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>f1_file</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>f1_message</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f1help</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>KEY_RESIZE</name></expr>:</case>
<expr_stmt><expr><call><name>hide_widget</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>shadow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_widget_size</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>textbox_autosize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>, <argument><expr><name>wpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>textbox_checksize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>hpad</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_widget_position</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>shadow</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wclear</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mvwin</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wresize</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ye</name> <operator>=</operator> <name>ys</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>xs</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ypad</name> <operator>=</operator> <name>xpad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printrows</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>update_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,
<argument><expr><name>RAISED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>draw_button</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>w</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>exitbutt</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>exitbutt</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>exitbutt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>end_widget_withtextpad</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
